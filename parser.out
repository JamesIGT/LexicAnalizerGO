Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FALSE
    FUNCNAME
    IMPORT
    MOD
    PACKAGE
    PRINT
    RANGE
    TRUE
    UINT

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> statement program
Rule 3     statement -> declaration
Rule 4     statement -> assignment
Rule 5     statement -> print_stmt
Rule 6     statement -> input_stmt
Rule 7     statement -> continue_stmt
Rule 8     statement -> struct_method
Rule 9     statement -> func_def
Rule 10    statement -> func_no_params
Rule 11    statement -> func_call
Rule 12    statement -> if_stmt
Rule 13    statement -> for_stmt
Rule 14    statement -> struct_def
Rule 15    statement -> switch_stmt
Rule 16    statement -> map_declaration
Rule 17    statement -> map_declaration_values
Rule 18    statement -> array_declaration
Rule 19    statement -> slice_declaration
Rule 20    statement -> make_stmt
Rule 21    statement -> new_stmt
Rule 22    statement -> break_stmt
Rule 23    statement -> increment_stmt
Rule 24    statement -> return_stmt
Rule 25    declaration -> VAR VARIABLE type
Rule 26    declaration -> VAR VARIABLE type ASIG expression
Rule 27    expression -> NUMBER
Rule 28    expression -> FLOAT
Rule 29    expression -> VARIABLE
Rule 30    assignment -> VARIABLE ASSIGN expression
Rule 31    assignment -> VARIABLE ASIG expression
Rule 32    print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
Rule 33    print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN
Rule 34    input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
Rule 35    func_def -> FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
Rule 36    func_def -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
Rule 37    return_stmt -> RETURN expression
Rule 38    func_no_params -> FUNC VARIABLE LPAREN RPAREN block
Rule 39    func_call -> VARIABLE LPAREN arg_list RPAREN
Rule 40    func_call -> VARIABLE LPAREN RPAREN
Rule 41    param_list -> param
Rule 42    param_list -> param COMMA param_list
Rule 43    param -> VARIABLE type
Rule 44    arg_list -> expression
Rule 45    arg_list -> expression COMMA arg_list
Rule 46    expression -> term
Rule 47    expression -> expression PLUS term
Rule 48    expression -> expression MINUS term
Rule 49    expression -> expression AND expression
Rule 50    expression -> expression OR expression
Rule 51    expression -> expression EQ expression
Rule 52    expression -> expression NE expression
Rule 53    expression -> expression LT expression
Rule 54    expression -> expression GT expression
Rule 55    expression -> expression LE expression
Rule 56    expression -> expression GE expression
Rule 57    term -> factor
Rule 58    term -> term TIMES factor
Rule 59    term -> term DIVIDE factor
Rule 60    factor -> NUMBER
Rule 61    factor -> FLOAT
Rule 62    factor -> STRING
Rule 63    factor -> VARIABLE
Rule 64    factor -> LPAREN expression RPAREN
Rule 65    factor -> make_expr
Rule 66    factor -> struct_instance
Rule 67    type -> INT_TYPE
Rule 68    type -> FLOAT64_TYPE
Rule 69    type -> STRING_TYPE
Rule 70    type -> BOOL_TYPE
Rule 71    if_stmt -> IF expression block
Rule 72    if_stmt -> IF expression block ELSE block
Rule 73    for_stmt -> FOR expression block
Rule 74    for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block
Rule 75    continue_stmt -> CONTINUE
Rule 76    for_update -> assignment
Rule 77    for_update -> increment_stmt
Rule 78    block -> LBRACE program RBRACE
Rule 79    struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
Rule 80    struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
Rule 81    struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
Rule 82    struct_fields -> struct_field
Rule 83    struct_fields -> struct_field struct_fields
Rule 84    struct_field -> VARIABLE type
Rule 85    struct_field -> type
Rule 86    struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE
Rule 87    struct_fields_values -> field_value
Rule 88    struct_fields_values -> field_value COMMA struct_fields_values
Rule 89    field_value -> VARIABLE COLON expression
Rule 90    switch_stmt -> SWITCH expression LBRACE case_list RBRACE
Rule 91    switch_stmt -> SWITCH LBRACE case_list RBRACE
Rule 92    case_list -> case_clause
Rule 93    case_list -> case_clause case_list
Rule 94    case_clause -> CASE expression COLON program
Rule 95    case_clause -> DEFAULT COLON program
Rule 96    map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type
Rule 97    map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type
Rule 98    make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
Rule 99    make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
Rule 100   make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
Rule 101   make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN
Rule 102   map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
Rule 103   map_kv_pairs -> map_kv_pair
Rule 104   map_kv_pairs -> map_kv_pair COMMA map_kv_pairs
Rule 105   map_kv_pair -> STRING COLON expression
Rule 106   array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type
Rule 107   array_declaration -> VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
Rule 108   array_values -> expression
Rule 109   array_values -> expression COMMA array_values
Rule 110   slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type
Rule 111   slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
Rule 112   slice_values -> expression
Rule 113   slice_values -> expression COMMA slice_values
Rule 114   new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
Rule 115   break_stmt -> BREAK
Rule 116   increment_stmt -> VARIABLE INCREMENT
Rule 117   increment_stmt -> VARIABLE DECREMENT

Terminals, with rules where they appear

AMPER                : 34
AND                  : 49
ASIG                 : 26 31 97 98 99 102 107 111 114
ASSIGN               : 30
BOOL_TYPE            : 70
BREAK                : 115
CASE                 : 94
COLON                : 89 94 95 105
COMMA                : 32 42 45 88 104 109 113
CONTINUE             : 75
DECREMENT            : 117
DEFAULT              : 95
DIVIDE               : 59
DOT                  : 32 33 34
ELSE                 : 72
EQ                   : 51
FALSE                : 
FLOAT                : 28 61
FLOAT64_TYPE         : 68
FMT                  : 32 33 34
FOR                  : 73 74
FUNC                 : 35 36 38 79 80
FUNCNAME             : 
GE                   : 56
GT                   : 54
IF                   : 71 72
IMPORT               : 
INCREMENT            : 116
INT_TYPE             : 67
LBRACE               : 35 36 78 79 80 81 86 90 91 102 107 111
LBRACKET             : 96 97 98 99 100 101 102 106 107 110 111
LE                   : 55
LPAREN               : 32 33 34 35 36 38 39 40 64 79 79 80 80 98 99 100 101 114
LT                   : 53
MAKE                 : 98 99 100 101
MAP                  : 96 97 98 100 102
MINUS                : 48
MOD                  : 
NE                   : 52
NEW                  : 114
NUMBER               : 27 60 106 107
OR                   : 50
PACKAGE              : 
PLUS                 : 47
PRINT                : 
PRINTF               : 32
PRINTLN              : 33
RANGE                : 
RBRACE               : 35 36 78 79 80 81 86 90 91 102 107 111
RBRACKET             : 96 97 98 99 100 101 102 106 107 110 111
RETURN               : 37
RPAREN               : 32 33 34 35 36 38 39 40 64 79 79 80 80 98 99 100 101 114
SCANLN               : 34
SEMICOLON            : 74 74
STRING               : 32 62 105
STRING_TYPE          : 69
STRUCT               : 81
SWITCH               : 90 91
TIMES                : 58
TRUE                 : 
TYPE                 : 81
UINT                 : 
VAR                  : 25 26 96 106 110
VARIABLE             : 25 26 29 30 31 34 35 36 38 39 40 43 63 79 79 79 80 80 80 81 84 86 89 96 97 98 99 102 106 107 110 111 114 114 116 117
error                : 

Nonterminals, with rules where they appear

arg_list             : 39 45
array_declaration    : 18
array_values         : 107 109
assignment           : 4 74 76
block                : 38 71 72 72 73 74
break_stmt           : 22
case_clause          : 92 93
case_list            : 90 91 93
continue_stmt        : 7
declaration          : 3
expression           : 26 30 31 32 33 37 44 45 47 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 64 71 72 73 74 89 90 94 105 108 109 112 113
factor               : 57 58 59
field_value          : 87 88
for_stmt             : 13
for_update           : 74
func_call            : 11
func_def             : 9
func_no_params       : 10
if_stmt              : 12
increment_stmt       : 23 77
input_stmt           : 6
make_expr            : 65
make_stmt            : 20
map_declaration      : 16
map_declaration_values : 17
map_kv_pair          : 103 104
map_kv_pairs         : 102 104
new_stmt             : 21
param                : 41 42
param_list           : 35 42 79
print_stmt           : 5
program              : 2 35 36 78 79 80 94 95 0
return_stmt          : 24
slice_declaration    : 19
slice_values         : 111 113
statement            : 1 2
struct_def           : 14
struct_field         : 82 83
struct_fields        : 81 83
struct_fields_values : 86 88
struct_instance      : 66
struct_method        : 8
switch_stmt          : 15
term                 : 46 47 48 58 59
type                 : 25 26 35 36 43 79 80 84 85 96 96 97 97 98 98 99 100 100 101 102 102 106 107 110 111

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . statement program
    (3) statement -> . declaration
    (4) statement -> . assignment
    (5) statement -> . print_stmt
    (6) statement -> . input_stmt
    (7) statement -> . continue_stmt
    (8) statement -> . struct_method
    (9) statement -> . func_def
    (10) statement -> . func_no_params
    (11) statement -> . func_call
    (12) statement -> . if_stmt
    (13) statement -> . for_stmt
    (14) statement -> . struct_def
    (15) statement -> . switch_stmt
    (16) statement -> . map_declaration
    (17) statement -> . map_declaration_values
    (18) statement -> . array_declaration
    (19) statement -> . slice_declaration
    (20) statement -> . make_stmt
    (21) statement -> . new_stmt
    (22) statement -> . break_stmt
    (23) statement -> . increment_stmt
    (24) statement -> . return_stmt
    (25) declaration -> . VAR VARIABLE type
    (26) declaration -> . VAR VARIABLE type ASIG expression
    (30) assignment -> . VARIABLE ASSIGN expression
    (31) assignment -> . VARIABLE ASIG expression
    (32) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (33) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (34) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (75) continue_stmt -> . CONTINUE
    (79) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (80) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (35) func_def -> . FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (36) func_def -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (38) func_no_params -> . FUNC VARIABLE LPAREN RPAREN block
    (39) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (40) func_call -> . VARIABLE LPAREN RPAREN
    (71) if_stmt -> . IF expression block
    (72) if_stmt -> . IF expression block ELSE block
    (73) for_stmt -> . FOR expression block
    (74) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (81) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (90) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (91) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (96) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (97) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (102) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (106) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (107) array_declaration -> . VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (110) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (111) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (98) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (99) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (114) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (115) break_stmt -> . BREAK
    (116) increment_stmt -> . VARIABLE INCREMENT
    (117) increment_stmt -> . VARIABLE DECREMENT
    (37) return_stmt -> . RETURN expression

    VAR             shift and go to state 25
    VARIABLE        shift and go to state 26
    FMT             shift and go to state 27
    CONTINUE        shift and go to state 28
    FUNC            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    TYPE            shift and go to state 32
    SWITCH          shift and go to state 33
    BREAK           shift and go to state 34
    RETURN          shift and go to state 35

    program                        shift and go to state 1
    statement                      shift and go to state 2
    declaration                    shift and go to state 3
    assignment                     shift and go to state 4
    print_stmt                     shift and go to state 5
    input_stmt                     shift and go to state 6
    continue_stmt                  shift and go to state 7
    struct_method                  shift and go to state 8
    func_def                       shift and go to state 9
    func_no_params                 shift and go to state 10
    func_call                      shift and go to state 11
    if_stmt                        shift and go to state 12
    for_stmt                       shift and go to state 13
    struct_def                     shift and go to state 14
    switch_stmt                    shift and go to state 15
    map_declaration                shift and go to state 16
    map_declaration_values         shift and go to state 17
    array_declaration              shift and go to state 18
    slice_declaration              shift and go to state 19
    make_stmt                      shift and go to state 20
    new_stmt                       shift and go to state 21
    break_stmt                     shift and go to state 22
    increment_stmt                 shift and go to state 23
    return_stmt                    shift and go to state 24

state 1

    (0) S' -> program .



state 2

    (1) program -> statement .
    (2) program -> statement . program
    (1) program -> . statement
    (2) program -> . statement program
    (3) statement -> . declaration
    (4) statement -> . assignment
    (5) statement -> . print_stmt
    (6) statement -> . input_stmt
    (7) statement -> . continue_stmt
    (8) statement -> . struct_method
    (9) statement -> . func_def
    (10) statement -> . func_no_params
    (11) statement -> . func_call
    (12) statement -> . if_stmt
    (13) statement -> . for_stmt
    (14) statement -> . struct_def
    (15) statement -> . switch_stmt
    (16) statement -> . map_declaration
    (17) statement -> . map_declaration_values
    (18) statement -> . array_declaration
    (19) statement -> . slice_declaration
    (20) statement -> . make_stmt
    (21) statement -> . new_stmt
    (22) statement -> . break_stmt
    (23) statement -> . increment_stmt
    (24) statement -> . return_stmt
    (25) declaration -> . VAR VARIABLE type
    (26) declaration -> . VAR VARIABLE type ASIG expression
    (30) assignment -> . VARIABLE ASSIGN expression
    (31) assignment -> . VARIABLE ASIG expression
    (32) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (33) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (34) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (75) continue_stmt -> . CONTINUE
    (79) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (80) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (35) func_def -> . FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (36) func_def -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (38) func_no_params -> . FUNC VARIABLE LPAREN RPAREN block
    (39) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (40) func_call -> . VARIABLE LPAREN RPAREN
    (71) if_stmt -> . IF expression block
    (72) if_stmt -> . IF expression block ELSE block
    (73) for_stmt -> . FOR expression block
    (74) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (81) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (90) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (91) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (96) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (97) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (102) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (106) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (107) array_declaration -> . VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (110) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (111) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (98) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (99) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (114) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (115) break_stmt -> . BREAK
    (116) increment_stmt -> . VARIABLE INCREMENT
    (117) increment_stmt -> . VARIABLE DECREMENT
    (37) return_stmt -> . RETURN expression

    $end            reduce using rule 1 (program -> statement .)
    RBRACE          reduce using rule 1 (program -> statement .)
    CASE            reduce using rule 1 (program -> statement .)
    DEFAULT         reduce using rule 1 (program -> statement .)
    VAR             shift and go to state 25
    VARIABLE        shift and go to state 26
    FMT             shift and go to state 27
    CONTINUE        shift and go to state 28
    FUNC            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    TYPE            shift and go to state 32
    SWITCH          shift and go to state 33
    BREAK           shift and go to state 34
    RETURN          shift and go to state 35

    statement                      shift and go to state 2
    program                        shift and go to state 36
    declaration                    shift and go to state 3
    assignment                     shift and go to state 4
    print_stmt                     shift and go to state 5
    input_stmt                     shift and go to state 6
    continue_stmt                  shift and go to state 7
    struct_method                  shift and go to state 8
    func_def                       shift and go to state 9
    func_no_params                 shift and go to state 10
    func_call                      shift and go to state 11
    if_stmt                        shift and go to state 12
    for_stmt                       shift and go to state 13
    struct_def                     shift and go to state 14
    switch_stmt                    shift and go to state 15
    map_declaration                shift and go to state 16
    map_declaration_values         shift and go to state 17
    array_declaration              shift and go to state 18
    slice_declaration              shift and go to state 19
    make_stmt                      shift and go to state 20
    new_stmt                       shift and go to state 21
    break_stmt                     shift and go to state 22
    increment_stmt                 shift and go to state 23
    return_stmt                    shift and go to state 24

state 3

    (3) statement -> declaration .

    VAR             reduce using rule 3 (statement -> declaration .)
    VARIABLE        reduce using rule 3 (statement -> declaration .)
    FMT             reduce using rule 3 (statement -> declaration .)
    CONTINUE        reduce using rule 3 (statement -> declaration .)
    FUNC            reduce using rule 3 (statement -> declaration .)
    IF              reduce using rule 3 (statement -> declaration .)
    FOR             reduce using rule 3 (statement -> declaration .)
    TYPE            reduce using rule 3 (statement -> declaration .)
    SWITCH          reduce using rule 3 (statement -> declaration .)
    BREAK           reduce using rule 3 (statement -> declaration .)
    RETURN          reduce using rule 3 (statement -> declaration .)
    $end            reduce using rule 3 (statement -> declaration .)
    RBRACE          reduce using rule 3 (statement -> declaration .)
    CASE            reduce using rule 3 (statement -> declaration .)
    DEFAULT         reduce using rule 3 (statement -> declaration .)


state 4

    (4) statement -> assignment .

    VAR             reduce using rule 4 (statement -> assignment .)
    VARIABLE        reduce using rule 4 (statement -> assignment .)
    FMT             reduce using rule 4 (statement -> assignment .)
    CONTINUE        reduce using rule 4 (statement -> assignment .)
    FUNC            reduce using rule 4 (statement -> assignment .)
    IF              reduce using rule 4 (statement -> assignment .)
    FOR             reduce using rule 4 (statement -> assignment .)
    TYPE            reduce using rule 4 (statement -> assignment .)
    SWITCH          reduce using rule 4 (statement -> assignment .)
    BREAK           reduce using rule 4 (statement -> assignment .)
    RETURN          reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)
    RBRACE          reduce using rule 4 (statement -> assignment .)
    CASE            reduce using rule 4 (statement -> assignment .)
    DEFAULT         reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> print_stmt .

    VAR             reduce using rule 5 (statement -> print_stmt .)
    VARIABLE        reduce using rule 5 (statement -> print_stmt .)
    FMT             reduce using rule 5 (statement -> print_stmt .)
    CONTINUE        reduce using rule 5 (statement -> print_stmt .)
    FUNC            reduce using rule 5 (statement -> print_stmt .)
    IF              reduce using rule 5 (statement -> print_stmt .)
    FOR             reduce using rule 5 (statement -> print_stmt .)
    TYPE            reduce using rule 5 (statement -> print_stmt .)
    SWITCH          reduce using rule 5 (statement -> print_stmt .)
    BREAK           reduce using rule 5 (statement -> print_stmt .)
    RETURN          reduce using rule 5 (statement -> print_stmt .)
    $end            reduce using rule 5 (statement -> print_stmt .)
    RBRACE          reduce using rule 5 (statement -> print_stmt .)
    CASE            reduce using rule 5 (statement -> print_stmt .)
    DEFAULT         reduce using rule 5 (statement -> print_stmt .)


state 6

    (6) statement -> input_stmt .

    VAR             reduce using rule 6 (statement -> input_stmt .)
    VARIABLE        reduce using rule 6 (statement -> input_stmt .)
    FMT             reduce using rule 6 (statement -> input_stmt .)
    CONTINUE        reduce using rule 6 (statement -> input_stmt .)
    FUNC            reduce using rule 6 (statement -> input_stmt .)
    IF              reduce using rule 6 (statement -> input_stmt .)
    FOR             reduce using rule 6 (statement -> input_stmt .)
    TYPE            reduce using rule 6 (statement -> input_stmt .)
    SWITCH          reduce using rule 6 (statement -> input_stmt .)
    BREAK           reduce using rule 6 (statement -> input_stmt .)
    RETURN          reduce using rule 6 (statement -> input_stmt .)
    $end            reduce using rule 6 (statement -> input_stmt .)
    RBRACE          reduce using rule 6 (statement -> input_stmt .)
    CASE            reduce using rule 6 (statement -> input_stmt .)
    DEFAULT         reduce using rule 6 (statement -> input_stmt .)


state 7

    (7) statement -> continue_stmt .

    VAR             reduce using rule 7 (statement -> continue_stmt .)
    VARIABLE        reduce using rule 7 (statement -> continue_stmt .)
    FMT             reduce using rule 7 (statement -> continue_stmt .)
    CONTINUE        reduce using rule 7 (statement -> continue_stmt .)
    FUNC            reduce using rule 7 (statement -> continue_stmt .)
    IF              reduce using rule 7 (statement -> continue_stmt .)
    FOR             reduce using rule 7 (statement -> continue_stmt .)
    TYPE            reduce using rule 7 (statement -> continue_stmt .)
    SWITCH          reduce using rule 7 (statement -> continue_stmt .)
    BREAK           reduce using rule 7 (statement -> continue_stmt .)
    RETURN          reduce using rule 7 (statement -> continue_stmt .)
    $end            reduce using rule 7 (statement -> continue_stmt .)
    RBRACE          reduce using rule 7 (statement -> continue_stmt .)
    CASE            reduce using rule 7 (statement -> continue_stmt .)
    DEFAULT         reduce using rule 7 (statement -> continue_stmt .)


state 8

    (8) statement -> struct_method .

    VAR             reduce using rule 8 (statement -> struct_method .)
    VARIABLE        reduce using rule 8 (statement -> struct_method .)
    FMT             reduce using rule 8 (statement -> struct_method .)
    CONTINUE        reduce using rule 8 (statement -> struct_method .)
    FUNC            reduce using rule 8 (statement -> struct_method .)
    IF              reduce using rule 8 (statement -> struct_method .)
    FOR             reduce using rule 8 (statement -> struct_method .)
    TYPE            reduce using rule 8 (statement -> struct_method .)
    SWITCH          reduce using rule 8 (statement -> struct_method .)
    BREAK           reduce using rule 8 (statement -> struct_method .)
    RETURN          reduce using rule 8 (statement -> struct_method .)
    $end            reduce using rule 8 (statement -> struct_method .)
    RBRACE          reduce using rule 8 (statement -> struct_method .)
    CASE            reduce using rule 8 (statement -> struct_method .)
    DEFAULT         reduce using rule 8 (statement -> struct_method .)


state 9

    (9) statement -> func_def .

    VAR             reduce using rule 9 (statement -> func_def .)
    VARIABLE        reduce using rule 9 (statement -> func_def .)
    FMT             reduce using rule 9 (statement -> func_def .)
    CONTINUE        reduce using rule 9 (statement -> func_def .)
    FUNC            reduce using rule 9 (statement -> func_def .)
    IF              reduce using rule 9 (statement -> func_def .)
    FOR             reduce using rule 9 (statement -> func_def .)
    TYPE            reduce using rule 9 (statement -> func_def .)
    SWITCH          reduce using rule 9 (statement -> func_def .)
    BREAK           reduce using rule 9 (statement -> func_def .)
    RETURN          reduce using rule 9 (statement -> func_def .)
    $end            reduce using rule 9 (statement -> func_def .)
    RBRACE          reduce using rule 9 (statement -> func_def .)
    CASE            reduce using rule 9 (statement -> func_def .)
    DEFAULT         reduce using rule 9 (statement -> func_def .)


state 10

    (10) statement -> func_no_params .

    VAR             reduce using rule 10 (statement -> func_no_params .)
    VARIABLE        reduce using rule 10 (statement -> func_no_params .)
    FMT             reduce using rule 10 (statement -> func_no_params .)
    CONTINUE        reduce using rule 10 (statement -> func_no_params .)
    FUNC            reduce using rule 10 (statement -> func_no_params .)
    IF              reduce using rule 10 (statement -> func_no_params .)
    FOR             reduce using rule 10 (statement -> func_no_params .)
    TYPE            reduce using rule 10 (statement -> func_no_params .)
    SWITCH          reduce using rule 10 (statement -> func_no_params .)
    BREAK           reduce using rule 10 (statement -> func_no_params .)
    RETURN          reduce using rule 10 (statement -> func_no_params .)
    $end            reduce using rule 10 (statement -> func_no_params .)
    RBRACE          reduce using rule 10 (statement -> func_no_params .)
    CASE            reduce using rule 10 (statement -> func_no_params .)
    DEFAULT         reduce using rule 10 (statement -> func_no_params .)


state 11

    (11) statement -> func_call .

    VAR             reduce using rule 11 (statement -> func_call .)
    VARIABLE        reduce using rule 11 (statement -> func_call .)
    FMT             reduce using rule 11 (statement -> func_call .)
    CONTINUE        reduce using rule 11 (statement -> func_call .)
    FUNC            reduce using rule 11 (statement -> func_call .)
    IF              reduce using rule 11 (statement -> func_call .)
    FOR             reduce using rule 11 (statement -> func_call .)
    TYPE            reduce using rule 11 (statement -> func_call .)
    SWITCH          reduce using rule 11 (statement -> func_call .)
    BREAK           reduce using rule 11 (statement -> func_call .)
    RETURN          reduce using rule 11 (statement -> func_call .)
    $end            reduce using rule 11 (statement -> func_call .)
    RBRACE          reduce using rule 11 (statement -> func_call .)
    CASE            reduce using rule 11 (statement -> func_call .)
    DEFAULT         reduce using rule 11 (statement -> func_call .)


state 12

    (12) statement -> if_stmt .

    VAR             reduce using rule 12 (statement -> if_stmt .)
    VARIABLE        reduce using rule 12 (statement -> if_stmt .)
    FMT             reduce using rule 12 (statement -> if_stmt .)
    CONTINUE        reduce using rule 12 (statement -> if_stmt .)
    FUNC            reduce using rule 12 (statement -> if_stmt .)
    IF              reduce using rule 12 (statement -> if_stmt .)
    FOR             reduce using rule 12 (statement -> if_stmt .)
    TYPE            reduce using rule 12 (statement -> if_stmt .)
    SWITCH          reduce using rule 12 (statement -> if_stmt .)
    BREAK           reduce using rule 12 (statement -> if_stmt .)
    RETURN          reduce using rule 12 (statement -> if_stmt .)
    $end            reduce using rule 12 (statement -> if_stmt .)
    RBRACE          reduce using rule 12 (statement -> if_stmt .)
    CASE            reduce using rule 12 (statement -> if_stmt .)
    DEFAULT         reduce using rule 12 (statement -> if_stmt .)


state 13

    (13) statement -> for_stmt .

    VAR             reduce using rule 13 (statement -> for_stmt .)
    VARIABLE        reduce using rule 13 (statement -> for_stmt .)
    FMT             reduce using rule 13 (statement -> for_stmt .)
    CONTINUE        reduce using rule 13 (statement -> for_stmt .)
    FUNC            reduce using rule 13 (statement -> for_stmt .)
    IF              reduce using rule 13 (statement -> for_stmt .)
    FOR             reduce using rule 13 (statement -> for_stmt .)
    TYPE            reduce using rule 13 (statement -> for_stmt .)
    SWITCH          reduce using rule 13 (statement -> for_stmt .)
    BREAK           reduce using rule 13 (statement -> for_stmt .)
    RETURN          reduce using rule 13 (statement -> for_stmt .)
    $end            reduce using rule 13 (statement -> for_stmt .)
    RBRACE          reduce using rule 13 (statement -> for_stmt .)
    CASE            reduce using rule 13 (statement -> for_stmt .)
    DEFAULT         reduce using rule 13 (statement -> for_stmt .)


state 14

    (14) statement -> struct_def .

    VAR             reduce using rule 14 (statement -> struct_def .)
    VARIABLE        reduce using rule 14 (statement -> struct_def .)
    FMT             reduce using rule 14 (statement -> struct_def .)
    CONTINUE        reduce using rule 14 (statement -> struct_def .)
    FUNC            reduce using rule 14 (statement -> struct_def .)
    IF              reduce using rule 14 (statement -> struct_def .)
    FOR             reduce using rule 14 (statement -> struct_def .)
    TYPE            reduce using rule 14 (statement -> struct_def .)
    SWITCH          reduce using rule 14 (statement -> struct_def .)
    BREAK           reduce using rule 14 (statement -> struct_def .)
    RETURN          reduce using rule 14 (statement -> struct_def .)
    $end            reduce using rule 14 (statement -> struct_def .)
    RBRACE          reduce using rule 14 (statement -> struct_def .)
    CASE            reduce using rule 14 (statement -> struct_def .)
    DEFAULT         reduce using rule 14 (statement -> struct_def .)


state 15

    (15) statement -> switch_stmt .

    VAR             reduce using rule 15 (statement -> switch_stmt .)
    VARIABLE        reduce using rule 15 (statement -> switch_stmt .)
    FMT             reduce using rule 15 (statement -> switch_stmt .)
    CONTINUE        reduce using rule 15 (statement -> switch_stmt .)
    FUNC            reduce using rule 15 (statement -> switch_stmt .)
    IF              reduce using rule 15 (statement -> switch_stmt .)
    FOR             reduce using rule 15 (statement -> switch_stmt .)
    TYPE            reduce using rule 15 (statement -> switch_stmt .)
    SWITCH          reduce using rule 15 (statement -> switch_stmt .)
    BREAK           reduce using rule 15 (statement -> switch_stmt .)
    RETURN          reduce using rule 15 (statement -> switch_stmt .)
    $end            reduce using rule 15 (statement -> switch_stmt .)
    RBRACE          reduce using rule 15 (statement -> switch_stmt .)
    CASE            reduce using rule 15 (statement -> switch_stmt .)
    DEFAULT         reduce using rule 15 (statement -> switch_stmt .)


state 16

    (16) statement -> map_declaration .

    VAR             reduce using rule 16 (statement -> map_declaration .)
    VARIABLE        reduce using rule 16 (statement -> map_declaration .)
    FMT             reduce using rule 16 (statement -> map_declaration .)
    CONTINUE        reduce using rule 16 (statement -> map_declaration .)
    FUNC            reduce using rule 16 (statement -> map_declaration .)
    IF              reduce using rule 16 (statement -> map_declaration .)
    FOR             reduce using rule 16 (statement -> map_declaration .)
    TYPE            reduce using rule 16 (statement -> map_declaration .)
    SWITCH          reduce using rule 16 (statement -> map_declaration .)
    BREAK           reduce using rule 16 (statement -> map_declaration .)
    RETURN          reduce using rule 16 (statement -> map_declaration .)
    $end            reduce using rule 16 (statement -> map_declaration .)
    RBRACE          reduce using rule 16 (statement -> map_declaration .)
    CASE            reduce using rule 16 (statement -> map_declaration .)
    DEFAULT         reduce using rule 16 (statement -> map_declaration .)


state 17

    (17) statement -> map_declaration_values .

    VAR             reduce using rule 17 (statement -> map_declaration_values .)
    VARIABLE        reduce using rule 17 (statement -> map_declaration_values .)
    FMT             reduce using rule 17 (statement -> map_declaration_values .)
    CONTINUE        reduce using rule 17 (statement -> map_declaration_values .)
    FUNC            reduce using rule 17 (statement -> map_declaration_values .)
    IF              reduce using rule 17 (statement -> map_declaration_values .)
    FOR             reduce using rule 17 (statement -> map_declaration_values .)
    TYPE            reduce using rule 17 (statement -> map_declaration_values .)
    SWITCH          reduce using rule 17 (statement -> map_declaration_values .)
    BREAK           reduce using rule 17 (statement -> map_declaration_values .)
    RETURN          reduce using rule 17 (statement -> map_declaration_values .)
    $end            reduce using rule 17 (statement -> map_declaration_values .)
    RBRACE          reduce using rule 17 (statement -> map_declaration_values .)
    CASE            reduce using rule 17 (statement -> map_declaration_values .)
    DEFAULT         reduce using rule 17 (statement -> map_declaration_values .)


state 18

    (18) statement -> array_declaration .

    VAR             reduce using rule 18 (statement -> array_declaration .)
    VARIABLE        reduce using rule 18 (statement -> array_declaration .)
    FMT             reduce using rule 18 (statement -> array_declaration .)
    CONTINUE        reduce using rule 18 (statement -> array_declaration .)
    FUNC            reduce using rule 18 (statement -> array_declaration .)
    IF              reduce using rule 18 (statement -> array_declaration .)
    FOR             reduce using rule 18 (statement -> array_declaration .)
    TYPE            reduce using rule 18 (statement -> array_declaration .)
    SWITCH          reduce using rule 18 (statement -> array_declaration .)
    BREAK           reduce using rule 18 (statement -> array_declaration .)
    RETURN          reduce using rule 18 (statement -> array_declaration .)
    $end            reduce using rule 18 (statement -> array_declaration .)
    RBRACE          reduce using rule 18 (statement -> array_declaration .)
    CASE            reduce using rule 18 (statement -> array_declaration .)
    DEFAULT         reduce using rule 18 (statement -> array_declaration .)


state 19

    (19) statement -> slice_declaration .

    VAR             reduce using rule 19 (statement -> slice_declaration .)
    VARIABLE        reduce using rule 19 (statement -> slice_declaration .)
    FMT             reduce using rule 19 (statement -> slice_declaration .)
    CONTINUE        reduce using rule 19 (statement -> slice_declaration .)
    FUNC            reduce using rule 19 (statement -> slice_declaration .)
    IF              reduce using rule 19 (statement -> slice_declaration .)
    FOR             reduce using rule 19 (statement -> slice_declaration .)
    TYPE            reduce using rule 19 (statement -> slice_declaration .)
    SWITCH          reduce using rule 19 (statement -> slice_declaration .)
    BREAK           reduce using rule 19 (statement -> slice_declaration .)
    RETURN          reduce using rule 19 (statement -> slice_declaration .)
    $end            reduce using rule 19 (statement -> slice_declaration .)
    RBRACE          reduce using rule 19 (statement -> slice_declaration .)
    CASE            reduce using rule 19 (statement -> slice_declaration .)
    DEFAULT         reduce using rule 19 (statement -> slice_declaration .)


state 20

    (20) statement -> make_stmt .

    VAR             reduce using rule 20 (statement -> make_stmt .)
    VARIABLE        reduce using rule 20 (statement -> make_stmt .)
    FMT             reduce using rule 20 (statement -> make_stmt .)
    CONTINUE        reduce using rule 20 (statement -> make_stmt .)
    FUNC            reduce using rule 20 (statement -> make_stmt .)
    IF              reduce using rule 20 (statement -> make_stmt .)
    FOR             reduce using rule 20 (statement -> make_stmt .)
    TYPE            reduce using rule 20 (statement -> make_stmt .)
    SWITCH          reduce using rule 20 (statement -> make_stmt .)
    BREAK           reduce using rule 20 (statement -> make_stmt .)
    RETURN          reduce using rule 20 (statement -> make_stmt .)
    $end            reduce using rule 20 (statement -> make_stmt .)
    RBRACE          reduce using rule 20 (statement -> make_stmt .)
    CASE            reduce using rule 20 (statement -> make_stmt .)
    DEFAULT         reduce using rule 20 (statement -> make_stmt .)


state 21

    (21) statement -> new_stmt .

    VAR             reduce using rule 21 (statement -> new_stmt .)
    VARIABLE        reduce using rule 21 (statement -> new_stmt .)
    FMT             reduce using rule 21 (statement -> new_stmt .)
    CONTINUE        reduce using rule 21 (statement -> new_stmt .)
    FUNC            reduce using rule 21 (statement -> new_stmt .)
    IF              reduce using rule 21 (statement -> new_stmt .)
    FOR             reduce using rule 21 (statement -> new_stmt .)
    TYPE            reduce using rule 21 (statement -> new_stmt .)
    SWITCH          reduce using rule 21 (statement -> new_stmt .)
    BREAK           reduce using rule 21 (statement -> new_stmt .)
    RETURN          reduce using rule 21 (statement -> new_stmt .)
    $end            reduce using rule 21 (statement -> new_stmt .)
    RBRACE          reduce using rule 21 (statement -> new_stmt .)
    CASE            reduce using rule 21 (statement -> new_stmt .)
    DEFAULT         reduce using rule 21 (statement -> new_stmt .)


state 22

    (22) statement -> break_stmt .

    VAR             reduce using rule 22 (statement -> break_stmt .)
    VARIABLE        reduce using rule 22 (statement -> break_stmt .)
    FMT             reduce using rule 22 (statement -> break_stmt .)
    CONTINUE        reduce using rule 22 (statement -> break_stmt .)
    FUNC            reduce using rule 22 (statement -> break_stmt .)
    IF              reduce using rule 22 (statement -> break_stmt .)
    FOR             reduce using rule 22 (statement -> break_stmt .)
    TYPE            reduce using rule 22 (statement -> break_stmt .)
    SWITCH          reduce using rule 22 (statement -> break_stmt .)
    BREAK           reduce using rule 22 (statement -> break_stmt .)
    RETURN          reduce using rule 22 (statement -> break_stmt .)
    $end            reduce using rule 22 (statement -> break_stmt .)
    RBRACE          reduce using rule 22 (statement -> break_stmt .)
    CASE            reduce using rule 22 (statement -> break_stmt .)
    DEFAULT         reduce using rule 22 (statement -> break_stmt .)


state 23

    (23) statement -> increment_stmt .

    VAR             reduce using rule 23 (statement -> increment_stmt .)
    VARIABLE        reduce using rule 23 (statement -> increment_stmt .)
    FMT             reduce using rule 23 (statement -> increment_stmt .)
    CONTINUE        reduce using rule 23 (statement -> increment_stmt .)
    FUNC            reduce using rule 23 (statement -> increment_stmt .)
    IF              reduce using rule 23 (statement -> increment_stmt .)
    FOR             reduce using rule 23 (statement -> increment_stmt .)
    TYPE            reduce using rule 23 (statement -> increment_stmt .)
    SWITCH          reduce using rule 23 (statement -> increment_stmt .)
    BREAK           reduce using rule 23 (statement -> increment_stmt .)
    RETURN          reduce using rule 23 (statement -> increment_stmt .)
    $end            reduce using rule 23 (statement -> increment_stmt .)
    RBRACE          reduce using rule 23 (statement -> increment_stmt .)
    CASE            reduce using rule 23 (statement -> increment_stmt .)
    DEFAULT         reduce using rule 23 (statement -> increment_stmt .)


state 24

    (24) statement -> return_stmt .

    VAR             reduce using rule 24 (statement -> return_stmt .)
    VARIABLE        reduce using rule 24 (statement -> return_stmt .)
    FMT             reduce using rule 24 (statement -> return_stmt .)
    CONTINUE        reduce using rule 24 (statement -> return_stmt .)
    FUNC            reduce using rule 24 (statement -> return_stmt .)
    IF              reduce using rule 24 (statement -> return_stmt .)
    FOR             reduce using rule 24 (statement -> return_stmt .)
    TYPE            reduce using rule 24 (statement -> return_stmt .)
    SWITCH          reduce using rule 24 (statement -> return_stmt .)
    BREAK           reduce using rule 24 (statement -> return_stmt .)
    RETURN          reduce using rule 24 (statement -> return_stmt .)
    $end            reduce using rule 24 (statement -> return_stmt .)
    RBRACE          reduce using rule 24 (statement -> return_stmt .)
    CASE            reduce using rule 24 (statement -> return_stmt .)
    DEFAULT         reduce using rule 24 (statement -> return_stmt .)


state 25

    (25) declaration -> VAR . VARIABLE type
    (26) declaration -> VAR . VARIABLE type ASIG expression
    (96) map_declaration -> VAR . VARIABLE MAP LBRACKET type RBRACKET type
    (106) array_declaration -> VAR . VARIABLE LBRACKET NUMBER RBRACKET type
    (110) slice_declaration -> VAR . VARIABLE LBRACKET RBRACKET type

    VARIABLE        shift and go to state 37


state 26

    (30) assignment -> VARIABLE . ASSIGN expression
    (31) assignment -> VARIABLE . ASIG expression
    (39) func_call -> VARIABLE . LPAREN arg_list RPAREN
    (40) func_call -> VARIABLE . LPAREN RPAREN
    (97) map_declaration -> VARIABLE . ASIG MAP LBRACKET type RBRACKET type
    (102) map_declaration_values -> VARIABLE . ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (107) array_declaration -> VARIABLE . ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (111) slice_declaration -> VARIABLE . ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (98) make_stmt -> VARIABLE . ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (99) make_stmt -> VARIABLE . ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (114) new_stmt -> VARIABLE . ASIG NEW LPAREN VARIABLE RPAREN
    (116) increment_stmt -> VARIABLE . INCREMENT
    (117) increment_stmt -> VARIABLE . DECREMENT

    ASSIGN          shift and go to state 38
    ASIG            shift and go to state 39
    LPAREN          shift and go to state 40
    INCREMENT       shift and go to state 41
    DECREMENT       shift and go to state 42


state 27

    (32) print_stmt -> FMT . DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (33) print_stmt -> FMT . DOT PRINTLN LPAREN expression RPAREN
    (34) input_stmt -> FMT . DOT SCANLN LPAREN AMPER VARIABLE RPAREN

    DOT             shift and go to state 43


state 28

    (75) continue_stmt -> CONTINUE .

    VAR             reduce using rule 75 (continue_stmt -> CONTINUE .)
    VARIABLE        reduce using rule 75 (continue_stmt -> CONTINUE .)
    FMT             reduce using rule 75 (continue_stmt -> CONTINUE .)
    CONTINUE        reduce using rule 75 (continue_stmt -> CONTINUE .)
    FUNC            reduce using rule 75 (continue_stmt -> CONTINUE .)
    IF              reduce using rule 75 (continue_stmt -> CONTINUE .)
    FOR             reduce using rule 75 (continue_stmt -> CONTINUE .)
    TYPE            reduce using rule 75 (continue_stmt -> CONTINUE .)
    SWITCH          reduce using rule 75 (continue_stmt -> CONTINUE .)
    BREAK           reduce using rule 75 (continue_stmt -> CONTINUE .)
    RETURN          reduce using rule 75 (continue_stmt -> CONTINUE .)
    $end            reduce using rule 75 (continue_stmt -> CONTINUE .)
    RBRACE          reduce using rule 75 (continue_stmt -> CONTINUE .)
    CASE            reduce using rule 75 (continue_stmt -> CONTINUE .)
    DEFAULT         reduce using rule 75 (continue_stmt -> CONTINUE .)


state 29

    (79) struct_method -> FUNC . LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (80) struct_method -> FUNC . LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (35) func_def -> FUNC . VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (36) func_def -> FUNC . VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (38) func_no_params -> FUNC . VARIABLE LPAREN RPAREN block

    LPAREN          shift and go to state 44
    VARIABLE        shift and go to state 45


state 30

    (71) if_stmt -> IF . expression block
    (72) if_stmt -> IF . expression block ELSE block
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    expression                     shift and go to state 46
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 31

    (73) for_stmt -> FOR . expression block
    (74) for_stmt -> FOR . assignment SEMICOLON expression SEMICOLON for_update block
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (30) assignment -> . VARIABLE ASSIGN expression
    (31) assignment -> . VARIABLE ASIG expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 59
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    expression                     shift and go to state 57
    assignment                     shift and go to state 58
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 32

    (81) struct_def -> TYPE . VARIABLE STRUCT LBRACE struct_fields RBRACE

    VARIABLE        shift and go to state 60


state 33

    (90) switch_stmt -> SWITCH . expression LBRACE case_list RBRACE
    (91) switch_stmt -> SWITCH . LBRACE case_list RBRACE
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    LBRACE          shift and go to state 62
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    expression                     shift and go to state 61
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 34

    (115) break_stmt -> BREAK .

    VAR             reduce using rule 115 (break_stmt -> BREAK .)
    VARIABLE        reduce using rule 115 (break_stmt -> BREAK .)
    FMT             reduce using rule 115 (break_stmt -> BREAK .)
    CONTINUE        reduce using rule 115 (break_stmt -> BREAK .)
    FUNC            reduce using rule 115 (break_stmt -> BREAK .)
    IF              reduce using rule 115 (break_stmt -> BREAK .)
    FOR             reduce using rule 115 (break_stmt -> BREAK .)
    TYPE            reduce using rule 115 (break_stmt -> BREAK .)
    SWITCH          reduce using rule 115 (break_stmt -> BREAK .)
    BREAK           reduce using rule 115 (break_stmt -> BREAK .)
    RETURN          reduce using rule 115 (break_stmt -> BREAK .)
    $end            reduce using rule 115 (break_stmt -> BREAK .)
    RBRACE          reduce using rule 115 (break_stmt -> BREAK .)
    CASE            reduce using rule 115 (break_stmt -> BREAK .)
    DEFAULT         reduce using rule 115 (break_stmt -> BREAK .)


state 35

    (37) return_stmt -> RETURN . expression
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    expression                     shift and go to state 63
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 36

    (2) program -> statement program .

    $end            reduce using rule 2 (program -> statement program .)
    RBRACE          reduce using rule 2 (program -> statement program .)
    CASE            reduce using rule 2 (program -> statement program .)
    DEFAULT         reduce using rule 2 (program -> statement program .)


state 37

    (25) declaration -> VAR VARIABLE . type
    (26) declaration -> VAR VARIABLE . type ASIG expression
    (96) map_declaration -> VAR VARIABLE . MAP LBRACKET type RBRACKET type
    (106) array_declaration -> VAR VARIABLE . LBRACKET NUMBER RBRACKET type
    (110) slice_declaration -> VAR VARIABLE . LBRACKET RBRACKET type
    (67) type -> . INT_TYPE
    (68) type -> . FLOAT64_TYPE
    (69) type -> . STRING_TYPE
    (70) type -> . BOOL_TYPE

    MAP             shift and go to state 65
    LBRACKET        shift and go to state 66
    INT_TYPE        shift and go to state 67
    FLOAT64_TYPE    shift and go to state 68
    STRING_TYPE     shift and go to state 69
    BOOL_TYPE       shift and go to state 70

    type                           shift and go to state 64

state 38

    (30) assignment -> VARIABLE ASSIGN . expression
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    expression                     shift and go to state 71
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 39

    (31) assignment -> VARIABLE ASIG . expression
    (97) map_declaration -> VARIABLE ASIG . MAP LBRACKET type RBRACKET type
    (102) map_declaration_values -> VARIABLE ASIG . MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (107) array_declaration -> VARIABLE ASIG . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (111) slice_declaration -> VARIABLE ASIG . LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (98) make_stmt -> VARIABLE ASIG . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (99) make_stmt -> VARIABLE ASIG . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (114) new_stmt -> VARIABLE ASIG . NEW LPAREN VARIABLE RPAREN
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    MAP             shift and go to state 73
    LBRACKET        shift and go to state 74
    MAKE            shift and go to state 75
    NEW             shift and go to state 76
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53

    expression                     shift and go to state 72
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 40

    (39) func_call -> VARIABLE LPAREN . arg_list RPAREN
    (40) func_call -> VARIABLE LPAREN . RPAREN
    (44) arg_list -> . expression
    (45) arg_list -> . expression COMMA arg_list
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    RPAREN          shift and go to state 78
    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    arg_list                       shift and go to state 77
    expression                     shift and go to state 79
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 41

    (116) increment_stmt -> VARIABLE INCREMENT .

    VAR             reduce using rule 116 (increment_stmt -> VARIABLE INCREMENT .)
    VARIABLE        reduce using rule 116 (increment_stmt -> VARIABLE INCREMENT .)
    FMT             reduce using rule 116 (increment_stmt -> VARIABLE INCREMENT .)
    CONTINUE        reduce using rule 116 (increment_stmt -> VARIABLE INCREMENT .)
    FUNC            reduce using rule 116 (increment_stmt -> VARIABLE INCREMENT .)
    IF              reduce using rule 116 (increment_stmt -> VARIABLE INCREMENT .)
    FOR             reduce using rule 116 (increment_stmt -> VARIABLE INCREMENT .)
    TYPE            reduce using rule 116 (increment_stmt -> VARIABLE INCREMENT .)
    SWITCH          reduce using rule 116 (increment_stmt -> VARIABLE INCREMENT .)
    BREAK           reduce using rule 116 (increment_stmt -> VARIABLE INCREMENT .)
    RETURN          reduce using rule 116 (increment_stmt -> VARIABLE INCREMENT .)
    $end            reduce using rule 116 (increment_stmt -> VARIABLE INCREMENT .)
    RBRACE          reduce using rule 116 (increment_stmt -> VARIABLE INCREMENT .)
    CASE            reduce using rule 116 (increment_stmt -> VARIABLE INCREMENT .)
    DEFAULT         reduce using rule 116 (increment_stmt -> VARIABLE INCREMENT .)
    LBRACE          reduce using rule 116 (increment_stmt -> VARIABLE INCREMENT .)


state 42

    (117) increment_stmt -> VARIABLE DECREMENT .

    VAR             reduce using rule 117 (increment_stmt -> VARIABLE DECREMENT .)
    VARIABLE        reduce using rule 117 (increment_stmt -> VARIABLE DECREMENT .)
    FMT             reduce using rule 117 (increment_stmt -> VARIABLE DECREMENT .)
    CONTINUE        reduce using rule 117 (increment_stmt -> VARIABLE DECREMENT .)
    FUNC            reduce using rule 117 (increment_stmt -> VARIABLE DECREMENT .)
    IF              reduce using rule 117 (increment_stmt -> VARIABLE DECREMENT .)
    FOR             reduce using rule 117 (increment_stmt -> VARIABLE DECREMENT .)
    TYPE            reduce using rule 117 (increment_stmt -> VARIABLE DECREMENT .)
    SWITCH          reduce using rule 117 (increment_stmt -> VARIABLE DECREMENT .)
    BREAK           reduce using rule 117 (increment_stmt -> VARIABLE DECREMENT .)
    RETURN          reduce using rule 117 (increment_stmt -> VARIABLE DECREMENT .)
    $end            reduce using rule 117 (increment_stmt -> VARIABLE DECREMENT .)
    RBRACE          reduce using rule 117 (increment_stmt -> VARIABLE DECREMENT .)
    CASE            reduce using rule 117 (increment_stmt -> VARIABLE DECREMENT .)
    DEFAULT         reduce using rule 117 (increment_stmt -> VARIABLE DECREMENT .)
    LBRACE          reduce using rule 117 (increment_stmt -> VARIABLE DECREMENT .)


state 43

    (32) print_stmt -> FMT DOT . PRINTF LPAREN STRING COMMA expression RPAREN
    (33) print_stmt -> FMT DOT . PRINTLN LPAREN expression RPAREN
    (34) input_stmt -> FMT DOT . SCANLN LPAREN AMPER VARIABLE RPAREN

    PRINTF          shift and go to state 80
    PRINTLN         shift and go to state 81
    SCANLN          shift and go to state 82


state 44

    (79) struct_method -> FUNC LPAREN . VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (80) struct_method -> FUNC LPAREN . VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE

    VARIABLE        shift and go to state 83


state 45

    (35) func_def -> FUNC VARIABLE . LPAREN param_list RPAREN type LBRACE program RBRACE
    (36) func_def -> FUNC VARIABLE . LPAREN RPAREN type LBRACE program RBRACE
    (38) func_no_params -> FUNC VARIABLE . LPAREN RPAREN block

    LPAREN          shift and go to state 84


state 46

    (71) if_stmt -> IF expression . block
    (72) if_stmt -> IF expression . block ELSE block
    (47) expression -> expression . PLUS term
    (48) expression -> expression . MINUS term
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NE expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LE expression
    (56) expression -> expression . GE expression
    (78) block -> . LBRACE program RBRACE

    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    EQ              shift and go to state 90
    NE              shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    GE              shift and go to state 95
    LBRACE          shift and go to state 96

    block                          shift and go to state 85

state 47

    (27) expression -> NUMBER .
    (60) factor -> NUMBER .

  ! reduce/reduce conflict for PLUS resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for MINUS resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for AND resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for OR resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for EQ resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for NE resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for LT resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for GT resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for LE resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for GE resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for LBRACE resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for VAR resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for FMT resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for FUNC resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for IF resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for FOR resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for TYPE resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for SWITCH resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for BREAK resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for RETURN resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for RBRACE resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for CASE resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for COMMA resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 27 (expression -> NUMBER .)
  ! reduce/reduce conflict for COLON resolved using rule 27 (expression -> NUMBER .)
    PLUS            reduce using rule 27 (expression -> NUMBER .)
    MINUS           reduce using rule 27 (expression -> NUMBER .)
    AND             reduce using rule 27 (expression -> NUMBER .)
    OR              reduce using rule 27 (expression -> NUMBER .)
    EQ              reduce using rule 27 (expression -> NUMBER .)
    NE              reduce using rule 27 (expression -> NUMBER .)
    LT              reduce using rule 27 (expression -> NUMBER .)
    GT              reduce using rule 27 (expression -> NUMBER .)
    LE              reduce using rule 27 (expression -> NUMBER .)
    GE              reduce using rule 27 (expression -> NUMBER .)
    LBRACE          reduce using rule 27 (expression -> NUMBER .)
    VAR             reduce using rule 27 (expression -> NUMBER .)
    VARIABLE        reduce using rule 27 (expression -> NUMBER .)
    FMT             reduce using rule 27 (expression -> NUMBER .)
    CONTINUE        reduce using rule 27 (expression -> NUMBER .)
    FUNC            reduce using rule 27 (expression -> NUMBER .)
    IF              reduce using rule 27 (expression -> NUMBER .)
    FOR             reduce using rule 27 (expression -> NUMBER .)
    TYPE            reduce using rule 27 (expression -> NUMBER .)
    SWITCH          reduce using rule 27 (expression -> NUMBER .)
    BREAK           reduce using rule 27 (expression -> NUMBER .)
    RETURN          reduce using rule 27 (expression -> NUMBER .)
    $end            reduce using rule 27 (expression -> NUMBER .)
    RBRACE          reduce using rule 27 (expression -> NUMBER .)
    CASE            reduce using rule 27 (expression -> NUMBER .)
    DEFAULT         reduce using rule 27 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 27 (expression -> NUMBER .)
    COMMA           reduce using rule 27 (expression -> NUMBER .)
    RPAREN          reduce using rule 27 (expression -> NUMBER .)
    COLON           reduce using rule 27 (expression -> NUMBER .)
    TIMES           reduce using rule 60 (factor -> NUMBER .)
    DIVIDE          reduce using rule 60 (factor -> NUMBER .)

  ! PLUS            [ reduce using rule 60 (factor -> NUMBER .) ]
  ! MINUS           [ reduce using rule 60 (factor -> NUMBER .) ]
  ! AND             [ reduce using rule 60 (factor -> NUMBER .) ]
  ! OR              [ reduce using rule 60 (factor -> NUMBER .) ]
  ! EQ              [ reduce using rule 60 (factor -> NUMBER .) ]
  ! NE              [ reduce using rule 60 (factor -> NUMBER .) ]
  ! LT              [ reduce using rule 60 (factor -> NUMBER .) ]
  ! GT              [ reduce using rule 60 (factor -> NUMBER .) ]
  ! LE              [ reduce using rule 60 (factor -> NUMBER .) ]
  ! GE              [ reduce using rule 60 (factor -> NUMBER .) ]
  ! LBRACE          [ reduce using rule 60 (factor -> NUMBER .) ]
  ! VAR             [ reduce using rule 60 (factor -> NUMBER .) ]
  ! VARIABLE        [ reduce using rule 60 (factor -> NUMBER .) ]
  ! FMT             [ reduce using rule 60 (factor -> NUMBER .) ]
  ! CONTINUE        [ reduce using rule 60 (factor -> NUMBER .) ]
  ! FUNC            [ reduce using rule 60 (factor -> NUMBER .) ]
  ! IF              [ reduce using rule 60 (factor -> NUMBER .) ]
  ! FOR             [ reduce using rule 60 (factor -> NUMBER .) ]
  ! TYPE            [ reduce using rule 60 (factor -> NUMBER .) ]
  ! SWITCH          [ reduce using rule 60 (factor -> NUMBER .) ]
  ! BREAK           [ reduce using rule 60 (factor -> NUMBER .) ]
  ! RETURN          [ reduce using rule 60 (factor -> NUMBER .) ]
  ! $end            [ reduce using rule 60 (factor -> NUMBER .) ]
  ! RBRACE          [ reduce using rule 60 (factor -> NUMBER .) ]
  ! CASE            [ reduce using rule 60 (factor -> NUMBER .) ]
  ! DEFAULT         [ reduce using rule 60 (factor -> NUMBER .) ]
  ! SEMICOLON       [ reduce using rule 60 (factor -> NUMBER .) ]
  ! COMMA           [ reduce using rule 60 (factor -> NUMBER .) ]
  ! RPAREN          [ reduce using rule 60 (factor -> NUMBER .) ]
  ! COLON           [ reduce using rule 60 (factor -> NUMBER .) ]


state 48

    (28) expression -> FLOAT .
    (61) factor -> FLOAT .

  ! reduce/reduce conflict for PLUS resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for MINUS resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for AND resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for OR resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for EQ resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for NE resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for LT resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for GT resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for LE resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for GE resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for LBRACE resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for VAR resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for FMT resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for FUNC resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for IF resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for FOR resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for TYPE resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for SWITCH resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for BREAK resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for RETURN resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for $end resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for RBRACE resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for CASE resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for COMMA resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 28 (expression -> FLOAT .)
  ! reduce/reduce conflict for COLON resolved using rule 28 (expression -> FLOAT .)
    PLUS            reduce using rule 28 (expression -> FLOAT .)
    MINUS           reduce using rule 28 (expression -> FLOAT .)
    AND             reduce using rule 28 (expression -> FLOAT .)
    OR              reduce using rule 28 (expression -> FLOAT .)
    EQ              reduce using rule 28 (expression -> FLOAT .)
    NE              reduce using rule 28 (expression -> FLOAT .)
    LT              reduce using rule 28 (expression -> FLOAT .)
    GT              reduce using rule 28 (expression -> FLOAT .)
    LE              reduce using rule 28 (expression -> FLOAT .)
    GE              reduce using rule 28 (expression -> FLOAT .)
    LBRACE          reduce using rule 28 (expression -> FLOAT .)
    VAR             reduce using rule 28 (expression -> FLOAT .)
    VARIABLE        reduce using rule 28 (expression -> FLOAT .)
    FMT             reduce using rule 28 (expression -> FLOAT .)
    CONTINUE        reduce using rule 28 (expression -> FLOAT .)
    FUNC            reduce using rule 28 (expression -> FLOAT .)
    IF              reduce using rule 28 (expression -> FLOAT .)
    FOR             reduce using rule 28 (expression -> FLOAT .)
    TYPE            reduce using rule 28 (expression -> FLOAT .)
    SWITCH          reduce using rule 28 (expression -> FLOAT .)
    BREAK           reduce using rule 28 (expression -> FLOAT .)
    RETURN          reduce using rule 28 (expression -> FLOAT .)
    $end            reduce using rule 28 (expression -> FLOAT .)
    RBRACE          reduce using rule 28 (expression -> FLOAT .)
    CASE            reduce using rule 28 (expression -> FLOAT .)
    DEFAULT         reduce using rule 28 (expression -> FLOAT .)
    SEMICOLON       reduce using rule 28 (expression -> FLOAT .)
    COMMA           reduce using rule 28 (expression -> FLOAT .)
    RPAREN          reduce using rule 28 (expression -> FLOAT .)
    COLON           reduce using rule 28 (expression -> FLOAT .)
    TIMES           reduce using rule 61 (factor -> FLOAT .)
    DIVIDE          reduce using rule 61 (factor -> FLOAT .)

  ! PLUS            [ reduce using rule 61 (factor -> FLOAT .) ]
  ! MINUS           [ reduce using rule 61 (factor -> FLOAT .) ]
  ! AND             [ reduce using rule 61 (factor -> FLOAT .) ]
  ! OR              [ reduce using rule 61 (factor -> FLOAT .) ]
  ! EQ              [ reduce using rule 61 (factor -> FLOAT .) ]
  ! NE              [ reduce using rule 61 (factor -> FLOAT .) ]
  ! LT              [ reduce using rule 61 (factor -> FLOAT .) ]
  ! GT              [ reduce using rule 61 (factor -> FLOAT .) ]
  ! LE              [ reduce using rule 61 (factor -> FLOAT .) ]
  ! GE              [ reduce using rule 61 (factor -> FLOAT .) ]
  ! LBRACE          [ reduce using rule 61 (factor -> FLOAT .) ]
  ! VAR             [ reduce using rule 61 (factor -> FLOAT .) ]
  ! VARIABLE        [ reduce using rule 61 (factor -> FLOAT .) ]
  ! FMT             [ reduce using rule 61 (factor -> FLOAT .) ]
  ! CONTINUE        [ reduce using rule 61 (factor -> FLOAT .) ]
  ! FUNC            [ reduce using rule 61 (factor -> FLOAT .) ]
  ! IF              [ reduce using rule 61 (factor -> FLOAT .) ]
  ! FOR             [ reduce using rule 61 (factor -> FLOAT .) ]
  ! TYPE            [ reduce using rule 61 (factor -> FLOAT .) ]
  ! SWITCH          [ reduce using rule 61 (factor -> FLOAT .) ]
  ! BREAK           [ reduce using rule 61 (factor -> FLOAT .) ]
  ! RETURN          [ reduce using rule 61 (factor -> FLOAT .) ]
  ! $end            [ reduce using rule 61 (factor -> FLOAT .) ]
  ! RBRACE          [ reduce using rule 61 (factor -> FLOAT .) ]
  ! CASE            [ reduce using rule 61 (factor -> FLOAT .) ]
  ! DEFAULT         [ reduce using rule 61 (factor -> FLOAT .) ]
  ! SEMICOLON       [ reduce using rule 61 (factor -> FLOAT .) ]
  ! COMMA           [ reduce using rule 61 (factor -> FLOAT .) ]
  ! RPAREN          [ reduce using rule 61 (factor -> FLOAT .) ]
  ! COLON           [ reduce using rule 61 (factor -> FLOAT .) ]


state 49

    (29) expression -> VARIABLE .
    (63) factor -> VARIABLE .
    (86) struct_instance -> VARIABLE . LBRACE struct_fields_values RBRACE

  ! reduce/reduce conflict for PLUS resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for MINUS resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for AND resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for OR resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for EQ resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for NE resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LT resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GT resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LE resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GE resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for VAR resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for FMT resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for FUNC resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for IF resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for FOR resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for TYPE resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for SWITCH resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for BREAK resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for RETURN resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for $end resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for CASE resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for COLON resolved using rule 29 (expression -> VARIABLE .)
  ! shift/reduce conflict for LBRACE resolved as shift
    PLUS            reduce using rule 29 (expression -> VARIABLE .)
    MINUS           reduce using rule 29 (expression -> VARIABLE .)
    AND             reduce using rule 29 (expression -> VARIABLE .)
    OR              reduce using rule 29 (expression -> VARIABLE .)
    EQ              reduce using rule 29 (expression -> VARIABLE .)
    NE              reduce using rule 29 (expression -> VARIABLE .)
    LT              reduce using rule 29 (expression -> VARIABLE .)
    GT              reduce using rule 29 (expression -> VARIABLE .)
    LE              reduce using rule 29 (expression -> VARIABLE .)
    GE              reduce using rule 29 (expression -> VARIABLE .)
    VAR             reduce using rule 29 (expression -> VARIABLE .)
    VARIABLE        reduce using rule 29 (expression -> VARIABLE .)
    FMT             reduce using rule 29 (expression -> VARIABLE .)
    CONTINUE        reduce using rule 29 (expression -> VARIABLE .)
    FUNC            reduce using rule 29 (expression -> VARIABLE .)
    IF              reduce using rule 29 (expression -> VARIABLE .)
    FOR             reduce using rule 29 (expression -> VARIABLE .)
    TYPE            reduce using rule 29 (expression -> VARIABLE .)
    SWITCH          reduce using rule 29 (expression -> VARIABLE .)
    BREAK           reduce using rule 29 (expression -> VARIABLE .)
    RETURN          reduce using rule 29 (expression -> VARIABLE .)
    $end            reduce using rule 29 (expression -> VARIABLE .)
    RBRACE          reduce using rule 29 (expression -> VARIABLE .)
    CASE            reduce using rule 29 (expression -> VARIABLE .)
    DEFAULT         reduce using rule 29 (expression -> VARIABLE .)
    SEMICOLON       reduce using rule 29 (expression -> VARIABLE .)
    COMMA           reduce using rule 29 (expression -> VARIABLE .)
    RPAREN          reduce using rule 29 (expression -> VARIABLE .)
    COLON           reduce using rule 29 (expression -> VARIABLE .)
    TIMES           reduce using rule 63 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 63 (factor -> VARIABLE .)
    LBRACE          shift and go to state 97

  ! LBRACE          [ reduce using rule 29 (expression -> VARIABLE .) ]
  ! PLUS            [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! AND             [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! OR              [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! EQ              [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! NE              [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! LT              [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! GT              [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! LE              [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! GE              [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! LBRACE          [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! VAR             [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! VARIABLE        [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! FMT             [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! CONTINUE        [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! FUNC            [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! IF              [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! FOR             [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! TYPE            [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! SWITCH          [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! BREAK           [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! RETURN          [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! $end            [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! RBRACE          [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! CASE            [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! DEFAULT         [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! COLON           [ reduce using rule 63 (factor -> VARIABLE .) ]


state 50

    (46) expression -> term .
    (58) term -> term . TIMES factor
    (59) term -> term . DIVIDE factor

    PLUS            reduce using rule 46 (expression -> term .)
    MINUS           reduce using rule 46 (expression -> term .)
    AND             reduce using rule 46 (expression -> term .)
    OR              reduce using rule 46 (expression -> term .)
    EQ              reduce using rule 46 (expression -> term .)
    NE              reduce using rule 46 (expression -> term .)
    LT              reduce using rule 46 (expression -> term .)
    GT              reduce using rule 46 (expression -> term .)
    LE              reduce using rule 46 (expression -> term .)
    GE              reduce using rule 46 (expression -> term .)
    LBRACE          reduce using rule 46 (expression -> term .)
    VAR             reduce using rule 46 (expression -> term .)
    VARIABLE        reduce using rule 46 (expression -> term .)
    FMT             reduce using rule 46 (expression -> term .)
    CONTINUE        reduce using rule 46 (expression -> term .)
    FUNC            reduce using rule 46 (expression -> term .)
    IF              reduce using rule 46 (expression -> term .)
    FOR             reduce using rule 46 (expression -> term .)
    TYPE            reduce using rule 46 (expression -> term .)
    SWITCH          reduce using rule 46 (expression -> term .)
    BREAK           reduce using rule 46 (expression -> term .)
    RETURN          reduce using rule 46 (expression -> term .)
    $end            reduce using rule 46 (expression -> term .)
    RBRACE          reduce using rule 46 (expression -> term .)
    CASE            reduce using rule 46 (expression -> term .)
    DEFAULT         reduce using rule 46 (expression -> term .)
    SEMICOLON       reduce using rule 46 (expression -> term .)
    COMMA           reduce using rule 46 (expression -> term .)
    RPAREN          reduce using rule 46 (expression -> term .)
    COLON           reduce using rule 46 (expression -> term .)
    TIMES           shift and go to state 98
    DIVIDE          shift and go to state 99


state 51

    (57) term -> factor .

    TIMES           reduce using rule 57 (term -> factor .)
    DIVIDE          reduce using rule 57 (term -> factor .)
    PLUS            reduce using rule 57 (term -> factor .)
    MINUS           reduce using rule 57 (term -> factor .)
    AND             reduce using rule 57 (term -> factor .)
    OR              reduce using rule 57 (term -> factor .)
    EQ              reduce using rule 57 (term -> factor .)
    NE              reduce using rule 57 (term -> factor .)
    LT              reduce using rule 57 (term -> factor .)
    GT              reduce using rule 57 (term -> factor .)
    LE              reduce using rule 57 (term -> factor .)
    GE              reduce using rule 57 (term -> factor .)
    LBRACE          reduce using rule 57 (term -> factor .)
    VAR             reduce using rule 57 (term -> factor .)
    VARIABLE        reduce using rule 57 (term -> factor .)
    FMT             reduce using rule 57 (term -> factor .)
    CONTINUE        reduce using rule 57 (term -> factor .)
    FUNC            reduce using rule 57 (term -> factor .)
    IF              reduce using rule 57 (term -> factor .)
    FOR             reduce using rule 57 (term -> factor .)
    TYPE            reduce using rule 57 (term -> factor .)
    SWITCH          reduce using rule 57 (term -> factor .)
    BREAK           reduce using rule 57 (term -> factor .)
    RETURN          reduce using rule 57 (term -> factor .)
    $end            reduce using rule 57 (term -> factor .)
    RBRACE          reduce using rule 57 (term -> factor .)
    CASE            reduce using rule 57 (term -> factor .)
    DEFAULT         reduce using rule 57 (term -> factor .)
    SEMICOLON       reduce using rule 57 (term -> factor .)
    COMMA           reduce using rule 57 (term -> factor .)
    RPAREN          reduce using rule 57 (term -> factor .)
    COLON           reduce using rule 57 (term -> factor .)


state 52

    (62) factor -> STRING .

    TIMES           reduce using rule 62 (factor -> STRING .)
    DIVIDE          reduce using rule 62 (factor -> STRING .)
    PLUS            reduce using rule 62 (factor -> STRING .)
    MINUS           reduce using rule 62 (factor -> STRING .)
    AND             reduce using rule 62 (factor -> STRING .)
    OR              reduce using rule 62 (factor -> STRING .)
    EQ              reduce using rule 62 (factor -> STRING .)
    NE              reduce using rule 62 (factor -> STRING .)
    LT              reduce using rule 62 (factor -> STRING .)
    GT              reduce using rule 62 (factor -> STRING .)
    LE              reduce using rule 62 (factor -> STRING .)
    GE              reduce using rule 62 (factor -> STRING .)
    LBRACE          reduce using rule 62 (factor -> STRING .)
    VAR             reduce using rule 62 (factor -> STRING .)
    VARIABLE        reduce using rule 62 (factor -> STRING .)
    FMT             reduce using rule 62 (factor -> STRING .)
    CONTINUE        reduce using rule 62 (factor -> STRING .)
    FUNC            reduce using rule 62 (factor -> STRING .)
    IF              reduce using rule 62 (factor -> STRING .)
    FOR             reduce using rule 62 (factor -> STRING .)
    TYPE            reduce using rule 62 (factor -> STRING .)
    SWITCH          reduce using rule 62 (factor -> STRING .)
    BREAK           reduce using rule 62 (factor -> STRING .)
    RETURN          reduce using rule 62 (factor -> STRING .)
    $end            reduce using rule 62 (factor -> STRING .)
    RBRACE          reduce using rule 62 (factor -> STRING .)
    CASE            reduce using rule 62 (factor -> STRING .)
    DEFAULT         reduce using rule 62 (factor -> STRING .)
    SEMICOLON       reduce using rule 62 (factor -> STRING .)
    COMMA           reduce using rule 62 (factor -> STRING .)
    RPAREN          reduce using rule 62 (factor -> STRING .)
    COLON           reduce using rule 62 (factor -> STRING .)


state 53

    (64) factor -> LPAREN . expression RPAREN
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    expression                     shift and go to state 100
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 54

    (65) factor -> make_expr .

    TIMES           reduce using rule 65 (factor -> make_expr .)
    DIVIDE          reduce using rule 65 (factor -> make_expr .)
    PLUS            reduce using rule 65 (factor -> make_expr .)
    MINUS           reduce using rule 65 (factor -> make_expr .)
    AND             reduce using rule 65 (factor -> make_expr .)
    OR              reduce using rule 65 (factor -> make_expr .)
    EQ              reduce using rule 65 (factor -> make_expr .)
    NE              reduce using rule 65 (factor -> make_expr .)
    LT              reduce using rule 65 (factor -> make_expr .)
    GT              reduce using rule 65 (factor -> make_expr .)
    LE              reduce using rule 65 (factor -> make_expr .)
    GE              reduce using rule 65 (factor -> make_expr .)
    LBRACE          reduce using rule 65 (factor -> make_expr .)
    VAR             reduce using rule 65 (factor -> make_expr .)
    VARIABLE        reduce using rule 65 (factor -> make_expr .)
    FMT             reduce using rule 65 (factor -> make_expr .)
    CONTINUE        reduce using rule 65 (factor -> make_expr .)
    FUNC            reduce using rule 65 (factor -> make_expr .)
    IF              reduce using rule 65 (factor -> make_expr .)
    FOR             reduce using rule 65 (factor -> make_expr .)
    TYPE            reduce using rule 65 (factor -> make_expr .)
    SWITCH          reduce using rule 65 (factor -> make_expr .)
    BREAK           reduce using rule 65 (factor -> make_expr .)
    RETURN          reduce using rule 65 (factor -> make_expr .)
    $end            reduce using rule 65 (factor -> make_expr .)
    RBRACE          reduce using rule 65 (factor -> make_expr .)
    CASE            reduce using rule 65 (factor -> make_expr .)
    DEFAULT         reduce using rule 65 (factor -> make_expr .)
    SEMICOLON       reduce using rule 65 (factor -> make_expr .)
    COMMA           reduce using rule 65 (factor -> make_expr .)
    RPAREN          reduce using rule 65 (factor -> make_expr .)
    COLON           reduce using rule 65 (factor -> make_expr .)


state 55

    (66) factor -> struct_instance .

    TIMES           reduce using rule 66 (factor -> struct_instance .)
    DIVIDE          reduce using rule 66 (factor -> struct_instance .)
    PLUS            reduce using rule 66 (factor -> struct_instance .)
    MINUS           reduce using rule 66 (factor -> struct_instance .)
    AND             reduce using rule 66 (factor -> struct_instance .)
    OR              reduce using rule 66 (factor -> struct_instance .)
    EQ              reduce using rule 66 (factor -> struct_instance .)
    NE              reduce using rule 66 (factor -> struct_instance .)
    LT              reduce using rule 66 (factor -> struct_instance .)
    GT              reduce using rule 66 (factor -> struct_instance .)
    LE              reduce using rule 66 (factor -> struct_instance .)
    GE              reduce using rule 66 (factor -> struct_instance .)
    LBRACE          reduce using rule 66 (factor -> struct_instance .)
    VAR             reduce using rule 66 (factor -> struct_instance .)
    VARIABLE        reduce using rule 66 (factor -> struct_instance .)
    FMT             reduce using rule 66 (factor -> struct_instance .)
    CONTINUE        reduce using rule 66 (factor -> struct_instance .)
    FUNC            reduce using rule 66 (factor -> struct_instance .)
    IF              reduce using rule 66 (factor -> struct_instance .)
    FOR             reduce using rule 66 (factor -> struct_instance .)
    TYPE            reduce using rule 66 (factor -> struct_instance .)
    SWITCH          reduce using rule 66 (factor -> struct_instance .)
    BREAK           reduce using rule 66 (factor -> struct_instance .)
    RETURN          reduce using rule 66 (factor -> struct_instance .)
    $end            reduce using rule 66 (factor -> struct_instance .)
    RBRACE          reduce using rule 66 (factor -> struct_instance .)
    CASE            reduce using rule 66 (factor -> struct_instance .)
    DEFAULT         reduce using rule 66 (factor -> struct_instance .)
    SEMICOLON       reduce using rule 66 (factor -> struct_instance .)
    COMMA           reduce using rule 66 (factor -> struct_instance .)
    RPAREN          reduce using rule 66 (factor -> struct_instance .)
    COLON           reduce using rule 66 (factor -> struct_instance .)


state 56

    (100) make_expr -> MAKE . LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> MAKE . LPAREN LBRACKET RBRACKET type RPAREN

    LPAREN          shift and go to state 101


state 57

    (73) for_stmt -> FOR expression . block
    (47) expression -> expression . PLUS term
    (48) expression -> expression . MINUS term
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NE expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LE expression
    (56) expression -> expression . GE expression
    (78) block -> . LBRACE program RBRACE

    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    EQ              shift and go to state 90
    NE              shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    GE              shift and go to state 95
    LBRACE          shift and go to state 96

    block                          shift and go to state 102

state 58

    (74) for_stmt -> FOR assignment . SEMICOLON expression SEMICOLON for_update block

    SEMICOLON       shift and go to state 103


state 59

    (29) expression -> VARIABLE .
    (30) assignment -> VARIABLE . ASSIGN expression
    (31) assignment -> VARIABLE . ASIG expression
    (63) factor -> VARIABLE .
    (86) struct_instance -> VARIABLE . LBRACE struct_fields_values RBRACE

  ! reduce/reduce conflict for PLUS resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for MINUS resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for AND resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for OR resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for EQ resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for NE resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LT resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GT resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LE resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GE resolved using rule 29 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 29 (expression -> VARIABLE .)
  ! shift/reduce conflict for LBRACE resolved as shift
    PLUS            reduce using rule 29 (expression -> VARIABLE .)
    MINUS           reduce using rule 29 (expression -> VARIABLE .)
    AND             reduce using rule 29 (expression -> VARIABLE .)
    OR              reduce using rule 29 (expression -> VARIABLE .)
    EQ              reduce using rule 29 (expression -> VARIABLE .)
    NE              reduce using rule 29 (expression -> VARIABLE .)
    LT              reduce using rule 29 (expression -> VARIABLE .)
    GT              reduce using rule 29 (expression -> VARIABLE .)
    LE              reduce using rule 29 (expression -> VARIABLE .)
    GE              reduce using rule 29 (expression -> VARIABLE .)
    ASSIGN          shift and go to state 38
    ASIG            shift and go to state 104
    TIMES           reduce using rule 63 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 63 (factor -> VARIABLE .)
    LBRACE          shift and go to state 97

  ! LBRACE          [ reduce using rule 29 (expression -> VARIABLE .) ]
  ! PLUS            [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! AND             [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! OR              [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! EQ              [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! NE              [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! LT              [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! GT              [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! LE              [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! GE              [ reduce using rule 63 (factor -> VARIABLE .) ]
  ! LBRACE          [ reduce using rule 63 (factor -> VARIABLE .) ]


state 60

    (81) struct_def -> TYPE VARIABLE . STRUCT LBRACE struct_fields RBRACE

    STRUCT          shift and go to state 105


state 61

    (90) switch_stmt -> SWITCH expression . LBRACE case_list RBRACE
    (47) expression -> expression . PLUS term
    (48) expression -> expression . MINUS term
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NE expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LE expression
    (56) expression -> expression . GE expression

    LBRACE          shift and go to state 106
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    EQ              shift and go to state 90
    NE              shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    GE              shift and go to state 95


state 62

    (91) switch_stmt -> SWITCH LBRACE . case_list RBRACE
    (92) case_list -> . case_clause
    (93) case_list -> . case_clause case_list
    (94) case_clause -> . CASE expression COLON program
    (95) case_clause -> . DEFAULT COLON program

    CASE            shift and go to state 109
    DEFAULT         shift and go to state 110

    case_list                      shift and go to state 107
    case_clause                    shift and go to state 108

state 63

    (37) return_stmt -> RETURN expression .
    (47) expression -> expression . PLUS term
    (48) expression -> expression . MINUS term
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NE expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LE expression
    (56) expression -> expression . GE expression

    VAR             reduce using rule 37 (return_stmt -> RETURN expression .)
    VARIABLE        reduce using rule 37 (return_stmt -> RETURN expression .)
    FMT             reduce using rule 37 (return_stmt -> RETURN expression .)
    CONTINUE        reduce using rule 37 (return_stmt -> RETURN expression .)
    FUNC            reduce using rule 37 (return_stmt -> RETURN expression .)
    IF              reduce using rule 37 (return_stmt -> RETURN expression .)
    FOR             reduce using rule 37 (return_stmt -> RETURN expression .)
    TYPE            reduce using rule 37 (return_stmt -> RETURN expression .)
    SWITCH          reduce using rule 37 (return_stmt -> RETURN expression .)
    BREAK           reduce using rule 37 (return_stmt -> RETURN expression .)
    RETURN          reduce using rule 37 (return_stmt -> RETURN expression .)
    $end            reduce using rule 37 (return_stmt -> RETURN expression .)
    RBRACE          reduce using rule 37 (return_stmt -> RETURN expression .)
    CASE            reduce using rule 37 (return_stmt -> RETURN expression .)
    DEFAULT         reduce using rule 37 (return_stmt -> RETURN expression .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    EQ              shift and go to state 90
    NE              shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    GE              shift and go to state 95


state 64

    (25) declaration -> VAR VARIABLE type .
    (26) declaration -> VAR VARIABLE type . ASIG expression

    VAR             reduce using rule 25 (declaration -> VAR VARIABLE type .)
    VARIABLE        reduce using rule 25 (declaration -> VAR VARIABLE type .)
    FMT             reduce using rule 25 (declaration -> VAR VARIABLE type .)
    CONTINUE        reduce using rule 25 (declaration -> VAR VARIABLE type .)
    FUNC            reduce using rule 25 (declaration -> VAR VARIABLE type .)
    IF              reduce using rule 25 (declaration -> VAR VARIABLE type .)
    FOR             reduce using rule 25 (declaration -> VAR VARIABLE type .)
    TYPE            reduce using rule 25 (declaration -> VAR VARIABLE type .)
    SWITCH          reduce using rule 25 (declaration -> VAR VARIABLE type .)
    BREAK           reduce using rule 25 (declaration -> VAR VARIABLE type .)
    RETURN          reduce using rule 25 (declaration -> VAR VARIABLE type .)
    $end            reduce using rule 25 (declaration -> VAR VARIABLE type .)
    RBRACE          reduce using rule 25 (declaration -> VAR VARIABLE type .)
    CASE            reduce using rule 25 (declaration -> VAR VARIABLE type .)
    DEFAULT         reduce using rule 25 (declaration -> VAR VARIABLE type .)
    ASIG            shift and go to state 111


state 65

    (96) map_declaration -> VAR VARIABLE MAP . LBRACKET type RBRACKET type

    LBRACKET        shift and go to state 112


state 66

    (106) array_declaration -> VAR VARIABLE LBRACKET . NUMBER RBRACKET type
    (110) slice_declaration -> VAR VARIABLE LBRACKET . RBRACKET type

    NUMBER          shift and go to state 113
    RBRACKET        shift and go to state 114


state 67

    (67) type -> INT_TYPE .

    ASIG            reduce using rule 67 (type -> INT_TYPE .)
    VAR             reduce using rule 67 (type -> INT_TYPE .)
    VARIABLE        reduce using rule 67 (type -> INT_TYPE .)
    FMT             reduce using rule 67 (type -> INT_TYPE .)
    CONTINUE        reduce using rule 67 (type -> INT_TYPE .)
    FUNC            reduce using rule 67 (type -> INT_TYPE .)
    IF              reduce using rule 67 (type -> INT_TYPE .)
    FOR             reduce using rule 67 (type -> INT_TYPE .)
    TYPE            reduce using rule 67 (type -> INT_TYPE .)
    SWITCH          reduce using rule 67 (type -> INT_TYPE .)
    BREAK           reduce using rule 67 (type -> INT_TYPE .)
    RETURN          reduce using rule 67 (type -> INT_TYPE .)
    $end            reduce using rule 67 (type -> INT_TYPE .)
    RBRACE          reduce using rule 67 (type -> INT_TYPE .)
    CASE            reduce using rule 67 (type -> INT_TYPE .)
    DEFAULT         reduce using rule 67 (type -> INT_TYPE .)
    RBRACKET        reduce using rule 67 (type -> INT_TYPE .)
    LBRACE          reduce using rule 67 (type -> INT_TYPE .)
    COMMA           reduce using rule 67 (type -> INT_TYPE .)
    RPAREN          reduce using rule 67 (type -> INT_TYPE .)
    INT_TYPE        reduce using rule 67 (type -> INT_TYPE .)
    FLOAT64_TYPE    reduce using rule 67 (type -> INT_TYPE .)
    STRING_TYPE     reduce using rule 67 (type -> INT_TYPE .)
    BOOL_TYPE       reduce using rule 67 (type -> INT_TYPE .)


state 68

    (68) type -> FLOAT64_TYPE .

    ASIG            reduce using rule 68 (type -> FLOAT64_TYPE .)
    VAR             reduce using rule 68 (type -> FLOAT64_TYPE .)
    VARIABLE        reduce using rule 68 (type -> FLOAT64_TYPE .)
    FMT             reduce using rule 68 (type -> FLOAT64_TYPE .)
    CONTINUE        reduce using rule 68 (type -> FLOAT64_TYPE .)
    FUNC            reduce using rule 68 (type -> FLOAT64_TYPE .)
    IF              reduce using rule 68 (type -> FLOAT64_TYPE .)
    FOR             reduce using rule 68 (type -> FLOAT64_TYPE .)
    TYPE            reduce using rule 68 (type -> FLOAT64_TYPE .)
    SWITCH          reduce using rule 68 (type -> FLOAT64_TYPE .)
    BREAK           reduce using rule 68 (type -> FLOAT64_TYPE .)
    RETURN          reduce using rule 68 (type -> FLOAT64_TYPE .)
    $end            reduce using rule 68 (type -> FLOAT64_TYPE .)
    RBRACE          reduce using rule 68 (type -> FLOAT64_TYPE .)
    CASE            reduce using rule 68 (type -> FLOAT64_TYPE .)
    DEFAULT         reduce using rule 68 (type -> FLOAT64_TYPE .)
    RBRACKET        reduce using rule 68 (type -> FLOAT64_TYPE .)
    LBRACE          reduce using rule 68 (type -> FLOAT64_TYPE .)
    COMMA           reduce using rule 68 (type -> FLOAT64_TYPE .)
    RPAREN          reduce using rule 68 (type -> FLOAT64_TYPE .)
    INT_TYPE        reduce using rule 68 (type -> FLOAT64_TYPE .)
    FLOAT64_TYPE    reduce using rule 68 (type -> FLOAT64_TYPE .)
    STRING_TYPE     reduce using rule 68 (type -> FLOAT64_TYPE .)
    BOOL_TYPE       reduce using rule 68 (type -> FLOAT64_TYPE .)


state 69

    (69) type -> STRING_TYPE .

    ASIG            reduce using rule 69 (type -> STRING_TYPE .)
    VAR             reduce using rule 69 (type -> STRING_TYPE .)
    VARIABLE        reduce using rule 69 (type -> STRING_TYPE .)
    FMT             reduce using rule 69 (type -> STRING_TYPE .)
    CONTINUE        reduce using rule 69 (type -> STRING_TYPE .)
    FUNC            reduce using rule 69 (type -> STRING_TYPE .)
    IF              reduce using rule 69 (type -> STRING_TYPE .)
    FOR             reduce using rule 69 (type -> STRING_TYPE .)
    TYPE            reduce using rule 69 (type -> STRING_TYPE .)
    SWITCH          reduce using rule 69 (type -> STRING_TYPE .)
    BREAK           reduce using rule 69 (type -> STRING_TYPE .)
    RETURN          reduce using rule 69 (type -> STRING_TYPE .)
    $end            reduce using rule 69 (type -> STRING_TYPE .)
    RBRACE          reduce using rule 69 (type -> STRING_TYPE .)
    CASE            reduce using rule 69 (type -> STRING_TYPE .)
    DEFAULT         reduce using rule 69 (type -> STRING_TYPE .)
    RBRACKET        reduce using rule 69 (type -> STRING_TYPE .)
    LBRACE          reduce using rule 69 (type -> STRING_TYPE .)
    COMMA           reduce using rule 69 (type -> STRING_TYPE .)
    RPAREN          reduce using rule 69 (type -> STRING_TYPE .)
    INT_TYPE        reduce using rule 69 (type -> STRING_TYPE .)
    FLOAT64_TYPE    reduce using rule 69 (type -> STRING_TYPE .)
    STRING_TYPE     reduce using rule 69 (type -> STRING_TYPE .)
    BOOL_TYPE       reduce using rule 69 (type -> STRING_TYPE .)


state 70

    (70) type -> BOOL_TYPE .

    ASIG            reduce using rule 70 (type -> BOOL_TYPE .)
    VAR             reduce using rule 70 (type -> BOOL_TYPE .)
    VARIABLE        reduce using rule 70 (type -> BOOL_TYPE .)
    FMT             reduce using rule 70 (type -> BOOL_TYPE .)
    CONTINUE        reduce using rule 70 (type -> BOOL_TYPE .)
    FUNC            reduce using rule 70 (type -> BOOL_TYPE .)
    IF              reduce using rule 70 (type -> BOOL_TYPE .)
    FOR             reduce using rule 70 (type -> BOOL_TYPE .)
    TYPE            reduce using rule 70 (type -> BOOL_TYPE .)
    SWITCH          reduce using rule 70 (type -> BOOL_TYPE .)
    BREAK           reduce using rule 70 (type -> BOOL_TYPE .)
    RETURN          reduce using rule 70 (type -> BOOL_TYPE .)
    $end            reduce using rule 70 (type -> BOOL_TYPE .)
    RBRACE          reduce using rule 70 (type -> BOOL_TYPE .)
    CASE            reduce using rule 70 (type -> BOOL_TYPE .)
    DEFAULT         reduce using rule 70 (type -> BOOL_TYPE .)
    RBRACKET        reduce using rule 70 (type -> BOOL_TYPE .)
    LBRACE          reduce using rule 70 (type -> BOOL_TYPE .)
    COMMA           reduce using rule 70 (type -> BOOL_TYPE .)
    RPAREN          reduce using rule 70 (type -> BOOL_TYPE .)
    INT_TYPE        reduce using rule 70 (type -> BOOL_TYPE .)
    FLOAT64_TYPE    reduce using rule 70 (type -> BOOL_TYPE .)
    STRING_TYPE     reduce using rule 70 (type -> BOOL_TYPE .)
    BOOL_TYPE       reduce using rule 70 (type -> BOOL_TYPE .)


state 71

    (30) assignment -> VARIABLE ASSIGN expression .
    (47) expression -> expression . PLUS term
    (48) expression -> expression . MINUS term
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NE expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LE expression
    (56) expression -> expression . GE expression

    VAR             reduce using rule 30 (assignment -> VARIABLE ASSIGN expression .)
    VARIABLE        reduce using rule 30 (assignment -> VARIABLE ASSIGN expression .)
    FMT             reduce using rule 30 (assignment -> VARIABLE ASSIGN expression .)
    CONTINUE        reduce using rule 30 (assignment -> VARIABLE ASSIGN expression .)
    FUNC            reduce using rule 30 (assignment -> VARIABLE ASSIGN expression .)
    IF              reduce using rule 30 (assignment -> VARIABLE ASSIGN expression .)
    FOR             reduce using rule 30 (assignment -> VARIABLE ASSIGN expression .)
    TYPE            reduce using rule 30 (assignment -> VARIABLE ASSIGN expression .)
    SWITCH          reduce using rule 30 (assignment -> VARIABLE ASSIGN expression .)
    BREAK           reduce using rule 30 (assignment -> VARIABLE ASSIGN expression .)
    RETURN          reduce using rule 30 (assignment -> VARIABLE ASSIGN expression .)
    $end            reduce using rule 30 (assignment -> VARIABLE ASSIGN expression .)
    RBRACE          reduce using rule 30 (assignment -> VARIABLE ASSIGN expression .)
    CASE            reduce using rule 30 (assignment -> VARIABLE ASSIGN expression .)
    DEFAULT         reduce using rule 30 (assignment -> VARIABLE ASSIGN expression .)
    SEMICOLON       reduce using rule 30 (assignment -> VARIABLE ASSIGN expression .)
    LBRACE          reduce using rule 30 (assignment -> VARIABLE ASSIGN expression .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    EQ              shift and go to state 90
    NE              shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    GE              shift and go to state 95


state 72

    (31) assignment -> VARIABLE ASIG expression .
    (47) expression -> expression . PLUS term
    (48) expression -> expression . MINUS term
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NE expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LE expression
    (56) expression -> expression . GE expression

    VAR             reduce using rule 31 (assignment -> VARIABLE ASIG expression .)
    VARIABLE        reduce using rule 31 (assignment -> VARIABLE ASIG expression .)
    FMT             reduce using rule 31 (assignment -> VARIABLE ASIG expression .)
    CONTINUE        reduce using rule 31 (assignment -> VARIABLE ASIG expression .)
    FUNC            reduce using rule 31 (assignment -> VARIABLE ASIG expression .)
    IF              reduce using rule 31 (assignment -> VARIABLE ASIG expression .)
    FOR             reduce using rule 31 (assignment -> VARIABLE ASIG expression .)
    TYPE            reduce using rule 31 (assignment -> VARIABLE ASIG expression .)
    SWITCH          reduce using rule 31 (assignment -> VARIABLE ASIG expression .)
    BREAK           reduce using rule 31 (assignment -> VARIABLE ASIG expression .)
    RETURN          reduce using rule 31 (assignment -> VARIABLE ASIG expression .)
    $end            reduce using rule 31 (assignment -> VARIABLE ASIG expression .)
    RBRACE          reduce using rule 31 (assignment -> VARIABLE ASIG expression .)
    CASE            reduce using rule 31 (assignment -> VARIABLE ASIG expression .)
    DEFAULT         reduce using rule 31 (assignment -> VARIABLE ASIG expression .)
    SEMICOLON       reduce using rule 31 (assignment -> VARIABLE ASIG expression .)
    LBRACE          reduce using rule 31 (assignment -> VARIABLE ASIG expression .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    EQ              shift and go to state 90
    NE              shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    GE              shift and go to state 95


state 73

    (97) map_declaration -> VARIABLE ASIG MAP . LBRACKET type RBRACKET type
    (102) map_declaration_values -> VARIABLE ASIG MAP . LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE

    LBRACKET        shift and go to state 115


state 74

    (107) array_declaration -> VARIABLE ASIG LBRACKET . NUMBER RBRACKET type LBRACE array_values RBRACE
    (111) slice_declaration -> VARIABLE ASIG LBRACKET . RBRACKET type LBRACE slice_values RBRACE

    NUMBER          shift and go to state 116
    RBRACKET        shift and go to state 117


state 75

    (98) make_stmt -> VARIABLE ASIG MAKE . LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (99) make_stmt -> VARIABLE ASIG MAKE . LPAREN LBRACKET RBRACKET type RPAREN
    (100) make_expr -> MAKE . LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> MAKE . LPAREN LBRACKET RBRACKET type RPAREN

    LPAREN          shift and go to state 118


state 76

    (114) new_stmt -> VARIABLE ASIG NEW . LPAREN VARIABLE RPAREN

    LPAREN          shift and go to state 119


state 77

    (39) func_call -> VARIABLE LPAREN arg_list . RPAREN

    RPAREN          shift and go to state 120


state 78

    (40) func_call -> VARIABLE LPAREN RPAREN .

    VAR             reduce using rule 40 (func_call -> VARIABLE LPAREN RPAREN .)
    VARIABLE        reduce using rule 40 (func_call -> VARIABLE LPAREN RPAREN .)
    FMT             reduce using rule 40 (func_call -> VARIABLE LPAREN RPAREN .)
    CONTINUE        reduce using rule 40 (func_call -> VARIABLE LPAREN RPAREN .)
    FUNC            reduce using rule 40 (func_call -> VARIABLE LPAREN RPAREN .)
    IF              reduce using rule 40 (func_call -> VARIABLE LPAREN RPAREN .)
    FOR             reduce using rule 40 (func_call -> VARIABLE LPAREN RPAREN .)
    TYPE            reduce using rule 40 (func_call -> VARIABLE LPAREN RPAREN .)
    SWITCH          reduce using rule 40 (func_call -> VARIABLE LPAREN RPAREN .)
    BREAK           reduce using rule 40 (func_call -> VARIABLE LPAREN RPAREN .)
    RETURN          reduce using rule 40 (func_call -> VARIABLE LPAREN RPAREN .)
    $end            reduce using rule 40 (func_call -> VARIABLE LPAREN RPAREN .)
    RBRACE          reduce using rule 40 (func_call -> VARIABLE LPAREN RPAREN .)
    CASE            reduce using rule 40 (func_call -> VARIABLE LPAREN RPAREN .)
    DEFAULT         reduce using rule 40 (func_call -> VARIABLE LPAREN RPAREN .)


state 79

    (44) arg_list -> expression .
    (45) arg_list -> expression . COMMA arg_list
    (47) expression -> expression . PLUS term
    (48) expression -> expression . MINUS term
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NE expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LE expression
    (56) expression -> expression . GE expression

    RPAREN          reduce using rule 44 (arg_list -> expression .)
    COMMA           shift and go to state 121
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    EQ              shift and go to state 90
    NE              shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    GE              shift and go to state 95


state 80

    (32) print_stmt -> FMT DOT PRINTF . LPAREN STRING COMMA expression RPAREN

    LPAREN          shift and go to state 122


state 81

    (33) print_stmt -> FMT DOT PRINTLN . LPAREN expression RPAREN

    LPAREN          shift and go to state 123


state 82

    (34) input_stmt -> FMT DOT SCANLN . LPAREN AMPER VARIABLE RPAREN

    LPAREN          shift and go to state 124


state 83

    (79) struct_method -> FUNC LPAREN VARIABLE . VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (80) struct_method -> FUNC LPAREN VARIABLE . VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE

    VARIABLE        shift and go to state 125


state 84

    (35) func_def -> FUNC VARIABLE LPAREN . param_list RPAREN type LBRACE program RBRACE
    (36) func_def -> FUNC VARIABLE LPAREN . RPAREN type LBRACE program RBRACE
    (38) func_no_params -> FUNC VARIABLE LPAREN . RPAREN block
    (41) param_list -> . param
    (42) param_list -> . param COMMA param_list
    (43) param -> . VARIABLE type

    RPAREN          shift and go to state 128
    VARIABLE        shift and go to state 126

    param_list                     shift and go to state 127
    param                          shift and go to state 129

state 85

    (71) if_stmt -> IF expression block .
    (72) if_stmt -> IF expression block . ELSE block

    VAR             reduce using rule 71 (if_stmt -> IF expression block .)
    VARIABLE        reduce using rule 71 (if_stmt -> IF expression block .)
    FMT             reduce using rule 71 (if_stmt -> IF expression block .)
    CONTINUE        reduce using rule 71 (if_stmt -> IF expression block .)
    FUNC            reduce using rule 71 (if_stmt -> IF expression block .)
    IF              reduce using rule 71 (if_stmt -> IF expression block .)
    FOR             reduce using rule 71 (if_stmt -> IF expression block .)
    TYPE            reduce using rule 71 (if_stmt -> IF expression block .)
    SWITCH          reduce using rule 71 (if_stmt -> IF expression block .)
    BREAK           reduce using rule 71 (if_stmt -> IF expression block .)
    RETURN          reduce using rule 71 (if_stmt -> IF expression block .)
    $end            reduce using rule 71 (if_stmt -> IF expression block .)
    RBRACE          reduce using rule 71 (if_stmt -> IF expression block .)
    CASE            reduce using rule 71 (if_stmt -> IF expression block .)
    DEFAULT         reduce using rule 71 (if_stmt -> IF expression block .)
    ELSE            shift and go to state 130


state 86

    (47) expression -> expression PLUS . term
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 132
    FLOAT           shift and go to state 133
    STRING          shift and go to state 52
    VARIABLE        shift and go to state 134
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    term                           shift and go to state 131
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 87

    (48) expression -> expression MINUS . term
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 132
    FLOAT           shift and go to state 133
    STRING          shift and go to state 52
    VARIABLE        shift and go to state 134
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    term                           shift and go to state 135
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 88

    (49) expression -> expression AND . expression
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    expression                     shift and go to state 136
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 89

    (50) expression -> expression OR . expression
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    expression                     shift and go to state 137
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 90

    (51) expression -> expression EQ . expression
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    expression                     shift and go to state 138
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 91

    (52) expression -> expression NE . expression
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    expression                     shift and go to state 139
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 92

    (53) expression -> expression LT . expression
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    expression                     shift and go to state 140
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 93

    (54) expression -> expression GT . expression
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    expression                     shift and go to state 141
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 94

    (55) expression -> expression LE . expression
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    expression                     shift and go to state 142
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 95

    (56) expression -> expression GE . expression
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    expression                     shift and go to state 143
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 96

    (78) block -> LBRACE . program RBRACE
    (1) program -> . statement
    (2) program -> . statement program
    (3) statement -> . declaration
    (4) statement -> . assignment
    (5) statement -> . print_stmt
    (6) statement -> . input_stmt
    (7) statement -> . continue_stmt
    (8) statement -> . struct_method
    (9) statement -> . func_def
    (10) statement -> . func_no_params
    (11) statement -> . func_call
    (12) statement -> . if_stmt
    (13) statement -> . for_stmt
    (14) statement -> . struct_def
    (15) statement -> . switch_stmt
    (16) statement -> . map_declaration
    (17) statement -> . map_declaration_values
    (18) statement -> . array_declaration
    (19) statement -> . slice_declaration
    (20) statement -> . make_stmt
    (21) statement -> . new_stmt
    (22) statement -> . break_stmt
    (23) statement -> . increment_stmt
    (24) statement -> . return_stmt
    (25) declaration -> . VAR VARIABLE type
    (26) declaration -> . VAR VARIABLE type ASIG expression
    (30) assignment -> . VARIABLE ASSIGN expression
    (31) assignment -> . VARIABLE ASIG expression
    (32) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (33) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (34) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (75) continue_stmt -> . CONTINUE
    (79) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (80) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (35) func_def -> . FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (36) func_def -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (38) func_no_params -> . FUNC VARIABLE LPAREN RPAREN block
    (39) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (40) func_call -> . VARIABLE LPAREN RPAREN
    (71) if_stmt -> . IF expression block
    (72) if_stmt -> . IF expression block ELSE block
    (73) for_stmt -> . FOR expression block
    (74) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (81) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (90) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (91) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (96) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (97) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (102) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (106) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (107) array_declaration -> . VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (110) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (111) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (98) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (99) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (114) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (115) break_stmt -> . BREAK
    (116) increment_stmt -> . VARIABLE INCREMENT
    (117) increment_stmt -> . VARIABLE DECREMENT
    (37) return_stmt -> . RETURN expression

    VAR             shift and go to state 25
    VARIABLE        shift and go to state 26
    FMT             shift and go to state 27
    CONTINUE        shift and go to state 28
    FUNC            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    TYPE            shift and go to state 32
    SWITCH          shift and go to state 33
    BREAK           shift and go to state 34
    RETURN          shift and go to state 35

    program                        shift and go to state 144
    statement                      shift and go to state 2
    declaration                    shift and go to state 3
    assignment                     shift and go to state 4
    print_stmt                     shift and go to state 5
    input_stmt                     shift and go to state 6
    continue_stmt                  shift and go to state 7
    struct_method                  shift and go to state 8
    func_def                       shift and go to state 9
    func_no_params                 shift and go to state 10
    func_call                      shift and go to state 11
    if_stmt                        shift and go to state 12
    for_stmt                       shift and go to state 13
    struct_def                     shift and go to state 14
    switch_stmt                    shift and go to state 15
    map_declaration                shift and go to state 16
    map_declaration_values         shift and go to state 17
    array_declaration              shift and go to state 18
    slice_declaration              shift and go to state 19
    make_stmt                      shift and go to state 20
    new_stmt                       shift and go to state 21
    break_stmt                     shift and go to state 22
    increment_stmt                 shift and go to state 23
    return_stmt                    shift and go to state 24

state 97

    (86) struct_instance -> VARIABLE LBRACE . struct_fields_values RBRACE
    (87) struct_fields_values -> . field_value
    (88) struct_fields_values -> . field_value COMMA struct_fields_values
    (89) field_value -> . VARIABLE COLON expression

    VARIABLE        shift and go to state 145

    struct_fields_values           shift and go to state 146
    field_value                    shift and go to state 147

state 98

    (58) term -> term TIMES . factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 132
    FLOAT           shift and go to state 133
    STRING          shift and go to state 52
    VARIABLE        shift and go to state 134
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    factor                         shift and go to state 148
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 99

    (59) term -> term DIVIDE . factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 132
    FLOAT           shift and go to state 133
    STRING          shift and go to state 52
    VARIABLE        shift and go to state 134
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    factor                         shift and go to state 149
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 100

    (64) factor -> LPAREN expression . RPAREN
    (47) expression -> expression . PLUS term
    (48) expression -> expression . MINUS term
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NE expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LE expression
    (56) expression -> expression . GE expression

    RPAREN          shift and go to state 150
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    EQ              shift and go to state 90
    NE              shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    GE              shift and go to state 95


state 101

    (100) make_expr -> MAKE LPAREN . MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> MAKE LPAREN . LBRACKET RBRACKET type RPAREN

    MAP             shift and go to state 151
    LBRACKET        shift and go to state 152


state 102

    (73) for_stmt -> FOR expression block .

    VAR             reduce using rule 73 (for_stmt -> FOR expression block .)
    VARIABLE        reduce using rule 73 (for_stmt -> FOR expression block .)
    FMT             reduce using rule 73 (for_stmt -> FOR expression block .)
    CONTINUE        reduce using rule 73 (for_stmt -> FOR expression block .)
    FUNC            reduce using rule 73 (for_stmt -> FOR expression block .)
    IF              reduce using rule 73 (for_stmt -> FOR expression block .)
    FOR             reduce using rule 73 (for_stmt -> FOR expression block .)
    TYPE            reduce using rule 73 (for_stmt -> FOR expression block .)
    SWITCH          reduce using rule 73 (for_stmt -> FOR expression block .)
    BREAK           reduce using rule 73 (for_stmt -> FOR expression block .)
    RETURN          reduce using rule 73 (for_stmt -> FOR expression block .)
    $end            reduce using rule 73 (for_stmt -> FOR expression block .)
    RBRACE          reduce using rule 73 (for_stmt -> FOR expression block .)
    CASE            reduce using rule 73 (for_stmt -> FOR expression block .)
    DEFAULT         reduce using rule 73 (for_stmt -> FOR expression block .)


state 103

    (74) for_stmt -> FOR assignment SEMICOLON . expression SEMICOLON for_update block
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    expression                     shift and go to state 153
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 104

    (31) assignment -> VARIABLE ASIG . expression
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    expression                     shift and go to state 72
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 105

    (81) struct_def -> TYPE VARIABLE STRUCT . LBRACE struct_fields RBRACE

    LBRACE          shift and go to state 154


state 106

    (90) switch_stmt -> SWITCH expression LBRACE . case_list RBRACE
    (92) case_list -> . case_clause
    (93) case_list -> . case_clause case_list
    (94) case_clause -> . CASE expression COLON program
    (95) case_clause -> . DEFAULT COLON program

    CASE            shift and go to state 109
    DEFAULT         shift and go to state 110

    case_list                      shift and go to state 155
    case_clause                    shift and go to state 108

state 107

    (91) switch_stmt -> SWITCH LBRACE case_list . RBRACE

    RBRACE          shift and go to state 156


state 108

    (92) case_list -> case_clause .
    (93) case_list -> case_clause . case_list
    (92) case_list -> . case_clause
    (93) case_list -> . case_clause case_list
    (94) case_clause -> . CASE expression COLON program
    (95) case_clause -> . DEFAULT COLON program

    RBRACE          reduce using rule 92 (case_list -> case_clause .)
    CASE            shift and go to state 109
    DEFAULT         shift and go to state 110

    case_clause                    shift and go to state 108
    case_list                      shift and go to state 157

state 109

    (94) case_clause -> CASE . expression COLON program
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    expression                     shift and go to state 158
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 110

    (95) case_clause -> DEFAULT . COLON program

    COLON           shift and go to state 159


state 111

    (26) declaration -> VAR VARIABLE type ASIG . expression
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    expression                     shift and go to state 160
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 112

    (96) map_declaration -> VAR VARIABLE MAP LBRACKET . type RBRACKET type
    (67) type -> . INT_TYPE
    (68) type -> . FLOAT64_TYPE
    (69) type -> . STRING_TYPE
    (70) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 67
    FLOAT64_TYPE    shift and go to state 68
    STRING_TYPE     shift and go to state 69
    BOOL_TYPE       shift and go to state 70

    type                           shift and go to state 161

state 113

    (106) array_declaration -> VAR VARIABLE LBRACKET NUMBER . RBRACKET type

    RBRACKET        shift and go to state 162


state 114

    (110) slice_declaration -> VAR VARIABLE LBRACKET RBRACKET . type
    (67) type -> . INT_TYPE
    (68) type -> . FLOAT64_TYPE
    (69) type -> . STRING_TYPE
    (70) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 67
    FLOAT64_TYPE    shift and go to state 68
    STRING_TYPE     shift and go to state 69
    BOOL_TYPE       shift and go to state 70

    type                           shift and go to state 163

state 115

    (97) map_declaration -> VARIABLE ASIG MAP LBRACKET . type RBRACKET type
    (102) map_declaration_values -> VARIABLE ASIG MAP LBRACKET . type RBRACKET type LBRACE map_kv_pairs RBRACE
    (67) type -> . INT_TYPE
    (68) type -> . FLOAT64_TYPE
    (69) type -> . STRING_TYPE
    (70) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 67
    FLOAT64_TYPE    shift and go to state 68
    STRING_TYPE     shift and go to state 69
    BOOL_TYPE       shift and go to state 70

    type                           shift and go to state 164

state 116

    (107) array_declaration -> VARIABLE ASIG LBRACKET NUMBER . RBRACKET type LBRACE array_values RBRACE

    RBRACKET        shift and go to state 165


state 117

    (111) slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET . type LBRACE slice_values RBRACE
    (67) type -> . INT_TYPE
    (68) type -> . FLOAT64_TYPE
    (69) type -> . STRING_TYPE
    (70) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 67
    FLOAT64_TYPE    shift and go to state 68
    STRING_TYPE     shift and go to state 69
    BOOL_TYPE       shift and go to state 70

    type                           shift and go to state 166

state 118

    (98) make_stmt -> VARIABLE ASIG MAKE LPAREN . MAP LBRACKET type RBRACKET type RPAREN
    (99) make_stmt -> VARIABLE ASIG MAKE LPAREN . LBRACKET RBRACKET type RPAREN
    (100) make_expr -> MAKE LPAREN . MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> MAKE LPAREN . LBRACKET RBRACKET type RPAREN

    MAP             shift and go to state 167
    LBRACKET        shift and go to state 168


state 119

    (114) new_stmt -> VARIABLE ASIG NEW LPAREN . VARIABLE RPAREN

    VARIABLE        shift and go to state 169


state 120

    (39) func_call -> VARIABLE LPAREN arg_list RPAREN .

    VAR             reduce using rule 39 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    VARIABLE        reduce using rule 39 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    FMT             reduce using rule 39 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    CONTINUE        reduce using rule 39 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    FUNC            reduce using rule 39 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    IF              reduce using rule 39 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    FOR             reduce using rule 39 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    TYPE            reduce using rule 39 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    SWITCH          reduce using rule 39 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    BREAK           reduce using rule 39 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    RETURN          reduce using rule 39 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    $end            reduce using rule 39 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    RBRACE          reduce using rule 39 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    CASE            reduce using rule 39 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    DEFAULT         reduce using rule 39 (func_call -> VARIABLE LPAREN arg_list RPAREN .)


state 121

    (45) arg_list -> expression COMMA . arg_list
    (44) arg_list -> . expression
    (45) arg_list -> . expression COMMA arg_list
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    expression                     shift and go to state 79
    arg_list                       shift and go to state 170
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 122

    (32) print_stmt -> FMT DOT PRINTF LPAREN . STRING COMMA expression RPAREN

    STRING          shift and go to state 171


state 123

    (33) print_stmt -> FMT DOT PRINTLN LPAREN . expression RPAREN
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    expression                     shift and go to state 172
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 124

    (34) input_stmt -> FMT DOT SCANLN LPAREN . AMPER VARIABLE RPAREN

    AMPER           shift and go to state 173


state 125

    (79) struct_method -> FUNC LPAREN VARIABLE VARIABLE . RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (80) struct_method -> FUNC LPAREN VARIABLE VARIABLE . RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE

    RPAREN          shift and go to state 174


state 126

    (43) param -> VARIABLE . type
    (67) type -> . INT_TYPE
    (68) type -> . FLOAT64_TYPE
    (69) type -> . STRING_TYPE
    (70) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 67
    FLOAT64_TYPE    shift and go to state 68
    STRING_TYPE     shift and go to state 69
    BOOL_TYPE       shift and go to state 70

    type                           shift and go to state 175

state 127

    (35) func_def -> FUNC VARIABLE LPAREN param_list . RPAREN type LBRACE program RBRACE

    RPAREN          shift and go to state 176


state 128

    (36) func_def -> FUNC VARIABLE LPAREN RPAREN . type LBRACE program RBRACE
    (38) func_no_params -> FUNC VARIABLE LPAREN RPAREN . block
    (67) type -> . INT_TYPE
    (68) type -> . FLOAT64_TYPE
    (69) type -> . STRING_TYPE
    (70) type -> . BOOL_TYPE
    (78) block -> . LBRACE program RBRACE

    INT_TYPE        shift and go to state 67
    FLOAT64_TYPE    shift and go to state 68
    STRING_TYPE     shift and go to state 69
    BOOL_TYPE       shift and go to state 70
    LBRACE          shift and go to state 96

    type                           shift and go to state 177
    block                          shift and go to state 178

state 129

    (41) param_list -> param .
    (42) param_list -> param . COMMA param_list

    RPAREN          reduce using rule 41 (param_list -> param .)
    COMMA           shift and go to state 179


state 130

    (72) if_stmt -> IF expression block ELSE . block
    (78) block -> . LBRACE program RBRACE

    LBRACE          shift and go to state 96

    block                          shift and go to state 180

state 131

    (47) expression -> expression PLUS term .
    (58) term -> term . TIMES factor
    (59) term -> term . DIVIDE factor

    PLUS            reduce using rule 47 (expression -> expression PLUS term .)
    MINUS           reduce using rule 47 (expression -> expression PLUS term .)
    AND             reduce using rule 47 (expression -> expression PLUS term .)
    OR              reduce using rule 47 (expression -> expression PLUS term .)
    EQ              reduce using rule 47 (expression -> expression PLUS term .)
    NE              reduce using rule 47 (expression -> expression PLUS term .)
    LT              reduce using rule 47 (expression -> expression PLUS term .)
    GT              reduce using rule 47 (expression -> expression PLUS term .)
    LE              reduce using rule 47 (expression -> expression PLUS term .)
    GE              reduce using rule 47 (expression -> expression PLUS term .)
    LBRACE          reduce using rule 47 (expression -> expression PLUS term .)
    VAR             reduce using rule 47 (expression -> expression PLUS term .)
    VARIABLE        reduce using rule 47 (expression -> expression PLUS term .)
    FMT             reduce using rule 47 (expression -> expression PLUS term .)
    CONTINUE        reduce using rule 47 (expression -> expression PLUS term .)
    FUNC            reduce using rule 47 (expression -> expression PLUS term .)
    IF              reduce using rule 47 (expression -> expression PLUS term .)
    FOR             reduce using rule 47 (expression -> expression PLUS term .)
    TYPE            reduce using rule 47 (expression -> expression PLUS term .)
    SWITCH          reduce using rule 47 (expression -> expression PLUS term .)
    BREAK           reduce using rule 47 (expression -> expression PLUS term .)
    RETURN          reduce using rule 47 (expression -> expression PLUS term .)
    $end            reduce using rule 47 (expression -> expression PLUS term .)
    RBRACE          reduce using rule 47 (expression -> expression PLUS term .)
    CASE            reduce using rule 47 (expression -> expression PLUS term .)
    DEFAULT         reduce using rule 47 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 47 (expression -> expression PLUS term .)
    COMMA           reduce using rule 47 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 47 (expression -> expression PLUS term .)
    COLON           reduce using rule 47 (expression -> expression PLUS term .)
    TIMES           shift and go to state 98
    DIVIDE          shift and go to state 99


state 132

    (60) factor -> NUMBER .

    TIMES           reduce using rule 60 (factor -> NUMBER .)
    DIVIDE          reduce using rule 60 (factor -> NUMBER .)
    PLUS            reduce using rule 60 (factor -> NUMBER .)
    MINUS           reduce using rule 60 (factor -> NUMBER .)
    AND             reduce using rule 60 (factor -> NUMBER .)
    OR              reduce using rule 60 (factor -> NUMBER .)
    EQ              reduce using rule 60 (factor -> NUMBER .)
    NE              reduce using rule 60 (factor -> NUMBER .)
    LT              reduce using rule 60 (factor -> NUMBER .)
    GT              reduce using rule 60 (factor -> NUMBER .)
    LE              reduce using rule 60 (factor -> NUMBER .)
    GE              reduce using rule 60 (factor -> NUMBER .)
    LBRACE          reduce using rule 60 (factor -> NUMBER .)
    VAR             reduce using rule 60 (factor -> NUMBER .)
    VARIABLE        reduce using rule 60 (factor -> NUMBER .)
    FMT             reduce using rule 60 (factor -> NUMBER .)
    CONTINUE        reduce using rule 60 (factor -> NUMBER .)
    FUNC            reduce using rule 60 (factor -> NUMBER .)
    IF              reduce using rule 60 (factor -> NUMBER .)
    FOR             reduce using rule 60 (factor -> NUMBER .)
    TYPE            reduce using rule 60 (factor -> NUMBER .)
    SWITCH          reduce using rule 60 (factor -> NUMBER .)
    BREAK           reduce using rule 60 (factor -> NUMBER .)
    RETURN          reduce using rule 60 (factor -> NUMBER .)
    $end            reduce using rule 60 (factor -> NUMBER .)
    RBRACE          reduce using rule 60 (factor -> NUMBER .)
    CASE            reduce using rule 60 (factor -> NUMBER .)
    DEFAULT         reduce using rule 60 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 60 (factor -> NUMBER .)
    COMMA           reduce using rule 60 (factor -> NUMBER .)
    RPAREN          reduce using rule 60 (factor -> NUMBER .)
    COLON           reduce using rule 60 (factor -> NUMBER .)


state 133

    (61) factor -> FLOAT .

    TIMES           reduce using rule 61 (factor -> FLOAT .)
    DIVIDE          reduce using rule 61 (factor -> FLOAT .)
    PLUS            reduce using rule 61 (factor -> FLOAT .)
    MINUS           reduce using rule 61 (factor -> FLOAT .)
    AND             reduce using rule 61 (factor -> FLOAT .)
    OR              reduce using rule 61 (factor -> FLOAT .)
    EQ              reduce using rule 61 (factor -> FLOAT .)
    NE              reduce using rule 61 (factor -> FLOAT .)
    LT              reduce using rule 61 (factor -> FLOAT .)
    GT              reduce using rule 61 (factor -> FLOAT .)
    LE              reduce using rule 61 (factor -> FLOAT .)
    GE              reduce using rule 61 (factor -> FLOAT .)
    LBRACE          reduce using rule 61 (factor -> FLOAT .)
    VAR             reduce using rule 61 (factor -> FLOAT .)
    VARIABLE        reduce using rule 61 (factor -> FLOAT .)
    FMT             reduce using rule 61 (factor -> FLOAT .)
    CONTINUE        reduce using rule 61 (factor -> FLOAT .)
    FUNC            reduce using rule 61 (factor -> FLOAT .)
    IF              reduce using rule 61 (factor -> FLOAT .)
    FOR             reduce using rule 61 (factor -> FLOAT .)
    TYPE            reduce using rule 61 (factor -> FLOAT .)
    SWITCH          reduce using rule 61 (factor -> FLOAT .)
    BREAK           reduce using rule 61 (factor -> FLOAT .)
    RETURN          reduce using rule 61 (factor -> FLOAT .)
    $end            reduce using rule 61 (factor -> FLOAT .)
    RBRACE          reduce using rule 61 (factor -> FLOAT .)
    CASE            reduce using rule 61 (factor -> FLOAT .)
    DEFAULT         reduce using rule 61 (factor -> FLOAT .)
    SEMICOLON       reduce using rule 61 (factor -> FLOAT .)
    COMMA           reduce using rule 61 (factor -> FLOAT .)
    RPAREN          reduce using rule 61 (factor -> FLOAT .)
    COLON           reduce using rule 61 (factor -> FLOAT .)


state 134

    (63) factor -> VARIABLE .
    (86) struct_instance -> VARIABLE . LBRACE struct_fields_values RBRACE

  ! shift/reduce conflict for LBRACE resolved as shift
    TIMES           reduce using rule 63 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 63 (factor -> VARIABLE .)
    PLUS            reduce using rule 63 (factor -> VARIABLE .)
    MINUS           reduce using rule 63 (factor -> VARIABLE .)
    AND             reduce using rule 63 (factor -> VARIABLE .)
    OR              reduce using rule 63 (factor -> VARIABLE .)
    EQ              reduce using rule 63 (factor -> VARIABLE .)
    NE              reduce using rule 63 (factor -> VARIABLE .)
    LT              reduce using rule 63 (factor -> VARIABLE .)
    GT              reduce using rule 63 (factor -> VARIABLE .)
    LE              reduce using rule 63 (factor -> VARIABLE .)
    GE              reduce using rule 63 (factor -> VARIABLE .)
    VAR             reduce using rule 63 (factor -> VARIABLE .)
    VARIABLE        reduce using rule 63 (factor -> VARIABLE .)
    FMT             reduce using rule 63 (factor -> VARIABLE .)
    CONTINUE        reduce using rule 63 (factor -> VARIABLE .)
    FUNC            reduce using rule 63 (factor -> VARIABLE .)
    IF              reduce using rule 63 (factor -> VARIABLE .)
    FOR             reduce using rule 63 (factor -> VARIABLE .)
    TYPE            reduce using rule 63 (factor -> VARIABLE .)
    SWITCH          reduce using rule 63 (factor -> VARIABLE .)
    BREAK           reduce using rule 63 (factor -> VARIABLE .)
    RETURN          reduce using rule 63 (factor -> VARIABLE .)
    $end            reduce using rule 63 (factor -> VARIABLE .)
    RBRACE          reduce using rule 63 (factor -> VARIABLE .)
    CASE            reduce using rule 63 (factor -> VARIABLE .)
    DEFAULT         reduce using rule 63 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 63 (factor -> VARIABLE .)
    COMMA           reduce using rule 63 (factor -> VARIABLE .)
    RPAREN          reduce using rule 63 (factor -> VARIABLE .)
    COLON           reduce using rule 63 (factor -> VARIABLE .)
    LBRACE          shift and go to state 97

  ! LBRACE          [ reduce using rule 63 (factor -> VARIABLE .) ]


state 135

    (48) expression -> expression MINUS term .
    (58) term -> term . TIMES factor
    (59) term -> term . DIVIDE factor

    PLUS            reduce using rule 48 (expression -> expression MINUS term .)
    MINUS           reduce using rule 48 (expression -> expression MINUS term .)
    AND             reduce using rule 48 (expression -> expression MINUS term .)
    OR              reduce using rule 48 (expression -> expression MINUS term .)
    EQ              reduce using rule 48 (expression -> expression MINUS term .)
    NE              reduce using rule 48 (expression -> expression MINUS term .)
    LT              reduce using rule 48 (expression -> expression MINUS term .)
    GT              reduce using rule 48 (expression -> expression MINUS term .)
    LE              reduce using rule 48 (expression -> expression MINUS term .)
    GE              reduce using rule 48 (expression -> expression MINUS term .)
    LBRACE          reduce using rule 48 (expression -> expression MINUS term .)
    VAR             reduce using rule 48 (expression -> expression MINUS term .)
    VARIABLE        reduce using rule 48 (expression -> expression MINUS term .)
    FMT             reduce using rule 48 (expression -> expression MINUS term .)
    CONTINUE        reduce using rule 48 (expression -> expression MINUS term .)
    FUNC            reduce using rule 48 (expression -> expression MINUS term .)
    IF              reduce using rule 48 (expression -> expression MINUS term .)
    FOR             reduce using rule 48 (expression -> expression MINUS term .)
    TYPE            reduce using rule 48 (expression -> expression MINUS term .)
    SWITCH          reduce using rule 48 (expression -> expression MINUS term .)
    BREAK           reduce using rule 48 (expression -> expression MINUS term .)
    RETURN          reduce using rule 48 (expression -> expression MINUS term .)
    $end            reduce using rule 48 (expression -> expression MINUS term .)
    RBRACE          reduce using rule 48 (expression -> expression MINUS term .)
    CASE            reduce using rule 48 (expression -> expression MINUS term .)
    DEFAULT         reduce using rule 48 (expression -> expression MINUS term .)
    SEMICOLON       reduce using rule 48 (expression -> expression MINUS term .)
    COMMA           reduce using rule 48 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 48 (expression -> expression MINUS term .)
    COLON           reduce using rule 48 (expression -> expression MINUS term .)
    TIMES           shift and go to state 98
    DIVIDE          shift and go to state 99


state 136

    (49) expression -> expression AND expression .
    (47) expression -> expression . PLUS term
    (48) expression -> expression . MINUS term
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NE expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LE expression
    (56) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 49 (expression -> expression AND expression .)
    VAR             reduce using rule 49 (expression -> expression AND expression .)
    VARIABLE        reduce using rule 49 (expression -> expression AND expression .)
    FMT             reduce using rule 49 (expression -> expression AND expression .)
    CONTINUE        reduce using rule 49 (expression -> expression AND expression .)
    FUNC            reduce using rule 49 (expression -> expression AND expression .)
    IF              reduce using rule 49 (expression -> expression AND expression .)
    FOR             reduce using rule 49 (expression -> expression AND expression .)
    TYPE            reduce using rule 49 (expression -> expression AND expression .)
    SWITCH          reduce using rule 49 (expression -> expression AND expression .)
    BREAK           reduce using rule 49 (expression -> expression AND expression .)
    RETURN          reduce using rule 49 (expression -> expression AND expression .)
    $end            reduce using rule 49 (expression -> expression AND expression .)
    RBRACE          reduce using rule 49 (expression -> expression AND expression .)
    CASE            reduce using rule 49 (expression -> expression AND expression .)
    DEFAULT         reduce using rule 49 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 49 (expression -> expression AND expression .)
    COMMA           reduce using rule 49 (expression -> expression AND expression .)
    RPAREN          reduce using rule 49 (expression -> expression AND expression .)
    COLON           reduce using rule 49 (expression -> expression AND expression .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    EQ              shift and go to state 90
    NE              shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    GE              shift and go to state 95

  ! PLUS            [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! NE              [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 49 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 49 (expression -> expression AND expression .) ]


state 137

    (50) expression -> expression OR expression .
    (47) expression -> expression . PLUS term
    (48) expression -> expression . MINUS term
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NE expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LE expression
    (56) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 50 (expression -> expression OR expression .)
    VAR             reduce using rule 50 (expression -> expression OR expression .)
    VARIABLE        reduce using rule 50 (expression -> expression OR expression .)
    FMT             reduce using rule 50 (expression -> expression OR expression .)
    CONTINUE        reduce using rule 50 (expression -> expression OR expression .)
    FUNC            reduce using rule 50 (expression -> expression OR expression .)
    IF              reduce using rule 50 (expression -> expression OR expression .)
    FOR             reduce using rule 50 (expression -> expression OR expression .)
    TYPE            reduce using rule 50 (expression -> expression OR expression .)
    SWITCH          reduce using rule 50 (expression -> expression OR expression .)
    BREAK           reduce using rule 50 (expression -> expression OR expression .)
    RETURN          reduce using rule 50 (expression -> expression OR expression .)
    $end            reduce using rule 50 (expression -> expression OR expression .)
    RBRACE          reduce using rule 50 (expression -> expression OR expression .)
    CASE            reduce using rule 50 (expression -> expression OR expression .)
    DEFAULT         reduce using rule 50 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 50 (expression -> expression OR expression .)
    COMMA           reduce using rule 50 (expression -> expression OR expression .)
    RPAREN          reduce using rule 50 (expression -> expression OR expression .)
    COLON           reduce using rule 50 (expression -> expression OR expression .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    EQ              shift and go to state 90
    NE              shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    GE              shift and go to state 95

  ! PLUS            [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! NE              [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 50 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 50 (expression -> expression OR expression .) ]


state 138

    (51) expression -> expression EQ expression .
    (47) expression -> expression . PLUS term
    (48) expression -> expression . MINUS term
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NE expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LE expression
    (56) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 51 (expression -> expression EQ expression .)
    VAR             reduce using rule 51 (expression -> expression EQ expression .)
    VARIABLE        reduce using rule 51 (expression -> expression EQ expression .)
    FMT             reduce using rule 51 (expression -> expression EQ expression .)
    CONTINUE        reduce using rule 51 (expression -> expression EQ expression .)
    FUNC            reduce using rule 51 (expression -> expression EQ expression .)
    IF              reduce using rule 51 (expression -> expression EQ expression .)
    FOR             reduce using rule 51 (expression -> expression EQ expression .)
    TYPE            reduce using rule 51 (expression -> expression EQ expression .)
    SWITCH          reduce using rule 51 (expression -> expression EQ expression .)
    BREAK           reduce using rule 51 (expression -> expression EQ expression .)
    RETURN          reduce using rule 51 (expression -> expression EQ expression .)
    $end            reduce using rule 51 (expression -> expression EQ expression .)
    RBRACE          reduce using rule 51 (expression -> expression EQ expression .)
    CASE            reduce using rule 51 (expression -> expression EQ expression .)
    DEFAULT         reduce using rule 51 (expression -> expression EQ expression .)
    SEMICOLON       reduce using rule 51 (expression -> expression EQ expression .)
    COMMA           reduce using rule 51 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 51 (expression -> expression EQ expression .)
    COLON           reduce using rule 51 (expression -> expression EQ expression .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    EQ              shift and go to state 90
    NE              shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    GE              shift and go to state 95

  ! PLUS            [ reduce using rule 51 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 51 (expression -> expression EQ expression .) ]
  ! AND             [ reduce using rule 51 (expression -> expression EQ expression .) ]
  ! OR              [ reduce using rule 51 (expression -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 51 (expression -> expression EQ expression .) ]
  ! NE              [ reduce using rule 51 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 51 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 51 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 51 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 51 (expression -> expression EQ expression .) ]


state 139

    (52) expression -> expression NE expression .
    (47) expression -> expression . PLUS term
    (48) expression -> expression . MINUS term
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NE expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LE expression
    (56) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 52 (expression -> expression NE expression .)
    VAR             reduce using rule 52 (expression -> expression NE expression .)
    VARIABLE        reduce using rule 52 (expression -> expression NE expression .)
    FMT             reduce using rule 52 (expression -> expression NE expression .)
    CONTINUE        reduce using rule 52 (expression -> expression NE expression .)
    FUNC            reduce using rule 52 (expression -> expression NE expression .)
    IF              reduce using rule 52 (expression -> expression NE expression .)
    FOR             reduce using rule 52 (expression -> expression NE expression .)
    TYPE            reduce using rule 52 (expression -> expression NE expression .)
    SWITCH          reduce using rule 52 (expression -> expression NE expression .)
    BREAK           reduce using rule 52 (expression -> expression NE expression .)
    RETURN          reduce using rule 52 (expression -> expression NE expression .)
    $end            reduce using rule 52 (expression -> expression NE expression .)
    RBRACE          reduce using rule 52 (expression -> expression NE expression .)
    CASE            reduce using rule 52 (expression -> expression NE expression .)
    DEFAULT         reduce using rule 52 (expression -> expression NE expression .)
    SEMICOLON       reduce using rule 52 (expression -> expression NE expression .)
    COMMA           reduce using rule 52 (expression -> expression NE expression .)
    RPAREN          reduce using rule 52 (expression -> expression NE expression .)
    COLON           reduce using rule 52 (expression -> expression NE expression .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    EQ              shift and go to state 90
    NE              shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    GE              shift and go to state 95

  ! PLUS            [ reduce using rule 52 (expression -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 52 (expression -> expression NE expression .) ]
  ! AND             [ reduce using rule 52 (expression -> expression NE expression .) ]
  ! OR              [ reduce using rule 52 (expression -> expression NE expression .) ]
  ! EQ              [ reduce using rule 52 (expression -> expression NE expression .) ]
  ! NE              [ reduce using rule 52 (expression -> expression NE expression .) ]
  ! LT              [ reduce using rule 52 (expression -> expression NE expression .) ]
  ! GT              [ reduce using rule 52 (expression -> expression NE expression .) ]
  ! LE              [ reduce using rule 52 (expression -> expression NE expression .) ]
  ! GE              [ reduce using rule 52 (expression -> expression NE expression .) ]


state 140

    (53) expression -> expression LT expression .
    (47) expression -> expression . PLUS term
    (48) expression -> expression . MINUS term
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NE expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LE expression
    (56) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 53 (expression -> expression LT expression .)
    VAR             reduce using rule 53 (expression -> expression LT expression .)
    VARIABLE        reduce using rule 53 (expression -> expression LT expression .)
    FMT             reduce using rule 53 (expression -> expression LT expression .)
    CONTINUE        reduce using rule 53 (expression -> expression LT expression .)
    FUNC            reduce using rule 53 (expression -> expression LT expression .)
    IF              reduce using rule 53 (expression -> expression LT expression .)
    FOR             reduce using rule 53 (expression -> expression LT expression .)
    TYPE            reduce using rule 53 (expression -> expression LT expression .)
    SWITCH          reduce using rule 53 (expression -> expression LT expression .)
    BREAK           reduce using rule 53 (expression -> expression LT expression .)
    RETURN          reduce using rule 53 (expression -> expression LT expression .)
    $end            reduce using rule 53 (expression -> expression LT expression .)
    RBRACE          reduce using rule 53 (expression -> expression LT expression .)
    CASE            reduce using rule 53 (expression -> expression LT expression .)
    DEFAULT         reduce using rule 53 (expression -> expression LT expression .)
    SEMICOLON       reduce using rule 53 (expression -> expression LT expression .)
    COMMA           reduce using rule 53 (expression -> expression LT expression .)
    RPAREN          reduce using rule 53 (expression -> expression LT expression .)
    COLON           reduce using rule 53 (expression -> expression LT expression .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    EQ              shift and go to state 90
    NE              shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    GE              shift and go to state 95

  ! PLUS            [ reduce using rule 53 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 53 (expression -> expression LT expression .) ]
  ! AND             [ reduce using rule 53 (expression -> expression LT expression .) ]
  ! OR              [ reduce using rule 53 (expression -> expression LT expression .) ]
  ! EQ              [ reduce using rule 53 (expression -> expression LT expression .) ]
  ! NE              [ reduce using rule 53 (expression -> expression LT expression .) ]
  ! LT              [ reduce using rule 53 (expression -> expression LT expression .) ]
  ! GT              [ reduce using rule 53 (expression -> expression LT expression .) ]
  ! LE              [ reduce using rule 53 (expression -> expression LT expression .) ]
  ! GE              [ reduce using rule 53 (expression -> expression LT expression .) ]


state 141

    (54) expression -> expression GT expression .
    (47) expression -> expression . PLUS term
    (48) expression -> expression . MINUS term
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NE expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LE expression
    (56) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 54 (expression -> expression GT expression .)
    VAR             reduce using rule 54 (expression -> expression GT expression .)
    VARIABLE        reduce using rule 54 (expression -> expression GT expression .)
    FMT             reduce using rule 54 (expression -> expression GT expression .)
    CONTINUE        reduce using rule 54 (expression -> expression GT expression .)
    FUNC            reduce using rule 54 (expression -> expression GT expression .)
    IF              reduce using rule 54 (expression -> expression GT expression .)
    FOR             reduce using rule 54 (expression -> expression GT expression .)
    TYPE            reduce using rule 54 (expression -> expression GT expression .)
    SWITCH          reduce using rule 54 (expression -> expression GT expression .)
    BREAK           reduce using rule 54 (expression -> expression GT expression .)
    RETURN          reduce using rule 54 (expression -> expression GT expression .)
    $end            reduce using rule 54 (expression -> expression GT expression .)
    RBRACE          reduce using rule 54 (expression -> expression GT expression .)
    CASE            reduce using rule 54 (expression -> expression GT expression .)
    DEFAULT         reduce using rule 54 (expression -> expression GT expression .)
    SEMICOLON       reduce using rule 54 (expression -> expression GT expression .)
    COMMA           reduce using rule 54 (expression -> expression GT expression .)
    RPAREN          reduce using rule 54 (expression -> expression GT expression .)
    COLON           reduce using rule 54 (expression -> expression GT expression .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    EQ              shift and go to state 90
    NE              shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    GE              shift and go to state 95

  ! PLUS            [ reduce using rule 54 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 54 (expression -> expression GT expression .) ]
  ! AND             [ reduce using rule 54 (expression -> expression GT expression .) ]
  ! OR              [ reduce using rule 54 (expression -> expression GT expression .) ]
  ! EQ              [ reduce using rule 54 (expression -> expression GT expression .) ]
  ! NE              [ reduce using rule 54 (expression -> expression GT expression .) ]
  ! LT              [ reduce using rule 54 (expression -> expression GT expression .) ]
  ! GT              [ reduce using rule 54 (expression -> expression GT expression .) ]
  ! LE              [ reduce using rule 54 (expression -> expression GT expression .) ]
  ! GE              [ reduce using rule 54 (expression -> expression GT expression .) ]


state 142

    (55) expression -> expression LE expression .
    (47) expression -> expression . PLUS term
    (48) expression -> expression . MINUS term
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NE expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LE expression
    (56) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 55 (expression -> expression LE expression .)
    VAR             reduce using rule 55 (expression -> expression LE expression .)
    VARIABLE        reduce using rule 55 (expression -> expression LE expression .)
    FMT             reduce using rule 55 (expression -> expression LE expression .)
    CONTINUE        reduce using rule 55 (expression -> expression LE expression .)
    FUNC            reduce using rule 55 (expression -> expression LE expression .)
    IF              reduce using rule 55 (expression -> expression LE expression .)
    FOR             reduce using rule 55 (expression -> expression LE expression .)
    TYPE            reduce using rule 55 (expression -> expression LE expression .)
    SWITCH          reduce using rule 55 (expression -> expression LE expression .)
    BREAK           reduce using rule 55 (expression -> expression LE expression .)
    RETURN          reduce using rule 55 (expression -> expression LE expression .)
    $end            reduce using rule 55 (expression -> expression LE expression .)
    RBRACE          reduce using rule 55 (expression -> expression LE expression .)
    CASE            reduce using rule 55 (expression -> expression LE expression .)
    DEFAULT         reduce using rule 55 (expression -> expression LE expression .)
    SEMICOLON       reduce using rule 55 (expression -> expression LE expression .)
    COMMA           reduce using rule 55 (expression -> expression LE expression .)
    RPAREN          reduce using rule 55 (expression -> expression LE expression .)
    COLON           reduce using rule 55 (expression -> expression LE expression .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    EQ              shift and go to state 90
    NE              shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    GE              shift and go to state 95

  ! PLUS            [ reduce using rule 55 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> expression LE expression .) ]
  ! AND             [ reduce using rule 55 (expression -> expression LE expression .) ]
  ! OR              [ reduce using rule 55 (expression -> expression LE expression .) ]
  ! EQ              [ reduce using rule 55 (expression -> expression LE expression .) ]
  ! NE              [ reduce using rule 55 (expression -> expression LE expression .) ]
  ! LT              [ reduce using rule 55 (expression -> expression LE expression .) ]
  ! GT              [ reduce using rule 55 (expression -> expression LE expression .) ]
  ! LE              [ reduce using rule 55 (expression -> expression LE expression .) ]
  ! GE              [ reduce using rule 55 (expression -> expression LE expression .) ]


state 143

    (56) expression -> expression GE expression .
    (47) expression -> expression . PLUS term
    (48) expression -> expression . MINUS term
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NE expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LE expression
    (56) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 56 (expression -> expression GE expression .)
    VAR             reduce using rule 56 (expression -> expression GE expression .)
    VARIABLE        reduce using rule 56 (expression -> expression GE expression .)
    FMT             reduce using rule 56 (expression -> expression GE expression .)
    CONTINUE        reduce using rule 56 (expression -> expression GE expression .)
    FUNC            reduce using rule 56 (expression -> expression GE expression .)
    IF              reduce using rule 56 (expression -> expression GE expression .)
    FOR             reduce using rule 56 (expression -> expression GE expression .)
    TYPE            reduce using rule 56 (expression -> expression GE expression .)
    SWITCH          reduce using rule 56 (expression -> expression GE expression .)
    BREAK           reduce using rule 56 (expression -> expression GE expression .)
    RETURN          reduce using rule 56 (expression -> expression GE expression .)
    $end            reduce using rule 56 (expression -> expression GE expression .)
    RBRACE          reduce using rule 56 (expression -> expression GE expression .)
    CASE            reduce using rule 56 (expression -> expression GE expression .)
    DEFAULT         reduce using rule 56 (expression -> expression GE expression .)
    SEMICOLON       reduce using rule 56 (expression -> expression GE expression .)
    COMMA           reduce using rule 56 (expression -> expression GE expression .)
    RPAREN          reduce using rule 56 (expression -> expression GE expression .)
    COLON           reduce using rule 56 (expression -> expression GE expression .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    EQ              shift and go to state 90
    NE              shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    GE              shift and go to state 95

  ! PLUS            [ reduce using rule 56 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 56 (expression -> expression GE expression .) ]
  ! AND             [ reduce using rule 56 (expression -> expression GE expression .) ]
  ! OR              [ reduce using rule 56 (expression -> expression GE expression .) ]
  ! EQ              [ reduce using rule 56 (expression -> expression GE expression .) ]
  ! NE              [ reduce using rule 56 (expression -> expression GE expression .) ]
  ! LT              [ reduce using rule 56 (expression -> expression GE expression .) ]
  ! GT              [ reduce using rule 56 (expression -> expression GE expression .) ]
  ! LE              [ reduce using rule 56 (expression -> expression GE expression .) ]
  ! GE              [ reduce using rule 56 (expression -> expression GE expression .) ]


state 144

    (78) block -> LBRACE program . RBRACE

    RBRACE          shift and go to state 181


state 145

    (89) field_value -> VARIABLE . COLON expression

    COLON           shift and go to state 182


state 146

    (86) struct_instance -> VARIABLE LBRACE struct_fields_values . RBRACE

    RBRACE          shift and go to state 183


state 147

    (87) struct_fields_values -> field_value .
    (88) struct_fields_values -> field_value . COMMA struct_fields_values

    RBRACE          reduce using rule 87 (struct_fields_values -> field_value .)
    COMMA           shift and go to state 184


state 148

    (58) term -> term TIMES factor .

    TIMES           reduce using rule 58 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 58 (term -> term TIMES factor .)
    PLUS            reduce using rule 58 (term -> term TIMES factor .)
    MINUS           reduce using rule 58 (term -> term TIMES factor .)
    AND             reduce using rule 58 (term -> term TIMES factor .)
    OR              reduce using rule 58 (term -> term TIMES factor .)
    EQ              reduce using rule 58 (term -> term TIMES factor .)
    NE              reduce using rule 58 (term -> term TIMES factor .)
    LT              reduce using rule 58 (term -> term TIMES factor .)
    GT              reduce using rule 58 (term -> term TIMES factor .)
    LE              reduce using rule 58 (term -> term TIMES factor .)
    GE              reduce using rule 58 (term -> term TIMES factor .)
    LBRACE          reduce using rule 58 (term -> term TIMES factor .)
    VAR             reduce using rule 58 (term -> term TIMES factor .)
    VARIABLE        reduce using rule 58 (term -> term TIMES factor .)
    FMT             reduce using rule 58 (term -> term TIMES factor .)
    CONTINUE        reduce using rule 58 (term -> term TIMES factor .)
    FUNC            reduce using rule 58 (term -> term TIMES factor .)
    IF              reduce using rule 58 (term -> term TIMES factor .)
    FOR             reduce using rule 58 (term -> term TIMES factor .)
    TYPE            reduce using rule 58 (term -> term TIMES factor .)
    SWITCH          reduce using rule 58 (term -> term TIMES factor .)
    BREAK           reduce using rule 58 (term -> term TIMES factor .)
    RETURN          reduce using rule 58 (term -> term TIMES factor .)
    $end            reduce using rule 58 (term -> term TIMES factor .)
    RBRACE          reduce using rule 58 (term -> term TIMES factor .)
    CASE            reduce using rule 58 (term -> term TIMES factor .)
    DEFAULT         reduce using rule 58 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 58 (term -> term TIMES factor .)
    COMMA           reduce using rule 58 (term -> term TIMES factor .)
    RPAREN          reduce using rule 58 (term -> term TIMES factor .)
    COLON           reduce using rule 58 (term -> term TIMES factor .)


state 149

    (59) term -> term DIVIDE factor .

    TIMES           reduce using rule 59 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 59 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 59 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 59 (term -> term DIVIDE factor .)
    AND             reduce using rule 59 (term -> term DIVIDE factor .)
    OR              reduce using rule 59 (term -> term DIVIDE factor .)
    EQ              reduce using rule 59 (term -> term DIVIDE factor .)
    NE              reduce using rule 59 (term -> term DIVIDE factor .)
    LT              reduce using rule 59 (term -> term DIVIDE factor .)
    GT              reduce using rule 59 (term -> term DIVIDE factor .)
    LE              reduce using rule 59 (term -> term DIVIDE factor .)
    GE              reduce using rule 59 (term -> term DIVIDE factor .)
    LBRACE          reduce using rule 59 (term -> term DIVIDE factor .)
    VAR             reduce using rule 59 (term -> term DIVIDE factor .)
    VARIABLE        reduce using rule 59 (term -> term DIVIDE factor .)
    FMT             reduce using rule 59 (term -> term DIVIDE factor .)
    CONTINUE        reduce using rule 59 (term -> term DIVIDE factor .)
    FUNC            reduce using rule 59 (term -> term DIVIDE factor .)
    IF              reduce using rule 59 (term -> term DIVIDE factor .)
    FOR             reduce using rule 59 (term -> term DIVIDE factor .)
    TYPE            reduce using rule 59 (term -> term DIVIDE factor .)
    SWITCH          reduce using rule 59 (term -> term DIVIDE factor .)
    BREAK           reduce using rule 59 (term -> term DIVIDE factor .)
    RETURN          reduce using rule 59 (term -> term DIVIDE factor .)
    $end            reduce using rule 59 (term -> term DIVIDE factor .)
    RBRACE          reduce using rule 59 (term -> term DIVIDE factor .)
    CASE            reduce using rule 59 (term -> term DIVIDE factor .)
    DEFAULT         reduce using rule 59 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 59 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 59 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 59 (term -> term DIVIDE factor .)
    COLON           reduce using rule 59 (term -> term DIVIDE factor .)


state 150

    (64) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    EQ              reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    VAR             reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    FMT             reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    TYPE            reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    CASE            reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 64 (factor -> LPAREN expression RPAREN .)
    COLON           reduce using rule 64 (factor -> LPAREN expression RPAREN .)


state 151

    (100) make_expr -> MAKE LPAREN MAP . LBRACKET type RBRACKET type RPAREN

    LBRACKET        shift and go to state 185


state 152

    (101) make_expr -> MAKE LPAREN LBRACKET . RBRACKET type RPAREN

    RBRACKET        shift and go to state 186


state 153

    (74) for_stmt -> FOR assignment SEMICOLON expression . SEMICOLON for_update block
    (47) expression -> expression . PLUS term
    (48) expression -> expression . MINUS term
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NE expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LE expression
    (56) expression -> expression . GE expression

    SEMICOLON       shift and go to state 187
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    EQ              shift and go to state 90
    NE              shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    GE              shift and go to state 95


state 154

    (81) struct_def -> TYPE VARIABLE STRUCT LBRACE . struct_fields RBRACE
    (82) struct_fields -> . struct_field
    (83) struct_fields -> . struct_field struct_fields
    (84) struct_field -> . VARIABLE type
    (85) struct_field -> . type
    (67) type -> . INT_TYPE
    (68) type -> . FLOAT64_TYPE
    (69) type -> . STRING_TYPE
    (70) type -> . BOOL_TYPE

    VARIABLE        shift and go to state 188
    INT_TYPE        shift and go to state 67
    FLOAT64_TYPE    shift and go to state 68
    STRING_TYPE     shift and go to state 69
    BOOL_TYPE       shift and go to state 70

    struct_fields                  shift and go to state 189
    struct_field                   shift and go to state 190
    type                           shift and go to state 191

state 155

    (90) switch_stmt -> SWITCH expression LBRACE case_list . RBRACE

    RBRACE          shift and go to state 192


state 156

    (91) switch_stmt -> SWITCH LBRACE case_list RBRACE .

    VAR             reduce using rule 91 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    VARIABLE        reduce using rule 91 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    FMT             reduce using rule 91 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    CONTINUE        reduce using rule 91 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    FUNC            reduce using rule 91 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    IF              reduce using rule 91 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    FOR             reduce using rule 91 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    TYPE            reduce using rule 91 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    SWITCH          reduce using rule 91 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    BREAK           reduce using rule 91 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    RETURN          reduce using rule 91 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    $end            reduce using rule 91 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    RBRACE          reduce using rule 91 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    CASE            reduce using rule 91 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    DEFAULT         reduce using rule 91 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)


state 157

    (93) case_list -> case_clause case_list .

    RBRACE          reduce using rule 93 (case_list -> case_clause case_list .)


state 158

    (94) case_clause -> CASE expression . COLON program
    (47) expression -> expression . PLUS term
    (48) expression -> expression . MINUS term
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NE expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LE expression
    (56) expression -> expression . GE expression

    COLON           shift and go to state 193
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    EQ              shift and go to state 90
    NE              shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    GE              shift and go to state 95


state 159

    (95) case_clause -> DEFAULT COLON . program
    (1) program -> . statement
    (2) program -> . statement program
    (3) statement -> . declaration
    (4) statement -> . assignment
    (5) statement -> . print_stmt
    (6) statement -> . input_stmt
    (7) statement -> . continue_stmt
    (8) statement -> . struct_method
    (9) statement -> . func_def
    (10) statement -> . func_no_params
    (11) statement -> . func_call
    (12) statement -> . if_stmt
    (13) statement -> . for_stmt
    (14) statement -> . struct_def
    (15) statement -> . switch_stmt
    (16) statement -> . map_declaration
    (17) statement -> . map_declaration_values
    (18) statement -> . array_declaration
    (19) statement -> . slice_declaration
    (20) statement -> . make_stmt
    (21) statement -> . new_stmt
    (22) statement -> . break_stmt
    (23) statement -> . increment_stmt
    (24) statement -> . return_stmt
    (25) declaration -> . VAR VARIABLE type
    (26) declaration -> . VAR VARIABLE type ASIG expression
    (30) assignment -> . VARIABLE ASSIGN expression
    (31) assignment -> . VARIABLE ASIG expression
    (32) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (33) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (34) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (75) continue_stmt -> . CONTINUE
    (79) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (80) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (35) func_def -> . FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (36) func_def -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (38) func_no_params -> . FUNC VARIABLE LPAREN RPAREN block
    (39) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (40) func_call -> . VARIABLE LPAREN RPAREN
    (71) if_stmt -> . IF expression block
    (72) if_stmt -> . IF expression block ELSE block
    (73) for_stmt -> . FOR expression block
    (74) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (81) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (90) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (91) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (96) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (97) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (102) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (106) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (107) array_declaration -> . VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (110) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (111) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (98) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (99) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (114) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (115) break_stmt -> . BREAK
    (116) increment_stmt -> . VARIABLE INCREMENT
    (117) increment_stmt -> . VARIABLE DECREMENT
    (37) return_stmt -> . RETURN expression

    VAR             shift and go to state 25
    VARIABLE        shift and go to state 26
    FMT             shift and go to state 27
    CONTINUE        shift and go to state 28
    FUNC            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    TYPE            shift and go to state 32
    SWITCH          shift and go to state 33
    BREAK           shift and go to state 34
    RETURN          shift and go to state 35

    program                        shift and go to state 194
    statement                      shift and go to state 2
    declaration                    shift and go to state 3
    assignment                     shift and go to state 4
    print_stmt                     shift and go to state 5
    input_stmt                     shift and go to state 6
    continue_stmt                  shift and go to state 7
    struct_method                  shift and go to state 8
    func_def                       shift and go to state 9
    func_no_params                 shift and go to state 10
    func_call                      shift and go to state 11
    if_stmt                        shift and go to state 12
    for_stmt                       shift and go to state 13
    struct_def                     shift and go to state 14
    switch_stmt                    shift and go to state 15
    map_declaration                shift and go to state 16
    map_declaration_values         shift and go to state 17
    array_declaration              shift and go to state 18
    slice_declaration              shift and go to state 19
    make_stmt                      shift and go to state 20
    new_stmt                       shift and go to state 21
    break_stmt                     shift and go to state 22
    increment_stmt                 shift and go to state 23
    return_stmt                    shift and go to state 24

state 160

    (26) declaration -> VAR VARIABLE type ASIG expression .
    (47) expression -> expression . PLUS term
    (48) expression -> expression . MINUS term
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NE expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LE expression
    (56) expression -> expression . GE expression

    VAR             reduce using rule 26 (declaration -> VAR VARIABLE type ASIG expression .)
    VARIABLE        reduce using rule 26 (declaration -> VAR VARIABLE type ASIG expression .)
    FMT             reduce using rule 26 (declaration -> VAR VARIABLE type ASIG expression .)
    CONTINUE        reduce using rule 26 (declaration -> VAR VARIABLE type ASIG expression .)
    FUNC            reduce using rule 26 (declaration -> VAR VARIABLE type ASIG expression .)
    IF              reduce using rule 26 (declaration -> VAR VARIABLE type ASIG expression .)
    FOR             reduce using rule 26 (declaration -> VAR VARIABLE type ASIG expression .)
    TYPE            reduce using rule 26 (declaration -> VAR VARIABLE type ASIG expression .)
    SWITCH          reduce using rule 26 (declaration -> VAR VARIABLE type ASIG expression .)
    BREAK           reduce using rule 26 (declaration -> VAR VARIABLE type ASIG expression .)
    RETURN          reduce using rule 26 (declaration -> VAR VARIABLE type ASIG expression .)
    $end            reduce using rule 26 (declaration -> VAR VARIABLE type ASIG expression .)
    RBRACE          reduce using rule 26 (declaration -> VAR VARIABLE type ASIG expression .)
    CASE            reduce using rule 26 (declaration -> VAR VARIABLE type ASIG expression .)
    DEFAULT         reduce using rule 26 (declaration -> VAR VARIABLE type ASIG expression .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    EQ              shift and go to state 90
    NE              shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    GE              shift and go to state 95


state 161

    (96) map_declaration -> VAR VARIABLE MAP LBRACKET type . RBRACKET type

    RBRACKET        shift and go to state 195


state 162

    (106) array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET . type
    (67) type -> . INT_TYPE
    (68) type -> . FLOAT64_TYPE
    (69) type -> . STRING_TYPE
    (70) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 67
    FLOAT64_TYPE    shift and go to state 68
    STRING_TYPE     shift and go to state 69
    BOOL_TYPE       shift and go to state 70

    type                           shift and go to state 196

state 163

    (110) slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .

    VAR             reduce using rule 110 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    VARIABLE        reduce using rule 110 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    FMT             reduce using rule 110 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    CONTINUE        reduce using rule 110 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    FUNC            reduce using rule 110 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    IF              reduce using rule 110 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    FOR             reduce using rule 110 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    TYPE            reduce using rule 110 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    SWITCH          reduce using rule 110 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    BREAK           reduce using rule 110 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    RETURN          reduce using rule 110 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    $end            reduce using rule 110 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    RBRACE          reduce using rule 110 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    CASE            reduce using rule 110 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    DEFAULT         reduce using rule 110 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)


state 164

    (97) map_declaration -> VARIABLE ASIG MAP LBRACKET type . RBRACKET type
    (102) map_declaration_values -> VARIABLE ASIG MAP LBRACKET type . RBRACKET type LBRACE map_kv_pairs RBRACE

    RBRACKET        shift and go to state 197


state 165

    (107) array_declaration -> VARIABLE ASIG LBRACKET NUMBER RBRACKET . type LBRACE array_values RBRACE
    (67) type -> . INT_TYPE
    (68) type -> . FLOAT64_TYPE
    (69) type -> . STRING_TYPE
    (70) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 67
    FLOAT64_TYPE    shift and go to state 68
    STRING_TYPE     shift and go to state 69
    BOOL_TYPE       shift and go to state 70

    type                           shift and go to state 198

state 166

    (111) slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type . LBRACE slice_values RBRACE

    LBRACE          shift and go to state 199


state 167

    (98) make_stmt -> VARIABLE ASIG MAKE LPAREN MAP . LBRACKET type RBRACKET type RPAREN
    (100) make_expr -> MAKE LPAREN MAP . LBRACKET type RBRACKET type RPAREN

    LBRACKET        shift and go to state 200


state 168

    (99) make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET . RBRACKET type RPAREN
    (101) make_expr -> MAKE LPAREN LBRACKET . RBRACKET type RPAREN

    RBRACKET        shift and go to state 201


state 169

    (114) new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE . RPAREN

    RPAREN          shift and go to state 202


state 170

    (45) arg_list -> expression COMMA arg_list .

    RPAREN          reduce using rule 45 (arg_list -> expression COMMA arg_list .)


state 171

    (32) print_stmt -> FMT DOT PRINTF LPAREN STRING . COMMA expression RPAREN

    COMMA           shift and go to state 203


state 172

    (33) print_stmt -> FMT DOT PRINTLN LPAREN expression . RPAREN
    (47) expression -> expression . PLUS term
    (48) expression -> expression . MINUS term
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NE expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LE expression
    (56) expression -> expression . GE expression

    RPAREN          shift and go to state 204
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    EQ              shift and go to state 90
    NE              shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    GE              shift and go to state 95


state 173

    (34) input_stmt -> FMT DOT SCANLN LPAREN AMPER . VARIABLE RPAREN

    VARIABLE        shift and go to state 205


state 174

    (79) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN . VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (80) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN . VARIABLE LPAREN RPAREN type LBRACE program RBRACE

    VARIABLE        shift and go to state 206


state 175

    (43) param -> VARIABLE type .

    COMMA           reduce using rule 43 (param -> VARIABLE type .)
    RPAREN          reduce using rule 43 (param -> VARIABLE type .)


state 176

    (35) func_def -> FUNC VARIABLE LPAREN param_list RPAREN . type LBRACE program RBRACE
    (67) type -> . INT_TYPE
    (68) type -> . FLOAT64_TYPE
    (69) type -> . STRING_TYPE
    (70) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 67
    FLOAT64_TYPE    shift and go to state 68
    STRING_TYPE     shift and go to state 69
    BOOL_TYPE       shift and go to state 70

    type                           shift and go to state 207

state 177

    (36) func_def -> FUNC VARIABLE LPAREN RPAREN type . LBRACE program RBRACE

    LBRACE          shift and go to state 208


state 178

    (38) func_no_params -> FUNC VARIABLE LPAREN RPAREN block .

    VAR             reduce using rule 38 (func_no_params -> FUNC VARIABLE LPAREN RPAREN block .)
    VARIABLE        reduce using rule 38 (func_no_params -> FUNC VARIABLE LPAREN RPAREN block .)
    FMT             reduce using rule 38 (func_no_params -> FUNC VARIABLE LPAREN RPAREN block .)
    CONTINUE        reduce using rule 38 (func_no_params -> FUNC VARIABLE LPAREN RPAREN block .)
    FUNC            reduce using rule 38 (func_no_params -> FUNC VARIABLE LPAREN RPAREN block .)
    IF              reduce using rule 38 (func_no_params -> FUNC VARIABLE LPAREN RPAREN block .)
    FOR             reduce using rule 38 (func_no_params -> FUNC VARIABLE LPAREN RPAREN block .)
    TYPE            reduce using rule 38 (func_no_params -> FUNC VARIABLE LPAREN RPAREN block .)
    SWITCH          reduce using rule 38 (func_no_params -> FUNC VARIABLE LPAREN RPAREN block .)
    BREAK           reduce using rule 38 (func_no_params -> FUNC VARIABLE LPAREN RPAREN block .)
    RETURN          reduce using rule 38 (func_no_params -> FUNC VARIABLE LPAREN RPAREN block .)
    $end            reduce using rule 38 (func_no_params -> FUNC VARIABLE LPAREN RPAREN block .)
    RBRACE          reduce using rule 38 (func_no_params -> FUNC VARIABLE LPAREN RPAREN block .)
    CASE            reduce using rule 38 (func_no_params -> FUNC VARIABLE LPAREN RPAREN block .)
    DEFAULT         reduce using rule 38 (func_no_params -> FUNC VARIABLE LPAREN RPAREN block .)


state 179

    (42) param_list -> param COMMA . param_list
    (41) param_list -> . param
    (42) param_list -> . param COMMA param_list
    (43) param -> . VARIABLE type

    VARIABLE        shift and go to state 126

    param                          shift and go to state 129
    param_list                     shift and go to state 209

state 180

    (72) if_stmt -> IF expression block ELSE block .

    VAR             reduce using rule 72 (if_stmt -> IF expression block ELSE block .)
    VARIABLE        reduce using rule 72 (if_stmt -> IF expression block ELSE block .)
    FMT             reduce using rule 72 (if_stmt -> IF expression block ELSE block .)
    CONTINUE        reduce using rule 72 (if_stmt -> IF expression block ELSE block .)
    FUNC            reduce using rule 72 (if_stmt -> IF expression block ELSE block .)
    IF              reduce using rule 72 (if_stmt -> IF expression block ELSE block .)
    FOR             reduce using rule 72 (if_stmt -> IF expression block ELSE block .)
    TYPE            reduce using rule 72 (if_stmt -> IF expression block ELSE block .)
    SWITCH          reduce using rule 72 (if_stmt -> IF expression block ELSE block .)
    BREAK           reduce using rule 72 (if_stmt -> IF expression block ELSE block .)
    RETURN          reduce using rule 72 (if_stmt -> IF expression block ELSE block .)
    $end            reduce using rule 72 (if_stmt -> IF expression block ELSE block .)
    RBRACE          reduce using rule 72 (if_stmt -> IF expression block ELSE block .)
    CASE            reduce using rule 72 (if_stmt -> IF expression block ELSE block .)
    DEFAULT         reduce using rule 72 (if_stmt -> IF expression block ELSE block .)


state 181

    (78) block -> LBRACE program RBRACE .

    ELSE            reduce using rule 78 (block -> LBRACE program RBRACE .)
    VAR             reduce using rule 78 (block -> LBRACE program RBRACE .)
    VARIABLE        reduce using rule 78 (block -> LBRACE program RBRACE .)
    FMT             reduce using rule 78 (block -> LBRACE program RBRACE .)
    CONTINUE        reduce using rule 78 (block -> LBRACE program RBRACE .)
    FUNC            reduce using rule 78 (block -> LBRACE program RBRACE .)
    IF              reduce using rule 78 (block -> LBRACE program RBRACE .)
    FOR             reduce using rule 78 (block -> LBRACE program RBRACE .)
    TYPE            reduce using rule 78 (block -> LBRACE program RBRACE .)
    SWITCH          reduce using rule 78 (block -> LBRACE program RBRACE .)
    BREAK           reduce using rule 78 (block -> LBRACE program RBRACE .)
    RETURN          reduce using rule 78 (block -> LBRACE program RBRACE .)
    $end            reduce using rule 78 (block -> LBRACE program RBRACE .)
    RBRACE          reduce using rule 78 (block -> LBRACE program RBRACE .)
    CASE            reduce using rule 78 (block -> LBRACE program RBRACE .)
    DEFAULT         reduce using rule 78 (block -> LBRACE program RBRACE .)


state 182

    (89) field_value -> VARIABLE COLON . expression
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    expression                     shift and go to state 210
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 183

    (86) struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .

    TIMES           reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    DIVIDE          reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    PLUS            reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    MINUS           reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    AND             reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    OR              reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    EQ              reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    NE              reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    LT              reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    GT              reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    LE              reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    GE              reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    LBRACE          reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    VAR             reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    VARIABLE        reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    FMT             reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    CONTINUE        reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    FUNC            reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    IF              reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    FOR             reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    TYPE            reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    SWITCH          reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    BREAK           reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    RETURN          reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    $end            reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    RBRACE          reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    CASE            reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    DEFAULT         reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    SEMICOLON       reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    COMMA           reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    RPAREN          reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    COLON           reduce using rule 86 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)


state 184

    (88) struct_fields_values -> field_value COMMA . struct_fields_values
    (87) struct_fields_values -> . field_value
    (88) struct_fields_values -> . field_value COMMA struct_fields_values
    (89) field_value -> . VARIABLE COLON expression

    VARIABLE        shift and go to state 145

    field_value                    shift and go to state 147
    struct_fields_values           shift and go to state 211

state 185

    (100) make_expr -> MAKE LPAREN MAP LBRACKET . type RBRACKET type RPAREN
    (67) type -> . INT_TYPE
    (68) type -> . FLOAT64_TYPE
    (69) type -> . STRING_TYPE
    (70) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 67
    FLOAT64_TYPE    shift and go to state 68
    STRING_TYPE     shift and go to state 69
    BOOL_TYPE       shift and go to state 70

    type                           shift and go to state 212

state 186

    (101) make_expr -> MAKE LPAREN LBRACKET RBRACKET . type RPAREN
    (67) type -> . INT_TYPE
    (68) type -> . FLOAT64_TYPE
    (69) type -> . STRING_TYPE
    (70) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 67
    FLOAT64_TYPE    shift and go to state 68
    STRING_TYPE     shift and go to state 69
    BOOL_TYPE       shift and go to state 70

    type                           shift and go to state 213

state 187

    (74) for_stmt -> FOR assignment SEMICOLON expression SEMICOLON . for_update block
    (76) for_update -> . assignment
    (77) for_update -> . increment_stmt
    (30) assignment -> . VARIABLE ASSIGN expression
    (31) assignment -> . VARIABLE ASIG expression
    (116) increment_stmt -> . VARIABLE INCREMENT
    (117) increment_stmt -> . VARIABLE DECREMENT

    VARIABLE        shift and go to state 217

    assignment                     shift and go to state 214
    for_update                     shift and go to state 215
    increment_stmt                 shift and go to state 216

state 188

    (84) struct_field -> VARIABLE . type
    (67) type -> . INT_TYPE
    (68) type -> . FLOAT64_TYPE
    (69) type -> . STRING_TYPE
    (70) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 67
    FLOAT64_TYPE    shift and go to state 68
    STRING_TYPE     shift and go to state 69
    BOOL_TYPE       shift and go to state 70

    type                           shift and go to state 218

state 189

    (81) struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields . RBRACE

    RBRACE          shift and go to state 219


state 190

    (82) struct_fields -> struct_field .
    (83) struct_fields -> struct_field . struct_fields
    (82) struct_fields -> . struct_field
    (83) struct_fields -> . struct_field struct_fields
    (84) struct_field -> . VARIABLE type
    (85) struct_field -> . type
    (67) type -> . INT_TYPE
    (68) type -> . FLOAT64_TYPE
    (69) type -> . STRING_TYPE
    (70) type -> . BOOL_TYPE

    RBRACE          reduce using rule 82 (struct_fields -> struct_field .)
    VARIABLE        shift and go to state 188
    INT_TYPE        shift and go to state 67
    FLOAT64_TYPE    shift and go to state 68
    STRING_TYPE     shift and go to state 69
    BOOL_TYPE       shift and go to state 70

    struct_field                   shift and go to state 190
    struct_fields                  shift and go to state 220
    type                           shift and go to state 191

state 191

    (85) struct_field -> type .

    VARIABLE        reduce using rule 85 (struct_field -> type .)
    INT_TYPE        reduce using rule 85 (struct_field -> type .)
    FLOAT64_TYPE    reduce using rule 85 (struct_field -> type .)
    STRING_TYPE     reduce using rule 85 (struct_field -> type .)
    BOOL_TYPE       reduce using rule 85 (struct_field -> type .)
    RBRACE          reduce using rule 85 (struct_field -> type .)


state 192

    (90) switch_stmt -> SWITCH expression LBRACE case_list RBRACE .

    VAR             reduce using rule 90 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    VARIABLE        reduce using rule 90 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    FMT             reduce using rule 90 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    CONTINUE        reduce using rule 90 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    FUNC            reduce using rule 90 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    IF              reduce using rule 90 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    FOR             reduce using rule 90 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    TYPE            reduce using rule 90 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    SWITCH          reduce using rule 90 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    BREAK           reduce using rule 90 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    RETURN          reduce using rule 90 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    $end            reduce using rule 90 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    RBRACE          reduce using rule 90 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    CASE            reduce using rule 90 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    DEFAULT         reduce using rule 90 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)


state 193

    (94) case_clause -> CASE expression COLON . program
    (1) program -> . statement
    (2) program -> . statement program
    (3) statement -> . declaration
    (4) statement -> . assignment
    (5) statement -> . print_stmt
    (6) statement -> . input_stmt
    (7) statement -> . continue_stmt
    (8) statement -> . struct_method
    (9) statement -> . func_def
    (10) statement -> . func_no_params
    (11) statement -> . func_call
    (12) statement -> . if_stmt
    (13) statement -> . for_stmt
    (14) statement -> . struct_def
    (15) statement -> . switch_stmt
    (16) statement -> . map_declaration
    (17) statement -> . map_declaration_values
    (18) statement -> . array_declaration
    (19) statement -> . slice_declaration
    (20) statement -> . make_stmt
    (21) statement -> . new_stmt
    (22) statement -> . break_stmt
    (23) statement -> . increment_stmt
    (24) statement -> . return_stmt
    (25) declaration -> . VAR VARIABLE type
    (26) declaration -> . VAR VARIABLE type ASIG expression
    (30) assignment -> . VARIABLE ASSIGN expression
    (31) assignment -> . VARIABLE ASIG expression
    (32) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (33) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (34) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (75) continue_stmt -> . CONTINUE
    (79) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (80) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (35) func_def -> . FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (36) func_def -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (38) func_no_params -> . FUNC VARIABLE LPAREN RPAREN block
    (39) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (40) func_call -> . VARIABLE LPAREN RPAREN
    (71) if_stmt -> . IF expression block
    (72) if_stmt -> . IF expression block ELSE block
    (73) for_stmt -> . FOR expression block
    (74) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (81) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (90) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (91) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (96) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (97) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (102) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (106) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (107) array_declaration -> . VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (110) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (111) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (98) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (99) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (114) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (115) break_stmt -> . BREAK
    (116) increment_stmt -> . VARIABLE INCREMENT
    (117) increment_stmt -> . VARIABLE DECREMENT
    (37) return_stmt -> . RETURN expression

    VAR             shift and go to state 25
    VARIABLE        shift and go to state 26
    FMT             shift and go to state 27
    CONTINUE        shift and go to state 28
    FUNC            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    TYPE            shift and go to state 32
    SWITCH          shift and go to state 33
    BREAK           shift and go to state 34
    RETURN          shift and go to state 35

    program                        shift and go to state 221
    statement                      shift and go to state 2
    declaration                    shift and go to state 3
    assignment                     shift and go to state 4
    print_stmt                     shift and go to state 5
    input_stmt                     shift and go to state 6
    continue_stmt                  shift and go to state 7
    struct_method                  shift and go to state 8
    func_def                       shift and go to state 9
    func_no_params                 shift and go to state 10
    func_call                      shift and go to state 11
    if_stmt                        shift and go to state 12
    for_stmt                       shift and go to state 13
    struct_def                     shift and go to state 14
    switch_stmt                    shift and go to state 15
    map_declaration                shift and go to state 16
    map_declaration_values         shift and go to state 17
    array_declaration              shift and go to state 18
    slice_declaration              shift and go to state 19
    make_stmt                      shift and go to state 20
    new_stmt                       shift and go to state 21
    break_stmt                     shift and go to state 22
    increment_stmt                 shift and go to state 23
    return_stmt                    shift and go to state 24

state 194

    (95) case_clause -> DEFAULT COLON program .

    CASE            reduce using rule 95 (case_clause -> DEFAULT COLON program .)
    DEFAULT         reduce using rule 95 (case_clause -> DEFAULT COLON program .)
    RBRACE          reduce using rule 95 (case_clause -> DEFAULT COLON program .)


state 195

    (96) map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET . type
    (67) type -> . INT_TYPE
    (68) type -> . FLOAT64_TYPE
    (69) type -> . STRING_TYPE
    (70) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 67
    FLOAT64_TYPE    shift and go to state 68
    STRING_TYPE     shift and go to state 69
    BOOL_TYPE       shift and go to state 70

    type                           shift and go to state 222

state 196

    (106) array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .

    VAR             reduce using rule 106 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    VARIABLE        reduce using rule 106 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    FMT             reduce using rule 106 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    CONTINUE        reduce using rule 106 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    FUNC            reduce using rule 106 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    IF              reduce using rule 106 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    FOR             reduce using rule 106 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    TYPE            reduce using rule 106 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    SWITCH          reduce using rule 106 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    BREAK           reduce using rule 106 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    RETURN          reduce using rule 106 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    $end            reduce using rule 106 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    RBRACE          reduce using rule 106 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    CASE            reduce using rule 106 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    DEFAULT         reduce using rule 106 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)


state 197

    (97) map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET . type
    (102) map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET . type LBRACE map_kv_pairs RBRACE
    (67) type -> . INT_TYPE
    (68) type -> . FLOAT64_TYPE
    (69) type -> . STRING_TYPE
    (70) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 67
    FLOAT64_TYPE    shift and go to state 68
    STRING_TYPE     shift and go to state 69
    BOOL_TYPE       shift and go to state 70

    type                           shift and go to state 223

state 198

    (107) array_declaration -> VARIABLE ASIG LBRACKET NUMBER RBRACKET type . LBRACE array_values RBRACE

    LBRACE          shift and go to state 224


state 199

    (111) slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE . slice_values RBRACE
    (112) slice_values -> . expression
    (113) slice_values -> . expression COMMA slice_values
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    slice_values                   shift and go to state 225
    expression                     shift and go to state 226
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 200

    (98) make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET . type RBRACKET type RPAREN
    (100) make_expr -> MAKE LPAREN MAP LBRACKET . type RBRACKET type RPAREN
    (67) type -> . INT_TYPE
    (68) type -> . FLOAT64_TYPE
    (69) type -> . STRING_TYPE
    (70) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 67
    FLOAT64_TYPE    shift and go to state 68
    STRING_TYPE     shift and go to state 69
    BOOL_TYPE       shift and go to state 70

    type                           shift and go to state 227

state 201

    (99) make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET . type RPAREN
    (101) make_expr -> MAKE LPAREN LBRACKET RBRACKET . type RPAREN
    (67) type -> . INT_TYPE
    (68) type -> . FLOAT64_TYPE
    (69) type -> . STRING_TYPE
    (70) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 67
    FLOAT64_TYPE    shift and go to state 68
    STRING_TYPE     shift and go to state 69
    BOOL_TYPE       shift and go to state 70

    type                           shift and go to state 228

state 202

    (114) new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .

    VAR             reduce using rule 114 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    VARIABLE        reduce using rule 114 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    FMT             reduce using rule 114 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    CONTINUE        reduce using rule 114 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    FUNC            reduce using rule 114 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    IF              reduce using rule 114 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    FOR             reduce using rule 114 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    TYPE            reduce using rule 114 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    SWITCH          reduce using rule 114 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    BREAK           reduce using rule 114 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    RETURN          reduce using rule 114 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    $end            reduce using rule 114 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    RBRACE          reduce using rule 114 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    CASE            reduce using rule 114 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    DEFAULT         reduce using rule 114 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)


state 203

    (32) print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA . expression RPAREN
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    expression                     shift and go to state 229
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 204

    (33) print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .

    VAR             reduce using rule 33 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 33 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    FMT             reduce using rule 33 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 33 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    FUNC            reduce using rule 33 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    IF              reduce using rule 33 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    FOR             reduce using rule 33 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    TYPE            reduce using rule 33 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    SWITCH          reduce using rule 33 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    BREAK           reduce using rule 33 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    RETURN          reduce using rule 33 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    $end            reduce using rule 33 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    RBRACE          reduce using rule 33 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    CASE            reduce using rule 33 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 33 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)


state 205

    (34) input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE . RPAREN

    RPAREN          shift and go to state 230


state 206

    (79) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE . LPAREN param_list RPAREN type LBRACE program RBRACE
    (80) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE . LPAREN RPAREN type LBRACE program RBRACE

    LPAREN          shift and go to state 231


state 207

    (35) func_def -> FUNC VARIABLE LPAREN param_list RPAREN type . LBRACE program RBRACE

    LBRACE          shift and go to state 232


state 208

    (36) func_def -> FUNC VARIABLE LPAREN RPAREN type LBRACE . program RBRACE
    (1) program -> . statement
    (2) program -> . statement program
    (3) statement -> . declaration
    (4) statement -> . assignment
    (5) statement -> . print_stmt
    (6) statement -> . input_stmt
    (7) statement -> . continue_stmt
    (8) statement -> . struct_method
    (9) statement -> . func_def
    (10) statement -> . func_no_params
    (11) statement -> . func_call
    (12) statement -> . if_stmt
    (13) statement -> . for_stmt
    (14) statement -> . struct_def
    (15) statement -> . switch_stmt
    (16) statement -> . map_declaration
    (17) statement -> . map_declaration_values
    (18) statement -> . array_declaration
    (19) statement -> . slice_declaration
    (20) statement -> . make_stmt
    (21) statement -> . new_stmt
    (22) statement -> . break_stmt
    (23) statement -> . increment_stmt
    (24) statement -> . return_stmt
    (25) declaration -> . VAR VARIABLE type
    (26) declaration -> . VAR VARIABLE type ASIG expression
    (30) assignment -> . VARIABLE ASSIGN expression
    (31) assignment -> . VARIABLE ASIG expression
    (32) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (33) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (34) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (75) continue_stmt -> . CONTINUE
    (79) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (80) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (35) func_def -> . FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (36) func_def -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (38) func_no_params -> . FUNC VARIABLE LPAREN RPAREN block
    (39) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (40) func_call -> . VARIABLE LPAREN RPAREN
    (71) if_stmt -> . IF expression block
    (72) if_stmt -> . IF expression block ELSE block
    (73) for_stmt -> . FOR expression block
    (74) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (81) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (90) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (91) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (96) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (97) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (102) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (106) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (107) array_declaration -> . VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (110) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (111) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (98) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (99) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (114) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (115) break_stmt -> . BREAK
    (116) increment_stmt -> . VARIABLE INCREMENT
    (117) increment_stmt -> . VARIABLE DECREMENT
    (37) return_stmt -> . RETURN expression

    VAR             shift and go to state 25
    VARIABLE        shift and go to state 26
    FMT             shift and go to state 27
    CONTINUE        shift and go to state 28
    FUNC            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    TYPE            shift and go to state 32
    SWITCH          shift and go to state 33
    BREAK           shift and go to state 34
    RETURN          shift and go to state 35

    program                        shift and go to state 233
    statement                      shift and go to state 2
    declaration                    shift and go to state 3
    assignment                     shift and go to state 4
    print_stmt                     shift and go to state 5
    input_stmt                     shift and go to state 6
    continue_stmt                  shift and go to state 7
    struct_method                  shift and go to state 8
    func_def                       shift and go to state 9
    func_no_params                 shift and go to state 10
    func_call                      shift and go to state 11
    if_stmt                        shift and go to state 12
    for_stmt                       shift and go to state 13
    struct_def                     shift and go to state 14
    switch_stmt                    shift and go to state 15
    map_declaration                shift and go to state 16
    map_declaration_values         shift and go to state 17
    array_declaration              shift and go to state 18
    slice_declaration              shift and go to state 19
    make_stmt                      shift and go to state 20
    new_stmt                       shift and go to state 21
    break_stmt                     shift and go to state 22
    increment_stmt                 shift and go to state 23
    return_stmt                    shift and go to state 24

state 209

    (42) param_list -> param COMMA param_list .

    RPAREN          reduce using rule 42 (param_list -> param COMMA param_list .)


state 210

    (89) field_value -> VARIABLE COLON expression .
    (47) expression -> expression . PLUS term
    (48) expression -> expression . MINUS term
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NE expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LE expression
    (56) expression -> expression . GE expression

    COMMA           reduce using rule 89 (field_value -> VARIABLE COLON expression .)
    RBRACE          reduce using rule 89 (field_value -> VARIABLE COLON expression .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    EQ              shift and go to state 90
    NE              shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    GE              shift and go to state 95


state 211

    (88) struct_fields_values -> field_value COMMA struct_fields_values .

    RBRACE          reduce using rule 88 (struct_fields_values -> field_value COMMA struct_fields_values .)


state 212

    (100) make_expr -> MAKE LPAREN MAP LBRACKET type . RBRACKET type RPAREN

    RBRACKET        shift and go to state 234


state 213

    (101) make_expr -> MAKE LPAREN LBRACKET RBRACKET type . RPAREN

    RPAREN          shift and go to state 235


state 214

    (76) for_update -> assignment .

    LBRACE          reduce using rule 76 (for_update -> assignment .)


state 215

    (74) for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update . block
    (78) block -> . LBRACE program RBRACE

    LBRACE          shift and go to state 96

    block                          shift and go to state 236

state 216

    (77) for_update -> increment_stmt .

    LBRACE          reduce using rule 77 (for_update -> increment_stmt .)


state 217

    (30) assignment -> VARIABLE . ASSIGN expression
    (31) assignment -> VARIABLE . ASIG expression
    (116) increment_stmt -> VARIABLE . INCREMENT
    (117) increment_stmt -> VARIABLE . DECREMENT

    ASSIGN          shift and go to state 38
    ASIG            shift and go to state 104
    INCREMENT       shift and go to state 41
    DECREMENT       shift and go to state 42


state 218

    (84) struct_field -> VARIABLE type .

    VARIABLE        reduce using rule 84 (struct_field -> VARIABLE type .)
    INT_TYPE        reduce using rule 84 (struct_field -> VARIABLE type .)
    FLOAT64_TYPE    reduce using rule 84 (struct_field -> VARIABLE type .)
    STRING_TYPE     reduce using rule 84 (struct_field -> VARIABLE type .)
    BOOL_TYPE       reduce using rule 84 (struct_field -> VARIABLE type .)
    RBRACE          reduce using rule 84 (struct_field -> VARIABLE type .)


state 219

    (81) struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .

    VAR             reduce using rule 81 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    VARIABLE        reduce using rule 81 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    FMT             reduce using rule 81 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    CONTINUE        reduce using rule 81 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    FUNC            reduce using rule 81 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    IF              reduce using rule 81 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    FOR             reduce using rule 81 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    TYPE            reduce using rule 81 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    SWITCH          reduce using rule 81 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    BREAK           reduce using rule 81 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    RETURN          reduce using rule 81 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    $end            reduce using rule 81 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    RBRACE          reduce using rule 81 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    CASE            reduce using rule 81 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    DEFAULT         reduce using rule 81 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)


state 220

    (83) struct_fields -> struct_field struct_fields .

    RBRACE          reduce using rule 83 (struct_fields -> struct_field struct_fields .)


state 221

    (94) case_clause -> CASE expression COLON program .

    CASE            reduce using rule 94 (case_clause -> CASE expression COLON program .)
    DEFAULT         reduce using rule 94 (case_clause -> CASE expression COLON program .)
    RBRACE          reduce using rule 94 (case_clause -> CASE expression COLON program .)


state 222

    (96) map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .

    VAR             reduce using rule 96 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    VARIABLE        reduce using rule 96 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    FMT             reduce using rule 96 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    CONTINUE        reduce using rule 96 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    FUNC            reduce using rule 96 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    IF              reduce using rule 96 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    FOR             reduce using rule 96 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    TYPE            reduce using rule 96 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    SWITCH          reduce using rule 96 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    BREAK           reduce using rule 96 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    RETURN          reduce using rule 96 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    $end            reduce using rule 96 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    RBRACE          reduce using rule 96 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    CASE            reduce using rule 96 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    DEFAULT         reduce using rule 96 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)


state 223

    (97) map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .
    (102) map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type . LBRACE map_kv_pairs RBRACE

    VAR             reduce using rule 97 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    VARIABLE        reduce using rule 97 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    FMT             reduce using rule 97 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    CONTINUE        reduce using rule 97 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    FUNC            reduce using rule 97 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    IF              reduce using rule 97 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    FOR             reduce using rule 97 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    TYPE            reduce using rule 97 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    SWITCH          reduce using rule 97 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    BREAK           reduce using rule 97 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    RETURN          reduce using rule 97 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    $end            reduce using rule 97 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    RBRACE          reduce using rule 97 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    CASE            reduce using rule 97 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    DEFAULT         reduce using rule 97 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    LBRACE          shift and go to state 237


state 224

    (107) array_declaration -> VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE . array_values RBRACE
    (108) array_values -> . expression
    (109) array_values -> . expression COMMA array_values
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    array_values                   shift and go to state 238
    expression                     shift and go to state 239
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 225

    (111) slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values . RBRACE

    RBRACE          shift and go to state 240


state 226

    (112) slice_values -> expression .
    (113) slice_values -> expression . COMMA slice_values
    (47) expression -> expression . PLUS term
    (48) expression -> expression . MINUS term
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NE expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LE expression
    (56) expression -> expression . GE expression

    RBRACE          reduce using rule 112 (slice_values -> expression .)
    COMMA           shift and go to state 241
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    EQ              shift and go to state 90
    NE              shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    GE              shift and go to state 95


state 227

    (98) make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type . RBRACKET type RPAREN
    (100) make_expr -> MAKE LPAREN MAP LBRACKET type . RBRACKET type RPAREN

    RBRACKET        shift and go to state 242


state 228

    (99) make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type . RPAREN
    (101) make_expr -> MAKE LPAREN LBRACKET RBRACKET type . RPAREN

    RPAREN          shift and go to state 243


state 229

    (32) print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression . RPAREN
    (47) expression -> expression . PLUS term
    (48) expression -> expression . MINUS term
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NE expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LE expression
    (56) expression -> expression . GE expression

    RPAREN          shift and go to state 244
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    EQ              shift and go to state 90
    NE              shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    GE              shift and go to state 95


state 230

    (34) input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .

    VAR             reduce using rule 34 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    VARIABLE        reduce using rule 34 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    FMT             reduce using rule 34 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    CONTINUE        reduce using rule 34 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    FUNC            reduce using rule 34 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    IF              reduce using rule 34 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    FOR             reduce using rule 34 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    TYPE            reduce using rule 34 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    SWITCH          reduce using rule 34 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    BREAK           reduce using rule 34 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    RETURN          reduce using rule 34 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    $end            reduce using rule 34 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    RBRACE          reduce using rule 34 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    CASE            reduce using rule 34 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    DEFAULT         reduce using rule 34 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)


state 231

    (79) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN . param_list RPAREN type LBRACE program RBRACE
    (80) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN . RPAREN type LBRACE program RBRACE
    (41) param_list -> . param
    (42) param_list -> . param COMMA param_list
    (43) param -> . VARIABLE type

    RPAREN          shift and go to state 245
    VARIABLE        shift and go to state 126

    param_list                     shift and go to state 246
    param                          shift and go to state 129

state 232

    (35) func_def -> FUNC VARIABLE LPAREN param_list RPAREN type LBRACE . program RBRACE
    (1) program -> . statement
    (2) program -> . statement program
    (3) statement -> . declaration
    (4) statement -> . assignment
    (5) statement -> . print_stmt
    (6) statement -> . input_stmt
    (7) statement -> . continue_stmt
    (8) statement -> . struct_method
    (9) statement -> . func_def
    (10) statement -> . func_no_params
    (11) statement -> . func_call
    (12) statement -> . if_stmt
    (13) statement -> . for_stmt
    (14) statement -> . struct_def
    (15) statement -> . switch_stmt
    (16) statement -> . map_declaration
    (17) statement -> . map_declaration_values
    (18) statement -> . array_declaration
    (19) statement -> . slice_declaration
    (20) statement -> . make_stmt
    (21) statement -> . new_stmt
    (22) statement -> . break_stmt
    (23) statement -> . increment_stmt
    (24) statement -> . return_stmt
    (25) declaration -> . VAR VARIABLE type
    (26) declaration -> . VAR VARIABLE type ASIG expression
    (30) assignment -> . VARIABLE ASSIGN expression
    (31) assignment -> . VARIABLE ASIG expression
    (32) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (33) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (34) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (75) continue_stmt -> . CONTINUE
    (79) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (80) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (35) func_def -> . FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (36) func_def -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (38) func_no_params -> . FUNC VARIABLE LPAREN RPAREN block
    (39) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (40) func_call -> . VARIABLE LPAREN RPAREN
    (71) if_stmt -> . IF expression block
    (72) if_stmt -> . IF expression block ELSE block
    (73) for_stmt -> . FOR expression block
    (74) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (81) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (90) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (91) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (96) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (97) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (102) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (106) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (107) array_declaration -> . VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (110) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (111) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (98) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (99) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (114) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (115) break_stmt -> . BREAK
    (116) increment_stmt -> . VARIABLE INCREMENT
    (117) increment_stmt -> . VARIABLE DECREMENT
    (37) return_stmt -> . RETURN expression

    VAR             shift and go to state 25
    VARIABLE        shift and go to state 26
    FMT             shift and go to state 27
    CONTINUE        shift and go to state 28
    FUNC            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    TYPE            shift and go to state 32
    SWITCH          shift and go to state 33
    BREAK           shift and go to state 34
    RETURN          shift and go to state 35

    program                        shift and go to state 247
    statement                      shift and go to state 2
    declaration                    shift and go to state 3
    assignment                     shift and go to state 4
    print_stmt                     shift and go to state 5
    input_stmt                     shift and go to state 6
    continue_stmt                  shift and go to state 7
    struct_method                  shift and go to state 8
    func_def                       shift and go to state 9
    func_no_params                 shift and go to state 10
    func_call                      shift and go to state 11
    if_stmt                        shift and go to state 12
    for_stmt                       shift and go to state 13
    struct_def                     shift and go to state 14
    switch_stmt                    shift and go to state 15
    map_declaration                shift and go to state 16
    map_declaration_values         shift and go to state 17
    array_declaration              shift and go to state 18
    slice_declaration              shift and go to state 19
    make_stmt                      shift and go to state 20
    new_stmt                       shift and go to state 21
    break_stmt                     shift and go to state 22
    increment_stmt                 shift and go to state 23
    return_stmt                    shift and go to state 24

state 233

    (36) func_def -> FUNC VARIABLE LPAREN RPAREN type LBRACE program . RBRACE

    RBRACE          shift and go to state 248


state 234

    (100) make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET . type RPAREN
    (67) type -> . INT_TYPE
    (68) type -> . FLOAT64_TYPE
    (69) type -> . STRING_TYPE
    (70) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 67
    FLOAT64_TYPE    shift and go to state 68
    STRING_TYPE     shift and go to state 69
    BOOL_TYPE       shift and go to state 70

    type                           shift and go to state 249

state 235

    (101) make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .

    TIMES           reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    DIVIDE          reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    PLUS            reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    MINUS           reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    AND             reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    OR              reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    EQ              reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    NE              reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LT              reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    GT              reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LE              reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    GE              reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LBRACE          reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    VAR             reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    VARIABLE        reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    FMT             reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    CONTINUE        reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    FUNC            reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    IF              reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    FOR             reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    TYPE            reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    SWITCH          reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    BREAK           reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    RETURN          reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    $end            reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    RBRACE          reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    CASE            reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    DEFAULT         reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    SEMICOLON       reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    COMMA           reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    RPAREN          reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    COLON           reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)


state 236

    (74) for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .

    VAR             reduce using rule 74 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    VARIABLE        reduce using rule 74 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    FMT             reduce using rule 74 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    CONTINUE        reduce using rule 74 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    FUNC            reduce using rule 74 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    IF              reduce using rule 74 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    FOR             reduce using rule 74 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    TYPE            reduce using rule 74 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    SWITCH          reduce using rule 74 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    BREAK           reduce using rule 74 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    RETURN          reduce using rule 74 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    $end            reduce using rule 74 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    RBRACE          reduce using rule 74 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    CASE            reduce using rule 74 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    DEFAULT         reduce using rule 74 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)


state 237

    (102) map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE . map_kv_pairs RBRACE
    (103) map_kv_pairs -> . map_kv_pair
    (104) map_kv_pairs -> . map_kv_pair COMMA map_kv_pairs
    (105) map_kv_pair -> . STRING COLON expression

    STRING          shift and go to state 252

    map_kv_pairs                   shift and go to state 250
    map_kv_pair                    shift and go to state 251

state 238

    (107) array_declaration -> VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values . RBRACE

    RBRACE          shift and go to state 253


state 239

    (108) array_values -> expression .
    (109) array_values -> expression . COMMA array_values
    (47) expression -> expression . PLUS term
    (48) expression -> expression . MINUS term
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NE expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LE expression
    (56) expression -> expression . GE expression

    RBRACE          reduce using rule 108 (array_values -> expression .)
    COMMA           shift and go to state 254
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    EQ              shift and go to state 90
    NE              shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    GE              shift and go to state 95


state 240

    (111) slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .

    VAR             reduce using rule 111 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    VARIABLE        reduce using rule 111 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    FMT             reduce using rule 111 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    CONTINUE        reduce using rule 111 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    FUNC            reduce using rule 111 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    IF              reduce using rule 111 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    FOR             reduce using rule 111 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    TYPE            reduce using rule 111 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    SWITCH          reduce using rule 111 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    BREAK           reduce using rule 111 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    RETURN          reduce using rule 111 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    $end            reduce using rule 111 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    RBRACE          reduce using rule 111 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    CASE            reduce using rule 111 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    DEFAULT         reduce using rule 111 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)


state 241

    (113) slice_values -> expression COMMA . slice_values
    (112) slice_values -> . expression
    (113) slice_values -> . expression COMMA slice_values
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    expression                     shift and go to state 226
    slice_values                   shift and go to state 255
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 242

    (98) make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET . type RPAREN
    (100) make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET . type RPAREN
    (67) type -> . INT_TYPE
    (68) type -> . FLOAT64_TYPE
    (69) type -> . STRING_TYPE
    (70) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 67
    FLOAT64_TYPE    shift and go to state 68
    STRING_TYPE     shift and go to state 69
    BOOL_TYPE       shift and go to state 70

    type                           shift and go to state 256

state 243

    (99) make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .
    (101) make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .

  ! reduce/reduce conflict for VAR resolved using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for FMT resolved using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for FUNC resolved using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for IF resolved using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for FOR resolved using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for TYPE resolved using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for SWITCH resolved using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for BREAK resolved using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for RETURN resolved using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for RBRACE resolved using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for CASE resolved using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    VAR             reduce using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    VARIABLE        reduce using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    FMT             reduce using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    CONTINUE        reduce using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    FUNC            reduce using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    IF              reduce using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    FOR             reduce using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    TYPE            reduce using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    SWITCH          reduce using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    BREAK           reduce using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    RETURN          reduce using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    $end            reduce using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    RBRACE          reduce using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    CASE            reduce using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    DEFAULT         reduce using rule 99 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    TIMES           reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    DIVIDE          reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    PLUS            reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    MINUS           reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    AND             reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    OR              reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    EQ              reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    NE              reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LT              reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    GT              reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LE              reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    GE              reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)

  ! VAR             [ reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! VARIABLE        [ reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! FMT             [ reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! CONTINUE        [ reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! FUNC            [ reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! IF              [ reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! FOR             [ reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! TYPE            [ reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! SWITCH          [ reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! BREAK           [ reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! RETURN          [ reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! $end            [ reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! RBRACE          [ reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! CASE            [ reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! DEFAULT         [ reduce using rule 101 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]


state 244

    (32) print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .

    VAR             reduce using rule 32 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    VARIABLE        reduce using rule 32 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    FMT             reduce using rule 32 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    CONTINUE        reduce using rule 32 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    FUNC            reduce using rule 32 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    IF              reduce using rule 32 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    FOR             reduce using rule 32 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    TYPE            reduce using rule 32 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    SWITCH          reduce using rule 32 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    BREAK           reduce using rule 32 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    RETURN          reduce using rule 32 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    $end            reduce using rule 32 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    RBRACE          reduce using rule 32 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    CASE            reduce using rule 32 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    DEFAULT         reduce using rule 32 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)


state 245

    (80) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN . type LBRACE program RBRACE
    (67) type -> . INT_TYPE
    (68) type -> . FLOAT64_TYPE
    (69) type -> . STRING_TYPE
    (70) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 67
    FLOAT64_TYPE    shift and go to state 68
    STRING_TYPE     shift and go to state 69
    BOOL_TYPE       shift and go to state 70

    type                           shift and go to state 257

state 246

    (79) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list . RPAREN type LBRACE program RBRACE

    RPAREN          shift and go to state 258


state 247

    (35) func_def -> FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program . RBRACE

    RBRACE          shift and go to state 259


state 248

    (36) func_def -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .

    VAR             reduce using rule 36 (func_def -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    VARIABLE        reduce using rule 36 (func_def -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    FMT             reduce using rule 36 (func_def -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    CONTINUE        reduce using rule 36 (func_def -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    FUNC            reduce using rule 36 (func_def -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    IF              reduce using rule 36 (func_def -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    FOR             reduce using rule 36 (func_def -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    TYPE            reduce using rule 36 (func_def -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    SWITCH          reduce using rule 36 (func_def -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    BREAK           reduce using rule 36 (func_def -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    RETURN          reduce using rule 36 (func_def -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    $end            reduce using rule 36 (func_def -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    RBRACE          reduce using rule 36 (func_def -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    CASE            reduce using rule 36 (func_def -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    DEFAULT         reduce using rule 36 (func_def -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)


state 249

    (100) make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type . RPAREN

    RPAREN          shift and go to state 260


state 250

    (102) map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs . RBRACE

    RBRACE          shift and go to state 261


state 251

    (103) map_kv_pairs -> map_kv_pair .
    (104) map_kv_pairs -> map_kv_pair . COMMA map_kv_pairs

    RBRACE          reduce using rule 103 (map_kv_pairs -> map_kv_pair .)
    COMMA           shift and go to state 262


state 252

    (105) map_kv_pair -> STRING . COLON expression

    COLON           shift and go to state 263


state 253

    (107) array_declaration -> VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .

    VAR             reduce using rule 107 (array_declaration -> VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    VARIABLE        reduce using rule 107 (array_declaration -> VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    FMT             reduce using rule 107 (array_declaration -> VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    CONTINUE        reduce using rule 107 (array_declaration -> VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    FUNC            reduce using rule 107 (array_declaration -> VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    IF              reduce using rule 107 (array_declaration -> VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    FOR             reduce using rule 107 (array_declaration -> VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    TYPE            reduce using rule 107 (array_declaration -> VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    SWITCH          reduce using rule 107 (array_declaration -> VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    BREAK           reduce using rule 107 (array_declaration -> VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    RETURN          reduce using rule 107 (array_declaration -> VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    $end            reduce using rule 107 (array_declaration -> VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    RBRACE          reduce using rule 107 (array_declaration -> VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    CASE            reduce using rule 107 (array_declaration -> VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    DEFAULT         reduce using rule 107 (array_declaration -> VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)


state 254

    (109) array_values -> expression COMMA . array_values
    (108) array_values -> . expression
    (109) array_values -> . expression COMMA array_values
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    expression                     shift and go to state 239
    array_values                   shift and go to state 264
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 255

    (113) slice_values -> expression COMMA slice_values .

    RBRACE          reduce using rule 113 (slice_values -> expression COMMA slice_values .)


state 256

    (98) make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type . RPAREN
    (100) make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type . RPAREN

    RPAREN          shift and go to state 265


state 257

    (80) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type . LBRACE program RBRACE

    LBRACE          shift and go to state 266


state 258

    (79) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN . type LBRACE program RBRACE
    (67) type -> . INT_TYPE
    (68) type -> . FLOAT64_TYPE
    (69) type -> . STRING_TYPE
    (70) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 67
    FLOAT64_TYPE    shift and go to state 68
    STRING_TYPE     shift and go to state 69
    BOOL_TYPE       shift and go to state 70

    type                           shift and go to state 267

state 259

    (35) func_def -> FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .

    VAR             reduce using rule 35 (func_def -> FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    VARIABLE        reduce using rule 35 (func_def -> FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    FMT             reduce using rule 35 (func_def -> FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    CONTINUE        reduce using rule 35 (func_def -> FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    FUNC            reduce using rule 35 (func_def -> FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    IF              reduce using rule 35 (func_def -> FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    FOR             reduce using rule 35 (func_def -> FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    TYPE            reduce using rule 35 (func_def -> FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    SWITCH          reduce using rule 35 (func_def -> FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    BREAK           reduce using rule 35 (func_def -> FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    RETURN          reduce using rule 35 (func_def -> FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    $end            reduce using rule 35 (func_def -> FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    RBRACE          reduce using rule 35 (func_def -> FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    CASE            reduce using rule 35 (func_def -> FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    DEFAULT         reduce using rule 35 (func_def -> FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)


state 260

    (100) make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .

    TIMES           reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    DIVIDE          reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    PLUS            reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    MINUS           reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    AND             reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    OR              reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    EQ              reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    NE              reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LT              reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    GT              reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LE              reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    GE              reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LBRACE          reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    VAR             reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    VARIABLE        reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FMT             reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    CONTINUE        reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FUNC            reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    IF              reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FOR             reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    TYPE            reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    SWITCH          reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    BREAK           reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    RETURN          reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    $end            reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    RBRACE          reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    CASE            reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    DEFAULT         reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    SEMICOLON       reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    COMMA           reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    RPAREN          reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    COLON           reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)


state 261

    (102) map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .

    VAR             reduce using rule 102 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    VARIABLE        reduce using rule 102 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    FMT             reduce using rule 102 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    CONTINUE        reduce using rule 102 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    FUNC            reduce using rule 102 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    IF              reduce using rule 102 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    FOR             reduce using rule 102 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    TYPE            reduce using rule 102 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    SWITCH          reduce using rule 102 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    BREAK           reduce using rule 102 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    RETURN          reduce using rule 102 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    $end            reduce using rule 102 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    RBRACE          reduce using rule 102 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    CASE            reduce using rule 102 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    DEFAULT         reduce using rule 102 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)


state 262

    (104) map_kv_pairs -> map_kv_pair COMMA . map_kv_pairs
    (103) map_kv_pairs -> . map_kv_pair
    (104) map_kv_pairs -> . map_kv_pair COMMA map_kv_pairs
    (105) map_kv_pair -> . STRING COLON expression

    STRING          shift and go to state 252

    map_kv_pair                    shift and go to state 251
    map_kv_pairs                   shift and go to state 268

state 263

    (105) map_kv_pair -> STRING COLON . expression
    (27) expression -> . NUMBER
    (28) expression -> . FLOAT
    (29) expression -> . VARIABLE
    (46) expression -> . term
    (47) expression -> . expression PLUS term
    (48) expression -> . expression MINUS term
    (49) expression -> . expression AND expression
    (50) expression -> . expression OR expression
    (51) expression -> . expression EQ expression
    (52) expression -> . expression NE expression
    (53) expression -> . expression LT expression
    (54) expression -> . expression GT expression
    (55) expression -> . expression LE expression
    (56) expression -> . expression GE expression
    (57) term -> . factor
    (58) term -> . term TIMES factor
    (59) term -> . term DIVIDE factor
    (60) factor -> . NUMBER
    (61) factor -> . FLOAT
    (62) factor -> . STRING
    (63) factor -> . VARIABLE
    (64) factor -> . LPAREN expression RPAREN
    (65) factor -> . make_expr
    (66) factor -> . struct_instance
    (100) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (101) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (86) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE

    NUMBER          shift and go to state 47
    FLOAT           shift and go to state 48
    VARIABLE        shift and go to state 49
    STRING          shift and go to state 52
    LPAREN          shift and go to state 53
    MAKE            shift and go to state 56

    expression                     shift and go to state 269
    term                           shift and go to state 50
    factor                         shift and go to state 51
    make_expr                      shift and go to state 54
    struct_instance                shift and go to state 55

state 264

    (109) array_values -> expression COMMA array_values .

    RBRACE          reduce using rule 109 (array_values -> expression COMMA array_values .)


state 265

    (98) make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .
    (100) make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .

  ! reduce/reduce conflict for VAR resolved using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for FMT resolved using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for FUNC resolved using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for IF resolved using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for FOR resolved using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for TYPE resolved using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for SWITCH resolved using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for BREAK resolved using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for RETURN resolved using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for RBRACE resolved using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for CASE resolved using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    VAR             reduce using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    VARIABLE        reduce using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FMT             reduce using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    CONTINUE        reduce using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FUNC            reduce using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    IF              reduce using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FOR             reduce using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    TYPE            reduce using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    SWITCH          reduce using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    BREAK           reduce using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    RETURN          reduce using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    $end            reduce using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    RBRACE          reduce using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    CASE            reduce using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    DEFAULT         reduce using rule 98 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    TIMES           reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    DIVIDE          reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    PLUS            reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    MINUS           reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    AND             reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    OR              reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    EQ              reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    NE              reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LT              reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    GT              reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LE              reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    GE              reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)

  ! VAR             [ reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! VARIABLE        [ reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! FMT             [ reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! CONTINUE        [ reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! FUNC            [ reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! IF              [ reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! FOR             [ reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! TYPE            [ reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! SWITCH          [ reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! BREAK           [ reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! RETURN          [ reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! $end            [ reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! RBRACE          [ reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! CASE            [ reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! DEFAULT         [ reduce using rule 100 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]


state 266

    (80) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE . program RBRACE
    (1) program -> . statement
    (2) program -> . statement program
    (3) statement -> . declaration
    (4) statement -> . assignment
    (5) statement -> . print_stmt
    (6) statement -> . input_stmt
    (7) statement -> . continue_stmt
    (8) statement -> . struct_method
    (9) statement -> . func_def
    (10) statement -> . func_no_params
    (11) statement -> . func_call
    (12) statement -> . if_stmt
    (13) statement -> . for_stmt
    (14) statement -> . struct_def
    (15) statement -> . switch_stmt
    (16) statement -> . map_declaration
    (17) statement -> . map_declaration_values
    (18) statement -> . array_declaration
    (19) statement -> . slice_declaration
    (20) statement -> . make_stmt
    (21) statement -> . new_stmt
    (22) statement -> . break_stmt
    (23) statement -> . increment_stmt
    (24) statement -> . return_stmt
    (25) declaration -> . VAR VARIABLE type
    (26) declaration -> . VAR VARIABLE type ASIG expression
    (30) assignment -> . VARIABLE ASSIGN expression
    (31) assignment -> . VARIABLE ASIG expression
    (32) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (33) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (34) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (75) continue_stmt -> . CONTINUE
    (79) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (80) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (35) func_def -> . FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (36) func_def -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (38) func_no_params -> . FUNC VARIABLE LPAREN RPAREN block
    (39) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (40) func_call -> . VARIABLE LPAREN RPAREN
    (71) if_stmt -> . IF expression block
    (72) if_stmt -> . IF expression block ELSE block
    (73) for_stmt -> . FOR expression block
    (74) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (81) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (90) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (91) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (96) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (97) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (102) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (106) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (107) array_declaration -> . VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (110) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (111) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (98) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (99) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (114) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (115) break_stmt -> . BREAK
    (116) increment_stmt -> . VARIABLE INCREMENT
    (117) increment_stmt -> . VARIABLE DECREMENT
    (37) return_stmt -> . RETURN expression

    VAR             shift and go to state 25
    VARIABLE        shift and go to state 26
    FMT             shift and go to state 27
    CONTINUE        shift and go to state 28
    FUNC            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    TYPE            shift and go to state 32
    SWITCH          shift and go to state 33
    BREAK           shift and go to state 34
    RETURN          shift and go to state 35

    program                        shift and go to state 270
    statement                      shift and go to state 2
    declaration                    shift and go to state 3
    assignment                     shift and go to state 4
    print_stmt                     shift and go to state 5
    input_stmt                     shift and go to state 6
    continue_stmt                  shift and go to state 7
    struct_method                  shift and go to state 8
    func_def                       shift and go to state 9
    func_no_params                 shift and go to state 10
    func_call                      shift and go to state 11
    if_stmt                        shift and go to state 12
    for_stmt                       shift and go to state 13
    struct_def                     shift and go to state 14
    switch_stmt                    shift and go to state 15
    map_declaration                shift and go to state 16
    map_declaration_values         shift and go to state 17
    array_declaration              shift and go to state 18
    slice_declaration              shift and go to state 19
    make_stmt                      shift and go to state 20
    new_stmt                       shift and go to state 21
    break_stmt                     shift and go to state 22
    increment_stmt                 shift and go to state 23
    return_stmt                    shift and go to state 24

state 267

    (79) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type . LBRACE program RBRACE

    LBRACE          shift and go to state 271


state 268

    (104) map_kv_pairs -> map_kv_pair COMMA map_kv_pairs .

    RBRACE          reduce using rule 104 (map_kv_pairs -> map_kv_pair COMMA map_kv_pairs .)


state 269

    (105) map_kv_pair -> STRING COLON expression .
    (47) expression -> expression . PLUS term
    (48) expression -> expression . MINUS term
    (49) expression -> expression . AND expression
    (50) expression -> expression . OR expression
    (51) expression -> expression . EQ expression
    (52) expression -> expression . NE expression
    (53) expression -> expression . LT expression
    (54) expression -> expression . GT expression
    (55) expression -> expression . LE expression
    (56) expression -> expression . GE expression

    COMMA           reduce using rule 105 (map_kv_pair -> STRING COLON expression .)
    RBRACE          reduce using rule 105 (map_kv_pair -> STRING COLON expression .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89
    EQ              shift and go to state 90
    NE              shift and go to state 91
    LT              shift and go to state 92
    GT              shift and go to state 93
    LE              shift and go to state 94
    GE              shift and go to state 95


state 270

    (80) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program . RBRACE

    RBRACE          shift and go to state 272


state 271

    (79) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE . program RBRACE
    (1) program -> . statement
    (2) program -> . statement program
    (3) statement -> . declaration
    (4) statement -> . assignment
    (5) statement -> . print_stmt
    (6) statement -> . input_stmt
    (7) statement -> . continue_stmt
    (8) statement -> . struct_method
    (9) statement -> . func_def
    (10) statement -> . func_no_params
    (11) statement -> . func_call
    (12) statement -> . if_stmt
    (13) statement -> . for_stmt
    (14) statement -> . struct_def
    (15) statement -> . switch_stmt
    (16) statement -> . map_declaration
    (17) statement -> . map_declaration_values
    (18) statement -> . array_declaration
    (19) statement -> . slice_declaration
    (20) statement -> . make_stmt
    (21) statement -> . new_stmt
    (22) statement -> . break_stmt
    (23) statement -> . increment_stmt
    (24) statement -> . return_stmt
    (25) declaration -> . VAR VARIABLE type
    (26) declaration -> . VAR VARIABLE type ASIG expression
    (30) assignment -> . VARIABLE ASSIGN expression
    (31) assignment -> . VARIABLE ASIG expression
    (32) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (33) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (34) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (75) continue_stmt -> . CONTINUE
    (79) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (80) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (35) func_def -> . FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (36) func_def -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (38) func_no_params -> . FUNC VARIABLE LPAREN RPAREN block
    (39) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (40) func_call -> . VARIABLE LPAREN RPAREN
    (71) if_stmt -> . IF expression block
    (72) if_stmt -> . IF expression block ELSE block
    (73) for_stmt -> . FOR expression block
    (74) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (81) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (90) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (91) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (96) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (97) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (102) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (106) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (107) array_declaration -> . VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (110) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (111) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (98) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (99) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (114) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (115) break_stmt -> . BREAK
    (116) increment_stmt -> . VARIABLE INCREMENT
    (117) increment_stmt -> . VARIABLE DECREMENT
    (37) return_stmt -> . RETURN expression

    VAR             shift and go to state 25
    VARIABLE        shift and go to state 26
    FMT             shift and go to state 27
    CONTINUE        shift and go to state 28
    FUNC            shift and go to state 29
    IF              shift and go to state 30
    FOR             shift and go to state 31
    TYPE            shift and go to state 32
    SWITCH          shift and go to state 33
    BREAK           shift and go to state 34
    RETURN          shift and go to state 35

    program                        shift and go to state 273
    statement                      shift and go to state 2
    declaration                    shift and go to state 3
    assignment                     shift and go to state 4
    print_stmt                     shift and go to state 5
    input_stmt                     shift and go to state 6
    continue_stmt                  shift and go to state 7
    struct_method                  shift and go to state 8
    func_def                       shift and go to state 9
    func_no_params                 shift and go to state 10
    func_call                      shift and go to state 11
    if_stmt                        shift and go to state 12
    for_stmt                       shift and go to state 13
    struct_def                     shift and go to state 14
    switch_stmt                    shift and go to state 15
    map_declaration                shift and go to state 16
    map_declaration_values         shift and go to state 17
    array_declaration              shift and go to state 18
    slice_declaration              shift and go to state 19
    make_stmt                      shift and go to state 20
    new_stmt                       shift and go to state 21
    break_stmt                     shift and go to state 22
    increment_stmt                 shift and go to state 23
    return_stmt                    shift and go to state 24

state 272

    (80) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .

    VAR             reduce using rule 80 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    VARIABLE        reduce using rule 80 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    FMT             reduce using rule 80 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    CONTINUE        reduce using rule 80 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    FUNC            reduce using rule 80 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    IF              reduce using rule 80 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    FOR             reduce using rule 80 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    TYPE            reduce using rule 80 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    SWITCH          reduce using rule 80 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    BREAK           reduce using rule 80 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    RETURN          reduce using rule 80 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    $end            reduce using rule 80 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    RBRACE          reduce using rule 80 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    CASE            reduce using rule 80 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    DEFAULT         reduce using rule 80 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)


state 273

    (79) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program . RBRACE

    RBRACE          shift and go to state 274


state 274

    (79) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .

    VAR             reduce using rule 79 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    VARIABLE        reduce using rule 79 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    FMT             reduce using rule 79 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    CONTINUE        reduce using rule 79 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    FUNC            reduce using rule 79 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    IF              reduce using rule 79 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    FOR             reduce using rule 79 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    TYPE            reduce using rule 79 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    SWITCH          reduce using rule 79 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    BREAK           reduce using rule 79 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    RETURN          reduce using rule 79 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    $end            reduce using rule 79 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    RBRACE          reduce using rule 79 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    CASE            reduce using rule 79 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    DEFAULT         reduce using rule 79 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACE in state 49 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 59 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 134 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 136 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 136 resolved as shift
WARNING: shift/reduce conflict for AND in state 136 resolved as shift
WARNING: shift/reduce conflict for OR in state 136 resolved as shift
WARNING: shift/reduce conflict for EQ in state 136 resolved as shift
WARNING: shift/reduce conflict for NE in state 136 resolved as shift
WARNING: shift/reduce conflict for LT in state 136 resolved as shift
WARNING: shift/reduce conflict for GT in state 136 resolved as shift
WARNING: shift/reduce conflict for LE in state 136 resolved as shift
WARNING: shift/reduce conflict for GE in state 136 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 137 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 137 resolved as shift
WARNING: shift/reduce conflict for AND in state 137 resolved as shift
WARNING: shift/reduce conflict for OR in state 137 resolved as shift
WARNING: shift/reduce conflict for EQ in state 137 resolved as shift
WARNING: shift/reduce conflict for NE in state 137 resolved as shift
WARNING: shift/reduce conflict for LT in state 137 resolved as shift
WARNING: shift/reduce conflict for GT in state 137 resolved as shift
WARNING: shift/reduce conflict for LE in state 137 resolved as shift
WARNING: shift/reduce conflict for GE in state 137 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 138 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 138 resolved as shift
WARNING: shift/reduce conflict for AND in state 138 resolved as shift
WARNING: shift/reduce conflict for OR in state 138 resolved as shift
WARNING: shift/reduce conflict for EQ in state 138 resolved as shift
WARNING: shift/reduce conflict for NE in state 138 resolved as shift
WARNING: shift/reduce conflict for LT in state 138 resolved as shift
WARNING: shift/reduce conflict for GT in state 138 resolved as shift
WARNING: shift/reduce conflict for LE in state 138 resolved as shift
WARNING: shift/reduce conflict for GE in state 138 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 139 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 139 resolved as shift
WARNING: shift/reduce conflict for AND in state 139 resolved as shift
WARNING: shift/reduce conflict for OR in state 139 resolved as shift
WARNING: shift/reduce conflict for EQ in state 139 resolved as shift
WARNING: shift/reduce conflict for NE in state 139 resolved as shift
WARNING: shift/reduce conflict for LT in state 139 resolved as shift
WARNING: shift/reduce conflict for GT in state 139 resolved as shift
WARNING: shift/reduce conflict for LE in state 139 resolved as shift
WARNING: shift/reduce conflict for GE in state 139 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 140 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 140 resolved as shift
WARNING: shift/reduce conflict for AND in state 140 resolved as shift
WARNING: shift/reduce conflict for OR in state 140 resolved as shift
WARNING: shift/reduce conflict for EQ in state 140 resolved as shift
WARNING: shift/reduce conflict for NE in state 140 resolved as shift
WARNING: shift/reduce conflict for LT in state 140 resolved as shift
WARNING: shift/reduce conflict for GT in state 140 resolved as shift
WARNING: shift/reduce conflict for LE in state 140 resolved as shift
WARNING: shift/reduce conflict for GE in state 140 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 141 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 141 resolved as shift
WARNING: shift/reduce conflict for AND in state 141 resolved as shift
WARNING: shift/reduce conflict for OR in state 141 resolved as shift
WARNING: shift/reduce conflict for EQ in state 141 resolved as shift
WARNING: shift/reduce conflict for NE in state 141 resolved as shift
WARNING: shift/reduce conflict for LT in state 141 resolved as shift
WARNING: shift/reduce conflict for GT in state 141 resolved as shift
WARNING: shift/reduce conflict for LE in state 141 resolved as shift
WARNING: shift/reduce conflict for GE in state 141 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 142 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 142 resolved as shift
WARNING: shift/reduce conflict for AND in state 142 resolved as shift
WARNING: shift/reduce conflict for OR in state 142 resolved as shift
WARNING: shift/reduce conflict for EQ in state 142 resolved as shift
WARNING: shift/reduce conflict for NE in state 142 resolved as shift
WARNING: shift/reduce conflict for LT in state 142 resolved as shift
WARNING: shift/reduce conflict for GT in state 142 resolved as shift
WARNING: shift/reduce conflict for LE in state 142 resolved as shift
WARNING: shift/reduce conflict for GE in state 142 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 143 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 143 resolved as shift
WARNING: shift/reduce conflict for AND in state 143 resolved as shift
WARNING: shift/reduce conflict for OR in state 143 resolved as shift
WARNING: shift/reduce conflict for EQ in state 143 resolved as shift
WARNING: shift/reduce conflict for NE in state 143 resolved as shift
WARNING: shift/reduce conflict for LT in state 143 resolved as shift
WARNING: shift/reduce conflict for GT in state 143 resolved as shift
WARNING: shift/reduce conflict for LE in state 143 resolved as shift
WARNING: shift/reduce conflict for GE in state 143 resolved as shift
WARNING: reduce/reduce conflict in state 47 resolved using rule (expression -> NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 47
WARNING: reduce/reduce conflict in state 48 resolved using rule (expression -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 48
WARNING: reduce/reduce conflict in state 49 resolved using rule (expression -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 49
WARNING: reduce/reduce conflict in state 59 resolved using rule (expression -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 59
WARNING: reduce/reduce conflict in state 243 resolved using rule (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN)
WARNING: rejected rule (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN) in state 243
WARNING: reduce/reduce conflict in state 265 resolved using rule (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN)
WARNING: rejected rule (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN) in state 265
