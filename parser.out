Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    MOD
    NOT
    PRINT
    RANGE
    UINT

Grammar

Rule 0     S' -> start
Rule 1     start -> PACKAGE VARIABLE import_stmt program
Rule 2     import_stmt -> IMPORT LPAREN STRING RPAREN
Rule 3     import_stmt -> IMPORT STRING
Rule 4     program -> statement
Rule 5     program -> statement program
Rule 6     statement -> declaration
Rule 7     statement -> assignment
Rule 8     statement -> print_stmt
Rule 9     statement -> input_stmt
Rule 10    statement -> continue_stmt
Rule 11    statement -> struct_method
Rule 12    statement -> func_def
Rule 13    statement -> func_no_params
Rule 14    statement -> func_call
Rule 15    statement -> if_stmt
Rule 16    statement -> for_stmt
Rule 17    statement -> struct_def
Rule 18    statement -> switch_stmt
Rule 19    statement -> map_declaration
Rule 20    statement -> map_declaration_values
Rule 21    statement -> array_declaration
Rule 22    statement -> array_literal
Rule 23    statement -> slice_declaration
Rule 24    statement -> make_stmt
Rule 25    statement -> new_stmt
Rule 26    statement -> break_stmt
Rule 27    statement -> increment_stmt
Rule 28    statement -> return_stmt
Rule 29    declaration -> VAR VARIABLE type
Rule 30    declaration -> VAR VARIABLE type ASIG expression
Rule 31    declaration -> VAR VARIABLE type ASSIGN expression
Rule 32    declaration -> VAR id_list type ASSIGN expr_list
Rule 33    declaration -> VAR id_list type ASIG expr_list
Rule 34    declaration -> VAR id_list ASSIGN expr_list
Rule 35    declaration -> VAR id_list ASIG expr_list
Rule 36    id_list -> VARIABLE
Rule 37    id_list -> VARIABLE COMMA id_list
Rule 38    expr_list -> expression
Rule 39    expr_list -> expression COMMA expr_list
Rule 40    declaration -> VARIABLE ASIG expression
Rule 41    expression -> NUMBER
Rule 42    expression -> FLOAT
Rule 43    expression -> VARIABLE
Rule 44    assignment -> VARIABLE ASSIGN expression
Rule 45    assignment -> VARIABLE ASIG expression
Rule 46    print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
Rule 47    print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN
Rule 48    input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
Rule 49    func_def -> func_header func_body
Rule 50    func_header -> FUNC VARIABLE LPAREN param_list RPAREN type
Rule 51    func_body -> LBRACE program RBRACE
Rule 52    return_stmt -> RETURN expression
Rule 53    func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
Rule 54    func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
Rule 55    func_call -> VARIABLE LPAREN arg_list RPAREN
Rule 56    func_call -> VARIABLE LPAREN RPAREN
Rule 57    param_list -> param
Rule 58    param_list -> param COMMA param_list
Rule 59    param -> VARIABLE type
Rule 60    arg_list -> expression
Rule 61    arg_list -> expression COMMA arg_list
Rule 62    expression -> term
Rule 63    expression -> expression PLUS term
Rule 64    expression -> expression MINUS term
Rule 65    expression -> expression AND expression
Rule 66    expression -> expression OR expression
Rule 67    expression -> expression EQ expression
Rule 68    expression -> expression NE expression
Rule 69    expression -> expression LT expression
Rule 70    expression -> expression GT expression
Rule 71    expression -> expression LE expression
Rule 72    expression -> expression GE expression
Rule 73    term -> factor
Rule 74    term -> term TIMES factor
Rule 75    term -> term DIVIDE factor
Rule 76    term -> VARIABLE
Rule 77    factor -> NUMBER
Rule 78    factor -> FLOAT
Rule 79    factor -> STRING
Rule 80    factor -> VARIABLE
Rule 81    factor -> TRUE
Rule 82    factor -> FALSE
Rule 83    factor -> LPAREN expression RPAREN
Rule 84    factor -> make_expr
Rule 85    factor -> struct_instance
Rule 86    factor -> func_call
Rule 87    type -> INT_TYPE
Rule 88    type -> FLOAT64_TYPE
Rule 89    type -> STRING_TYPE
Rule 90    type -> BOOL_TYPE
Rule 91    if_stmt -> IF expression block
Rule 92    if_stmt -> IF expression block ELSE block
Rule 93    for_stmt -> FOR expression block
Rule 94    for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block
Rule 95    continue_stmt -> CONTINUE
Rule 96    for_update -> assignment
Rule 97    for_update -> increment_stmt
Rule 98    block -> LBRACE program RBRACE
Rule 99    struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
Rule 100   struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
Rule 101   struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
Rule 102   struct_fields -> struct_field
Rule 103   struct_fields -> struct_field struct_fields
Rule 104   struct_field -> VARIABLE type
Rule 105   struct_field -> type
Rule 106   struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE
Rule 107   struct_fields_values -> field_value
Rule 108   struct_fields_values -> field_value COMMA struct_fields_values
Rule 109   field_value -> VARIABLE COLON expression
Rule 110   switch_stmt -> SWITCH expression LBRACE case_list RBRACE
Rule 111   switch_stmt -> SWITCH LBRACE case_list RBRACE
Rule 112   case_list -> case_clause
Rule 113   case_list -> case_clause case_list
Rule 114   case_clause -> CASE expression COLON program
Rule 115   case_clause -> DEFAULT COLON program
Rule 116   map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type
Rule 117   map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type
Rule 118   make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
Rule 119   make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
Rule 120   make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
Rule 121   make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN
Rule 122   map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
Rule 123   map_kv_pairs -> map_kv_pair
Rule 124   map_kv_pairs -> map_kv_pair COMMA map_kv_pairs
Rule 125   map_kv_pair -> STRING COLON expression
Rule 126   array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type
Rule 127   array_declaration -> VAR VARIABLE ASSIGN array_literal
Rule 128   array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
Rule 129   array_values -> expression
Rule 130   array_values -> expression COMMA array_values
Rule 131   slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type
Rule 132   slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
Rule 133   slice_values -> expression
Rule 134   slice_values -> expression COMMA slice_values
Rule 135   new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
Rule 136   break_stmt -> BREAK
Rule 137   increment_stmt -> VARIABLE INCREMENT
Rule 138   increment_stmt -> VARIABLE DECREMENT

Terminals, with rules where they appear

AMPER                : 48
AND                  : 65
ASIG                 : 30 33 35 40 45 117 118 119 122 132 135
ASSIGN               : 31 32 34 44 127
BOOL_TYPE            : 90
BREAK                : 136
CASE                 : 114
COLON                : 109 114 115 125
COMMA                : 37 39 46 58 61 108 124 130 134
CONTINUE             : 95
DECREMENT            : 138
DEFAULT              : 115
DIVIDE               : 75
DOT                  : 46 47 48
ELSE                 : 92
EQ                   : 67
FALSE                : 82
FLOAT                : 42 78
FLOAT64_TYPE         : 88
FMT                  : 46 47 48
FOR                  : 93 94
FUNC                 : 50 53 54 99 100
GE                   : 72
GT                   : 70
IF                   : 91 92
IMPORT               : 2 3
INCREMENT            : 137
INT_TYPE             : 87
LBRACE               : 51 53 54 98 99 100 101 106 110 111 122 128 132
LBRACKET             : 116 117 118 119 120 121 122 126 128 131 132
LE                   : 71
LPAREN               : 2 46 47 48 50 53 54 55 56 83 99 99 100 100 118 119 120 121 135
LT                   : 69
MAKE                 : 118 119 120 121
MAP                  : 116 117 118 120 122
MINUS                : 64
MOD                  : 
NE                   : 68
NEW                  : 135
NOT                  : 
NUMBER               : 41 77 126 128
OR                   : 66
PACKAGE              : 1
PLUS                 : 63
PRINT                : 
PRINTF               : 46
PRINTLN              : 47
RANGE                : 
RBRACE               : 51 53 54 98 99 100 101 106 110 111 122 128 132
RBRACKET             : 116 117 118 119 120 121 122 126 128 131 132
RETURN               : 52
RPAREN               : 2 46 47 48 50 53 54 55 56 83 99 99 100 100 118 119 120 121 135
SCANLN               : 48
SEMICOLON            : 94 94
STRING               : 2 3 46 79 125
STRING_TYPE          : 89
STRUCT               : 101
SWITCH               : 110 111
TIMES                : 74
TRUE                 : 81
TYPE                 : 101
UINT                 : 
VAR                  : 29 30 31 32 33 34 35 116 126 127 131
VARIABLE             : 1 29 30 31 36 37 40 43 44 45 48 50 53 54 55 56 59 76 80 99 99 99 100 100 100 101 104 106 109 116 117 118 119 122 126 127 131 132 135 135 137 138
error                : 

Nonterminals, with rules where they appear

arg_list             : 55 61
array_declaration    : 21
array_literal        : 22 127
array_values         : 128 130
assignment           : 7 94 96
block                : 91 92 92 93 94
break_stmt           : 26
case_clause          : 112 113
case_list            : 110 111 113
continue_stmt        : 10
declaration          : 6
expr_list            : 32 33 34 35 39
expression           : 30 31 38 39 40 44 45 46 47 52 60 61 63 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 83 91 92 93 94 109 110 114 125 129 130 133 134
factor               : 73 74 75
field_value          : 107 108
for_stmt             : 16
for_update           : 94
func_body            : 49
func_call            : 14 86
func_def             : 12
func_header          : 49
func_no_params       : 13
id_list              : 32 33 34 35 37
if_stmt              : 15
import_stmt          : 1
increment_stmt       : 27 97
input_stmt           : 9
make_expr            : 84
make_stmt            : 24
map_declaration      : 19
map_declaration_values : 20
map_kv_pair          : 123 124
map_kv_pairs         : 122 124
new_stmt             : 25
param                : 57 58
param_list           : 50 58 99
print_stmt           : 8
program              : 1 5 51 53 54 98 99 100 114 115
return_stmt          : 28
slice_declaration    : 23
slice_values         : 132 134
start                : 0
statement            : 4 5
struct_def           : 17
struct_field         : 102 103
struct_fields        : 101 103
struct_fields_values : 106 108
struct_instance      : 85
struct_method        : 11
switch_stmt          : 18
term                 : 62 63 64 74 75
type                 : 29 30 31 32 33 50 53 59 99 100 104 105 116 116 117 117 118 118 119 120 120 121 122 122 126 128 131 132

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . PACKAGE VARIABLE import_stmt program

    PACKAGE         shift and go to state 2

    start                          shift and go to state 1

state 1

    (0) S' -> start .



state 2

    (1) start -> PACKAGE . VARIABLE import_stmt program

    VARIABLE        shift and go to state 3


state 3

    (1) start -> PACKAGE VARIABLE . import_stmt program
    (2) import_stmt -> . IMPORT LPAREN STRING RPAREN
    (3) import_stmt -> . IMPORT STRING

    IMPORT          shift and go to state 5

    import_stmt                    shift and go to state 4

state 4

    (1) start -> PACKAGE VARIABLE import_stmt . program
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_call
    (15) statement -> . if_stmt
    (16) statement -> . for_stmt
    (17) statement -> . struct_def
    (18) statement -> . switch_stmt
    (19) statement -> . map_declaration
    (20) statement -> . map_declaration_values
    (21) statement -> . array_declaration
    (22) statement -> . array_literal
    (23) statement -> . slice_declaration
    (24) statement -> . make_stmt
    (25) statement -> . new_stmt
    (26) statement -> . break_stmt
    (27) statement -> . increment_stmt
    (28) statement -> . return_stmt
    (29) declaration -> . VAR VARIABLE type
    (30) declaration -> . VAR VARIABLE type ASIG expression
    (31) declaration -> . VAR VARIABLE type ASSIGN expression
    (32) declaration -> . VAR id_list type ASSIGN expr_list
    (33) declaration -> . VAR id_list type ASIG expr_list
    (34) declaration -> . VAR id_list ASSIGN expr_list
    (35) declaration -> . VAR id_list ASIG expr_list
    (40) declaration -> . VARIABLE ASIG expression
    (44) assignment -> . VARIABLE ASSIGN expression
    (45) assignment -> . VARIABLE ASIG expression
    (46) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (47) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (48) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (95) continue_stmt -> . CONTINUE
    (99) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (100) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (49) func_def -> . func_header func_body
    (53) func_no_params -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (54) func_no_params -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN
    (91) if_stmt -> . IF expression block
    (92) if_stmt -> . IF expression block ELSE block
    (93) for_stmt -> . FOR expression block
    (94) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (101) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (110) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (111) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (116) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (117) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (122) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (126) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (127) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (128) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (131) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (132) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (118) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (119) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (135) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (136) break_stmt -> . BREAK
    (137) increment_stmt -> . VARIABLE INCREMENT
    (138) increment_stmt -> . VARIABLE DECREMENT
    (52) return_stmt -> . RETURN expression
    (50) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type

    VAR             shift and go to state 32
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 33
    CONTINUE        shift and go to state 34
    FUNC            shift and go to state 35
    IF              shift and go to state 37
    FOR             shift and go to state 38
    TYPE            shift and go to state 39
    SWITCH          shift and go to state 40
    LBRACKET        shift and go to state 41
    BREAK           shift and go to state 42
    RETURN          shift and go to state 43

    program                        shift and go to state 7
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_call                      shift and go to state 17
    if_stmt                        shift and go to state 18
    for_stmt                       shift and go to state 19
    struct_def                     shift and go to state 20
    switch_stmt                    shift and go to state 21
    map_declaration                shift and go to state 22
    map_declaration_values         shift and go to state 23
    array_declaration              shift and go to state 24
    array_literal                  shift and go to state 25
    slice_declaration              shift and go to state 26
    make_stmt                      shift and go to state 27
    new_stmt                       shift and go to state 28
    break_stmt                     shift and go to state 29
    increment_stmt                 shift and go to state 30
    return_stmt                    shift and go to state 31
    func_header                    shift and go to state 36

state 5

    (2) import_stmt -> IMPORT . LPAREN STRING RPAREN
    (3) import_stmt -> IMPORT . STRING

    LPAREN          shift and go to state 44
    STRING          shift and go to state 45


state 6

    (40) declaration -> VARIABLE . ASIG expression
    (44) assignment -> VARIABLE . ASSIGN expression
    (45) assignment -> VARIABLE . ASIG expression
    (55) func_call -> VARIABLE . LPAREN arg_list RPAREN
    (56) func_call -> VARIABLE . LPAREN RPAREN
    (117) map_declaration -> VARIABLE . ASIG MAP LBRACKET type RBRACKET type
    (122) map_declaration_values -> VARIABLE . ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (132) slice_declaration -> VARIABLE . ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (118) make_stmt -> VARIABLE . ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (119) make_stmt -> VARIABLE . ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (135) new_stmt -> VARIABLE . ASIG NEW LPAREN VARIABLE RPAREN
    (137) increment_stmt -> VARIABLE . INCREMENT
    (138) increment_stmt -> VARIABLE . DECREMENT

    ASIG            shift and go to state 46
    ASSIGN          shift and go to state 47
    LPAREN          shift and go to state 48
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50


state 7

    (1) start -> PACKAGE VARIABLE import_stmt program .

    $end            reduce using rule 1 (start -> PACKAGE VARIABLE import_stmt program .)


state 8

    (4) program -> statement .
    (5) program -> statement . program
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_call
    (15) statement -> . if_stmt
    (16) statement -> . for_stmt
    (17) statement -> . struct_def
    (18) statement -> . switch_stmt
    (19) statement -> . map_declaration
    (20) statement -> . map_declaration_values
    (21) statement -> . array_declaration
    (22) statement -> . array_literal
    (23) statement -> . slice_declaration
    (24) statement -> . make_stmt
    (25) statement -> . new_stmt
    (26) statement -> . break_stmt
    (27) statement -> . increment_stmt
    (28) statement -> . return_stmt
    (29) declaration -> . VAR VARIABLE type
    (30) declaration -> . VAR VARIABLE type ASIG expression
    (31) declaration -> . VAR VARIABLE type ASSIGN expression
    (32) declaration -> . VAR id_list type ASSIGN expr_list
    (33) declaration -> . VAR id_list type ASIG expr_list
    (34) declaration -> . VAR id_list ASSIGN expr_list
    (35) declaration -> . VAR id_list ASIG expr_list
    (40) declaration -> . VARIABLE ASIG expression
    (44) assignment -> . VARIABLE ASSIGN expression
    (45) assignment -> . VARIABLE ASIG expression
    (46) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (47) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (48) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (95) continue_stmt -> . CONTINUE
    (99) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (100) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (49) func_def -> . func_header func_body
    (53) func_no_params -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (54) func_no_params -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN
    (91) if_stmt -> . IF expression block
    (92) if_stmt -> . IF expression block ELSE block
    (93) for_stmt -> . FOR expression block
    (94) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (101) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (110) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (111) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (116) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (117) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (122) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (126) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (127) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (128) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (131) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (132) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (118) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (119) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (135) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (136) break_stmt -> . BREAK
    (137) increment_stmt -> . VARIABLE INCREMENT
    (138) increment_stmt -> . VARIABLE DECREMENT
    (52) return_stmt -> . RETURN expression
    (50) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type

    $end            reduce using rule 4 (program -> statement .)
    RBRACE          reduce using rule 4 (program -> statement .)
    CASE            reduce using rule 4 (program -> statement .)
    DEFAULT         reduce using rule 4 (program -> statement .)
    VAR             shift and go to state 32
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 33
    CONTINUE        shift and go to state 34
    FUNC            shift and go to state 35
    IF              shift and go to state 37
    FOR             shift and go to state 38
    TYPE            shift and go to state 39
    SWITCH          shift and go to state 40
    LBRACKET        shift and go to state 41
    BREAK           shift and go to state 42
    RETURN          shift and go to state 43

    statement                      shift and go to state 8
    program                        shift and go to state 51
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_call                      shift and go to state 17
    if_stmt                        shift and go to state 18
    for_stmt                       shift and go to state 19
    struct_def                     shift and go to state 20
    switch_stmt                    shift and go to state 21
    map_declaration                shift and go to state 22
    map_declaration_values         shift and go to state 23
    array_declaration              shift and go to state 24
    array_literal                  shift and go to state 25
    slice_declaration              shift and go to state 26
    make_stmt                      shift and go to state 27
    new_stmt                       shift and go to state 28
    break_stmt                     shift and go to state 29
    increment_stmt                 shift and go to state 30
    return_stmt                    shift and go to state 31
    func_header                    shift and go to state 36

state 9

    (6) statement -> declaration .

    VAR             reduce using rule 6 (statement -> declaration .)
    VARIABLE        reduce using rule 6 (statement -> declaration .)
    FMT             reduce using rule 6 (statement -> declaration .)
    CONTINUE        reduce using rule 6 (statement -> declaration .)
    FUNC            reduce using rule 6 (statement -> declaration .)
    IF              reduce using rule 6 (statement -> declaration .)
    FOR             reduce using rule 6 (statement -> declaration .)
    TYPE            reduce using rule 6 (statement -> declaration .)
    SWITCH          reduce using rule 6 (statement -> declaration .)
    LBRACKET        reduce using rule 6 (statement -> declaration .)
    BREAK           reduce using rule 6 (statement -> declaration .)
    RETURN          reduce using rule 6 (statement -> declaration .)
    $end            reduce using rule 6 (statement -> declaration .)
    RBRACE          reduce using rule 6 (statement -> declaration .)
    CASE            reduce using rule 6 (statement -> declaration .)
    DEFAULT         reduce using rule 6 (statement -> declaration .)


state 10

    (7) statement -> assignment .

    VAR             reduce using rule 7 (statement -> assignment .)
    VARIABLE        reduce using rule 7 (statement -> assignment .)
    FMT             reduce using rule 7 (statement -> assignment .)
    CONTINUE        reduce using rule 7 (statement -> assignment .)
    FUNC            reduce using rule 7 (statement -> assignment .)
    IF              reduce using rule 7 (statement -> assignment .)
    FOR             reduce using rule 7 (statement -> assignment .)
    TYPE            reduce using rule 7 (statement -> assignment .)
    SWITCH          reduce using rule 7 (statement -> assignment .)
    LBRACKET        reduce using rule 7 (statement -> assignment .)
    BREAK           reduce using rule 7 (statement -> assignment .)
    RETURN          reduce using rule 7 (statement -> assignment .)
    $end            reduce using rule 7 (statement -> assignment .)
    RBRACE          reduce using rule 7 (statement -> assignment .)
    CASE            reduce using rule 7 (statement -> assignment .)
    DEFAULT         reduce using rule 7 (statement -> assignment .)


state 11

    (8) statement -> print_stmt .

    VAR             reduce using rule 8 (statement -> print_stmt .)
    VARIABLE        reduce using rule 8 (statement -> print_stmt .)
    FMT             reduce using rule 8 (statement -> print_stmt .)
    CONTINUE        reduce using rule 8 (statement -> print_stmt .)
    FUNC            reduce using rule 8 (statement -> print_stmt .)
    IF              reduce using rule 8 (statement -> print_stmt .)
    FOR             reduce using rule 8 (statement -> print_stmt .)
    TYPE            reduce using rule 8 (statement -> print_stmt .)
    SWITCH          reduce using rule 8 (statement -> print_stmt .)
    LBRACKET        reduce using rule 8 (statement -> print_stmt .)
    BREAK           reduce using rule 8 (statement -> print_stmt .)
    RETURN          reduce using rule 8 (statement -> print_stmt .)
    $end            reduce using rule 8 (statement -> print_stmt .)
    RBRACE          reduce using rule 8 (statement -> print_stmt .)
    CASE            reduce using rule 8 (statement -> print_stmt .)
    DEFAULT         reduce using rule 8 (statement -> print_stmt .)


state 12

    (9) statement -> input_stmt .

    VAR             reduce using rule 9 (statement -> input_stmt .)
    VARIABLE        reduce using rule 9 (statement -> input_stmt .)
    FMT             reduce using rule 9 (statement -> input_stmt .)
    CONTINUE        reduce using rule 9 (statement -> input_stmt .)
    FUNC            reduce using rule 9 (statement -> input_stmt .)
    IF              reduce using rule 9 (statement -> input_stmt .)
    FOR             reduce using rule 9 (statement -> input_stmt .)
    TYPE            reduce using rule 9 (statement -> input_stmt .)
    SWITCH          reduce using rule 9 (statement -> input_stmt .)
    LBRACKET        reduce using rule 9 (statement -> input_stmt .)
    BREAK           reduce using rule 9 (statement -> input_stmt .)
    RETURN          reduce using rule 9 (statement -> input_stmt .)
    $end            reduce using rule 9 (statement -> input_stmt .)
    RBRACE          reduce using rule 9 (statement -> input_stmt .)
    CASE            reduce using rule 9 (statement -> input_stmt .)
    DEFAULT         reduce using rule 9 (statement -> input_stmt .)


state 13

    (10) statement -> continue_stmt .

    VAR             reduce using rule 10 (statement -> continue_stmt .)
    VARIABLE        reduce using rule 10 (statement -> continue_stmt .)
    FMT             reduce using rule 10 (statement -> continue_stmt .)
    CONTINUE        reduce using rule 10 (statement -> continue_stmt .)
    FUNC            reduce using rule 10 (statement -> continue_stmt .)
    IF              reduce using rule 10 (statement -> continue_stmt .)
    FOR             reduce using rule 10 (statement -> continue_stmt .)
    TYPE            reduce using rule 10 (statement -> continue_stmt .)
    SWITCH          reduce using rule 10 (statement -> continue_stmt .)
    LBRACKET        reduce using rule 10 (statement -> continue_stmt .)
    BREAK           reduce using rule 10 (statement -> continue_stmt .)
    RETURN          reduce using rule 10 (statement -> continue_stmt .)
    $end            reduce using rule 10 (statement -> continue_stmt .)
    RBRACE          reduce using rule 10 (statement -> continue_stmt .)
    CASE            reduce using rule 10 (statement -> continue_stmt .)
    DEFAULT         reduce using rule 10 (statement -> continue_stmt .)


state 14

    (11) statement -> struct_method .

    VAR             reduce using rule 11 (statement -> struct_method .)
    VARIABLE        reduce using rule 11 (statement -> struct_method .)
    FMT             reduce using rule 11 (statement -> struct_method .)
    CONTINUE        reduce using rule 11 (statement -> struct_method .)
    FUNC            reduce using rule 11 (statement -> struct_method .)
    IF              reduce using rule 11 (statement -> struct_method .)
    FOR             reduce using rule 11 (statement -> struct_method .)
    TYPE            reduce using rule 11 (statement -> struct_method .)
    SWITCH          reduce using rule 11 (statement -> struct_method .)
    LBRACKET        reduce using rule 11 (statement -> struct_method .)
    BREAK           reduce using rule 11 (statement -> struct_method .)
    RETURN          reduce using rule 11 (statement -> struct_method .)
    $end            reduce using rule 11 (statement -> struct_method .)
    RBRACE          reduce using rule 11 (statement -> struct_method .)
    CASE            reduce using rule 11 (statement -> struct_method .)
    DEFAULT         reduce using rule 11 (statement -> struct_method .)


state 15

    (12) statement -> func_def .

    VAR             reduce using rule 12 (statement -> func_def .)
    VARIABLE        reduce using rule 12 (statement -> func_def .)
    FMT             reduce using rule 12 (statement -> func_def .)
    CONTINUE        reduce using rule 12 (statement -> func_def .)
    FUNC            reduce using rule 12 (statement -> func_def .)
    IF              reduce using rule 12 (statement -> func_def .)
    FOR             reduce using rule 12 (statement -> func_def .)
    TYPE            reduce using rule 12 (statement -> func_def .)
    SWITCH          reduce using rule 12 (statement -> func_def .)
    LBRACKET        reduce using rule 12 (statement -> func_def .)
    BREAK           reduce using rule 12 (statement -> func_def .)
    RETURN          reduce using rule 12 (statement -> func_def .)
    $end            reduce using rule 12 (statement -> func_def .)
    RBRACE          reduce using rule 12 (statement -> func_def .)
    CASE            reduce using rule 12 (statement -> func_def .)
    DEFAULT         reduce using rule 12 (statement -> func_def .)


state 16

    (13) statement -> func_no_params .

    VAR             reduce using rule 13 (statement -> func_no_params .)
    VARIABLE        reduce using rule 13 (statement -> func_no_params .)
    FMT             reduce using rule 13 (statement -> func_no_params .)
    CONTINUE        reduce using rule 13 (statement -> func_no_params .)
    FUNC            reduce using rule 13 (statement -> func_no_params .)
    IF              reduce using rule 13 (statement -> func_no_params .)
    FOR             reduce using rule 13 (statement -> func_no_params .)
    TYPE            reduce using rule 13 (statement -> func_no_params .)
    SWITCH          reduce using rule 13 (statement -> func_no_params .)
    LBRACKET        reduce using rule 13 (statement -> func_no_params .)
    BREAK           reduce using rule 13 (statement -> func_no_params .)
    RETURN          reduce using rule 13 (statement -> func_no_params .)
    $end            reduce using rule 13 (statement -> func_no_params .)
    RBRACE          reduce using rule 13 (statement -> func_no_params .)
    CASE            reduce using rule 13 (statement -> func_no_params .)
    DEFAULT         reduce using rule 13 (statement -> func_no_params .)


state 17

    (14) statement -> func_call .

    VAR             reduce using rule 14 (statement -> func_call .)
    VARIABLE        reduce using rule 14 (statement -> func_call .)
    FMT             reduce using rule 14 (statement -> func_call .)
    CONTINUE        reduce using rule 14 (statement -> func_call .)
    FUNC            reduce using rule 14 (statement -> func_call .)
    IF              reduce using rule 14 (statement -> func_call .)
    FOR             reduce using rule 14 (statement -> func_call .)
    TYPE            reduce using rule 14 (statement -> func_call .)
    SWITCH          reduce using rule 14 (statement -> func_call .)
    LBRACKET        reduce using rule 14 (statement -> func_call .)
    BREAK           reduce using rule 14 (statement -> func_call .)
    RETURN          reduce using rule 14 (statement -> func_call .)
    $end            reduce using rule 14 (statement -> func_call .)
    RBRACE          reduce using rule 14 (statement -> func_call .)
    CASE            reduce using rule 14 (statement -> func_call .)
    DEFAULT         reduce using rule 14 (statement -> func_call .)


state 18

    (15) statement -> if_stmt .

    VAR             reduce using rule 15 (statement -> if_stmt .)
    VARIABLE        reduce using rule 15 (statement -> if_stmt .)
    FMT             reduce using rule 15 (statement -> if_stmt .)
    CONTINUE        reduce using rule 15 (statement -> if_stmt .)
    FUNC            reduce using rule 15 (statement -> if_stmt .)
    IF              reduce using rule 15 (statement -> if_stmt .)
    FOR             reduce using rule 15 (statement -> if_stmt .)
    TYPE            reduce using rule 15 (statement -> if_stmt .)
    SWITCH          reduce using rule 15 (statement -> if_stmt .)
    LBRACKET        reduce using rule 15 (statement -> if_stmt .)
    BREAK           reduce using rule 15 (statement -> if_stmt .)
    RETURN          reduce using rule 15 (statement -> if_stmt .)
    $end            reduce using rule 15 (statement -> if_stmt .)
    RBRACE          reduce using rule 15 (statement -> if_stmt .)
    CASE            reduce using rule 15 (statement -> if_stmt .)
    DEFAULT         reduce using rule 15 (statement -> if_stmt .)


state 19

    (16) statement -> for_stmt .

    VAR             reduce using rule 16 (statement -> for_stmt .)
    VARIABLE        reduce using rule 16 (statement -> for_stmt .)
    FMT             reduce using rule 16 (statement -> for_stmt .)
    CONTINUE        reduce using rule 16 (statement -> for_stmt .)
    FUNC            reduce using rule 16 (statement -> for_stmt .)
    IF              reduce using rule 16 (statement -> for_stmt .)
    FOR             reduce using rule 16 (statement -> for_stmt .)
    TYPE            reduce using rule 16 (statement -> for_stmt .)
    SWITCH          reduce using rule 16 (statement -> for_stmt .)
    LBRACKET        reduce using rule 16 (statement -> for_stmt .)
    BREAK           reduce using rule 16 (statement -> for_stmt .)
    RETURN          reduce using rule 16 (statement -> for_stmt .)
    $end            reduce using rule 16 (statement -> for_stmt .)
    RBRACE          reduce using rule 16 (statement -> for_stmt .)
    CASE            reduce using rule 16 (statement -> for_stmt .)
    DEFAULT         reduce using rule 16 (statement -> for_stmt .)


state 20

    (17) statement -> struct_def .

    VAR             reduce using rule 17 (statement -> struct_def .)
    VARIABLE        reduce using rule 17 (statement -> struct_def .)
    FMT             reduce using rule 17 (statement -> struct_def .)
    CONTINUE        reduce using rule 17 (statement -> struct_def .)
    FUNC            reduce using rule 17 (statement -> struct_def .)
    IF              reduce using rule 17 (statement -> struct_def .)
    FOR             reduce using rule 17 (statement -> struct_def .)
    TYPE            reduce using rule 17 (statement -> struct_def .)
    SWITCH          reduce using rule 17 (statement -> struct_def .)
    LBRACKET        reduce using rule 17 (statement -> struct_def .)
    BREAK           reduce using rule 17 (statement -> struct_def .)
    RETURN          reduce using rule 17 (statement -> struct_def .)
    $end            reduce using rule 17 (statement -> struct_def .)
    RBRACE          reduce using rule 17 (statement -> struct_def .)
    CASE            reduce using rule 17 (statement -> struct_def .)
    DEFAULT         reduce using rule 17 (statement -> struct_def .)


state 21

    (18) statement -> switch_stmt .

    VAR             reduce using rule 18 (statement -> switch_stmt .)
    VARIABLE        reduce using rule 18 (statement -> switch_stmt .)
    FMT             reduce using rule 18 (statement -> switch_stmt .)
    CONTINUE        reduce using rule 18 (statement -> switch_stmt .)
    FUNC            reduce using rule 18 (statement -> switch_stmt .)
    IF              reduce using rule 18 (statement -> switch_stmt .)
    FOR             reduce using rule 18 (statement -> switch_stmt .)
    TYPE            reduce using rule 18 (statement -> switch_stmt .)
    SWITCH          reduce using rule 18 (statement -> switch_stmt .)
    LBRACKET        reduce using rule 18 (statement -> switch_stmt .)
    BREAK           reduce using rule 18 (statement -> switch_stmt .)
    RETURN          reduce using rule 18 (statement -> switch_stmt .)
    $end            reduce using rule 18 (statement -> switch_stmt .)
    RBRACE          reduce using rule 18 (statement -> switch_stmt .)
    CASE            reduce using rule 18 (statement -> switch_stmt .)
    DEFAULT         reduce using rule 18 (statement -> switch_stmt .)


state 22

    (19) statement -> map_declaration .

    VAR             reduce using rule 19 (statement -> map_declaration .)
    VARIABLE        reduce using rule 19 (statement -> map_declaration .)
    FMT             reduce using rule 19 (statement -> map_declaration .)
    CONTINUE        reduce using rule 19 (statement -> map_declaration .)
    FUNC            reduce using rule 19 (statement -> map_declaration .)
    IF              reduce using rule 19 (statement -> map_declaration .)
    FOR             reduce using rule 19 (statement -> map_declaration .)
    TYPE            reduce using rule 19 (statement -> map_declaration .)
    SWITCH          reduce using rule 19 (statement -> map_declaration .)
    LBRACKET        reduce using rule 19 (statement -> map_declaration .)
    BREAK           reduce using rule 19 (statement -> map_declaration .)
    RETURN          reduce using rule 19 (statement -> map_declaration .)
    $end            reduce using rule 19 (statement -> map_declaration .)
    RBRACE          reduce using rule 19 (statement -> map_declaration .)
    CASE            reduce using rule 19 (statement -> map_declaration .)
    DEFAULT         reduce using rule 19 (statement -> map_declaration .)


state 23

    (20) statement -> map_declaration_values .

    VAR             reduce using rule 20 (statement -> map_declaration_values .)
    VARIABLE        reduce using rule 20 (statement -> map_declaration_values .)
    FMT             reduce using rule 20 (statement -> map_declaration_values .)
    CONTINUE        reduce using rule 20 (statement -> map_declaration_values .)
    FUNC            reduce using rule 20 (statement -> map_declaration_values .)
    IF              reduce using rule 20 (statement -> map_declaration_values .)
    FOR             reduce using rule 20 (statement -> map_declaration_values .)
    TYPE            reduce using rule 20 (statement -> map_declaration_values .)
    SWITCH          reduce using rule 20 (statement -> map_declaration_values .)
    LBRACKET        reduce using rule 20 (statement -> map_declaration_values .)
    BREAK           reduce using rule 20 (statement -> map_declaration_values .)
    RETURN          reduce using rule 20 (statement -> map_declaration_values .)
    $end            reduce using rule 20 (statement -> map_declaration_values .)
    RBRACE          reduce using rule 20 (statement -> map_declaration_values .)
    CASE            reduce using rule 20 (statement -> map_declaration_values .)
    DEFAULT         reduce using rule 20 (statement -> map_declaration_values .)


state 24

    (21) statement -> array_declaration .

    VAR             reduce using rule 21 (statement -> array_declaration .)
    VARIABLE        reduce using rule 21 (statement -> array_declaration .)
    FMT             reduce using rule 21 (statement -> array_declaration .)
    CONTINUE        reduce using rule 21 (statement -> array_declaration .)
    FUNC            reduce using rule 21 (statement -> array_declaration .)
    IF              reduce using rule 21 (statement -> array_declaration .)
    FOR             reduce using rule 21 (statement -> array_declaration .)
    TYPE            reduce using rule 21 (statement -> array_declaration .)
    SWITCH          reduce using rule 21 (statement -> array_declaration .)
    LBRACKET        reduce using rule 21 (statement -> array_declaration .)
    BREAK           reduce using rule 21 (statement -> array_declaration .)
    RETURN          reduce using rule 21 (statement -> array_declaration .)
    $end            reduce using rule 21 (statement -> array_declaration .)
    RBRACE          reduce using rule 21 (statement -> array_declaration .)
    CASE            reduce using rule 21 (statement -> array_declaration .)
    DEFAULT         reduce using rule 21 (statement -> array_declaration .)


state 25

    (22) statement -> array_literal .

    VAR             reduce using rule 22 (statement -> array_literal .)
    VARIABLE        reduce using rule 22 (statement -> array_literal .)
    FMT             reduce using rule 22 (statement -> array_literal .)
    CONTINUE        reduce using rule 22 (statement -> array_literal .)
    FUNC            reduce using rule 22 (statement -> array_literal .)
    IF              reduce using rule 22 (statement -> array_literal .)
    FOR             reduce using rule 22 (statement -> array_literal .)
    TYPE            reduce using rule 22 (statement -> array_literal .)
    SWITCH          reduce using rule 22 (statement -> array_literal .)
    LBRACKET        reduce using rule 22 (statement -> array_literal .)
    BREAK           reduce using rule 22 (statement -> array_literal .)
    RETURN          reduce using rule 22 (statement -> array_literal .)
    $end            reduce using rule 22 (statement -> array_literal .)
    RBRACE          reduce using rule 22 (statement -> array_literal .)
    CASE            reduce using rule 22 (statement -> array_literal .)
    DEFAULT         reduce using rule 22 (statement -> array_literal .)


state 26

    (23) statement -> slice_declaration .

    VAR             reduce using rule 23 (statement -> slice_declaration .)
    VARIABLE        reduce using rule 23 (statement -> slice_declaration .)
    FMT             reduce using rule 23 (statement -> slice_declaration .)
    CONTINUE        reduce using rule 23 (statement -> slice_declaration .)
    FUNC            reduce using rule 23 (statement -> slice_declaration .)
    IF              reduce using rule 23 (statement -> slice_declaration .)
    FOR             reduce using rule 23 (statement -> slice_declaration .)
    TYPE            reduce using rule 23 (statement -> slice_declaration .)
    SWITCH          reduce using rule 23 (statement -> slice_declaration .)
    LBRACKET        reduce using rule 23 (statement -> slice_declaration .)
    BREAK           reduce using rule 23 (statement -> slice_declaration .)
    RETURN          reduce using rule 23 (statement -> slice_declaration .)
    $end            reduce using rule 23 (statement -> slice_declaration .)
    RBRACE          reduce using rule 23 (statement -> slice_declaration .)
    CASE            reduce using rule 23 (statement -> slice_declaration .)
    DEFAULT         reduce using rule 23 (statement -> slice_declaration .)


state 27

    (24) statement -> make_stmt .

    VAR             reduce using rule 24 (statement -> make_stmt .)
    VARIABLE        reduce using rule 24 (statement -> make_stmt .)
    FMT             reduce using rule 24 (statement -> make_stmt .)
    CONTINUE        reduce using rule 24 (statement -> make_stmt .)
    FUNC            reduce using rule 24 (statement -> make_stmt .)
    IF              reduce using rule 24 (statement -> make_stmt .)
    FOR             reduce using rule 24 (statement -> make_stmt .)
    TYPE            reduce using rule 24 (statement -> make_stmt .)
    SWITCH          reduce using rule 24 (statement -> make_stmt .)
    LBRACKET        reduce using rule 24 (statement -> make_stmt .)
    BREAK           reduce using rule 24 (statement -> make_stmt .)
    RETURN          reduce using rule 24 (statement -> make_stmt .)
    $end            reduce using rule 24 (statement -> make_stmt .)
    RBRACE          reduce using rule 24 (statement -> make_stmt .)
    CASE            reduce using rule 24 (statement -> make_stmt .)
    DEFAULT         reduce using rule 24 (statement -> make_stmt .)


state 28

    (25) statement -> new_stmt .

    VAR             reduce using rule 25 (statement -> new_stmt .)
    VARIABLE        reduce using rule 25 (statement -> new_stmt .)
    FMT             reduce using rule 25 (statement -> new_stmt .)
    CONTINUE        reduce using rule 25 (statement -> new_stmt .)
    FUNC            reduce using rule 25 (statement -> new_stmt .)
    IF              reduce using rule 25 (statement -> new_stmt .)
    FOR             reduce using rule 25 (statement -> new_stmt .)
    TYPE            reduce using rule 25 (statement -> new_stmt .)
    SWITCH          reduce using rule 25 (statement -> new_stmt .)
    LBRACKET        reduce using rule 25 (statement -> new_stmt .)
    BREAK           reduce using rule 25 (statement -> new_stmt .)
    RETURN          reduce using rule 25 (statement -> new_stmt .)
    $end            reduce using rule 25 (statement -> new_stmt .)
    RBRACE          reduce using rule 25 (statement -> new_stmt .)
    CASE            reduce using rule 25 (statement -> new_stmt .)
    DEFAULT         reduce using rule 25 (statement -> new_stmt .)


state 29

    (26) statement -> break_stmt .

    VAR             reduce using rule 26 (statement -> break_stmt .)
    VARIABLE        reduce using rule 26 (statement -> break_stmt .)
    FMT             reduce using rule 26 (statement -> break_stmt .)
    CONTINUE        reduce using rule 26 (statement -> break_stmt .)
    FUNC            reduce using rule 26 (statement -> break_stmt .)
    IF              reduce using rule 26 (statement -> break_stmt .)
    FOR             reduce using rule 26 (statement -> break_stmt .)
    TYPE            reduce using rule 26 (statement -> break_stmt .)
    SWITCH          reduce using rule 26 (statement -> break_stmt .)
    LBRACKET        reduce using rule 26 (statement -> break_stmt .)
    BREAK           reduce using rule 26 (statement -> break_stmt .)
    RETURN          reduce using rule 26 (statement -> break_stmt .)
    $end            reduce using rule 26 (statement -> break_stmt .)
    RBRACE          reduce using rule 26 (statement -> break_stmt .)
    CASE            reduce using rule 26 (statement -> break_stmt .)
    DEFAULT         reduce using rule 26 (statement -> break_stmt .)


state 30

    (27) statement -> increment_stmt .

    VAR             reduce using rule 27 (statement -> increment_stmt .)
    VARIABLE        reduce using rule 27 (statement -> increment_stmt .)
    FMT             reduce using rule 27 (statement -> increment_stmt .)
    CONTINUE        reduce using rule 27 (statement -> increment_stmt .)
    FUNC            reduce using rule 27 (statement -> increment_stmt .)
    IF              reduce using rule 27 (statement -> increment_stmt .)
    FOR             reduce using rule 27 (statement -> increment_stmt .)
    TYPE            reduce using rule 27 (statement -> increment_stmt .)
    SWITCH          reduce using rule 27 (statement -> increment_stmt .)
    LBRACKET        reduce using rule 27 (statement -> increment_stmt .)
    BREAK           reduce using rule 27 (statement -> increment_stmt .)
    RETURN          reduce using rule 27 (statement -> increment_stmt .)
    $end            reduce using rule 27 (statement -> increment_stmt .)
    RBRACE          reduce using rule 27 (statement -> increment_stmt .)
    CASE            reduce using rule 27 (statement -> increment_stmt .)
    DEFAULT         reduce using rule 27 (statement -> increment_stmt .)


state 31

    (28) statement -> return_stmt .

    VAR             reduce using rule 28 (statement -> return_stmt .)
    VARIABLE        reduce using rule 28 (statement -> return_stmt .)
    FMT             reduce using rule 28 (statement -> return_stmt .)
    CONTINUE        reduce using rule 28 (statement -> return_stmt .)
    FUNC            reduce using rule 28 (statement -> return_stmt .)
    IF              reduce using rule 28 (statement -> return_stmt .)
    FOR             reduce using rule 28 (statement -> return_stmt .)
    TYPE            reduce using rule 28 (statement -> return_stmt .)
    SWITCH          reduce using rule 28 (statement -> return_stmt .)
    LBRACKET        reduce using rule 28 (statement -> return_stmt .)
    BREAK           reduce using rule 28 (statement -> return_stmt .)
    RETURN          reduce using rule 28 (statement -> return_stmt .)
    $end            reduce using rule 28 (statement -> return_stmt .)
    RBRACE          reduce using rule 28 (statement -> return_stmt .)
    CASE            reduce using rule 28 (statement -> return_stmt .)
    DEFAULT         reduce using rule 28 (statement -> return_stmt .)


state 32

    (29) declaration -> VAR . VARIABLE type
    (30) declaration -> VAR . VARIABLE type ASIG expression
    (31) declaration -> VAR . VARIABLE type ASSIGN expression
    (32) declaration -> VAR . id_list type ASSIGN expr_list
    (33) declaration -> VAR . id_list type ASIG expr_list
    (34) declaration -> VAR . id_list ASSIGN expr_list
    (35) declaration -> VAR . id_list ASIG expr_list
    (116) map_declaration -> VAR . VARIABLE MAP LBRACKET type RBRACKET type
    (126) array_declaration -> VAR . VARIABLE LBRACKET NUMBER RBRACKET type
    (127) array_declaration -> VAR . VARIABLE ASSIGN array_literal
    (131) slice_declaration -> VAR . VARIABLE LBRACKET RBRACKET type
    (36) id_list -> . VARIABLE
    (37) id_list -> . VARIABLE COMMA id_list

    VARIABLE        shift and go to state 52

    id_list                        shift and go to state 53

state 33

    (46) print_stmt -> FMT . DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (47) print_stmt -> FMT . DOT PRINTLN LPAREN expression RPAREN
    (48) input_stmt -> FMT . DOT SCANLN LPAREN AMPER VARIABLE RPAREN

    DOT             shift and go to state 54


state 34

    (95) continue_stmt -> CONTINUE .

    VAR             reduce using rule 95 (continue_stmt -> CONTINUE .)
    VARIABLE        reduce using rule 95 (continue_stmt -> CONTINUE .)
    FMT             reduce using rule 95 (continue_stmt -> CONTINUE .)
    CONTINUE        reduce using rule 95 (continue_stmt -> CONTINUE .)
    FUNC            reduce using rule 95 (continue_stmt -> CONTINUE .)
    IF              reduce using rule 95 (continue_stmt -> CONTINUE .)
    FOR             reduce using rule 95 (continue_stmt -> CONTINUE .)
    TYPE            reduce using rule 95 (continue_stmt -> CONTINUE .)
    SWITCH          reduce using rule 95 (continue_stmt -> CONTINUE .)
    LBRACKET        reduce using rule 95 (continue_stmt -> CONTINUE .)
    BREAK           reduce using rule 95 (continue_stmt -> CONTINUE .)
    RETURN          reduce using rule 95 (continue_stmt -> CONTINUE .)
    $end            reduce using rule 95 (continue_stmt -> CONTINUE .)
    RBRACE          reduce using rule 95 (continue_stmt -> CONTINUE .)
    CASE            reduce using rule 95 (continue_stmt -> CONTINUE .)
    DEFAULT         reduce using rule 95 (continue_stmt -> CONTINUE .)


state 35

    (99) struct_method -> FUNC . LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (100) struct_method -> FUNC . LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (53) func_no_params -> FUNC . VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (54) func_no_params -> FUNC . VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (50) func_header -> FUNC . VARIABLE LPAREN param_list RPAREN type

    LPAREN          shift and go to state 55
    VARIABLE        shift and go to state 56


state 36

    (49) func_def -> func_header . func_body
    (51) func_body -> . LBRACE program RBRACE

    LBRACE          shift and go to state 58

    func_body                      shift and go to state 57

state 37

    (91) if_stmt -> IF . expression block
    (92) if_stmt -> IF . expression block ELSE block
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 59
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 38

    (93) for_stmt -> FOR . expression block
    (94) for_stmt -> FOR . assignment SEMICOLON expression SEMICOLON for_update block
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (44) assignment -> . VARIABLE ASSIGN expression
    (45) assignment -> . VARIABLE ASIG expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 75
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 73
    assignment                     shift and go to state 74
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 39

    (101) struct_def -> TYPE . VARIABLE STRUCT LBRACE struct_fields RBRACE

    VARIABLE        shift and go to state 76


state 40

    (110) switch_stmt -> SWITCH . expression LBRACE case_list RBRACE
    (111) switch_stmt -> SWITCH . LBRACE case_list RBRACE
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    LBRACE          shift and go to state 78
    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 77
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 41

    (128) array_literal -> LBRACKET . NUMBER RBRACKET type LBRACE array_values RBRACE

    NUMBER          shift and go to state 79


state 42

    (136) break_stmt -> BREAK .

    VAR             reduce using rule 136 (break_stmt -> BREAK .)
    VARIABLE        reduce using rule 136 (break_stmt -> BREAK .)
    FMT             reduce using rule 136 (break_stmt -> BREAK .)
    CONTINUE        reduce using rule 136 (break_stmt -> BREAK .)
    FUNC            reduce using rule 136 (break_stmt -> BREAK .)
    IF              reduce using rule 136 (break_stmt -> BREAK .)
    FOR             reduce using rule 136 (break_stmt -> BREAK .)
    TYPE            reduce using rule 136 (break_stmt -> BREAK .)
    SWITCH          reduce using rule 136 (break_stmt -> BREAK .)
    LBRACKET        reduce using rule 136 (break_stmt -> BREAK .)
    BREAK           reduce using rule 136 (break_stmt -> BREAK .)
    RETURN          reduce using rule 136 (break_stmt -> BREAK .)
    $end            reduce using rule 136 (break_stmt -> BREAK .)
    RBRACE          reduce using rule 136 (break_stmt -> BREAK .)
    CASE            reduce using rule 136 (break_stmt -> BREAK .)
    DEFAULT         reduce using rule 136 (break_stmt -> BREAK .)


state 43

    (52) return_stmt -> RETURN . expression
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 80
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 44

    (2) import_stmt -> IMPORT LPAREN . STRING RPAREN

    STRING          shift and go to state 81


state 45

    (3) import_stmt -> IMPORT STRING .

    VAR             reduce using rule 3 (import_stmt -> IMPORT STRING .)
    VARIABLE        reduce using rule 3 (import_stmt -> IMPORT STRING .)
    FMT             reduce using rule 3 (import_stmt -> IMPORT STRING .)
    CONTINUE        reduce using rule 3 (import_stmt -> IMPORT STRING .)
    FUNC            reduce using rule 3 (import_stmt -> IMPORT STRING .)
    IF              reduce using rule 3 (import_stmt -> IMPORT STRING .)
    FOR             reduce using rule 3 (import_stmt -> IMPORT STRING .)
    TYPE            reduce using rule 3 (import_stmt -> IMPORT STRING .)
    SWITCH          reduce using rule 3 (import_stmt -> IMPORT STRING .)
    LBRACKET        reduce using rule 3 (import_stmt -> IMPORT STRING .)
    BREAK           reduce using rule 3 (import_stmt -> IMPORT STRING .)
    RETURN          reduce using rule 3 (import_stmt -> IMPORT STRING .)


state 46

    (40) declaration -> VARIABLE ASIG . expression
    (45) assignment -> VARIABLE ASIG . expression
    (117) map_declaration -> VARIABLE ASIG . MAP LBRACKET type RBRACKET type
    (122) map_declaration_values -> VARIABLE ASIG . MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (132) slice_declaration -> VARIABLE ASIG . LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (118) make_stmt -> VARIABLE ASIG . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (119) make_stmt -> VARIABLE ASIG . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (135) new_stmt -> VARIABLE ASIG . NEW LPAREN VARIABLE RPAREN
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    MAP             shift and go to state 83
    LBRACKET        shift and go to state 84
    MAKE            shift and go to state 85
    NEW             shift and go to state 86
    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68

    expression                     shift and go to state 82
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 47

    (44) assignment -> VARIABLE ASSIGN . expression
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 87
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 48

    (55) func_call -> VARIABLE LPAREN . arg_list RPAREN
    (56) func_call -> VARIABLE LPAREN . RPAREN
    (60) arg_list -> . expression
    (61) arg_list -> . expression COMMA arg_list
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    RPAREN          shift and go to state 89
    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    arg_list                       shift and go to state 88
    expression                     shift and go to state 90
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 49

    (137) increment_stmt -> VARIABLE INCREMENT .

    VAR             reduce using rule 137 (increment_stmt -> VARIABLE INCREMENT .)
    VARIABLE        reduce using rule 137 (increment_stmt -> VARIABLE INCREMENT .)
    FMT             reduce using rule 137 (increment_stmt -> VARIABLE INCREMENT .)
    CONTINUE        reduce using rule 137 (increment_stmt -> VARIABLE INCREMENT .)
    FUNC            reduce using rule 137 (increment_stmt -> VARIABLE INCREMENT .)
    IF              reduce using rule 137 (increment_stmt -> VARIABLE INCREMENT .)
    FOR             reduce using rule 137 (increment_stmt -> VARIABLE INCREMENT .)
    TYPE            reduce using rule 137 (increment_stmt -> VARIABLE INCREMENT .)
    SWITCH          reduce using rule 137 (increment_stmt -> VARIABLE INCREMENT .)
    LBRACKET        reduce using rule 137 (increment_stmt -> VARIABLE INCREMENT .)
    BREAK           reduce using rule 137 (increment_stmt -> VARIABLE INCREMENT .)
    RETURN          reduce using rule 137 (increment_stmt -> VARIABLE INCREMENT .)
    $end            reduce using rule 137 (increment_stmt -> VARIABLE INCREMENT .)
    RBRACE          reduce using rule 137 (increment_stmt -> VARIABLE INCREMENT .)
    CASE            reduce using rule 137 (increment_stmt -> VARIABLE INCREMENT .)
    DEFAULT         reduce using rule 137 (increment_stmt -> VARIABLE INCREMENT .)
    LBRACE          reduce using rule 137 (increment_stmt -> VARIABLE INCREMENT .)


state 50

    (138) increment_stmt -> VARIABLE DECREMENT .

    VAR             reduce using rule 138 (increment_stmt -> VARIABLE DECREMENT .)
    VARIABLE        reduce using rule 138 (increment_stmt -> VARIABLE DECREMENT .)
    FMT             reduce using rule 138 (increment_stmt -> VARIABLE DECREMENT .)
    CONTINUE        reduce using rule 138 (increment_stmt -> VARIABLE DECREMENT .)
    FUNC            reduce using rule 138 (increment_stmt -> VARIABLE DECREMENT .)
    IF              reduce using rule 138 (increment_stmt -> VARIABLE DECREMENT .)
    FOR             reduce using rule 138 (increment_stmt -> VARIABLE DECREMENT .)
    TYPE            reduce using rule 138 (increment_stmt -> VARIABLE DECREMENT .)
    SWITCH          reduce using rule 138 (increment_stmt -> VARIABLE DECREMENT .)
    LBRACKET        reduce using rule 138 (increment_stmt -> VARIABLE DECREMENT .)
    BREAK           reduce using rule 138 (increment_stmt -> VARIABLE DECREMENT .)
    RETURN          reduce using rule 138 (increment_stmt -> VARIABLE DECREMENT .)
    $end            reduce using rule 138 (increment_stmt -> VARIABLE DECREMENT .)
    RBRACE          reduce using rule 138 (increment_stmt -> VARIABLE DECREMENT .)
    CASE            reduce using rule 138 (increment_stmt -> VARIABLE DECREMENT .)
    DEFAULT         reduce using rule 138 (increment_stmt -> VARIABLE DECREMENT .)
    LBRACE          reduce using rule 138 (increment_stmt -> VARIABLE DECREMENT .)


state 51

    (5) program -> statement program .

    $end            reduce using rule 5 (program -> statement program .)
    RBRACE          reduce using rule 5 (program -> statement program .)
    CASE            reduce using rule 5 (program -> statement program .)
    DEFAULT         reduce using rule 5 (program -> statement program .)


state 52

    (29) declaration -> VAR VARIABLE . type
    (30) declaration -> VAR VARIABLE . type ASIG expression
    (31) declaration -> VAR VARIABLE . type ASSIGN expression
    (116) map_declaration -> VAR VARIABLE . MAP LBRACKET type RBRACKET type
    (126) array_declaration -> VAR VARIABLE . LBRACKET NUMBER RBRACKET type
    (127) array_declaration -> VAR VARIABLE . ASSIGN array_literal
    (131) slice_declaration -> VAR VARIABLE . LBRACKET RBRACKET type
    (36) id_list -> VARIABLE .
    (37) id_list -> VARIABLE . COMMA id_list
    (87) type -> . INT_TYPE
    (88) type -> . FLOAT64_TYPE
    (89) type -> . STRING_TYPE
    (90) type -> . BOOL_TYPE

  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for INT_TYPE resolved as shift
  ! shift/reduce conflict for FLOAT64_TYPE resolved as shift
  ! shift/reduce conflict for STRING_TYPE resolved as shift
  ! shift/reduce conflict for BOOL_TYPE resolved as shift
    MAP             shift and go to state 93
    LBRACKET        shift and go to state 94
    ASSIGN          shift and go to state 92
    ASIG            reduce using rule 36 (id_list -> VARIABLE .)
    COMMA           shift and go to state 95
    INT_TYPE        shift and go to state 96
    FLOAT64_TYPE    shift and go to state 97
    STRING_TYPE     shift and go to state 98
    BOOL_TYPE       shift and go to state 99

  ! ASSIGN          [ reduce using rule 36 (id_list -> VARIABLE .) ]
  ! INT_TYPE        [ reduce using rule 36 (id_list -> VARIABLE .) ]
  ! FLOAT64_TYPE    [ reduce using rule 36 (id_list -> VARIABLE .) ]
  ! STRING_TYPE     [ reduce using rule 36 (id_list -> VARIABLE .) ]
  ! BOOL_TYPE       [ reduce using rule 36 (id_list -> VARIABLE .) ]

    type                           shift and go to state 91

state 53

    (32) declaration -> VAR id_list . type ASSIGN expr_list
    (33) declaration -> VAR id_list . type ASIG expr_list
    (34) declaration -> VAR id_list . ASSIGN expr_list
    (35) declaration -> VAR id_list . ASIG expr_list
    (87) type -> . INT_TYPE
    (88) type -> . FLOAT64_TYPE
    (89) type -> . STRING_TYPE
    (90) type -> . BOOL_TYPE

    ASSIGN          shift and go to state 101
    ASIG            shift and go to state 102
    INT_TYPE        shift and go to state 96
    FLOAT64_TYPE    shift and go to state 97
    STRING_TYPE     shift and go to state 98
    BOOL_TYPE       shift and go to state 99

    type                           shift and go to state 100

state 54

    (46) print_stmt -> FMT DOT . PRINTF LPAREN STRING COMMA expression RPAREN
    (47) print_stmt -> FMT DOT . PRINTLN LPAREN expression RPAREN
    (48) input_stmt -> FMT DOT . SCANLN LPAREN AMPER VARIABLE RPAREN

    PRINTF          shift and go to state 103
    PRINTLN         shift and go to state 104
    SCANLN          shift and go to state 105


state 55

    (99) struct_method -> FUNC LPAREN . VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (100) struct_method -> FUNC LPAREN . VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE

    VARIABLE        shift and go to state 106


state 56

    (53) func_no_params -> FUNC VARIABLE . LPAREN RPAREN type LBRACE program RBRACE
    (54) func_no_params -> FUNC VARIABLE . LPAREN RPAREN LBRACE program RBRACE
    (50) func_header -> FUNC VARIABLE . LPAREN param_list RPAREN type

    LPAREN          shift and go to state 107


state 57

    (49) func_def -> func_header func_body .

    VAR             reduce using rule 49 (func_def -> func_header func_body .)
    VARIABLE        reduce using rule 49 (func_def -> func_header func_body .)
    FMT             reduce using rule 49 (func_def -> func_header func_body .)
    CONTINUE        reduce using rule 49 (func_def -> func_header func_body .)
    FUNC            reduce using rule 49 (func_def -> func_header func_body .)
    IF              reduce using rule 49 (func_def -> func_header func_body .)
    FOR             reduce using rule 49 (func_def -> func_header func_body .)
    TYPE            reduce using rule 49 (func_def -> func_header func_body .)
    SWITCH          reduce using rule 49 (func_def -> func_header func_body .)
    LBRACKET        reduce using rule 49 (func_def -> func_header func_body .)
    BREAK           reduce using rule 49 (func_def -> func_header func_body .)
    RETURN          reduce using rule 49 (func_def -> func_header func_body .)
    $end            reduce using rule 49 (func_def -> func_header func_body .)
    RBRACE          reduce using rule 49 (func_def -> func_header func_body .)
    CASE            reduce using rule 49 (func_def -> func_header func_body .)
    DEFAULT         reduce using rule 49 (func_def -> func_header func_body .)


state 58

    (51) func_body -> LBRACE . program RBRACE
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_call
    (15) statement -> . if_stmt
    (16) statement -> . for_stmt
    (17) statement -> . struct_def
    (18) statement -> . switch_stmt
    (19) statement -> . map_declaration
    (20) statement -> . map_declaration_values
    (21) statement -> . array_declaration
    (22) statement -> . array_literal
    (23) statement -> . slice_declaration
    (24) statement -> . make_stmt
    (25) statement -> . new_stmt
    (26) statement -> . break_stmt
    (27) statement -> . increment_stmt
    (28) statement -> . return_stmt
    (29) declaration -> . VAR VARIABLE type
    (30) declaration -> . VAR VARIABLE type ASIG expression
    (31) declaration -> . VAR VARIABLE type ASSIGN expression
    (32) declaration -> . VAR id_list type ASSIGN expr_list
    (33) declaration -> . VAR id_list type ASIG expr_list
    (34) declaration -> . VAR id_list ASSIGN expr_list
    (35) declaration -> . VAR id_list ASIG expr_list
    (40) declaration -> . VARIABLE ASIG expression
    (44) assignment -> . VARIABLE ASSIGN expression
    (45) assignment -> . VARIABLE ASIG expression
    (46) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (47) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (48) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (95) continue_stmt -> . CONTINUE
    (99) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (100) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (49) func_def -> . func_header func_body
    (53) func_no_params -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (54) func_no_params -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN
    (91) if_stmt -> . IF expression block
    (92) if_stmt -> . IF expression block ELSE block
    (93) for_stmt -> . FOR expression block
    (94) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (101) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (110) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (111) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (116) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (117) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (122) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (126) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (127) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (128) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (131) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (132) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (118) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (119) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (135) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (136) break_stmt -> . BREAK
    (137) increment_stmt -> . VARIABLE INCREMENT
    (138) increment_stmt -> . VARIABLE DECREMENT
    (52) return_stmt -> . RETURN expression
    (50) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type

    VAR             shift and go to state 32
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 33
    CONTINUE        shift and go to state 34
    FUNC            shift and go to state 35
    IF              shift and go to state 37
    FOR             shift and go to state 38
    TYPE            shift and go to state 39
    SWITCH          shift and go to state 40
    LBRACKET        shift and go to state 41
    BREAK           shift and go to state 42
    RETURN          shift and go to state 43

    program                        shift and go to state 108
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_call                      shift and go to state 17
    if_stmt                        shift and go to state 18
    for_stmt                       shift and go to state 19
    struct_def                     shift and go to state 20
    switch_stmt                    shift and go to state 21
    map_declaration                shift and go to state 22
    map_declaration_values         shift and go to state 23
    array_declaration              shift and go to state 24
    array_literal                  shift and go to state 25
    slice_declaration              shift and go to state 26
    make_stmt                      shift and go to state 27
    new_stmt                       shift and go to state 28
    break_stmt                     shift and go to state 29
    increment_stmt                 shift and go to state 30
    return_stmt                    shift and go to state 31
    func_header                    shift and go to state 36

state 59

    (91) if_stmt -> IF expression . block
    (92) if_stmt -> IF expression . block ELSE block
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression
    (98) block -> . LBRACE program RBRACE

    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119
    LBRACE          shift and go to state 120

    block                          shift and go to state 109

state 60

    (41) expression -> NUMBER .
    (77) factor -> NUMBER .

  ! reduce/reduce conflict for PLUS resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for MINUS resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for AND resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for OR resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for EQ resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for NE resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for LT resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for GT resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for LE resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for GE resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for LBRACE resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for VAR resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for FMT resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for FUNC resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for IF resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for FOR resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for TYPE resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for SWITCH resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for BREAK resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for RETURN resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for RBRACE resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for CASE resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for COMMA resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 41 (expression -> NUMBER .)
  ! reduce/reduce conflict for COLON resolved using rule 41 (expression -> NUMBER .)
    PLUS            reduce using rule 41 (expression -> NUMBER .)
    MINUS           reduce using rule 41 (expression -> NUMBER .)
    AND             reduce using rule 41 (expression -> NUMBER .)
    OR              reduce using rule 41 (expression -> NUMBER .)
    EQ              reduce using rule 41 (expression -> NUMBER .)
    NE              reduce using rule 41 (expression -> NUMBER .)
    LT              reduce using rule 41 (expression -> NUMBER .)
    GT              reduce using rule 41 (expression -> NUMBER .)
    LE              reduce using rule 41 (expression -> NUMBER .)
    GE              reduce using rule 41 (expression -> NUMBER .)
    LBRACE          reduce using rule 41 (expression -> NUMBER .)
    VAR             reduce using rule 41 (expression -> NUMBER .)
    VARIABLE        reduce using rule 41 (expression -> NUMBER .)
    FMT             reduce using rule 41 (expression -> NUMBER .)
    CONTINUE        reduce using rule 41 (expression -> NUMBER .)
    FUNC            reduce using rule 41 (expression -> NUMBER .)
    IF              reduce using rule 41 (expression -> NUMBER .)
    FOR             reduce using rule 41 (expression -> NUMBER .)
    TYPE            reduce using rule 41 (expression -> NUMBER .)
    SWITCH          reduce using rule 41 (expression -> NUMBER .)
    LBRACKET        reduce using rule 41 (expression -> NUMBER .)
    BREAK           reduce using rule 41 (expression -> NUMBER .)
    RETURN          reduce using rule 41 (expression -> NUMBER .)
    $end            reduce using rule 41 (expression -> NUMBER .)
    RBRACE          reduce using rule 41 (expression -> NUMBER .)
    CASE            reduce using rule 41 (expression -> NUMBER .)
    DEFAULT         reduce using rule 41 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 41 (expression -> NUMBER .)
    COMMA           reduce using rule 41 (expression -> NUMBER .)
    RPAREN          reduce using rule 41 (expression -> NUMBER .)
    COLON           reduce using rule 41 (expression -> NUMBER .)
    TIMES           reduce using rule 77 (factor -> NUMBER .)
    DIVIDE          reduce using rule 77 (factor -> NUMBER .)

  ! PLUS            [ reduce using rule 77 (factor -> NUMBER .) ]
  ! MINUS           [ reduce using rule 77 (factor -> NUMBER .) ]
  ! AND             [ reduce using rule 77 (factor -> NUMBER .) ]
  ! OR              [ reduce using rule 77 (factor -> NUMBER .) ]
  ! EQ              [ reduce using rule 77 (factor -> NUMBER .) ]
  ! NE              [ reduce using rule 77 (factor -> NUMBER .) ]
  ! LT              [ reduce using rule 77 (factor -> NUMBER .) ]
  ! GT              [ reduce using rule 77 (factor -> NUMBER .) ]
  ! LE              [ reduce using rule 77 (factor -> NUMBER .) ]
  ! GE              [ reduce using rule 77 (factor -> NUMBER .) ]
  ! LBRACE          [ reduce using rule 77 (factor -> NUMBER .) ]
  ! VAR             [ reduce using rule 77 (factor -> NUMBER .) ]
  ! VARIABLE        [ reduce using rule 77 (factor -> NUMBER .) ]
  ! FMT             [ reduce using rule 77 (factor -> NUMBER .) ]
  ! CONTINUE        [ reduce using rule 77 (factor -> NUMBER .) ]
  ! FUNC            [ reduce using rule 77 (factor -> NUMBER .) ]
  ! IF              [ reduce using rule 77 (factor -> NUMBER .) ]
  ! FOR             [ reduce using rule 77 (factor -> NUMBER .) ]
  ! TYPE            [ reduce using rule 77 (factor -> NUMBER .) ]
  ! SWITCH          [ reduce using rule 77 (factor -> NUMBER .) ]
  ! LBRACKET        [ reduce using rule 77 (factor -> NUMBER .) ]
  ! BREAK           [ reduce using rule 77 (factor -> NUMBER .) ]
  ! RETURN          [ reduce using rule 77 (factor -> NUMBER .) ]
  ! $end            [ reduce using rule 77 (factor -> NUMBER .) ]
  ! RBRACE          [ reduce using rule 77 (factor -> NUMBER .) ]
  ! CASE            [ reduce using rule 77 (factor -> NUMBER .) ]
  ! DEFAULT         [ reduce using rule 77 (factor -> NUMBER .) ]
  ! SEMICOLON       [ reduce using rule 77 (factor -> NUMBER .) ]
  ! COMMA           [ reduce using rule 77 (factor -> NUMBER .) ]
  ! RPAREN          [ reduce using rule 77 (factor -> NUMBER .) ]
  ! COLON           [ reduce using rule 77 (factor -> NUMBER .) ]


state 61

    (42) expression -> FLOAT .
    (78) factor -> FLOAT .

  ! reduce/reduce conflict for PLUS resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for MINUS resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for AND resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for OR resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for EQ resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for NE resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for LT resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for GT resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for LE resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for GE resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for LBRACE resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for VAR resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for FMT resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for FUNC resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for IF resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for FOR resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for TYPE resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for SWITCH resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for BREAK resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for RETURN resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for $end resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for RBRACE resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for CASE resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for COMMA resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 42 (expression -> FLOAT .)
  ! reduce/reduce conflict for COLON resolved using rule 42 (expression -> FLOAT .)
    PLUS            reduce using rule 42 (expression -> FLOAT .)
    MINUS           reduce using rule 42 (expression -> FLOAT .)
    AND             reduce using rule 42 (expression -> FLOAT .)
    OR              reduce using rule 42 (expression -> FLOAT .)
    EQ              reduce using rule 42 (expression -> FLOAT .)
    NE              reduce using rule 42 (expression -> FLOAT .)
    LT              reduce using rule 42 (expression -> FLOAT .)
    GT              reduce using rule 42 (expression -> FLOAT .)
    LE              reduce using rule 42 (expression -> FLOAT .)
    GE              reduce using rule 42 (expression -> FLOAT .)
    LBRACE          reduce using rule 42 (expression -> FLOAT .)
    VAR             reduce using rule 42 (expression -> FLOAT .)
    VARIABLE        reduce using rule 42 (expression -> FLOAT .)
    FMT             reduce using rule 42 (expression -> FLOAT .)
    CONTINUE        reduce using rule 42 (expression -> FLOAT .)
    FUNC            reduce using rule 42 (expression -> FLOAT .)
    IF              reduce using rule 42 (expression -> FLOAT .)
    FOR             reduce using rule 42 (expression -> FLOAT .)
    TYPE            reduce using rule 42 (expression -> FLOAT .)
    SWITCH          reduce using rule 42 (expression -> FLOAT .)
    LBRACKET        reduce using rule 42 (expression -> FLOAT .)
    BREAK           reduce using rule 42 (expression -> FLOAT .)
    RETURN          reduce using rule 42 (expression -> FLOAT .)
    $end            reduce using rule 42 (expression -> FLOAT .)
    RBRACE          reduce using rule 42 (expression -> FLOAT .)
    CASE            reduce using rule 42 (expression -> FLOAT .)
    DEFAULT         reduce using rule 42 (expression -> FLOAT .)
    SEMICOLON       reduce using rule 42 (expression -> FLOAT .)
    COMMA           reduce using rule 42 (expression -> FLOAT .)
    RPAREN          reduce using rule 42 (expression -> FLOAT .)
    COLON           reduce using rule 42 (expression -> FLOAT .)
    TIMES           reduce using rule 78 (factor -> FLOAT .)
    DIVIDE          reduce using rule 78 (factor -> FLOAT .)

  ! PLUS            [ reduce using rule 78 (factor -> FLOAT .) ]
  ! MINUS           [ reduce using rule 78 (factor -> FLOAT .) ]
  ! AND             [ reduce using rule 78 (factor -> FLOAT .) ]
  ! OR              [ reduce using rule 78 (factor -> FLOAT .) ]
  ! EQ              [ reduce using rule 78 (factor -> FLOAT .) ]
  ! NE              [ reduce using rule 78 (factor -> FLOAT .) ]
  ! LT              [ reduce using rule 78 (factor -> FLOAT .) ]
  ! GT              [ reduce using rule 78 (factor -> FLOAT .) ]
  ! LE              [ reduce using rule 78 (factor -> FLOAT .) ]
  ! GE              [ reduce using rule 78 (factor -> FLOAT .) ]
  ! LBRACE          [ reduce using rule 78 (factor -> FLOAT .) ]
  ! VAR             [ reduce using rule 78 (factor -> FLOAT .) ]
  ! VARIABLE        [ reduce using rule 78 (factor -> FLOAT .) ]
  ! FMT             [ reduce using rule 78 (factor -> FLOAT .) ]
  ! CONTINUE        [ reduce using rule 78 (factor -> FLOAT .) ]
  ! FUNC            [ reduce using rule 78 (factor -> FLOAT .) ]
  ! IF              [ reduce using rule 78 (factor -> FLOAT .) ]
  ! FOR             [ reduce using rule 78 (factor -> FLOAT .) ]
  ! TYPE            [ reduce using rule 78 (factor -> FLOAT .) ]
  ! SWITCH          [ reduce using rule 78 (factor -> FLOAT .) ]
  ! LBRACKET        [ reduce using rule 78 (factor -> FLOAT .) ]
  ! BREAK           [ reduce using rule 78 (factor -> FLOAT .) ]
  ! RETURN          [ reduce using rule 78 (factor -> FLOAT .) ]
  ! $end            [ reduce using rule 78 (factor -> FLOAT .) ]
  ! RBRACE          [ reduce using rule 78 (factor -> FLOAT .) ]
  ! CASE            [ reduce using rule 78 (factor -> FLOAT .) ]
  ! DEFAULT         [ reduce using rule 78 (factor -> FLOAT .) ]
  ! SEMICOLON       [ reduce using rule 78 (factor -> FLOAT .) ]
  ! COMMA           [ reduce using rule 78 (factor -> FLOAT .) ]
  ! RPAREN          [ reduce using rule 78 (factor -> FLOAT .) ]
  ! COLON           [ reduce using rule 78 (factor -> FLOAT .) ]


state 62

    (43) expression -> VARIABLE .
    (76) term -> VARIABLE .
    (80) factor -> VARIABLE .
    (106) struct_instance -> VARIABLE . LBRACE struct_fields_values RBRACE
    (55) func_call -> VARIABLE . LPAREN arg_list RPAREN
    (56) func_call -> VARIABLE . LPAREN RPAREN

  ! reduce/reduce conflict for PLUS resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for MINUS resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for AND resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for OR resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for EQ resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for NE resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LT resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GT resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LE resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GE resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for VAR resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for FMT resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for FUNC resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for IF resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for FOR resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for TYPE resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for SWITCH resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for BREAK resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for RETURN resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for $end resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for CASE resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for COLON resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for TIMES resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for PLUS resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for MINUS resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for AND resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for OR resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for EQ resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for NE resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LT resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GT resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LE resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GE resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for VAR resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for FMT resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for FUNC resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for IF resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for FOR resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for TYPE resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for SWITCH resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for BREAK resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for RETURN resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for $end resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for CASE resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for COLON resolved using rule 43 (expression -> VARIABLE .)
  ! shift/reduce conflict for LBRACE resolved as shift
    PLUS            reduce using rule 43 (expression -> VARIABLE .)
    MINUS           reduce using rule 43 (expression -> VARIABLE .)
    AND             reduce using rule 43 (expression -> VARIABLE .)
    OR              reduce using rule 43 (expression -> VARIABLE .)
    EQ              reduce using rule 43 (expression -> VARIABLE .)
    NE              reduce using rule 43 (expression -> VARIABLE .)
    LT              reduce using rule 43 (expression -> VARIABLE .)
    GT              reduce using rule 43 (expression -> VARIABLE .)
    LE              reduce using rule 43 (expression -> VARIABLE .)
    GE              reduce using rule 43 (expression -> VARIABLE .)
    VAR             reduce using rule 43 (expression -> VARIABLE .)
    VARIABLE        reduce using rule 43 (expression -> VARIABLE .)
    FMT             reduce using rule 43 (expression -> VARIABLE .)
    CONTINUE        reduce using rule 43 (expression -> VARIABLE .)
    FUNC            reduce using rule 43 (expression -> VARIABLE .)
    IF              reduce using rule 43 (expression -> VARIABLE .)
    FOR             reduce using rule 43 (expression -> VARIABLE .)
    TYPE            reduce using rule 43 (expression -> VARIABLE .)
    SWITCH          reduce using rule 43 (expression -> VARIABLE .)
    LBRACKET        reduce using rule 43 (expression -> VARIABLE .)
    BREAK           reduce using rule 43 (expression -> VARIABLE .)
    RETURN          reduce using rule 43 (expression -> VARIABLE .)
    $end            reduce using rule 43 (expression -> VARIABLE .)
    RBRACE          reduce using rule 43 (expression -> VARIABLE .)
    CASE            reduce using rule 43 (expression -> VARIABLE .)
    DEFAULT         reduce using rule 43 (expression -> VARIABLE .)
    SEMICOLON       reduce using rule 43 (expression -> VARIABLE .)
    COMMA           reduce using rule 43 (expression -> VARIABLE .)
    RPAREN          reduce using rule 43 (expression -> VARIABLE .)
    COLON           reduce using rule 43 (expression -> VARIABLE .)
    TIMES           reduce using rule 76 (term -> VARIABLE .)
    DIVIDE          reduce using rule 76 (term -> VARIABLE .)
    LBRACE          shift and go to state 121
    LPAREN          shift and go to state 48

  ! LBRACE          [ reduce using rule 43 (expression -> VARIABLE .) ]
  ! PLUS            [ reduce using rule 76 (term -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 76 (term -> VARIABLE .) ]
  ! AND             [ reduce using rule 76 (term -> VARIABLE .) ]
  ! OR              [ reduce using rule 76 (term -> VARIABLE .) ]
  ! EQ              [ reduce using rule 76 (term -> VARIABLE .) ]
  ! NE              [ reduce using rule 76 (term -> VARIABLE .) ]
  ! LT              [ reduce using rule 76 (term -> VARIABLE .) ]
  ! GT              [ reduce using rule 76 (term -> VARIABLE .) ]
  ! LE              [ reduce using rule 76 (term -> VARIABLE .) ]
  ! GE              [ reduce using rule 76 (term -> VARIABLE .) ]
  ! LBRACE          [ reduce using rule 76 (term -> VARIABLE .) ]
  ! VAR             [ reduce using rule 76 (term -> VARIABLE .) ]
  ! VARIABLE        [ reduce using rule 76 (term -> VARIABLE .) ]
  ! FMT             [ reduce using rule 76 (term -> VARIABLE .) ]
  ! CONTINUE        [ reduce using rule 76 (term -> VARIABLE .) ]
  ! FUNC            [ reduce using rule 76 (term -> VARIABLE .) ]
  ! IF              [ reduce using rule 76 (term -> VARIABLE .) ]
  ! FOR             [ reduce using rule 76 (term -> VARIABLE .) ]
  ! TYPE            [ reduce using rule 76 (term -> VARIABLE .) ]
  ! SWITCH          [ reduce using rule 76 (term -> VARIABLE .) ]
  ! LBRACKET        [ reduce using rule 76 (term -> VARIABLE .) ]
  ! BREAK           [ reduce using rule 76 (term -> VARIABLE .) ]
  ! RETURN          [ reduce using rule 76 (term -> VARIABLE .) ]
  ! $end            [ reduce using rule 76 (term -> VARIABLE .) ]
  ! RBRACE          [ reduce using rule 76 (term -> VARIABLE .) ]
  ! CASE            [ reduce using rule 76 (term -> VARIABLE .) ]
  ! DEFAULT         [ reduce using rule 76 (term -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 76 (term -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 76 (term -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 76 (term -> VARIABLE .) ]
  ! COLON           [ reduce using rule 76 (term -> VARIABLE .) ]
  ! TIMES           [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! PLUS            [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! AND             [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! OR              [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! EQ              [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! NE              [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! LT              [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! GT              [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! LE              [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! GE              [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! LBRACE          [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! VAR             [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! VARIABLE        [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! FMT             [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! CONTINUE        [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! FUNC            [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! IF              [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! FOR             [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! TYPE            [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! SWITCH          [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! LBRACKET        [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! BREAK           [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! RETURN          [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! $end            [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! RBRACE          [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! CASE            [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! DEFAULT         [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! COLON           [ reduce using rule 80 (factor -> VARIABLE .) ]


state 63

    (62) expression -> term .
    (74) term -> term . TIMES factor
    (75) term -> term . DIVIDE factor

    PLUS            reduce using rule 62 (expression -> term .)
    MINUS           reduce using rule 62 (expression -> term .)
    AND             reduce using rule 62 (expression -> term .)
    OR              reduce using rule 62 (expression -> term .)
    EQ              reduce using rule 62 (expression -> term .)
    NE              reduce using rule 62 (expression -> term .)
    LT              reduce using rule 62 (expression -> term .)
    GT              reduce using rule 62 (expression -> term .)
    LE              reduce using rule 62 (expression -> term .)
    GE              reduce using rule 62 (expression -> term .)
    LBRACE          reduce using rule 62 (expression -> term .)
    VAR             reduce using rule 62 (expression -> term .)
    VARIABLE        reduce using rule 62 (expression -> term .)
    FMT             reduce using rule 62 (expression -> term .)
    CONTINUE        reduce using rule 62 (expression -> term .)
    FUNC            reduce using rule 62 (expression -> term .)
    IF              reduce using rule 62 (expression -> term .)
    FOR             reduce using rule 62 (expression -> term .)
    TYPE            reduce using rule 62 (expression -> term .)
    SWITCH          reduce using rule 62 (expression -> term .)
    LBRACKET        reduce using rule 62 (expression -> term .)
    BREAK           reduce using rule 62 (expression -> term .)
    RETURN          reduce using rule 62 (expression -> term .)
    $end            reduce using rule 62 (expression -> term .)
    RBRACE          reduce using rule 62 (expression -> term .)
    CASE            reduce using rule 62 (expression -> term .)
    DEFAULT         reduce using rule 62 (expression -> term .)
    SEMICOLON       reduce using rule 62 (expression -> term .)
    COMMA           reduce using rule 62 (expression -> term .)
    RPAREN          reduce using rule 62 (expression -> term .)
    COLON           reduce using rule 62 (expression -> term .)
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123


state 64

    (73) term -> factor .

    TIMES           reduce using rule 73 (term -> factor .)
    DIVIDE          reduce using rule 73 (term -> factor .)
    PLUS            reduce using rule 73 (term -> factor .)
    MINUS           reduce using rule 73 (term -> factor .)
    AND             reduce using rule 73 (term -> factor .)
    OR              reduce using rule 73 (term -> factor .)
    EQ              reduce using rule 73 (term -> factor .)
    NE              reduce using rule 73 (term -> factor .)
    LT              reduce using rule 73 (term -> factor .)
    GT              reduce using rule 73 (term -> factor .)
    LE              reduce using rule 73 (term -> factor .)
    GE              reduce using rule 73 (term -> factor .)
    LBRACE          reduce using rule 73 (term -> factor .)
    VAR             reduce using rule 73 (term -> factor .)
    VARIABLE        reduce using rule 73 (term -> factor .)
    FMT             reduce using rule 73 (term -> factor .)
    CONTINUE        reduce using rule 73 (term -> factor .)
    FUNC            reduce using rule 73 (term -> factor .)
    IF              reduce using rule 73 (term -> factor .)
    FOR             reduce using rule 73 (term -> factor .)
    TYPE            reduce using rule 73 (term -> factor .)
    SWITCH          reduce using rule 73 (term -> factor .)
    LBRACKET        reduce using rule 73 (term -> factor .)
    BREAK           reduce using rule 73 (term -> factor .)
    RETURN          reduce using rule 73 (term -> factor .)
    $end            reduce using rule 73 (term -> factor .)
    RBRACE          reduce using rule 73 (term -> factor .)
    CASE            reduce using rule 73 (term -> factor .)
    DEFAULT         reduce using rule 73 (term -> factor .)
    SEMICOLON       reduce using rule 73 (term -> factor .)
    COMMA           reduce using rule 73 (term -> factor .)
    RPAREN          reduce using rule 73 (term -> factor .)
    COLON           reduce using rule 73 (term -> factor .)


state 65

    (79) factor -> STRING .

    TIMES           reduce using rule 79 (factor -> STRING .)
    DIVIDE          reduce using rule 79 (factor -> STRING .)
    PLUS            reduce using rule 79 (factor -> STRING .)
    MINUS           reduce using rule 79 (factor -> STRING .)
    AND             reduce using rule 79 (factor -> STRING .)
    OR              reduce using rule 79 (factor -> STRING .)
    EQ              reduce using rule 79 (factor -> STRING .)
    NE              reduce using rule 79 (factor -> STRING .)
    LT              reduce using rule 79 (factor -> STRING .)
    GT              reduce using rule 79 (factor -> STRING .)
    LE              reduce using rule 79 (factor -> STRING .)
    GE              reduce using rule 79 (factor -> STRING .)
    LBRACE          reduce using rule 79 (factor -> STRING .)
    VAR             reduce using rule 79 (factor -> STRING .)
    VARIABLE        reduce using rule 79 (factor -> STRING .)
    FMT             reduce using rule 79 (factor -> STRING .)
    CONTINUE        reduce using rule 79 (factor -> STRING .)
    FUNC            reduce using rule 79 (factor -> STRING .)
    IF              reduce using rule 79 (factor -> STRING .)
    FOR             reduce using rule 79 (factor -> STRING .)
    TYPE            reduce using rule 79 (factor -> STRING .)
    SWITCH          reduce using rule 79 (factor -> STRING .)
    LBRACKET        reduce using rule 79 (factor -> STRING .)
    BREAK           reduce using rule 79 (factor -> STRING .)
    RETURN          reduce using rule 79 (factor -> STRING .)
    $end            reduce using rule 79 (factor -> STRING .)
    RBRACE          reduce using rule 79 (factor -> STRING .)
    CASE            reduce using rule 79 (factor -> STRING .)
    DEFAULT         reduce using rule 79 (factor -> STRING .)
    SEMICOLON       reduce using rule 79 (factor -> STRING .)
    COMMA           reduce using rule 79 (factor -> STRING .)
    RPAREN          reduce using rule 79 (factor -> STRING .)
    COLON           reduce using rule 79 (factor -> STRING .)


state 66

    (81) factor -> TRUE .

    TIMES           reduce using rule 81 (factor -> TRUE .)
    DIVIDE          reduce using rule 81 (factor -> TRUE .)
    PLUS            reduce using rule 81 (factor -> TRUE .)
    MINUS           reduce using rule 81 (factor -> TRUE .)
    AND             reduce using rule 81 (factor -> TRUE .)
    OR              reduce using rule 81 (factor -> TRUE .)
    EQ              reduce using rule 81 (factor -> TRUE .)
    NE              reduce using rule 81 (factor -> TRUE .)
    LT              reduce using rule 81 (factor -> TRUE .)
    GT              reduce using rule 81 (factor -> TRUE .)
    LE              reduce using rule 81 (factor -> TRUE .)
    GE              reduce using rule 81 (factor -> TRUE .)
    LBRACE          reduce using rule 81 (factor -> TRUE .)
    VAR             reduce using rule 81 (factor -> TRUE .)
    VARIABLE        reduce using rule 81 (factor -> TRUE .)
    FMT             reduce using rule 81 (factor -> TRUE .)
    CONTINUE        reduce using rule 81 (factor -> TRUE .)
    FUNC            reduce using rule 81 (factor -> TRUE .)
    IF              reduce using rule 81 (factor -> TRUE .)
    FOR             reduce using rule 81 (factor -> TRUE .)
    TYPE            reduce using rule 81 (factor -> TRUE .)
    SWITCH          reduce using rule 81 (factor -> TRUE .)
    LBRACKET        reduce using rule 81 (factor -> TRUE .)
    BREAK           reduce using rule 81 (factor -> TRUE .)
    RETURN          reduce using rule 81 (factor -> TRUE .)
    $end            reduce using rule 81 (factor -> TRUE .)
    RBRACE          reduce using rule 81 (factor -> TRUE .)
    CASE            reduce using rule 81 (factor -> TRUE .)
    DEFAULT         reduce using rule 81 (factor -> TRUE .)
    SEMICOLON       reduce using rule 81 (factor -> TRUE .)
    COMMA           reduce using rule 81 (factor -> TRUE .)
    RPAREN          reduce using rule 81 (factor -> TRUE .)
    COLON           reduce using rule 81 (factor -> TRUE .)


state 67

    (82) factor -> FALSE .

    TIMES           reduce using rule 82 (factor -> FALSE .)
    DIVIDE          reduce using rule 82 (factor -> FALSE .)
    PLUS            reduce using rule 82 (factor -> FALSE .)
    MINUS           reduce using rule 82 (factor -> FALSE .)
    AND             reduce using rule 82 (factor -> FALSE .)
    OR              reduce using rule 82 (factor -> FALSE .)
    EQ              reduce using rule 82 (factor -> FALSE .)
    NE              reduce using rule 82 (factor -> FALSE .)
    LT              reduce using rule 82 (factor -> FALSE .)
    GT              reduce using rule 82 (factor -> FALSE .)
    LE              reduce using rule 82 (factor -> FALSE .)
    GE              reduce using rule 82 (factor -> FALSE .)
    LBRACE          reduce using rule 82 (factor -> FALSE .)
    VAR             reduce using rule 82 (factor -> FALSE .)
    VARIABLE        reduce using rule 82 (factor -> FALSE .)
    FMT             reduce using rule 82 (factor -> FALSE .)
    CONTINUE        reduce using rule 82 (factor -> FALSE .)
    FUNC            reduce using rule 82 (factor -> FALSE .)
    IF              reduce using rule 82 (factor -> FALSE .)
    FOR             reduce using rule 82 (factor -> FALSE .)
    TYPE            reduce using rule 82 (factor -> FALSE .)
    SWITCH          reduce using rule 82 (factor -> FALSE .)
    LBRACKET        reduce using rule 82 (factor -> FALSE .)
    BREAK           reduce using rule 82 (factor -> FALSE .)
    RETURN          reduce using rule 82 (factor -> FALSE .)
    $end            reduce using rule 82 (factor -> FALSE .)
    RBRACE          reduce using rule 82 (factor -> FALSE .)
    CASE            reduce using rule 82 (factor -> FALSE .)
    DEFAULT         reduce using rule 82 (factor -> FALSE .)
    SEMICOLON       reduce using rule 82 (factor -> FALSE .)
    COMMA           reduce using rule 82 (factor -> FALSE .)
    RPAREN          reduce using rule 82 (factor -> FALSE .)
    COLON           reduce using rule 82 (factor -> FALSE .)


state 68

    (83) factor -> LPAREN . expression RPAREN
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 124
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 69

    (84) factor -> make_expr .

    TIMES           reduce using rule 84 (factor -> make_expr .)
    DIVIDE          reduce using rule 84 (factor -> make_expr .)
    PLUS            reduce using rule 84 (factor -> make_expr .)
    MINUS           reduce using rule 84 (factor -> make_expr .)
    AND             reduce using rule 84 (factor -> make_expr .)
    OR              reduce using rule 84 (factor -> make_expr .)
    EQ              reduce using rule 84 (factor -> make_expr .)
    NE              reduce using rule 84 (factor -> make_expr .)
    LT              reduce using rule 84 (factor -> make_expr .)
    GT              reduce using rule 84 (factor -> make_expr .)
    LE              reduce using rule 84 (factor -> make_expr .)
    GE              reduce using rule 84 (factor -> make_expr .)
    LBRACE          reduce using rule 84 (factor -> make_expr .)
    VAR             reduce using rule 84 (factor -> make_expr .)
    VARIABLE        reduce using rule 84 (factor -> make_expr .)
    FMT             reduce using rule 84 (factor -> make_expr .)
    CONTINUE        reduce using rule 84 (factor -> make_expr .)
    FUNC            reduce using rule 84 (factor -> make_expr .)
    IF              reduce using rule 84 (factor -> make_expr .)
    FOR             reduce using rule 84 (factor -> make_expr .)
    TYPE            reduce using rule 84 (factor -> make_expr .)
    SWITCH          reduce using rule 84 (factor -> make_expr .)
    LBRACKET        reduce using rule 84 (factor -> make_expr .)
    BREAK           reduce using rule 84 (factor -> make_expr .)
    RETURN          reduce using rule 84 (factor -> make_expr .)
    $end            reduce using rule 84 (factor -> make_expr .)
    RBRACE          reduce using rule 84 (factor -> make_expr .)
    CASE            reduce using rule 84 (factor -> make_expr .)
    DEFAULT         reduce using rule 84 (factor -> make_expr .)
    SEMICOLON       reduce using rule 84 (factor -> make_expr .)
    COMMA           reduce using rule 84 (factor -> make_expr .)
    RPAREN          reduce using rule 84 (factor -> make_expr .)
    COLON           reduce using rule 84 (factor -> make_expr .)


state 70

    (85) factor -> struct_instance .

    TIMES           reduce using rule 85 (factor -> struct_instance .)
    DIVIDE          reduce using rule 85 (factor -> struct_instance .)
    PLUS            reduce using rule 85 (factor -> struct_instance .)
    MINUS           reduce using rule 85 (factor -> struct_instance .)
    AND             reduce using rule 85 (factor -> struct_instance .)
    OR              reduce using rule 85 (factor -> struct_instance .)
    EQ              reduce using rule 85 (factor -> struct_instance .)
    NE              reduce using rule 85 (factor -> struct_instance .)
    LT              reduce using rule 85 (factor -> struct_instance .)
    GT              reduce using rule 85 (factor -> struct_instance .)
    LE              reduce using rule 85 (factor -> struct_instance .)
    GE              reduce using rule 85 (factor -> struct_instance .)
    LBRACE          reduce using rule 85 (factor -> struct_instance .)
    VAR             reduce using rule 85 (factor -> struct_instance .)
    VARIABLE        reduce using rule 85 (factor -> struct_instance .)
    FMT             reduce using rule 85 (factor -> struct_instance .)
    CONTINUE        reduce using rule 85 (factor -> struct_instance .)
    FUNC            reduce using rule 85 (factor -> struct_instance .)
    IF              reduce using rule 85 (factor -> struct_instance .)
    FOR             reduce using rule 85 (factor -> struct_instance .)
    TYPE            reduce using rule 85 (factor -> struct_instance .)
    SWITCH          reduce using rule 85 (factor -> struct_instance .)
    LBRACKET        reduce using rule 85 (factor -> struct_instance .)
    BREAK           reduce using rule 85 (factor -> struct_instance .)
    RETURN          reduce using rule 85 (factor -> struct_instance .)
    $end            reduce using rule 85 (factor -> struct_instance .)
    RBRACE          reduce using rule 85 (factor -> struct_instance .)
    CASE            reduce using rule 85 (factor -> struct_instance .)
    DEFAULT         reduce using rule 85 (factor -> struct_instance .)
    SEMICOLON       reduce using rule 85 (factor -> struct_instance .)
    COMMA           reduce using rule 85 (factor -> struct_instance .)
    RPAREN          reduce using rule 85 (factor -> struct_instance .)
    COLON           reduce using rule 85 (factor -> struct_instance .)


state 71

    (86) factor -> func_call .

    TIMES           reduce using rule 86 (factor -> func_call .)
    DIVIDE          reduce using rule 86 (factor -> func_call .)
    PLUS            reduce using rule 86 (factor -> func_call .)
    MINUS           reduce using rule 86 (factor -> func_call .)
    AND             reduce using rule 86 (factor -> func_call .)
    OR              reduce using rule 86 (factor -> func_call .)
    EQ              reduce using rule 86 (factor -> func_call .)
    NE              reduce using rule 86 (factor -> func_call .)
    LT              reduce using rule 86 (factor -> func_call .)
    GT              reduce using rule 86 (factor -> func_call .)
    LE              reduce using rule 86 (factor -> func_call .)
    GE              reduce using rule 86 (factor -> func_call .)
    LBRACE          reduce using rule 86 (factor -> func_call .)
    VAR             reduce using rule 86 (factor -> func_call .)
    VARIABLE        reduce using rule 86 (factor -> func_call .)
    FMT             reduce using rule 86 (factor -> func_call .)
    CONTINUE        reduce using rule 86 (factor -> func_call .)
    FUNC            reduce using rule 86 (factor -> func_call .)
    IF              reduce using rule 86 (factor -> func_call .)
    FOR             reduce using rule 86 (factor -> func_call .)
    TYPE            reduce using rule 86 (factor -> func_call .)
    SWITCH          reduce using rule 86 (factor -> func_call .)
    LBRACKET        reduce using rule 86 (factor -> func_call .)
    BREAK           reduce using rule 86 (factor -> func_call .)
    RETURN          reduce using rule 86 (factor -> func_call .)
    $end            reduce using rule 86 (factor -> func_call .)
    RBRACE          reduce using rule 86 (factor -> func_call .)
    CASE            reduce using rule 86 (factor -> func_call .)
    DEFAULT         reduce using rule 86 (factor -> func_call .)
    SEMICOLON       reduce using rule 86 (factor -> func_call .)
    COMMA           reduce using rule 86 (factor -> func_call .)
    RPAREN          reduce using rule 86 (factor -> func_call .)
    COLON           reduce using rule 86 (factor -> func_call .)


state 72

    (120) make_expr -> MAKE . LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> MAKE . LPAREN LBRACKET RBRACKET type RPAREN

    LPAREN          shift and go to state 125


state 73

    (93) for_stmt -> FOR expression . block
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression
    (98) block -> . LBRACE program RBRACE

    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119
    LBRACE          shift and go to state 120

    block                          shift and go to state 126

state 74

    (94) for_stmt -> FOR assignment . SEMICOLON expression SEMICOLON for_update block

    SEMICOLON       shift and go to state 127


state 75

    (43) expression -> VARIABLE .
    (44) assignment -> VARIABLE . ASSIGN expression
    (45) assignment -> VARIABLE . ASIG expression
    (76) term -> VARIABLE .
    (80) factor -> VARIABLE .
    (106) struct_instance -> VARIABLE . LBRACE struct_fields_values RBRACE
    (55) func_call -> VARIABLE . LPAREN arg_list RPAREN
    (56) func_call -> VARIABLE . LPAREN RPAREN

  ! reduce/reduce conflict for PLUS resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for MINUS resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for AND resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for OR resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for EQ resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for NE resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LT resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GT resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LE resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GE resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for TIMES resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for PLUS resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for MINUS resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for AND resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for OR resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for EQ resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for NE resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LT resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GT resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LE resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GE resolved using rule 43 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 43 (expression -> VARIABLE .)
  ! shift/reduce conflict for LBRACE resolved as shift
    PLUS            reduce using rule 43 (expression -> VARIABLE .)
    MINUS           reduce using rule 43 (expression -> VARIABLE .)
    AND             reduce using rule 43 (expression -> VARIABLE .)
    OR              reduce using rule 43 (expression -> VARIABLE .)
    EQ              reduce using rule 43 (expression -> VARIABLE .)
    NE              reduce using rule 43 (expression -> VARIABLE .)
    LT              reduce using rule 43 (expression -> VARIABLE .)
    GT              reduce using rule 43 (expression -> VARIABLE .)
    LE              reduce using rule 43 (expression -> VARIABLE .)
    GE              reduce using rule 43 (expression -> VARIABLE .)
    ASSIGN          shift and go to state 47
    ASIG            shift and go to state 128
    TIMES           reduce using rule 76 (term -> VARIABLE .)
    DIVIDE          reduce using rule 76 (term -> VARIABLE .)
    LBRACE          shift and go to state 121
    LPAREN          shift and go to state 48

  ! LBRACE          [ reduce using rule 43 (expression -> VARIABLE .) ]
  ! PLUS            [ reduce using rule 76 (term -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 76 (term -> VARIABLE .) ]
  ! AND             [ reduce using rule 76 (term -> VARIABLE .) ]
  ! OR              [ reduce using rule 76 (term -> VARIABLE .) ]
  ! EQ              [ reduce using rule 76 (term -> VARIABLE .) ]
  ! NE              [ reduce using rule 76 (term -> VARIABLE .) ]
  ! LT              [ reduce using rule 76 (term -> VARIABLE .) ]
  ! GT              [ reduce using rule 76 (term -> VARIABLE .) ]
  ! LE              [ reduce using rule 76 (term -> VARIABLE .) ]
  ! GE              [ reduce using rule 76 (term -> VARIABLE .) ]
  ! LBRACE          [ reduce using rule 76 (term -> VARIABLE .) ]
  ! TIMES           [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! PLUS            [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! AND             [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! OR              [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! EQ              [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! NE              [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! LT              [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! GT              [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! LE              [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! GE              [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! LBRACE          [ reduce using rule 80 (factor -> VARIABLE .) ]


state 76

    (101) struct_def -> TYPE VARIABLE . STRUCT LBRACE struct_fields RBRACE

    STRUCT          shift and go to state 129


state 77

    (110) switch_stmt -> SWITCH expression . LBRACE case_list RBRACE
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    LBRACE          shift and go to state 130
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119


state 78

    (111) switch_stmt -> SWITCH LBRACE . case_list RBRACE
    (112) case_list -> . case_clause
    (113) case_list -> . case_clause case_list
    (114) case_clause -> . CASE expression COLON program
    (115) case_clause -> . DEFAULT COLON program

    CASE            shift and go to state 133
    DEFAULT         shift and go to state 134

    case_list                      shift and go to state 131
    case_clause                    shift and go to state 132

state 79

    (128) array_literal -> LBRACKET NUMBER . RBRACKET type LBRACE array_values RBRACE

    RBRACKET        shift and go to state 135


state 80

    (52) return_stmt -> RETURN expression .
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    VAR             reduce using rule 52 (return_stmt -> RETURN expression .)
    VARIABLE        reduce using rule 52 (return_stmt -> RETURN expression .)
    FMT             reduce using rule 52 (return_stmt -> RETURN expression .)
    CONTINUE        reduce using rule 52 (return_stmt -> RETURN expression .)
    FUNC            reduce using rule 52 (return_stmt -> RETURN expression .)
    IF              reduce using rule 52 (return_stmt -> RETURN expression .)
    FOR             reduce using rule 52 (return_stmt -> RETURN expression .)
    TYPE            reduce using rule 52 (return_stmt -> RETURN expression .)
    SWITCH          reduce using rule 52 (return_stmt -> RETURN expression .)
    LBRACKET        reduce using rule 52 (return_stmt -> RETURN expression .)
    BREAK           reduce using rule 52 (return_stmt -> RETURN expression .)
    RETURN          reduce using rule 52 (return_stmt -> RETURN expression .)
    $end            reduce using rule 52 (return_stmt -> RETURN expression .)
    RBRACE          reduce using rule 52 (return_stmt -> RETURN expression .)
    CASE            reduce using rule 52 (return_stmt -> RETURN expression .)
    DEFAULT         reduce using rule 52 (return_stmt -> RETURN expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119


state 81

    (2) import_stmt -> IMPORT LPAREN STRING . RPAREN

    RPAREN          shift and go to state 136


state 82

    (40) declaration -> VARIABLE ASIG expression .
    (45) assignment -> VARIABLE ASIG expression .
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

  ! reduce/reduce conflict for VAR resolved using rule 40 (declaration -> VARIABLE ASIG expression .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 40 (declaration -> VARIABLE ASIG expression .)
  ! reduce/reduce conflict for FMT resolved using rule 40 (declaration -> VARIABLE ASIG expression .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 40 (declaration -> VARIABLE ASIG expression .)
  ! reduce/reduce conflict for FUNC resolved using rule 40 (declaration -> VARIABLE ASIG expression .)
  ! reduce/reduce conflict for IF resolved using rule 40 (declaration -> VARIABLE ASIG expression .)
  ! reduce/reduce conflict for FOR resolved using rule 40 (declaration -> VARIABLE ASIG expression .)
  ! reduce/reduce conflict for TYPE resolved using rule 40 (declaration -> VARIABLE ASIG expression .)
  ! reduce/reduce conflict for SWITCH resolved using rule 40 (declaration -> VARIABLE ASIG expression .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 40 (declaration -> VARIABLE ASIG expression .)
  ! reduce/reduce conflict for BREAK resolved using rule 40 (declaration -> VARIABLE ASIG expression .)
  ! reduce/reduce conflict for RETURN resolved using rule 40 (declaration -> VARIABLE ASIG expression .)
  ! reduce/reduce conflict for $end resolved using rule 40 (declaration -> VARIABLE ASIG expression .)
  ! reduce/reduce conflict for RBRACE resolved using rule 40 (declaration -> VARIABLE ASIG expression .)
  ! reduce/reduce conflict for CASE resolved using rule 40 (declaration -> VARIABLE ASIG expression .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 40 (declaration -> VARIABLE ASIG expression .)
    VAR             reduce using rule 40 (declaration -> VARIABLE ASIG expression .)
    VARIABLE        reduce using rule 40 (declaration -> VARIABLE ASIG expression .)
    FMT             reduce using rule 40 (declaration -> VARIABLE ASIG expression .)
    CONTINUE        reduce using rule 40 (declaration -> VARIABLE ASIG expression .)
    FUNC            reduce using rule 40 (declaration -> VARIABLE ASIG expression .)
    IF              reduce using rule 40 (declaration -> VARIABLE ASIG expression .)
    FOR             reduce using rule 40 (declaration -> VARIABLE ASIG expression .)
    TYPE            reduce using rule 40 (declaration -> VARIABLE ASIG expression .)
    SWITCH          reduce using rule 40 (declaration -> VARIABLE ASIG expression .)
    LBRACKET        reduce using rule 40 (declaration -> VARIABLE ASIG expression .)
    BREAK           reduce using rule 40 (declaration -> VARIABLE ASIG expression .)
    RETURN          reduce using rule 40 (declaration -> VARIABLE ASIG expression .)
    $end            reduce using rule 40 (declaration -> VARIABLE ASIG expression .)
    RBRACE          reduce using rule 40 (declaration -> VARIABLE ASIG expression .)
    CASE            reduce using rule 40 (declaration -> VARIABLE ASIG expression .)
    DEFAULT         reduce using rule 40 (declaration -> VARIABLE ASIG expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119

  ! VAR             [ reduce using rule 45 (assignment -> VARIABLE ASIG expression .) ]
  ! VARIABLE        [ reduce using rule 45 (assignment -> VARIABLE ASIG expression .) ]
  ! FMT             [ reduce using rule 45 (assignment -> VARIABLE ASIG expression .) ]
  ! CONTINUE        [ reduce using rule 45 (assignment -> VARIABLE ASIG expression .) ]
  ! FUNC            [ reduce using rule 45 (assignment -> VARIABLE ASIG expression .) ]
  ! IF              [ reduce using rule 45 (assignment -> VARIABLE ASIG expression .) ]
  ! FOR             [ reduce using rule 45 (assignment -> VARIABLE ASIG expression .) ]
  ! TYPE            [ reduce using rule 45 (assignment -> VARIABLE ASIG expression .) ]
  ! SWITCH          [ reduce using rule 45 (assignment -> VARIABLE ASIG expression .) ]
  ! LBRACKET        [ reduce using rule 45 (assignment -> VARIABLE ASIG expression .) ]
  ! BREAK           [ reduce using rule 45 (assignment -> VARIABLE ASIG expression .) ]
  ! RETURN          [ reduce using rule 45 (assignment -> VARIABLE ASIG expression .) ]
  ! $end            [ reduce using rule 45 (assignment -> VARIABLE ASIG expression .) ]
  ! RBRACE          [ reduce using rule 45 (assignment -> VARIABLE ASIG expression .) ]
  ! CASE            [ reduce using rule 45 (assignment -> VARIABLE ASIG expression .) ]
  ! DEFAULT         [ reduce using rule 45 (assignment -> VARIABLE ASIG expression .) ]


state 83

    (117) map_declaration -> VARIABLE ASIG MAP . LBRACKET type RBRACKET type
    (122) map_declaration_values -> VARIABLE ASIG MAP . LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE

    LBRACKET        shift and go to state 137


state 84

    (132) slice_declaration -> VARIABLE ASIG LBRACKET . RBRACKET type LBRACE slice_values RBRACE

    RBRACKET        shift and go to state 138


state 85

    (118) make_stmt -> VARIABLE ASIG MAKE . LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (119) make_stmt -> VARIABLE ASIG MAKE . LPAREN LBRACKET RBRACKET type RPAREN
    (120) make_expr -> MAKE . LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> MAKE . LPAREN LBRACKET RBRACKET type RPAREN

    LPAREN          shift and go to state 139


state 86

    (135) new_stmt -> VARIABLE ASIG NEW . LPAREN VARIABLE RPAREN

    LPAREN          shift and go to state 140


state 87

    (44) assignment -> VARIABLE ASSIGN expression .
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    VAR             reduce using rule 44 (assignment -> VARIABLE ASSIGN expression .)
    VARIABLE        reduce using rule 44 (assignment -> VARIABLE ASSIGN expression .)
    FMT             reduce using rule 44 (assignment -> VARIABLE ASSIGN expression .)
    CONTINUE        reduce using rule 44 (assignment -> VARIABLE ASSIGN expression .)
    FUNC            reduce using rule 44 (assignment -> VARIABLE ASSIGN expression .)
    IF              reduce using rule 44 (assignment -> VARIABLE ASSIGN expression .)
    FOR             reduce using rule 44 (assignment -> VARIABLE ASSIGN expression .)
    TYPE            reduce using rule 44 (assignment -> VARIABLE ASSIGN expression .)
    SWITCH          reduce using rule 44 (assignment -> VARIABLE ASSIGN expression .)
    LBRACKET        reduce using rule 44 (assignment -> VARIABLE ASSIGN expression .)
    BREAK           reduce using rule 44 (assignment -> VARIABLE ASSIGN expression .)
    RETURN          reduce using rule 44 (assignment -> VARIABLE ASSIGN expression .)
    $end            reduce using rule 44 (assignment -> VARIABLE ASSIGN expression .)
    RBRACE          reduce using rule 44 (assignment -> VARIABLE ASSIGN expression .)
    CASE            reduce using rule 44 (assignment -> VARIABLE ASSIGN expression .)
    DEFAULT         reduce using rule 44 (assignment -> VARIABLE ASSIGN expression .)
    SEMICOLON       reduce using rule 44 (assignment -> VARIABLE ASSIGN expression .)
    LBRACE          reduce using rule 44 (assignment -> VARIABLE ASSIGN expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119


state 88

    (55) func_call -> VARIABLE LPAREN arg_list . RPAREN

    RPAREN          shift and go to state 141


state 89

    (56) func_call -> VARIABLE LPAREN RPAREN .

    VAR             reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    VARIABLE        reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    FMT             reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    CONTINUE        reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    FUNC            reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    IF              reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    FOR             reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    TYPE            reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    SWITCH          reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    LBRACKET        reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    BREAK           reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    RETURN          reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    $end            reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    RBRACE          reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    CASE            reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    DEFAULT         reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    TIMES           reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    DIVIDE          reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    PLUS            reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    MINUS           reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    AND             reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    OR              reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    EQ              reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    NE              reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    LT              reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    GT              reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    LE              reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    GE              reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    LBRACE          reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    SEMICOLON       reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    COMMA           reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    RPAREN          reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)
    COLON           reduce using rule 56 (func_call -> VARIABLE LPAREN RPAREN .)


state 90

    (60) arg_list -> expression .
    (61) arg_list -> expression . COMMA arg_list
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    RPAREN          reduce using rule 60 (arg_list -> expression .)
    COMMA           shift and go to state 142
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119


state 91

    (29) declaration -> VAR VARIABLE type .
    (30) declaration -> VAR VARIABLE type . ASIG expression
    (31) declaration -> VAR VARIABLE type . ASSIGN expression

    VAR             reduce using rule 29 (declaration -> VAR VARIABLE type .)
    VARIABLE        reduce using rule 29 (declaration -> VAR VARIABLE type .)
    FMT             reduce using rule 29 (declaration -> VAR VARIABLE type .)
    CONTINUE        reduce using rule 29 (declaration -> VAR VARIABLE type .)
    FUNC            reduce using rule 29 (declaration -> VAR VARIABLE type .)
    IF              reduce using rule 29 (declaration -> VAR VARIABLE type .)
    FOR             reduce using rule 29 (declaration -> VAR VARIABLE type .)
    TYPE            reduce using rule 29 (declaration -> VAR VARIABLE type .)
    SWITCH          reduce using rule 29 (declaration -> VAR VARIABLE type .)
    LBRACKET        reduce using rule 29 (declaration -> VAR VARIABLE type .)
    BREAK           reduce using rule 29 (declaration -> VAR VARIABLE type .)
    RETURN          reduce using rule 29 (declaration -> VAR VARIABLE type .)
    $end            reduce using rule 29 (declaration -> VAR VARIABLE type .)
    RBRACE          reduce using rule 29 (declaration -> VAR VARIABLE type .)
    CASE            reduce using rule 29 (declaration -> VAR VARIABLE type .)
    DEFAULT         reduce using rule 29 (declaration -> VAR VARIABLE type .)
    ASIG            shift and go to state 143
    ASSIGN          shift and go to state 144


state 92

    (127) array_declaration -> VAR VARIABLE ASSIGN . array_literal
    (128) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE

    LBRACKET        shift and go to state 41

    array_literal                  shift and go to state 145

state 93

    (116) map_declaration -> VAR VARIABLE MAP . LBRACKET type RBRACKET type

    LBRACKET        shift and go to state 146


state 94

    (126) array_declaration -> VAR VARIABLE LBRACKET . NUMBER RBRACKET type
    (131) slice_declaration -> VAR VARIABLE LBRACKET . RBRACKET type

    NUMBER          shift and go to state 147
    RBRACKET        shift and go to state 148


state 95

    (37) id_list -> VARIABLE COMMA . id_list
    (36) id_list -> . VARIABLE
    (37) id_list -> . VARIABLE COMMA id_list

    VARIABLE        shift and go to state 149

    id_list                        shift and go to state 150

state 96

    (87) type -> INT_TYPE .

    ASIG            reduce using rule 87 (type -> INT_TYPE .)
    ASSIGN          reduce using rule 87 (type -> INT_TYPE .)
    VAR             reduce using rule 87 (type -> INT_TYPE .)
    VARIABLE        reduce using rule 87 (type -> INT_TYPE .)
    FMT             reduce using rule 87 (type -> INT_TYPE .)
    CONTINUE        reduce using rule 87 (type -> INT_TYPE .)
    FUNC            reduce using rule 87 (type -> INT_TYPE .)
    IF              reduce using rule 87 (type -> INT_TYPE .)
    FOR             reduce using rule 87 (type -> INT_TYPE .)
    TYPE            reduce using rule 87 (type -> INT_TYPE .)
    SWITCH          reduce using rule 87 (type -> INT_TYPE .)
    LBRACKET        reduce using rule 87 (type -> INT_TYPE .)
    BREAK           reduce using rule 87 (type -> INT_TYPE .)
    RETURN          reduce using rule 87 (type -> INT_TYPE .)
    $end            reduce using rule 87 (type -> INT_TYPE .)
    RBRACE          reduce using rule 87 (type -> INT_TYPE .)
    CASE            reduce using rule 87 (type -> INT_TYPE .)
    DEFAULT         reduce using rule 87 (type -> INT_TYPE .)
    LBRACE          reduce using rule 87 (type -> INT_TYPE .)
    RBRACKET        reduce using rule 87 (type -> INT_TYPE .)
    COMMA           reduce using rule 87 (type -> INT_TYPE .)
    RPAREN          reduce using rule 87 (type -> INT_TYPE .)
    INT_TYPE        reduce using rule 87 (type -> INT_TYPE .)
    FLOAT64_TYPE    reduce using rule 87 (type -> INT_TYPE .)
    STRING_TYPE     reduce using rule 87 (type -> INT_TYPE .)
    BOOL_TYPE       reduce using rule 87 (type -> INT_TYPE .)


state 97

    (88) type -> FLOAT64_TYPE .

    ASIG            reduce using rule 88 (type -> FLOAT64_TYPE .)
    ASSIGN          reduce using rule 88 (type -> FLOAT64_TYPE .)
    VAR             reduce using rule 88 (type -> FLOAT64_TYPE .)
    VARIABLE        reduce using rule 88 (type -> FLOAT64_TYPE .)
    FMT             reduce using rule 88 (type -> FLOAT64_TYPE .)
    CONTINUE        reduce using rule 88 (type -> FLOAT64_TYPE .)
    FUNC            reduce using rule 88 (type -> FLOAT64_TYPE .)
    IF              reduce using rule 88 (type -> FLOAT64_TYPE .)
    FOR             reduce using rule 88 (type -> FLOAT64_TYPE .)
    TYPE            reduce using rule 88 (type -> FLOAT64_TYPE .)
    SWITCH          reduce using rule 88 (type -> FLOAT64_TYPE .)
    LBRACKET        reduce using rule 88 (type -> FLOAT64_TYPE .)
    BREAK           reduce using rule 88 (type -> FLOAT64_TYPE .)
    RETURN          reduce using rule 88 (type -> FLOAT64_TYPE .)
    $end            reduce using rule 88 (type -> FLOAT64_TYPE .)
    RBRACE          reduce using rule 88 (type -> FLOAT64_TYPE .)
    CASE            reduce using rule 88 (type -> FLOAT64_TYPE .)
    DEFAULT         reduce using rule 88 (type -> FLOAT64_TYPE .)
    LBRACE          reduce using rule 88 (type -> FLOAT64_TYPE .)
    RBRACKET        reduce using rule 88 (type -> FLOAT64_TYPE .)
    COMMA           reduce using rule 88 (type -> FLOAT64_TYPE .)
    RPAREN          reduce using rule 88 (type -> FLOAT64_TYPE .)
    INT_TYPE        reduce using rule 88 (type -> FLOAT64_TYPE .)
    FLOAT64_TYPE    reduce using rule 88 (type -> FLOAT64_TYPE .)
    STRING_TYPE     reduce using rule 88 (type -> FLOAT64_TYPE .)
    BOOL_TYPE       reduce using rule 88 (type -> FLOAT64_TYPE .)


state 98

    (89) type -> STRING_TYPE .

    ASIG            reduce using rule 89 (type -> STRING_TYPE .)
    ASSIGN          reduce using rule 89 (type -> STRING_TYPE .)
    VAR             reduce using rule 89 (type -> STRING_TYPE .)
    VARIABLE        reduce using rule 89 (type -> STRING_TYPE .)
    FMT             reduce using rule 89 (type -> STRING_TYPE .)
    CONTINUE        reduce using rule 89 (type -> STRING_TYPE .)
    FUNC            reduce using rule 89 (type -> STRING_TYPE .)
    IF              reduce using rule 89 (type -> STRING_TYPE .)
    FOR             reduce using rule 89 (type -> STRING_TYPE .)
    TYPE            reduce using rule 89 (type -> STRING_TYPE .)
    SWITCH          reduce using rule 89 (type -> STRING_TYPE .)
    LBRACKET        reduce using rule 89 (type -> STRING_TYPE .)
    BREAK           reduce using rule 89 (type -> STRING_TYPE .)
    RETURN          reduce using rule 89 (type -> STRING_TYPE .)
    $end            reduce using rule 89 (type -> STRING_TYPE .)
    RBRACE          reduce using rule 89 (type -> STRING_TYPE .)
    CASE            reduce using rule 89 (type -> STRING_TYPE .)
    DEFAULT         reduce using rule 89 (type -> STRING_TYPE .)
    LBRACE          reduce using rule 89 (type -> STRING_TYPE .)
    RBRACKET        reduce using rule 89 (type -> STRING_TYPE .)
    COMMA           reduce using rule 89 (type -> STRING_TYPE .)
    RPAREN          reduce using rule 89 (type -> STRING_TYPE .)
    INT_TYPE        reduce using rule 89 (type -> STRING_TYPE .)
    FLOAT64_TYPE    reduce using rule 89 (type -> STRING_TYPE .)
    STRING_TYPE     reduce using rule 89 (type -> STRING_TYPE .)
    BOOL_TYPE       reduce using rule 89 (type -> STRING_TYPE .)


state 99

    (90) type -> BOOL_TYPE .

    ASIG            reduce using rule 90 (type -> BOOL_TYPE .)
    ASSIGN          reduce using rule 90 (type -> BOOL_TYPE .)
    VAR             reduce using rule 90 (type -> BOOL_TYPE .)
    VARIABLE        reduce using rule 90 (type -> BOOL_TYPE .)
    FMT             reduce using rule 90 (type -> BOOL_TYPE .)
    CONTINUE        reduce using rule 90 (type -> BOOL_TYPE .)
    FUNC            reduce using rule 90 (type -> BOOL_TYPE .)
    IF              reduce using rule 90 (type -> BOOL_TYPE .)
    FOR             reduce using rule 90 (type -> BOOL_TYPE .)
    TYPE            reduce using rule 90 (type -> BOOL_TYPE .)
    SWITCH          reduce using rule 90 (type -> BOOL_TYPE .)
    LBRACKET        reduce using rule 90 (type -> BOOL_TYPE .)
    BREAK           reduce using rule 90 (type -> BOOL_TYPE .)
    RETURN          reduce using rule 90 (type -> BOOL_TYPE .)
    $end            reduce using rule 90 (type -> BOOL_TYPE .)
    RBRACE          reduce using rule 90 (type -> BOOL_TYPE .)
    CASE            reduce using rule 90 (type -> BOOL_TYPE .)
    DEFAULT         reduce using rule 90 (type -> BOOL_TYPE .)
    LBRACE          reduce using rule 90 (type -> BOOL_TYPE .)
    RBRACKET        reduce using rule 90 (type -> BOOL_TYPE .)
    COMMA           reduce using rule 90 (type -> BOOL_TYPE .)
    RPAREN          reduce using rule 90 (type -> BOOL_TYPE .)
    INT_TYPE        reduce using rule 90 (type -> BOOL_TYPE .)
    FLOAT64_TYPE    reduce using rule 90 (type -> BOOL_TYPE .)
    STRING_TYPE     reduce using rule 90 (type -> BOOL_TYPE .)
    BOOL_TYPE       reduce using rule 90 (type -> BOOL_TYPE .)


state 100

    (32) declaration -> VAR id_list type . ASSIGN expr_list
    (33) declaration -> VAR id_list type . ASIG expr_list

    ASSIGN          shift and go to state 151
    ASIG            shift and go to state 152


state 101

    (34) declaration -> VAR id_list ASSIGN . expr_list
    (38) expr_list -> . expression
    (39) expr_list -> . expression COMMA expr_list
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expr_list                      shift and go to state 153
    expression                     shift and go to state 154
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 102

    (35) declaration -> VAR id_list ASIG . expr_list
    (38) expr_list -> . expression
    (39) expr_list -> . expression COMMA expr_list
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expr_list                      shift and go to state 155
    expression                     shift and go to state 154
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 103

    (46) print_stmt -> FMT DOT PRINTF . LPAREN STRING COMMA expression RPAREN

    LPAREN          shift and go to state 156


state 104

    (47) print_stmt -> FMT DOT PRINTLN . LPAREN expression RPAREN

    LPAREN          shift and go to state 157


state 105

    (48) input_stmt -> FMT DOT SCANLN . LPAREN AMPER VARIABLE RPAREN

    LPAREN          shift and go to state 158


state 106

    (99) struct_method -> FUNC LPAREN VARIABLE . VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (100) struct_method -> FUNC LPAREN VARIABLE . VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE

    VARIABLE        shift and go to state 159


state 107

    (53) func_no_params -> FUNC VARIABLE LPAREN . RPAREN type LBRACE program RBRACE
    (54) func_no_params -> FUNC VARIABLE LPAREN . RPAREN LBRACE program RBRACE
    (50) func_header -> FUNC VARIABLE LPAREN . param_list RPAREN type
    (57) param_list -> . param
    (58) param_list -> . param COMMA param_list
    (59) param -> . VARIABLE type

    RPAREN          shift and go to state 161
    VARIABLE        shift and go to state 160

    param_list                     shift and go to state 162
    param                          shift and go to state 163

state 108

    (51) func_body -> LBRACE program . RBRACE

    RBRACE          shift and go to state 164


state 109

    (91) if_stmt -> IF expression block .
    (92) if_stmt -> IF expression block . ELSE block

    VAR             reduce using rule 91 (if_stmt -> IF expression block .)
    VARIABLE        reduce using rule 91 (if_stmt -> IF expression block .)
    FMT             reduce using rule 91 (if_stmt -> IF expression block .)
    CONTINUE        reduce using rule 91 (if_stmt -> IF expression block .)
    FUNC            reduce using rule 91 (if_stmt -> IF expression block .)
    IF              reduce using rule 91 (if_stmt -> IF expression block .)
    FOR             reduce using rule 91 (if_stmt -> IF expression block .)
    TYPE            reduce using rule 91 (if_stmt -> IF expression block .)
    SWITCH          reduce using rule 91 (if_stmt -> IF expression block .)
    LBRACKET        reduce using rule 91 (if_stmt -> IF expression block .)
    BREAK           reduce using rule 91 (if_stmt -> IF expression block .)
    RETURN          reduce using rule 91 (if_stmt -> IF expression block .)
    $end            reduce using rule 91 (if_stmt -> IF expression block .)
    RBRACE          reduce using rule 91 (if_stmt -> IF expression block .)
    CASE            reduce using rule 91 (if_stmt -> IF expression block .)
    DEFAULT         reduce using rule 91 (if_stmt -> IF expression block .)
    ELSE            shift and go to state 165


state 110

    (63) expression -> expression PLUS . term
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    VARIABLE        shift and go to state 167
    NUMBER          shift and go to state 168
    FLOAT           shift and go to state 169
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    term                           shift and go to state 166
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 111

    (64) expression -> expression MINUS . term
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    VARIABLE        shift and go to state 167
    NUMBER          shift and go to state 168
    FLOAT           shift and go to state 169
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    term                           shift and go to state 170
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 112

    (65) expression -> expression AND . expression
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 171
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 113

    (66) expression -> expression OR . expression
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 172
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 114

    (67) expression -> expression EQ . expression
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 173
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 115

    (68) expression -> expression NE . expression
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 174
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 116

    (69) expression -> expression LT . expression
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 175
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 117

    (70) expression -> expression GT . expression
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 176
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 118

    (71) expression -> expression LE . expression
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 177
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 119

    (72) expression -> expression GE . expression
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 178
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 120

    (98) block -> LBRACE . program RBRACE
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_call
    (15) statement -> . if_stmt
    (16) statement -> . for_stmt
    (17) statement -> . struct_def
    (18) statement -> . switch_stmt
    (19) statement -> . map_declaration
    (20) statement -> . map_declaration_values
    (21) statement -> . array_declaration
    (22) statement -> . array_literal
    (23) statement -> . slice_declaration
    (24) statement -> . make_stmt
    (25) statement -> . new_stmt
    (26) statement -> . break_stmt
    (27) statement -> . increment_stmt
    (28) statement -> . return_stmt
    (29) declaration -> . VAR VARIABLE type
    (30) declaration -> . VAR VARIABLE type ASIG expression
    (31) declaration -> . VAR VARIABLE type ASSIGN expression
    (32) declaration -> . VAR id_list type ASSIGN expr_list
    (33) declaration -> . VAR id_list type ASIG expr_list
    (34) declaration -> . VAR id_list ASSIGN expr_list
    (35) declaration -> . VAR id_list ASIG expr_list
    (40) declaration -> . VARIABLE ASIG expression
    (44) assignment -> . VARIABLE ASSIGN expression
    (45) assignment -> . VARIABLE ASIG expression
    (46) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (47) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (48) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (95) continue_stmt -> . CONTINUE
    (99) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (100) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (49) func_def -> . func_header func_body
    (53) func_no_params -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (54) func_no_params -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN
    (91) if_stmt -> . IF expression block
    (92) if_stmt -> . IF expression block ELSE block
    (93) for_stmt -> . FOR expression block
    (94) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (101) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (110) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (111) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (116) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (117) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (122) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (126) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (127) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (128) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (131) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (132) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (118) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (119) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (135) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (136) break_stmt -> . BREAK
    (137) increment_stmt -> . VARIABLE INCREMENT
    (138) increment_stmt -> . VARIABLE DECREMENT
    (52) return_stmt -> . RETURN expression
    (50) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type

    VAR             shift and go to state 32
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 33
    CONTINUE        shift and go to state 34
    FUNC            shift and go to state 35
    IF              shift and go to state 37
    FOR             shift and go to state 38
    TYPE            shift and go to state 39
    SWITCH          shift and go to state 40
    LBRACKET        shift and go to state 41
    BREAK           shift and go to state 42
    RETURN          shift and go to state 43

    program                        shift and go to state 179
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_call                      shift and go to state 17
    if_stmt                        shift and go to state 18
    for_stmt                       shift and go to state 19
    struct_def                     shift and go to state 20
    switch_stmt                    shift and go to state 21
    map_declaration                shift and go to state 22
    map_declaration_values         shift and go to state 23
    array_declaration              shift and go to state 24
    array_literal                  shift and go to state 25
    slice_declaration              shift and go to state 26
    make_stmt                      shift and go to state 27
    new_stmt                       shift and go to state 28
    break_stmt                     shift and go to state 29
    increment_stmt                 shift and go to state 30
    return_stmt                    shift and go to state 31
    func_header                    shift and go to state 36

state 121

    (106) struct_instance -> VARIABLE LBRACE . struct_fields_values RBRACE
    (107) struct_fields_values -> . field_value
    (108) struct_fields_values -> . field_value COMMA struct_fields_values
    (109) field_value -> . VARIABLE COLON expression

    VARIABLE        shift and go to state 180

    struct_fields_values           shift and go to state 181
    field_value                    shift and go to state 182

state 122

    (74) term -> term TIMES . factor
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 168
    FLOAT           shift and go to state 169
    STRING          shift and go to state 65
    VARIABLE        shift and go to state 184
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    factor                         shift and go to state 183
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 123

    (75) term -> term DIVIDE . factor
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 168
    FLOAT           shift and go to state 169
    STRING          shift and go to state 65
    VARIABLE        shift and go to state 184
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    factor                         shift and go to state 185
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 124

    (83) factor -> LPAREN expression . RPAREN
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    RPAREN          shift and go to state 186
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119


state 125

    (120) make_expr -> MAKE LPAREN . MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> MAKE LPAREN . LBRACKET RBRACKET type RPAREN

    MAP             shift and go to state 187
    LBRACKET        shift and go to state 188


state 126

    (93) for_stmt -> FOR expression block .

    VAR             reduce using rule 93 (for_stmt -> FOR expression block .)
    VARIABLE        reduce using rule 93 (for_stmt -> FOR expression block .)
    FMT             reduce using rule 93 (for_stmt -> FOR expression block .)
    CONTINUE        reduce using rule 93 (for_stmt -> FOR expression block .)
    FUNC            reduce using rule 93 (for_stmt -> FOR expression block .)
    IF              reduce using rule 93 (for_stmt -> FOR expression block .)
    FOR             reduce using rule 93 (for_stmt -> FOR expression block .)
    TYPE            reduce using rule 93 (for_stmt -> FOR expression block .)
    SWITCH          reduce using rule 93 (for_stmt -> FOR expression block .)
    LBRACKET        reduce using rule 93 (for_stmt -> FOR expression block .)
    BREAK           reduce using rule 93 (for_stmt -> FOR expression block .)
    RETURN          reduce using rule 93 (for_stmt -> FOR expression block .)
    $end            reduce using rule 93 (for_stmt -> FOR expression block .)
    RBRACE          reduce using rule 93 (for_stmt -> FOR expression block .)
    CASE            reduce using rule 93 (for_stmt -> FOR expression block .)
    DEFAULT         reduce using rule 93 (for_stmt -> FOR expression block .)


state 127

    (94) for_stmt -> FOR assignment SEMICOLON . expression SEMICOLON for_update block
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 189
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 128

    (45) assignment -> VARIABLE ASIG . expression
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 190
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 129

    (101) struct_def -> TYPE VARIABLE STRUCT . LBRACE struct_fields RBRACE

    LBRACE          shift and go to state 191


state 130

    (110) switch_stmt -> SWITCH expression LBRACE . case_list RBRACE
    (112) case_list -> . case_clause
    (113) case_list -> . case_clause case_list
    (114) case_clause -> . CASE expression COLON program
    (115) case_clause -> . DEFAULT COLON program

    CASE            shift and go to state 133
    DEFAULT         shift and go to state 134

    case_list                      shift and go to state 192
    case_clause                    shift and go to state 132

state 131

    (111) switch_stmt -> SWITCH LBRACE case_list . RBRACE

    RBRACE          shift and go to state 193


state 132

    (112) case_list -> case_clause .
    (113) case_list -> case_clause . case_list
    (112) case_list -> . case_clause
    (113) case_list -> . case_clause case_list
    (114) case_clause -> . CASE expression COLON program
    (115) case_clause -> . DEFAULT COLON program

    RBRACE          reduce using rule 112 (case_list -> case_clause .)
    CASE            shift and go to state 133
    DEFAULT         shift and go to state 134

    case_clause                    shift and go to state 132
    case_list                      shift and go to state 194

state 133

    (114) case_clause -> CASE . expression COLON program
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 195
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 134

    (115) case_clause -> DEFAULT . COLON program

    COLON           shift and go to state 196


state 135

    (128) array_literal -> LBRACKET NUMBER RBRACKET . type LBRACE array_values RBRACE
    (87) type -> . INT_TYPE
    (88) type -> . FLOAT64_TYPE
    (89) type -> . STRING_TYPE
    (90) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 96
    FLOAT64_TYPE    shift and go to state 97
    STRING_TYPE     shift and go to state 98
    BOOL_TYPE       shift and go to state 99

    type                           shift and go to state 197

state 136

    (2) import_stmt -> IMPORT LPAREN STRING RPAREN .

    VAR             reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    VARIABLE        reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    FMT             reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    CONTINUE        reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    FUNC            reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    IF              reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    FOR             reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    TYPE            reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    SWITCH          reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    LBRACKET        reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    BREAK           reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    RETURN          reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)


state 137

    (117) map_declaration -> VARIABLE ASIG MAP LBRACKET . type RBRACKET type
    (122) map_declaration_values -> VARIABLE ASIG MAP LBRACKET . type RBRACKET type LBRACE map_kv_pairs RBRACE
    (87) type -> . INT_TYPE
    (88) type -> . FLOAT64_TYPE
    (89) type -> . STRING_TYPE
    (90) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 96
    FLOAT64_TYPE    shift and go to state 97
    STRING_TYPE     shift and go to state 98
    BOOL_TYPE       shift and go to state 99

    type                           shift and go to state 198

state 138

    (132) slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET . type LBRACE slice_values RBRACE
    (87) type -> . INT_TYPE
    (88) type -> . FLOAT64_TYPE
    (89) type -> . STRING_TYPE
    (90) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 96
    FLOAT64_TYPE    shift and go to state 97
    STRING_TYPE     shift and go to state 98
    BOOL_TYPE       shift and go to state 99

    type                           shift and go to state 199

state 139

    (118) make_stmt -> VARIABLE ASIG MAKE LPAREN . MAP LBRACKET type RBRACKET type RPAREN
    (119) make_stmt -> VARIABLE ASIG MAKE LPAREN . LBRACKET RBRACKET type RPAREN
    (120) make_expr -> MAKE LPAREN . MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> MAKE LPAREN . LBRACKET RBRACKET type RPAREN

    MAP             shift and go to state 200
    LBRACKET        shift and go to state 201


state 140

    (135) new_stmt -> VARIABLE ASIG NEW LPAREN . VARIABLE RPAREN

    VARIABLE        shift and go to state 202


state 141

    (55) func_call -> VARIABLE LPAREN arg_list RPAREN .

    VAR             reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    VARIABLE        reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    FMT             reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    CONTINUE        reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    FUNC            reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    IF              reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    FOR             reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    TYPE            reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    SWITCH          reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    LBRACKET        reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    BREAK           reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    RETURN          reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    $end            reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    RBRACE          reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    CASE            reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    DEFAULT         reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    DIVIDE          reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    PLUS            reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    AND             reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    OR              reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    EQ              reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    NE              reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    LT              reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    GT              reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    LE              reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    GE              reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    LBRACE          reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    SEMICOLON       reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    COLON           reduce using rule 55 (func_call -> VARIABLE LPAREN arg_list RPAREN .)


state 142

    (61) arg_list -> expression COMMA . arg_list
    (60) arg_list -> . expression
    (61) arg_list -> . expression COMMA arg_list
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 90
    arg_list                       shift and go to state 203
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 143

    (30) declaration -> VAR VARIABLE type ASIG . expression
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 204
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 144

    (31) declaration -> VAR VARIABLE type ASSIGN . expression
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 205
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 145

    (127) array_declaration -> VAR VARIABLE ASSIGN array_literal .

    VAR             reduce using rule 127 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    VARIABLE        reduce using rule 127 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    FMT             reduce using rule 127 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    CONTINUE        reduce using rule 127 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    FUNC            reduce using rule 127 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    IF              reduce using rule 127 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    FOR             reduce using rule 127 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    TYPE            reduce using rule 127 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    SWITCH          reduce using rule 127 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    LBRACKET        reduce using rule 127 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    BREAK           reduce using rule 127 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    RETURN          reduce using rule 127 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    $end            reduce using rule 127 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    RBRACE          reduce using rule 127 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    CASE            reduce using rule 127 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    DEFAULT         reduce using rule 127 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)


state 146

    (116) map_declaration -> VAR VARIABLE MAP LBRACKET . type RBRACKET type
    (87) type -> . INT_TYPE
    (88) type -> . FLOAT64_TYPE
    (89) type -> . STRING_TYPE
    (90) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 96
    FLOAT64_TYPE    shift and go to state 97
    STRING_TYPE     shift and go to state 98
    BOOL_TYPE       shift and go to state 99

    type                           shift and go to state 206

state 147

    (126) array_declaration -> VAR VARIABLE LBRACKET NUMBER . RBRACKET type

    RBRACKET        shift and go to state 207


state 148

    (131) slice_declaration -> VAR VARIABLE LBRACKET RBRACKET . type
    (87) type -> . INT_TYPE
    (88) type -> . FLOAT64_TYPE
    (89) type -> . STRING_TYPE
    (90) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 96
    FLOAT64_TYPE    shift and go to state 97
    STRING_TYPE     shift and go to state 98
    BOOL_TYPE       shift and go to state 99

    type                           shift and go to state 208

state 149

    (36) id_list -> VARIABLE .
    (37) id_list -> VARIABLE . COMMA id_list

    ASSIGN          reduce using rule 36 (id_list -> VARIABLE .)
    ASIG            reduce using rule 36 (id_list -> VARIABLE .)
    INT_TYPE        reduce using rule 36 (id_list -> VARIABLE .)
    FLOAT64_TYPE    reduce using rule 36 (id_list -> VARIABLE .)
    STRING_TYPE     reduce using rule 36 (id_list -> VARIABLE .)
    BOOL_TYPE       reduce using rule 36 (id_list -> VARIABLE .)
    COMMA           shift and go to state 95


state 150

    (37) id_list -> VARIABLE COMMA id_list .

    ASSIGN          reduce using rule 37 (id_list -> VARIABLE COMMA id_list .)
    ASIG            reduce using rule 37 (id_list -> VARIABLE COMMA id_list .)
    INT_TYPE        reduce using rule 37 (id_list -> VARIABLE COMMA id_list .)
    FLOAT64_TYPE    reduce using rule 37 (id_list -> VARIABLE COMMA id_list .)
    STRING_TYPE     reduce using rule 37 (id_list -> VARIABLE COMMA id_list .)
    BOOL_TYPE       reduce using rule 37 (id_list -> VARIABLE COMMA id_list .)


state 151

    (32) declaration -> VAR id_list type ASSIGN . expr_list
    (38) expr_list -> . expression
    (39) expr_list -> . expression COMMA expr_list
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expr_list                      shift and go to state 209
    expression                     shift and go to state 154
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 152

    (33) declaration -> VAR id_list type ASIG . expr_list
    (38) expr_list -> . expression
    (39) expr_list -> . expression COMMA expr_list
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expr_list                      shift and go to state 210
    expression                     shift and go to state 154
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 153

    (34) declaration -> VAR id_list ASSIGN expr_list .

    VAR             reduce using rule 34 (declaration -> VAR id_list ASSIGN expr_list .)
    VARIABLE        reduce using rule 34 (declaration -> VAR id_list ASSIGN expr_list .)
    FMT             reduce using rule 34 (declaration -> VAR id_list ASSIGN expr_list .)
    CONTINUE        reduce using rule 34 (declaration -> VAR id_list ASSIGN expr_list .)
    FUNC            reduce using rule 34 (declaration -> VAR id_list ASSIGN expr_list .)
    IF              reduce using rule 34 (declaration -> VAR id_list ASSIGN expr_list .)
    FOR             reduce using rule 34 (declaration -> VAR id_list ASSIGN expr_list .)
    TYPE            reduce using rule 34 (declaration -> VAR id_list ASSIGN expr_list .)
    SWITCH          reduce using rule 34 (declaration -> VAR id_list ASSIGN expr_list .)
    LBRACKET        reduce using rule 34 (declaration -> VAR id_list ASSIGN expr_list .)
    BREAK           reduce using rule 34 (declaration -> VAR id_list ASSIGN expr_list .)
    RETURN          reduce using rule 34 (declaration -> VAR id_list ASSIGN expr_list .)
    $end            reduce using rule 34 (declaration -> VAR id_list ASSIGN expr_list .)
    RBRACE          reduce using rule 34 (declaration -> VAR id_list ASSIGN expr_list .)
    CASE            reduce using rule 34 (declaration -> VAR id_list ASSIGN expr_list .)
    DEFAULT         reduce using rule 34 (declaration -> VAR id_list ASSIGN expr_list .)


state 154

    (38) expr_list -> expression .
    (39) expr_list -> expression . COMMA expr_list
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    VAR             reduce using rule 38 (expr_list -> expression .)
    VARIABLE        reduce using rule 38 (expr_list -> expression .)
    FMT             reduce using rule 38 (expr_list -> expression .)
    CONTINUE        reduce using rule 38 (expr_list -> expression .)
    FUNC            reduce using rule 38 (expr_list -> expression .)
    IF              reduce using rule 38 (expr_list -> expression .)
    FOR             reduce using rule 38 (expr_list -> expression .)
    TYPE            reduce using rule 38 (expr_list -> expression .)
    SWITCH          reduce using rule 38 (expr_list -> expression .)
    LBRACKET        reduce using rule 38 (expr_list -> expression .)
    BREAK           reduce using rule 38 (expr_list -> expression .)
    RETURN          reduce using rule 38 (expr_list -> expression .)
    $end            reduce using rule 38 (expr_list -> expression .)
    RBRACE          reduce using rule 38 (expr_list -> expression .)
    CASE            reduce using rule 38 (expr_list -> expression .)
    DEFAULT         reduce using rule 38 (expr_list -> expression .)
    COMMA           shift and go to state 211
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119


state 155

    (35) declaration -> VAR id_list ASIG expr_list .

    VAR             reduce using rule 35 (declaration -> VAR id_list ASIG expr_list .)
    VARIABLE        reduce using rule 35 (declaration -> VAR id_list ASIG expr_list .)
    FMT             reduce using rule 35 (declaration -> VAR id_list ASIG expr_list .)
    CONTINUE        reduce using rule 35 (declaration -> VAR id_list ASIG expr_list .)
    FUNC            reduce using rule 35 (declaration -> VAR id_list ASIG expr_list .)
    IF              reduce using rule 35 (declaration -> VAR id_list ASIG expr_list .)
    FOR             reduce using rule 35 (declaration -> VAR id_list ASIG expr_list .)
    TYPE            reduce using rule 35 (declaration -> VAR id_list ASIG expr_list .)
    SWITCH          reduce using rule 35 (declaration -> VAR id_list ASIG expr_list .)
    LBRACKET        reduce using rule 35 (declaration -> VAR id_list ASIG expr_list .)
    BREAK           reduce using rule 35 (declaration -> VAR id_list ASIG expr_list .)
    RETURN          reduce using rule 35 (declaration -> VAR id_list ASIG expr_list .)
    $end            reduce using rule 35 (declaration -> VAR id_list ASIG expr_list .)
    RBRACE          reduce using rule 35 (declaration -> VAR id_list ASIG expr_list .)
    CASE            reduce using rule 35 (declaration -> VAR id_list ASIG expr_list .)
    DEFAULT         reduce using rule 35 (declaration -> VAR id_list ASIG expr_list .)


state 156

    (46) print_stmt -> FMT DOT PRINTF LPAREN . STRING COMMA expression RPAREN

    STRING          shift and go to state 212


state 157

    (47) print_stmt -> FMT DOT PRINTLN LPAREN . expression RPAREN
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 213
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 158

    (48) input_stmt -> FMT DOT SCANLN LPAREN . AMPER VARIABLE RPAREN

    AMPER           shift and go to state 214


state 159

    (99) struct_method -> FUNC LPAREN VARIABLE VARIABLE . RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (100) struct_method -> FUNC LPAREN VARIABLE VARIABLE . RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE

    RPAREN          shift and go to state 215


state 160

    (59) param -> VARIABLE . type
    (87) type -> . INT_TYPE
    (88) type -> . FLOAT64_TYPE
    (89) type -> . STRING_TYPE
    (90) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 96
    FLOAT64_TYPE    shift and go to state 97
    STRING_TYPE     shift and go to state 98
    BOOL_TYPE       shift and go to state 99

    type                           shift and go to state 216

state 161

    (53) func_no_params -> FUNC VARIABLE LPAREN RPAREN . type LBRACE program RBRACE
    (54) func_no_params -> FUNC VARIABLE LPAREN RPAREN . LBRACE program RBRACE
    (87) type -> . INT_TYPE
    (88) type -> . FLOAT64_TYPE
    (89) type -> . STRING_TYPE
    (90) type -> . BOOL_TYPE

    LBRACE          shift and go to state 218
    INT_TYPE        shift and go to state 96
    FLOAT64_TYPE    shift and go to state 97
    STRING_TYPE     shift and go to state 98
    BOOL_TYPE       shift and go to state 99

    type                           shift and go to state 217

state 162

    (50) func_header -> FUNC VARIABLE LPAREN param_list . RPAREN type

    RPAREN          shift and go to state 219


state 163

    (57) param_list -> param .
    (58) param_list -> param . COMMA param_list

    RPAREN          reduce using rule 57 (param_list -> param .)
    COMMA           shift and go to state 220


state 164

    (51) func_body -> LBRACE program RBRACE .

    VAR             reduce using rule 51 (func_body -> LBRACE program RBRACE .)
    VARIABLE        reduce using rule 51 (func_body -> LBRACE program RBRACE .)
    FMT             reduce using rule 51 (func_body -> LBRACE program RBRACE .)
    CONTINUE        reduce using rule 51 (func_body -> LBRACE program RBRACE .)
    FUNC            reduce using rule 51 (func_body -> LBRACE program RBRACE .)
    IF              reduce using rule 51 (func_body -> LBRACE program RBRACE .)
    FOR             reduce using rule 51 (func_body -> LBRACE program RBRACE .)
    TYPE            reduce using rule 51 (func_body -> LBRACE program RBRACE .)
    SWITCH          reduce using rule 51 (func_body -> LBRACE program RBRACE .)
    LBRACKET        reduce using rule 51 (func_body -> LBRACE program RBRACE .)
    BREAK           reduce using rule 51 (func_body -> LBRACE program RBRACE .)
    RETURN          reduce using rule 51 (func_body -> LBRACE program RBRACE .)
    $end            reduce using rule 51 (func_body -> LBRACE program RBRACE .)
    RBRACE          reduce using rule 51 (func_body -> LBRACE program RBRACE .)
    CASE            reduce using rule 51 (func_body -> LBRACE program RBRACE .)
    DEFAULT         reduce using rule 51 (func_body -> LBRACE program RBRACE .)


state 165

    (92) if_stmt -> IF expression block ELSE . block
    (98) block -> . LBRACE program RBRACE

    LBRACE          shift and go to state 120

    block                          shift and go to state 221

state 166

    (63) expression -> expression PLUS term .
    (74) term -> term . TIMES factor
    (75) term -> term . DIVIDE factor

    PLUS            reduce using rule 63 (expression -> expression PLUS term .)
    MINUS           reduce using rule 63 (expression -> expression PLUS term .)
    AND             reduce using rule 63 (expression -> expression PLUS term .)
    OR              reduce using rule 63 (expression -> expression PLUS term .)
    EQ              reduce using rule 63 (expression -> expression PLUS term .)
    NE              reduce using rule 63 (expression -> expression PLUS term .)
    LT              reduce using rule 63 (expression -> expression PLUS term .)
    GT              reduce using rule 63 (expression -> expression PLUS term .)
    LE              reduce using rule 63 (expression -> expression PLUS term .)
    GE              reduce using rule 63 (expression -> expression PLUS term .)
    LBRACE          reduce using rule 63 (expression -> expression PLUS term .)
    VAR             reduce using rule 63 (expression -> expression PLUS term .)
    VARIABLE        reduce using rule 63 (expression -> expression PLUS term .)
    FMT             reduce using rule 63 (expression -> expression PLUS term .)
    CONTINUE        reduce using rule 63 (expression -> expression PLUS term .)
    FUNC            reduce using rule 63 (expression -> expression PLUS term .)
    IF              reduce using rule 63 (expression -> expression PLUS term .)
    FOR             reduce using rule 63 (expression -> expression PLUS term .)
    TYPE            reduce using rule 63 (expression -> expression PLUS term .)
    SWITCH          reduce using rule 63 (expression -> expression PLUS term .)
    LBRACKET        reduce using rule 63 (expression -> expression PLUS term .)
    BREAK           reduce using rule 63 (expression -> expression PLUS term .)
    RETURN          reduce using rule 63 (expression -> expression PLUS term .)
    $end            reduce using rule 63 (expression -> expression PLUS term .)
    RBRACE          reduce using rule 63 (expression -> expression PLUS term .)
    CASE            reduce using rule 63 (expression -> expression PLUS term .)
    DEFAULT         reduce using rule 63 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 63 (expression -> expression PLUS term .)
    COMMA           reduce using rule 63 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 63 (expression -> expression PLUS term .)
    COLON           reduce using rule 63 (expression -> expression PLUS term .)
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123


state 167

    (76) term -> VARIABLE .
    (80) factor -> VARIABLE .
    (106) struct_instance -> VARIABLE . LBRACE struct_fields_values RBRACE
    (55) func_call -> VARIABLE . LPAREN arg_list RPAREN
    (56) func_call -> VARIABLE . LPAREN RPAREN

  ! reduce/reduce conflict for TIMES resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for PLUS resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for MINUS resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for AND resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for OR resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for EQ resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for NE resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for LT resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for GT resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for LE resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for GE resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for VAR resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for FMT resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for FUNC resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for IF resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for FOR resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for TYPE resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for SWITCH resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for BREAK resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for RETURN resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for $end resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for CASE resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 76 (term -> VARIABLE .)
  ! reduce/reduce conflict for COLON resolved using rule 76 (term -> VARIABLE .)
  ! shift/reduce conflict for LBRACE resolved as shift
    TIMES           reduce using rule 76 (term -> VARIABLE .)
    DIVIDE          reduce using rule 76 (term -> VARIABLE .)
    PLUS            reduce using rule 76 (term -> VARIABLE .)
    MINUS           reduce using rule 76 (term -> VARIABLE .)
    AND             reduce using rule 76 (term -> VARIABLE .)
    OR              reduce using rule 76 (term -> VARIABLE .)
    EQ              reduce using rule 76 (term -> VARIABLE .)
    NE              reduce using rule 76 (term -> VARIABLE .)
    LT              reduce using rule 76 (term -> VARIABLE .)
    GT              reduce using rule 76 (term -> VARIABLE .)
    LE              reduce using rule 76 (term -> VARIABLE .)
    GE              reduce using rule 76 (term -> VARIABLE .)
    VAR             reduce using rule 76 (term -> VARIABLE .)
    VARIABLE        reduce using rule 76 (term -> VARIABLE .)
    FMT             reduce using rule 76 (term -> VARIABLE .)
    CONTINUE        reduce using rule 76 (term -> VARIABLE .)
    FUNC            reduce using rule 76 (term -> VARIABLE .)
    IF              reduce using rule 76 (term -> VARIABLE .)
    FOR             reduce using rule 76 (term -> VARIABLE .)
    TYPE            reduce using rule 76 (term -> VARIABLE .)
    SWITCH          reduce using rule 76 (term -> VARIABLE .)
    LBRACKET        reduce using rule 76 (term -> VARIABLE .)
    BREAK           reduce using rule 76 (term -> VARIABLE .)
    RETURN          reduce using rule 76 (term -> VARIABLE .)
    $end            reduce using rule 76 (term -> VARIABLE .)
    RBRACE          reduce using rule 76 (term -> VARIABLE .)
    CASE            reduce using rule 76 (term -> VARIABLE .)
    DEFAULT         reduce using rule 76 (term -> VARIABLE .)
    SEMICOLON       reduce using rule 76 (term -> VARIABLE .)
    COMMA           reduce using rule 76 (term -> VARIABLE .)
    RPAREN          reduce using rule 76 (term -> VARIABLE .)
    COLON           reduce using rule 76 (term -> VARIABLE .)
    LBRACE          shift and go to state 121
    LPAREN          shift and go to state 48

  ! LBRACE          [ reduce using rule 76 (term -> VARIABLE .) ]
  ! TIMES           [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! PLUS            [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! AND             [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! OR              [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! EQ              [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! NE              [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! LT              [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! GT              [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! LE              [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! GE              [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! LBRACE          [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! VAR             [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! VARIABLE        [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! FMT             [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! CONTINUE        [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! FUNC            [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! IF              [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! FOR             [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! TYPE            [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! SWITCH          [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! LBRACKET        [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! BREAK           [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! RETURN          [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! $end            [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! RBRACE          [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! CASE            [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! DEFAULT         [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 80 (factor -> VARIABLE .) ]
  ! COLON           [ reduce using rule 80 (factor -> VARIABLE .) ]


state 168

    (77) factor -> NUMBER .

    TIMES           reduce using rule 77 (factor -> NUMBER .)
    DIVIDE          reduce using rule 77 (factor -> NUMBER .)
    PLUS            reduce using rule 77 (factor -> NUMBER .)
    MINUS           reduce using rule 77 (factor -> NUMBER .)
    AND             reduce using rule 77 (factor -> NUMBER .)
    OR              reduce using rule 77 (factor -> NUMBER .)
    EQ              reduce using rule 77 (factor -> NUMBER .)
    NE              reduce using rule 77 (factor -> NUMBER .)
    LT              reduce using rule 77 (factor -> NUMBER .)
    GT              reduce using rule 77 (factor -> NUMBER .)
    LE              reduce using rule 77 (factor -> NUMBER .)
    GE              reduce using rule 77 (factor -> NUMBER .)
    LBRACE          reduce using rule 77 (factor -> NUMBER .)
    VAR             reduce using rule 77 (factor -> NUMBER .)
    VARIABLE        reduce using rule 77 (factor -> NUMBER .)
    FMT             reduce using rule 77 (factor -> NUMBER .)
    CONTINUE        reduce using rule 77 (factor -> NUMBER .)
    FUNC            reduce using rule 77 (factor -> NUMBER .)
    IF              reduce using rule 77 (factor -> NUMBER .)
    FOR             reduce using rule 77 (factor -> NUMBER .)
    TYPE            reduce using rule 77 (factor -> NUMBER .)
    SWITCH          reduce using rule 77 (factor -> NUMBER .)
    LBRACKET        reduce using rule 77 (factor -> NUMBER .)
    BREAK           reduce using rule 77 (factor -> NUMBER .)
    RETURN          reduce using rule 77 (factor -> NUMBER .)
    $end            reduce using rule 77 (factor -> NUMBER .)
    RBRACE          reduce using rule 77 (factor -> NUMBER .)
    CASE            reduce using rule 77 (factor -> NUMBER .)
    DEFAULT         reduce using rule 77 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 77 (factor -> NUMBER .)
    COMMA           reduce using rule 77 (factor -> NUMBER .)
    RPAREN          reduce using rule 77 (factor -> NUMBER .)
    COLON           reduce using rule 77 (factor -> NUMBER .)


state 169

    (78) factor -> FLOAT .

    TIMES           reduce using rule 78 (factor -> FLOAT .)
    DIVIDE          reduce using rule 78 (factor -> FLOAT .)
    PLUS            reduce using rule 78 (factor -> FLOAT .)
    MINUS           reduce using rule 78 (factor -> FLOAT .)
    AND             reduce using rule 78 (factor -> FLOAT .)
    OR              reduce using rule 78 (factor -> FLOAT .)
    EQ              reduce using rule 78 (factor -> FLOAT .)
    NE              reduce using rule 78 (factor -> FLOAT .)
    LT              reduce using rule 78 (factor -> FLOAT .)
    GT              reduce using rule 78 (factor -> FLOAT .)
    LE              reduce using rule 78 (factor -> FLOAT .)
    GE              reduce using rule 78 (factor -> FLOAT .)
    LBRACE          reduce using rule 78 (factor -> FLOAT .)
    VAR             reduce using rule 78 (factor -> FLOAT .)
    VARIABLE        reduce using rule 78 (factor -> FLOAT .)
    FMT             reduce using rule 78 (factor -> FLOAT .)
    CONTINUE        reduce using rule 78 (factor -> FLOAT .)
    FUNC            reduce using rule 78 (factor -> FLOAT .)
    IF              reduce using rule 78 (factor -> FLOAT .)
    FOR             reduce using rule 78 (factor -> FLOAT .)
    TYPE            reduce using rule 78 (factor -> FLOAT .)
    SWITCH          reduce using rule 78 (factor -> FLOAT .)
    LBRACKET        reduce using rule 78 (factor -> FLOAT .)
    BREAK           reduce using rule 78 (factor -> FLOAT .)
    RETURN          reduce using rule 78 (factor -> FLOAT .)
    $end            reduce using rule 78 (factor -> FLOAT .)
    RBRACE          reduce using rule 78 (factor -> FLOAT .)
    CASE            reduce using rule 78 (factor -> FLOAT .)
    DEFAULT         reduce using rule 78 (factor -> FLOAT .)
    SEMICOLON       reduce using rule 78 (factor -> FLOAT .)
    COMMA           reduce using rule 78 (factor -> FLOAT .)
    RPAREN          reduce using rule 78 (factor -> FLOAT .)
    COLON           reduce using rule 78 (factor -> FLOAT .)


state 170

    (64) expression -> expression MINUS term .
    (74) term -> term . TIMES factor
    (75) term -> term . DIVIDE factor

    PLUS            reduce using rule 64 (expression -> expression MINUS term .)
    MINUS           reduce using rule 64 (expression -> expression MINUS term .)
    AND             reduce using rule 64 (expression -> expression MINUS term .)
    OR              reduce using rule 64 (expression -> expression MINUS term .)
    EQ              reduce using rule 64 (expression -> expression MINUS term .)
    NE              reduce using rule 64 (expression -> expression MINUS term .)
    LT              reduce using rule 64 (expression -> expression MINUS term .)
    GT              reduce using rule 64 (expression -> expression MINUS term .)
    LE              reduce using rule 64 (expression -> expression MINUS term .)
    GE              reduce using rule 64 (expression -> expression MINUS term .)
    LBRACE          reduce using rule 64 (expression -> expression MINUS term .)
    VAR             reduce using rule 64 (expression -> expression MINUS term .)
    VARIABLE        reduce using rule 64 (expression -> expression MINUS term .)
    FMT             reduce using rule 64 (expression -> expression MINUS term .)
    CONTINUE        reduce using rule 64 (expression -> expression MINUS term .)
    FUNC            reduce using rule 64 (expression -> expression MINUS term .)
    IF              reduce using rule 64 (expression -> expression MINUS term .)
    FOR             reduce using rule 64 (expression -> expression MINUS term .)
    TYPE            reduce using rule 64 (expression -> expression MINUS term .)
    SWITCH          reduce using rule 64 (expression -> expression MINUS term .)
    LBRACKET        reduce using rule 64 (expression -> expression MINUS term .)
    BREAK           reduce using rule 64 (expression -> expression MINUS term .)
    RETURN          reduce using rule 64 (expression -> expression MINUS term .)
    $end            reduce using rule 64 (expression -> expression MINUS term .)
    RBRACE          reduce using rule 64 (expression -> expression MINUS term .)
    CASE            reduce using rule 64 (expression -> expression MINUS term .)
    DEFAULT         reduce using rule 64 (expression -> expression MINUS term .)
    SEMICOLON       reduce using rule 64 (expression -> expression MINUS term .)
    COMMA           reduce using rule 64 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 64 (expression -> expression MINUS term .)
    COLON           reduce using rule 64 (expression -> expression MINUS term .)
    TIMES           shift and go to state 122
    DIVIDE          shift and go to state 123


state 171

    (65) expression -> expression AND expression .
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 65 (expression -> expression AND expression .)
    VAR             reduce using rule 65 (expression -> expression AND expression .)
    VARIABLE        reduce using rule 65 (expression -> expression AND expression .)
    FMT             reduce using rule 65 (expression -> expression AND expression .)
    CONTINUE        reduce using rule 65 (expression -> expression AND expression .)
    FUNC            reduce using rule 65 (expression -> expression AND expression .)
    IF              reduce using rule 65 (expression -> expression AND expression .)
    FOR             reduce using rule 65 (expression -> expression AND expression .)
    TYPE            reduce using rule 65 (expression -> expression AND expression .)
    SWITCH          reduce using rule 65 (expression -> expression AND expression .)
    LBRACKET        reduce using rule 65 (expression -> expression AND expression .)
    BREAK           reduce using rule 65 (expression -> expression AND expression .)
    RETURN          reduce using rule 65 (expression -> expression AND expression .)
    $end            reduce using rule 65 (expression -> expression AND expression .)
    RBRACE          reduce using rule 65 (expression -> expression AND expression .)
    CASE            reduce using rule 65 (expression -> expression AND expression .)
    DEFAULT         reduce using rule 65 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 65 (expression -> expression AND expression .)
    COMMA           reduce using rule 65 (expression -> expression AND expression .)
    RPAREN          reduce using rule 65 (expression -> expression AND expression .)
    COLON           reduce using rule 65 (expression -> expression AND expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119

  ! PLUS            [ reduce using rule 65 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 65 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 65 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 65 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 65 (expression -> expression AND expression .) ]
  ! NE              [ reduce using rule 65 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 65 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 65 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 65 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 65 (expression -> expression AND expression .) ]


state 172

    (66) expression -> expression OR expression .
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 66 (expression -> expression OR expression .)
    VAR             reduce using rule 66 (expression -> expression OR expression .)
    VARIABLE        reduce using rule 66 (expression -> expression OR expression .)
    FMT             reduce using rule 66 (expression -> expression OR expression .)
    CONTINUE        reduce using rule 66 (expression -> expression OR expression .)
    FUNC            reduce using rule 66 (expression -> expression OR expression .)
    IF              reduce using rule 66 (expression -> expression OR expression .)
    FOR             reduce using rule 66 (expression -> expression OR expression .)
    TYPE            reduce using rule 66 (expression -> expression OR expression .)
    SWITCH          reduce using rule 66 (expression -> expression OR expression .)
    LBRACKET        reduce using rule 66 (expression -> expression OR expression .)
    BREAK           reduce using rule 66 (expression -> expression OR expression .)
    RETURN          reduce using rule 66 (expression -> expression OR expression .)
    $end            reduce using rule 66 (expression -> expression OR expression .)
    RBRACE          reduce using rule 66 (expression -> expression OR expression .)
    CASE            reduce using rule 66 (expression -> expression OR expression .)
    DEFAULT         reduce using rule 66 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 66 (expression -> expression OR expression .)
    COMMA           reduce using rule 66 (expression -> expression OR expression .)
    RPAREN          reduce using rule 66 (expression -> expression OR expression .)
    COLON           reduce using rule 66 (expression -> expression OR expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119

  ! PLUS            [ reduce using rule 66 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 66 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 66 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 66 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 66 (expression -> expression OR expression .) ]
  ! NE              [ reduce using rule 66 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 66 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 66 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 66 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 66 (expression -> expression OR expression .) ]


state 173

    (67) expression -> expression EQ expression .
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 67 (expression -> expression EQ expression .)
    VAR             reduce using rule 67 (expression -> expression EQ expression .)
    VARIABLE        reduce using rule 67 (expression -> expression EQ expression .)
    FMT             reduce using rule 67 (expression -> expression EQ expression .)
    CONTINUE        reduce using rule 67 (expression -> expression EQ expression .)
    FUNC            reduce using rule 67 (expression -> expression EQ expression .)
    IF              reduce using rule 67 (expression -> expression EQ expression .)
    FOR             reduce using rule 67 (expression -> expression EQ expression .)
    TYPE            reduce using rule 67 (expression -> expression EQ expression .)
    SWITCH          reduce using rule 67 (expression -> expression EQ expression .)
    LBRACKET        reduce using rule 67 (expression -> expression EQ expression .)
    BREAK           reduce using rule 67 (expression -> expression EQ expression .)
    RETURN          reduce using rule 67 (expression -> expression EQ expression .)
    $end            reduce using rule 67 (expression -> expression EQ expression .)
    RBRACE          reduce using rule 67 (expression -> expression EQ expression .)
    CASE            reduce using rule 67 (expression -> expression EQ expression .)
    DEFAULT         reduce using rule 67 (expression -> expression EQ expression .)
    SEMICOLON       reduce using rule 67 (expression -> expression EQ expression .)
    COMMA           reduce using rule 67 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 67 (expression -> expression EQ expression .)
    COLON           reduce using rule 67 (expression -> expression EQ expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119

  ! PLUS            [ reduce using rule 67 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 67 (expression -> expression EQ expression .) ]
  ! AND             [ reduce using rule 67 (expression -> expression EQ expression .) ]
  ! OR              [ reduce using rule 67 (expression -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 67 (expression -> expression EQ expression .) ]
  ! NE              [ reduce using rule 67 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 67 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 67 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 67 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 67 (expression -> expression EQ expression .) ]


state 174

    (68) expression -> expression NE expression .
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 68 (expression -> expression NE expression .)
    VAR             reduce using rule 68 (expression -> expression NE expression .)
    VARIABLE        reduce using rule 68 (expression -> expression NE expression .)
    FMT             reduce using rule 68 (expression -> expression NE expression .)
    CONTINUE        reduce using rule 68 (expression -> expression NE expression .)
    FUNC            reduce using rule 68 (expression -> expression NE expression .)
    IF              reduce using rule 68 (expression -> expression NE expression .)
    FOR             reduce using rule 68 (expression -> expression NE expression .)
    TYPE            reduce using rule 68 (expression -> expression NE expression .)
    SWITCH          reduce using rule 68 (expression -> expression NE expression .)
    LBRACKET        reduce using rule 68 (expression -> expression NE expression .)
    BREAK           reduce using rule 68 (expression -> expression NE expression .)
    RETURN          reduce using rule 68 (expression -> expression NE expression .)
    $end            reduce using rule 68 (expression -> expression NE expression .)
    RBRACE          reduce using rule 68 (expression -> expression NE expression .)
    CASE            reduce using rule 68 (expression -> expression NE expression .)
    DEFAULT         reduce using rule 68 (expression -> expression NE expression .)
    SEMICOLON       reduce using rule 68 (expression -> expression NE expression .)
    COMMA           reduce using rule 68 (expression -> expression NE expression .)
    RPAREN          reduce using rule 68 (expression -> expression NE expression .)
    COLON           reduce using rule 68 (expression -> expression NE expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119

  ! PLUS            [ reduce using rule 68 (expression -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 68 (expression -> expression NE expression .) ]
  ! AND             [ reduce using rule 68 (expression -> expression NE expression .) ]
  ! OR              [ reduce using rule 68 (expression -> expression NE expression .) ]
  ! EQ              [ reduce using rule 68 (expression -> expression NE expression .) ]
  ! NE              [ reduce using rule 68 (expression -> expression NE expression .) ]
  ! LT              [ reduce using rule 68 (expression -> expression NE expression .) ]
  ! GT              [ reduce using rule 68 (expression -> expression NE expression .) ]
  ! LE              [ reduce using rule 68 (expression -> expression NE expression .) ]
  ! GE              [ reduce using rule 68 (expression -> expression NE expression .) ]


state 175

    (69) expression -> expression LT expression .
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 69 (expression -> expression LT expression .)
    VAR             reduce using rule 69 (expression -> expression LT expression .)
    VARIABLE        reduce using rule 69 (expression -> expression LT expression .)
    FMT             reduce using rule 69 (expression -> expression LT expression .)
    CONTINUE        reduce using rule 69 (expression -> expression LT expression .)
    FUNC            reduce using rule 69 (expression -> expression LT expression .)
    IF              reduce using rule 69 (expression -> expression LT expression .)
    FOR             reduce using rule 69 (expression -> expression LT expression .)
    TYPE            reduce using rule 69 (expression -> expression LT expression .)
    SWITCH          reduce using rule 69 (expression -> expression LT expression .)
    LBRACKET        reduce using rule 69 (expression -> expression LT expression .)
    BREAK           reduce using rule 69 (expression -> expression LT expression .)
    RETURN          reduce using rule 69 (expression -> expression LT expression .)
    $end            reduce using rule 69 (expression -> expression LT expression .)
    RBRACE          reduce using rule 69 (expression -> expression LT expression .)
    CASE            reduce using rule 69 (expression -> expression LT expression .)
    DEFAULT         reduce using rule 69 (expression -> expression LT expression .)
    SEMICOLON       reduce using rule 69 (expression -> expression LT expression .)
    COMMA           reduce using rule 69 (expression -> expression LT expression .)
    RPAREN          reduce using rule 69 (expression -> expression LT expression .)
    COLON           reduce using rule 69 (expression -> expression LT expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119

  ! PLUS            [ reduce using rule 69 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 69 (expression -> expression LT expression .) ]
  ! AND             [ reduce using rule 69 (expression -> expression LT expression .) ]
  ! OR              [ reduce using rule 69 (expression -> expression LT expression .) ]
  ! EQ              [ reduce using rule 69 (expression -> expression LT expression .) ]
  ! NE              [ reduce using rule 69 (expression -> expression LT expression .) ]
  ! LT              [ reduce using rule 69 (expression -> expression LT expression .) ]
  ! GT              [ reduce using rule 69 (expression -> expression LT expression .) ]
  ! LE              [ reduce using rule 69 (expression -> expression LT expression .) ]
  ! GE              [ reduce using rule 69 (expression -> expression LT expression .) ]


state 176

    (70) expression -> expression GT expression .
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 70 (expression -> expression GT expression .)
    VAR             reduce using rule 70 (expression -> expression GT expression .)
    VARIABLE        reduce using rule 70 (expression -> expression GT expression .)
    FMT             reduce using rule 70 (expression -> expression GT expression .)
    CONTINUE        reduce using rule 70 (expression -> expression GT expression .)
    FUNC            reduce using rule 70 (expression -> expression GT expression .)
    IF              reduce using rule 70 (expression -> expression GT expression .)
    FOR             reduce using rule 70 (expression -> expression GT expression .)
    TYPE            reduce using rule 70 (expression -> expression GT expression .)
    SWITCH          reduce using rule 70 (expression -> expression GT expression .)
    LBRACKET        reduce using rule 70 (expression -> expression GT expression .)
    BREAK           reduce using rule 70 (expression -> expression GT expression .)
    RETURN          reduce using rule 70 (expression -> expression GT expression .)
    $end            reduce using rule 70 (expression -> expression GT expression .)
    RBRACE          reduce using rule 70 (expression -> expression GT expression .)
    CASE            reduce using rule 70 (expression -> expression GT expression .)
    DEFAULT         reduce using rule 70 (expression -> expression GT expression .)
    SEMICOLON       reduce using rule 70 (expression -> expression GT expression .)
    COMMA           reduce using rule 70 (expression -> expression GT expression .)
    RPAREN          reduce using rule 70 (expression -> expression GT expression .)
    COLON           reduce using rule 70 (expression -> expression GT expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119

  ! PLUS            [ reduce using rule 70 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 70 (expression -> expression GT expression .) ]
  ! AND             [ reduce using rule 70 (expression -> expression GT expression .) ]
  ! OR              [ reduce using rule 70 (expression -> expression GT expression .) ]
  ! EQ              [ reduce using rule 70 (expression -> expression GT expression .) ]
  ! NE              [ reduce using rule 70 (expression -> expression GT expression .) ]
  ! LT              [ reduce using rule 70 (expression -> expression GT expression .) ]
  ! GT              [ reduce using rule 70 (expression -> expression GT expression .) ]
  ! LE              [ reduce using rule 70 (expression -> expression GT expression .) ]
  ! GE              [ reduce using rule 70 (expression -> expression GT expression .) ]


state 177

    (71) expression -> expression LE expression .
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 71 (expression -> expression LE expression .)
    VAR             reduce using rule 71 (expression -> expression LE expression .)
    VARIABLE        reduce using rule 71 (expression -> expression LE expression .)
    FMT             reduce using rule 71 (expression -> expression LE expression .)
    CONTINUE        reduce using rule 71 (expression -> expression LE expression .)
    FUNC            reduce using rule 71 (expression -> expression LE expression .)
    IF              reduce using rule 71 (expression -> expression LE expression .)
    FOR             reduce using rule 71 (expression -> expression LE expression .)
    TYPE            reduce using rule 71 (expression -> expression LE expression .)
    SWITCH          reduce using rule 71 (expression -> expression LE expression .)
    LBRACKET        reduce using rule 71 (expression -> expression LE expression .)
    BREAK           reduce using rule 71 (expression -> expression LE expression .)
    RETURN          reduce using rule 71 (expression -> expression LE expression .)
    $end            reduce using rule 71 (expression -> expression LE expression .)
    RBRACE          reduce using rule 71 (expression -> expression LE expression .)
    CASE            reduce using rule 71 (expression -> expression LE expression .)
    DEFAULT         reduce using rule 71 (expression -> expression LE expression .)
    SEMICOLON       reduce using rule 71 (expression -> expression LE expression .)
    COMMA           reduce using rule 71 (expression -> expression LE expression .)
    RPAREN          reduce using rule 71 (expression -> expression LE expression .)
    COLON           reduce using rule 71 (expression -> expression LE expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119

  ! PLUS            [ reduce using rule 71 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 71 (expression -> expression LE expression .) ]
  ! AND             [ reduce using rule 71 (expression -> expression LE expression .) ]
  ! OR              [ reduce using rule 71 (expression -> expression LE expression .) ]
  ! EQ              [ reduce using rule 71 (expression -> expression LE expression .) ]
  ! NE              [ reduce using rule 71 (expression -> expression LE expression .) ]
  ! LT              [ reduce using rule 71 (expression -> expression LE expression .) ]
  ! GT              [ reduce using rule 71 (expression -> expression LE expression .) ]
  ! LE              [ reduce using rule 71 (expression -> expression LE expression .) ]
  ! GE              [ reduce using rule 71 (expression -> expression LE expression .) ]


state 178

    (72) expression -> expression GE expression .
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 72 (expression -> expression GE expression .)
    VAR             reduce using rule 72 (expression -> expression GE expression .)
    VARIABLE        reduce using rule 72 (expression -> expression GE expression .)
    FMT             reduce using rule 72 (expression -> expression GE expression .)
    CONTINUE        reduce using rule 72 (expression -> expression GE expression .)
    FUNC            reduce using rule 72 (expression -> expression GE expression .)
    IF              reduce using rule 72 (expression -> expression GE expression .)
    FOR             reduce using rule 72 (expression -> expression GE expression .)
    TYPE            reduce using rule 72 (expression -> expression GE expression .)
    SWITCH          reduce using rule 72 (expression -> expression GE expression .)
    LBRACKET        reduce using rule 72 (expression -> expression GE expression .)
    BREAK           reduce using rule 72 (expression -> expression GE expression .)
    RETURN          reduce using rule 72 (expression -> expression GE expression .)
    $end            reduce using rule 72 (expression -> expression GE expression .)
    RBRACE          reduce using rule 72 (expression -> expression GE expression .)
    CASE            reduce using rule 72 (expression -> expression GE expression .)
    DEFAULT         reduce using rule 72 (expression -> expression GE expression .)
    SEMICOLON       reduce using rule 72 (expression -> expression GE expression .)
    COMMA           reduce using rule 72 (expression -> expression GE expression .)
    RPAREN          reduce using rule 72 (expression -> expression GE expression .)
    COLON           reduce using rule 72 (expression -> expression GE expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119

  ! PLUS            [ reduce using rule 72 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 72 (expression -> expression GE expression .) ]
  ! AND             [ reduce using rule 72 (expression -> expression GE expression .) ]
  ! OR              [ reduce using rule 72 (expression -> expression GE expression .) ]
  ! EQ              [ reduce using rule 72 (expression -> expression GE expression .) ]
  ! NE              [ reduce using rule 72 (expression -> expression GE expression .) ]
  ! LT              [ reduce using rule 72 (expression -> expression GE expression .) ]
  ! GT              [ reduce using rule 72 (expression -> expression GE expression .) ]
  ! LE              [ reduce using rule 72 (expression -> expression GE expression .) ]
  ! GE              [ reduce using rule 72 (expression -> expression GE expression .) ]


state 179

    (98) block -> LBRACE program . RBRACE

    RBRACE          shift and go to state 222


state 180

    (109) field_value -> VARIABLE . COLON expression

    COLON           shift and go to state 223


state 181

    (106) struct_instance -> VARIABLE LBRACE struct_fields_values . RBRACE

    RBRACE          shift and go to state 224


state 182

    (107) struct_fields_values -> field_value .
    (108) struct_fields_values -> field_value . COMMA struct_fields_values

    RBRACE          reduce using rule 107 (struct_fields_values -> field_value .)
    COMMA           shift and go to state 225


state 183

    (74) term -> term TIMES factor .

    TIMES           reduce using rule 74 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 74 (term -> term TIMES factor .)
    PLUS            reduce using rule 74 (term -> term TIMES factor .)
    MINUS           reduce using rule 74 (term -> term TIMES factor .)
    AND             reduce using rule 74 (term -> term TIMES factor .)
    OR              reduce using rule 74 (term -> term TIMES factor .)
    EQ              reduce using rule 74 (term -> term TIMES factor .)
    NE              reduce using rule 74 (term -> term TIMES factor .)
    LT              reduce using rule 74 (term -> term TIMES factor .)
    GT              reduce using rule 74 (term -> term TIMES factor .)
    LE              reduce using rule 74 (term -> term TIMES factor .)
    GE              reduce using rule 74 (term -> term TIMES factor .)
    LBRACE          reduce using rule 74 (term -> term TIMES factor .)
    VAR             reduce using rule 74 (term -> term TIMES factor .)
    VARIABLE        reduce using rule 74 (term -> term TIMES factor .)
    FMT             reduce using rule 74 (term -> term TIMES factor .)
    CONTINUE        reduce using rule 74 (term -> term TIMES factor .)
    FUNC            reduce using rule 74 (term -> term TIMES factor .)
    IF              reduce using rule 74 (term -> term TIMES factor .)
    FOR             reduce using rule 74 (term -> term TIMES factor .)
    TYPE            reduce using rule 74 (term -> term TIMES factor .)
    SWITCH          reduce using rule 74 (term -> term TIMES factor .)
    LBRACKET        reduce using rule 74 (term -> term TIMES factor .)
    BREAK           reduce using rule 74 (term -> term TIMES factor .)
    RETURN          reduce using rule 74 (term -> term TIMES factor .)
    $end            reduce using rule 74 (term -> term TIMES factor .)
    RBRACE          reduce using rule 74 (term -> term TIMES factor .)
    CASE            reduce using rule 74 (term -> term TIMES factor .)
    DEFAULT         reduce using rule 74 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 74 (term -> term TIMES factor .)
    COMMA           reduce using rule 74 (term -> term TIMES factor .)
    RPAREN          reduce using rule 74 (term -> term TIMES factor .)
    COLON           reduce using rule 74 (term -> term TIMES factor .)


state 184

    (80) factor -> VARIABLE .
    (106) struct_instance -> VARIABLE . LBRACE struct_fields_values RBRACE
    (55) func_call -> VARIABLE . LPAREN arg_list RPAREN
    (56) func_call -> VARIABLE . LPAREN RPAREN

  ! shift/reduce conflict for LBRACE resolved as shift
    TIMES           reduce using rule 80 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 80 (factor -> VARIABLE .)
    PLUS            reduce using rule 80 (factor -> VARIABLE .)
    MINUS           reduce using rule 80 (factor -> VARIABLE .)
    AND             reduce using rule 80 (factor -> VARIABLE .)
    OR              reduce using rule 80 (factor -> VARIABLE .)
    EQ              reduce using rule 80 (factor -> VARIABLE .)
    NE              reduce using rule 80 (factor -> VARIABLE .)
    LT              reduce using rule 80 (factor -> VARIABLE .)
    GT              reduce using rule 80 (factor -> VARIABLE .)
    LE              reduce using rule 80 (factor -> VARIABLE .)
    GE              reduce using rule 80 (factor -> VARIABLE .)
    VAR             reduce using rule 80 (factor -> VARIABLE .)
    VARIABLE        reduce using rule 80 (factor -> VARIABLE .)
    FMT             reduce using rule 80 (factor -> VARIABLE .)
    CONTINUE        reduce using rule 80 (factor -> VARIABLE .)
    FUNC            reduce using rule 80 (factor -> VARIABLE .)
    IF              reduce using rule 80 (factor -> VARIABLE .)
    FOR             reduce using rule 80 (factor -> VARIABLE .)
    TYPE            reduce using rule 80 (factor -> VARIABLE .)
    SWITCH          reduce using rule 80 (factor -> VARIABLE .)
    LBRACKET        reduce using rule 80 (factor -> VARIABLE .)
    BREAK           reduce using rule 80 (factor -> VARIABLE .)
    RETURN          reduce using rule 80 (factor -> VARIABLE .)
    $end            reduce using rule 80 (factor -> VARIABLE .)
    RBRACE          reduce using rule 80 (factor -> VARIABLE .)
    CASE            reduce using rule 80 (factor -> VARIABLE .)
    DEFAULT         reduce using rule 80 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 80 (factor -> VARIABLE .)
    COMMA           reduce using rule 80 (factor -> VARIABLE .)
    RPAREN          reduce using rule 80 (factor -> VARIABLE .)
    COLON           reduce using rule 80 (factor -> VARIABLE .)
    LBRACE          shift and go to state 121
    LPAREN          shift and go to state 48

  ! LBRACE          [ reduce using rule 80 (factor -> VARIABLE .) ]


state 185

    (75) term -> term DIVIDE factor .

    TIMES           reduce using rule 75 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 75 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 75 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 75 (term -> term DIVIDE factor .)
    AND             reduce using rule 75 (term -> term DIVIDE factor .)
    OR              reduce using rule 75 (term -> term DIVIDE factor .)
    EQ              reduce using rule 75 (term -> term DIVIDE factor .)
    NE              reduce using rule 75 (term -> term DIVIDE factor .)
    LT              reduce using rule 75 (term -> term DIVIDE factor .)
    GT              reduce using rule 75 (term -> term DIVIDE factor .)
    LE              reduce using rule 75 (term -> term DIVIDE factor .)
    GE              reduce using rule 75 (term -> term DIVIDE factor .)
    LBRACE          reduce using rule 75 (term -> term DIVIDE factor .)
    VAR             reduce using rule 75 (term -> term DIVIDE factor .)
    VARIABLE        reduce using rule 75 (term -> term DIVIDE factor .)
    FMT             reduce using rule 75 (term -> term DIVIDE factor .)
    CONTINUE        reduce using rule 75 (term -> term DIVIDE factor .)
    FUNC            reduce using rule 75 (term -> term DIVIDE factor .)
    IF              reduce using rule 75 (term -> term DIVIDE factor .)
    FOR             reduce using rule 75 (term -> term DIVIDE factor .)
    TYPE            reduce using rule 75 (term -> term DIVIDE factor .)
    SWITCH          reduce using rule 75 (term -> term DIVIDE factor .)
    LBRACKET        reduce using rule 75 (term -> term DIVIDE factor .)
    BREAK           reduce using rule 75 (term -> term DIVIDE factor .)
    RETURN          reduce using rule 75 (term -> term DIVIDE factor .)
    $end            reduce using rule 75 (term -> term DIVIDE factor .)
    RBRACE          reduce using rule 75 (term -> term DIVIDE factor .)
    CASE            reduce using rule 75 (term -> term DIVIDE factor .)
    DEFAULT         reduce using rule 75 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 75 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 75 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 75 (term -> term DIVIDE factor .)
    COLON           reduce using rule 75 (term -> term DIVIDE factor .)


state 186

    (83) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    EQ              reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    VAR             reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    FMT             reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    TYPE            reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    CASE            reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    COLON           reduce using rule 83 (factor -> LPAREN expression RPAREN .)


state 187

    (120) make_expr -> MAKE LPAREN MAP . LBRACKET type RBRACKET type RPAREN

    LBRACKET        shift and go to state 226


state 188

    (121) make_expr -> MAKE LPAREN LBRACKET . RBRACKET type RPAREN

    RBRACKET        shift and go to state 227


state 189

    (94) for_stmt -> FOR assignment SEMICOLON expression . SEMICOLON for_update block
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    SEMICOLON       shift and go to state 228
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119


state 190

    (45) assignment -> VARIABLE ASIG expression .
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    SEMICOLON       reduce using rule 45 (assignment -> VARIABLE ASIG expression .)
    LBRACE          reduce using rule 45 (assignment -> VARIABLE ASIG expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119


state 191

    (101) struct_def -> TYPE VARIABLE STRUCT LBRACE . struct_fields RBRACE
    (102) struct_fields -> . struct_field
    (103) struct_fields -> . struct_field struct_fields
    (104) struct_field -> . VARIABLE type
    (105) struct_field -> . type
    (87) type -> . INT_TYPE
    (88) type -> . FLOAT64_TYPE
    (89) type -> . STRING_TYPE
    (90) type -> . BOOL_TYPE

    VARIABLE        shift and go to state 229
    INT_TYPE        shift and go to state 96
    FLOAT64_TYPE    shift and go to state 97
    STRING_TYPE     shift and go to state 98
    BOOL_TYPE       shift and go to state 99

    struct_fields                  shift and go to state 230
    struct_field                   shift and go to state 231
    type                           shift and go to state 232

state 192

    (110) switch_stmt -> SWITCH expression LBRACE case_list . RBRACE

    RBRACE          shift and go to state 233


state 193

    (111) switch_stmt -> SWITCH LBRACE case_list RBRACE .

    VAR             reduce using rule 111 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    VARIABLE        reduce using rule 111 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    FMT             reduce using rule 111 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    CONTINUE        reduce using rule 111 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    FUNC            reduce using rule 111 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    IF              reduce using rule 111 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    FOR             reduce using rule 111 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    TYPE            reduce using rule 111 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    SWITCH          reduce using rule 111 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    LBRACKET        reduce using rule 111 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    BREAK           reduce using rule 111 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    RETURN          reduce using rule 111 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    $end            reduce using rule 111 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    RBRACE          reduce using rule 111 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    CASE            reduce using rule 111 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    DEFAULT         reduce using rule 111 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)


state 194

    (113) case_list -> case_clause case_list .

    RBRACE          reduce using rule 113 (case_list -> case_clause case_list .)


state 195

    (114) case_clause -> CASE expression . COLON program
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    COLON           shift and go to state 234
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119


state 196

    (115) case_clause -> DEFAULT COLON . program
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_call
    (15) statement -> . if_stmt
    (16) statement -> . for_stmt
    (17) statement -> . struct_def
    (18) statement -> . switch_stmt
    (19) statement -> . map_declaration
    (20) statement -> . map_declaration_values
    (21) statement -> . array_declaration
    (22) statement -> . array_literal
    (23) statement -> . slice_declaration
    (24) statement -> . make_stmt
    (25) statement -> . new_stmt
    (26) statement -> . break_stmt
    (27) statement -> . increment_stmt
    (28) statement -> . return_stmt
    (29) declaration -> . VAR VARIABLE type
    (30) declaration -> . VAR VARIABLE type ASIG expression
    (31) declaration -> . VAR VARIABLE type ASSIGN expression
    (32) declaration -> . VAR id_list type ASSIGN expr_list
    (33) declaration -> . VAR id_list type ASIG expr_list
    (34) declaration -> . VAR id_list ASSIGN expr_list
    (35) declaration -> . VAR id_list ASIG expr_list
    (40) declaration -> . VARIABLE ASIG expression
    (44) assignment -> . VARIABLE ASSIGN expression
    (45) assignment -> . VARIABLE ASIG expression
    (46) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (47) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (48) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (95) continue_stmt -> . CONTINUE
    (99) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (100) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (49) func_def -> . func_header func_body
    (53) func_no_params -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (54) func_no_params -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN
    (91) if_stmt -> . IF expression block
    (92) if_stmt -> . IF expression block ELSE block
    (93) for_stmt -> . FOR expression block
    (94) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (101) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (110) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (111) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (116) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (117) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (122) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (126) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (127) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (128) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (131) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (132) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (118) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (119) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (135) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (136) break_stmt -> . BREAK
    (137) increment_stmt -> . VARIABLE INCREMENT
    (138) increment_stmt -> . VARIABLE DECREMENT
    (52) return_stmt -> . RETURN expression
    (50) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type

    VAR             shift and go to state 32
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 33
    CONTINUE        shift and go to state 34
    FUNC            shift and go to state 35
    IF              shift and go to state 37
    FOR             shift and go to state 38
    TYPE            shift and go to state 39
    SWITCH          shift and go to state 40
    LBRACKET        shift and go to state 41
    BREAK           shift and go to state 42
    RETURN          shift and go to state 43

    program                        shift and go to state 235
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_call                      shift and go to state 17
    if_stmt                        shift and go to state 18
    for_stmt                       shift and go to state 19
    struct_def                     shift and go to state 20
    switch_stmt                    shift and go to state 21
    map_declaration                shift and go to state 22
    map_declaration_values         shift and go to state 23
    array_declaration              shift and go to state 24
    array_literal                  shift and go to state 25
    slice_declaration              shift and go to state 26
    make_stmt                      shift and go to state 27
    new_stmt                       shift and go to state 28
    break_stmt                     shift and go to state 29
    increment_stmt                 shift and go to state 30
    return_stmt                    shift and go to state 31
    func_header                    shift and go to state 36

state 197

    (128) array_literal -> LBRACKET NUMBER RBRACKET type . LBRACE array_values RBRACE

    LBRACE          shift and go to state 236


state 198

    (117) map_declaration -> VARIABLE ASIG MAP LBRACKET type . RBRACKET type
    (122) map_declaration_values -> VARIABLE ASIG MAP LBRACKET type . RBRACKET type LBRACE map_kv_pairs RBRACE

    RBRACKET        shift and go to state 237


state 199

    (132) slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type . LBRACE slice_values RBRACE

    LBRACE          shift and go to state 238


state 200

    (118) make_stmt -> VARIABLE ASIG MAKE LPAREN MAP . LBRACKET type RBRACKET type RPAREN
    (120) make_expr -> MAKE LPAREN MAP . LBRACKET type RBRACKET type RPAREN

    LBRACKET        shift and go to state 239


state 201

    (119) make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET . RBRACKET type RPAREN
    (121) make_expr -> MAKE LPAREN LBRACKET . RBRACKET type RPAREN

    RBRACKET        shift and go to state 240


state 202

    (135) new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE . RPAREN

    RPAREN          shift and go to state 241


state 203

    (61) arg_list -> expression COMMA arg_list .

    RPAREN          reduce using rule 61 (arg_list -> expression COMMA arg_list .)


state 204

    (30) declaration -> VAR VARIABLE type ASIG expression .
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    VAR             reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    VARIABLE        reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    FMT             reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    CONTINUE        reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    FUNC            reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    IF              reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    FOR             reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    TYPE            reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    SWITCH          reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    LBRACKET        reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    BREAK           reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    RETURN          reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    $end            reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    RBRACE          reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    CASE            reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    DEFAULT         reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119


state 205

    (31) declaration -> VAR VARIABLE type ASSIGN expression .
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    VAR             reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    VARIABLE        reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    FMT             reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    CONTINUE        reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    FUNC            reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    IF              reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    FOR             reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    TYPE            reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    SWITCH          reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    LBRACKET        reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    BREAK           reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    RETURN          reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    $end            reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    RBRACE          reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    CASE            reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    DEFAULT         reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119


state 206

    (116) map_declaration -> VAR VARIABLE MAP LBRACKET type . RBRACKET type

    RBRACKET        shift and go to state 242


state 207

    (126) array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET . type
    (87) type -> . INT_TYPE
    (88) type -> . FLOAT64_TYPE
    (89) type -> . STRING_TYPE
    (90) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 96
    FLOAT64_TYPE    shift and go to state 97
    STRING_TYPE     shift and go to state 98
    BOOL_TYPE       shift and go to state 99

    type                           shift and go to state 243

state 208

    (131) slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .

    VAR             reduce using rule 131 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    VARIABLE        reduce using rule 131 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    FMT             reduce using rule 131 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    CONTINUE        reduce using rule 131 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    FUNC            reduce using rule 131 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    IF              reduce using rule 131 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    FOR             reduce using rule 131 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    TYPE            reduce using rule 131 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    SWITCH          reduce using rule 131 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    LBRACKET        reduce using rule 131 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    BREAK           reduce using rule 131 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    RETURN          reduce using rule 131 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    $end            reduce using rule 131 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    RBRACE          reduce using rule 131 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    CASE            reduce using rule 131 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    DEFAULT         reduce using rule 131 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)


state 209

    (32) declaration -> VAR id_list type ASSIGN expr_list .

    VAR             reduce using rule 32 (declaration -> VAR id_list type ASSIGN expr_list .)
    VARIABLE        reduce using rule 32 (declaration -> VAR id_list type ASSIGN expr_list .)
    FMT             reduce using rule 32 (declaration -> VAR id_list type ASSIGN expr_list .)
    CONTINUE        reduce using rule 32 (declaration -> VAR id_list type ASSIGN expr_list .)
    FUNC            reduce using rule 32 (declaration -> VAR id_list type ASSIGN expr_list .)
    IF              reduce using rule 32 (declaration -> VAR id_list type ASSIGN expr_list .)
    FOR             reduce using rule 32 (declaration -> VAR id_list type ASSIGN expr_list .)
    TYPE            reduce using rule 32 (declaration -> VAR id_list type ASSIGN expr_list .)
    SWITCH          reduce using rule 32 (declaration -> VAR id_list type ASSIGN expr_list .)
    LBRACKET        reduce using rule 32 (declaration -> VAR id_list type ASSIGN expr_list .)
    BREAK           reduce using rule 32 (declaration -> VAR id_list type ASSIGN expr_list .)
    RETURN          reduce using rule 32 (declaration -> VAR id_list type ASSIGN expr_list .)
    $end            reduce using rule 32 (declaration -> VAR id_list type ASSIGN expr_list .)
    RBRACE          reduce using rule 32 (declaration -> VAR id_list type ASSIGN expr_list .)
    CASE            reduce using rule 32 (declaration -> VAR id_list type ASSIGN expr_list .)
    DEFAULT         reduce using rule 32 (declaration -> VAR id_list type ASSIGN expr_list .)


state 210

    (33) declaration -> VAR id_list type ASIG expr_list .

    VAR             reduce using rule 33 (declaration -> VAR id_list type ASIG expr_list .)
    VARIABLE        reduce using rule 33 (declaration -> VAR id_list type ASIG expr_list .)
    FMT             reduce using rule 33 (declaration -> VAR id_list type ASIG expr_list .)
    CONTINUE        reduce using rule 33 (declaration -> VAR id_list type ASIG expr_list .)
    FUNC            reduce using rule 33 (declaration -> VAR id_list type ASIG expr_list .)
    IF              reduce using rule 33 (declaration -> VAR id_list type ASIG expr_list .)
    FOR             reduce using rule 33 (declaration -> VAR id_list type ASIG expr_list .)
    TYPE            reduce using rule 33 (declaration -> VAR id_list type ASIG expr_list .)
    SWITCH          reduce using rule 33 (declaration -> VAR id_list type ASIG expr_list .)
    LBRACKET        reduce using rule 33 (declaration -> VAR id_list type ASIG expr_list .)
    BREAK           reduce using rule 33 (declaration -> VAR id_list type ASIG expr_list .)
    RETURN          reduce using rule 33 (declaration -> VAR id_list type ASIG expr_list .)
    $end            reduce using rule 33 (declaration -> VAR id_list type ASIG expr_list .)
    RBRACE          reduce using rule 33 (declaration -> VAR id_list type ASIG expr_list .)
    CASE            reduce using rule 33 (declaration -> VAR id_list type ASIG expr_list .)
    DEFAULT         reduce using rule 33 (declaration -> VAR id_list type ASIG expr_list .)


state 211

    (39) expr_list -> expression COMMA . expr_list
    (38) expr_list -> . expression
    (39) expr_list -> . expression COMMA expr_list
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 154
    expr_list                      shift and go to state 244
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 212

    (46) print_stmt -> FMT DOT PRINTF LPAREN STRING . COMMA expression RPAREN

    COMMA           shift and go to state 245


state 213

    (47) print_stmt -> FMT DOT PRINTLN LPAREN expression . RPAREN
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    RPAREN          shift and go to state 246
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119


state 214

    (48) input_stmt -> FMT DOT SCANLN LPAREN AMPER . VARIABLE RPAREN

    VARIABLE        shift and go to state 247


state 215

    (99) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN . VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (100) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN . VARIABLE LPAREN RPAREN type LBRACE program RBRACE

    VARIABLE        shift and go to state 248


state 216

    (59) param -> VARIABLE type .

    COMMA           reduce using rule 59 (param -> VARIABLE type .)
    RPAREN          reduce using rule 59 (param -> VARIABLE type .)


state 217

    (53) func_no_params -> FUNC VARIABLE LPAREN RPAREN type . LBRACE program RBRACE

    LBRACE          shift and go to state 249


state 218

    (54) func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE . program RBRACE
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_call
    (15) statement -> . if_stmt
    (16) statement -> . for_stmt
    (17) statement -> . struct_def
    (18) statement -> . switch_stmt
    (19) statement -> . map_declaration
    (20) statement -> . map_declaration_values
    (21) statement -> . array_declaration
    (22) statement -> . array_literal
    (23) statement -> . slice_declaration
    (24) statement -> . make_stmt
    (25) statement -> . new_stmt
    (26) statement -> . break_stmt
    (27) statement -> . increment_stmt
    (28) statement -> . return_stmt
    (29) declaration -> . VAR VARIABLE type
    (30) declaration -> . VAR VARIABLE type ASIG expression
    (31) declaration -> . VAR VARIABLE type ASSIGN expression
    (32) declaration -> . VAR id_list type ASSIGN expr_list
    (33) declaration -> . VAR id_list type ASIG expr_list
    (34) declaration -> . VAR id_list ASSIGN expr_list
    (35) declaration -> . VAR id_list ASIG expr_list
    (40) declaration -> . VARIABLE ASIG expression
    (44) assignment -> . VARIABLE ASSIGN expression
    (45) assignment -> . VARIABLE ASIG expression
    (46) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (47) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (48) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (95) continue_stmt -> . CONTINUE
    (99) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (100) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (49) func_def -> . func_header func_body
    (53) func_no_params -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (54) func_no_params -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN
    (91) if_stmt -> . IF expression block
    (92) if_stmt -> . IF expression block ELSE block
    (93) for_stmt -> . FOR expression block
    (94) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (101) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (110) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (111) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (116) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (117) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (122) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (126) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (127) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (128) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (131) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (132) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (118) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (119) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (135) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (136) break_stmt -> . BREAK
    (137) increment_stmt -> . VARIABLE INCREMENT
    (138) increment_stmt -> . VARIABLE DECREMENT
    (52) return_stmt -> . RETURN expression
    (50) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type

    VAR             shift and go to state 32
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 33
    CONTINUE        shift and go to state 34
    FUNC            shift and go to state 35
    IF              shift and go to state 37
    FOR             shift and go to state 38
    TYPE            shift and go to state 39
    SWITCH          shift and go to state 40
    LBRACKET        shift and go to state 41
    BREAK           shift and go to state 42
    RETURN          shift and go to state 43

    program                        shift and go to state 250
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_call                      shift and go to state 17
    if_stmt                        shift and go to state 18
    for_stmt                       shift and go to state 19
    struct_def                     shift and go to state 20
    switch_stmt                    shift and go to state 21
    map_declaration                shift and go to state 22
    map_declaration_values         shift and go to state 23
    array_declaration              shift and go to state 24
    array_literal                  shift and go to state 25
    slice_declaration              shift and go to state 26
    make_stmt                      shift and go to state 27
    new_stmt                       shift and go to state 28
    break_stmt                     shift and go to state 29
    increment_stmt                 shift and go to state 30
    return_stmt                    shift and go to state 31
    func_header                    shift and go to state 36

state 219

    (50) func_header -> FUNC VARIABLE LPAREN param_list RPAREN . type
    (87) type -> . INT_TYPE
    (88) type -> . FLOAT64_TYPE
    (89) type -> . STRING_TYPE
    (90) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 96
    FLOAT64_TYPE    shift and go to state 97
    STRING_TYPE     shift and go to state 98
    BOOL_TYPE       shift and go to state 99

    type                           shift and go to state 251

state 220

    (58) param_list -> param COMMA . param_list
    (57) param_list -> . param
    (58) param_list -> . param COMMA param_list
    (59) param -> . VARIABLE type

    VARIABLE        shift and go to state 160

    param                          shift and go to state 163
    param_list                     shift and go to state 252

state 221

    (92) if_stmt -> IF expression block ELSE block .

    VAR             reduce using rule 92 (if_stmt -> IF expression block ELSE block .)
    VARIABLE        reduce using rule 92 (if_stmt -> IF expression block ELSE block .)
    FMT             reduce using rule 92 (if_stmt -> IF expression block ELSE block .)
    CONTINUE        reduce using rule 92 (if_stmt -> IF expression block ELSE block .)
    FUNC            reduce using rule 92 (if_stmt -> IF expression block ELSE block .)
    IF              reduce using rule 92 (if_stmt -> IF expression block ELSE block .)
    FOR             reduce using rule 92 (if_stmt -> IF expression block ELSE block .)
    TYPE            reduce using rule 92 (if_stmt -> IF expression block ELSE block .)
    SWITCH          reduce using rule 92 (if_stmt -> IF expression block ELSE block .)
    LBRACKET        reduce using rule 92 (if_stmt -> IF expression block ELSE block .)
    BREAK           reduce using rule 92 (if_stmt -> IF expression block ELSE block .)
    RETURN          reduce using rule 92 (if_stmt -> IF expression block ELSE block .)
    $end            reduce using rule 92 (if_stmt -> IF expression block ELSE block .)
    RBRACE          reduce using rule 92 (if_stmt -> IF expression block ELSE block .)
    CASE            reduce using rule 92 (if_stmt -> IF expression block ELSE block .)
    DEFAULT         reduce using rule 92 (if_stmt -> IF expression block ELSE block .)


state 222

    (98) block -> LBRACE program RBRACE .

    ELSE            reduce using rule 98 (block -> LBRACE program RBRACE .)
    VAR             reduce using rule 98 (block -> LBRACE program RBRACE .)
    VARIABLE        reduce using rule 98 (block -> LBRACE program RBRACE .)
    FMT             reduce using rule 98 (block -> LBRACE program RBRACE .)
    CONTINUE        reduce using rule 98 (block -> LBRACE program RBRACE .)
    FUNC            reduce using rule 98 (block -> LBRACE program RBRACE .)
    IF              reduce using rule 98 (block -> LBRACE program RBRACE .)
    FOR             reduce using rule 98 (block -> LBRACE program RBRACE .)
    TYPE            reduce using rule 98 (block -> LBRACE program RBRACE .)
    SWITCH          reduce using rule 98 (block -> LBRACE program RBRACE .)
    LBRACKET        reduce using rule 98 (block -> LBRACE program RBRACE .)
    BREAK           reduce using rule 98 (block -> LBRACE program RBRACE .)
    RETURN          reduce using rule 98 (block -> LBRACE program RBRACE .)
    $end            reduce using rule 98 (block -> LBRACE program RBRACE .)
    RBRACE          reduce using rule 98 (block -> LBRACE program RBRACE .)
    CASE            reduce using rule 98 (block -> LBRACE program RBRACE .)
    DEFAULT         reduce using rule 98 (block -> LBRACE program RBRACE .)


state 223

    (109) field_value -> VARIABLE COLON . expression
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 253
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 224

    (106) struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .

    TIMES           reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    DIVIDE          reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    PLUS            reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    MINUS           reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    AND             reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    OR              reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    EQ              reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    NE              reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    LT              reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    GT              reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    LE              reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    GE              reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    LBRACE          reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    VAR             reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    VARIABLE        reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    FMT             reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    CONTINUE        reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    FUNC            reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    IF              reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    FOR             reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    TYPE            reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    SWITCH          reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    LBRACKET        reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    BREAK           reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    RETURN          reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    $end            reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    RBRACE          reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    CASE            reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    DEFAULT         reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    SEMICOLON       reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    COMMA           reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    RPAREN          reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    COLON           reduce using rule 106 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)


state 225

    (108) struct_fields_values -> field_value COMMA . struct_fields_values
    (107) struct_fields_values -> . field_value
    (108) struct_fields_values -> . field_value COMMA struct_fields_values
    (109) field_value -> . VARIABLE COLON expression

    VARIABLE        shift and go to state 180

    field_value                    shift and go to state 182
    struct_fields_values           shift and go to state 254

state 226

    (120) make_expr -> MAKE LPAREN MAP LBRACKET . type RBRACKET type RPAREN
    (87) type -> . INT_TYPE
    (88) type -> . FLOAT64_TYPE
    (89) type -> . STRING_TYPE
    (90) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 96
    FLOAT64_TYPE    shift and go to state 97
    STRING_TYPE     shift and go to state 98
    BOOL_TYPE       shift and go to state 99

    type                           shift and go to state 255

state 227

    (121) make_expr -> MAKE LPAREN LBRACKET RBRACKET . type RPAREN
    (87) type -> . INT_TYPE
    (88) type -> . FLOAT64_TYPE
    (89) type -> . STRING_TYPE
    (90) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 96
    FLOAT64_TYPE    shift and go to state 97
    STRING_TYPE     shift and go to state 98
    BOOL_TYPE       shift and go to state 99

    type                           shift and go to state 256

state 228

    (94) for_stmt -> FOR assignment SEMICOLON expression SEMICOLON . for_update block
    (96) for_update -> . assignment
    (97) for_update -> . increment_stmt
    (44) assignment -> . VARIABLE ASSIGN expression
    (45) assignment -> . VARIABLE ASIG expression
    (137) increment_stmt -> . VARIABLE INCREMENT
    (138) increment_stmt -> . VARIABLE DECREMENT

    VARIABLE        shift and go to state 260

    assignment                     shift and go to state 257
    for_update                     shift and go to state 258
    increment_stmt                 shift and go to state 259

state 229

    (104) struct_field -> VARIABLE . type
    (87) type -> . INT_TYPE
    (88) type -> . FLOAT64_TYPE
    (89) type -> . STRING_TYPE
    (90) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 96
    FLOAT64_TYPE    shift and go to state 97
    STRING_TYPE     shift and go to state 98
    BOOL_TYPE       shift and go to state 99

    type                           shift and go to state 261

state 230

    (101) struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields . RBRACE

    RBRACE          shift and go to state 262


state 231

    (102) struct_fields -> struct_field .
    (103) struct_fields -> struct_field . struct_fields
    (102) struct_fields -> . struct_field
    (103) struct_fields -> . struct_field struct_fields
    (104) struct_field -> . VARIABLE type
    (105) struct_field -> . type
    (87) type -> . INT_TYPE
    (88) type -> . FLOAT64_TYPE
    (89) type -> . STRING_TYPE
    (90) type -> . BOOL_TYPE

    RBRACE          reduce using rule 102 (struct_fields -> struct_field .)
    VARIABLE        shift and go to state 229
    INT_TYPE        shift and go to state 96
    FLOAT64_TYPE    shift and go to state 97
    STRING_TYPE     shift and go to state 98
    BOOL_TYPE       shift and go to state 99

    struct_field                   shift and go to state 231
    struct_fields                  shift and go to state 263
    type                           shift and go to state 232

state 232

    (105) struct_field -> type .

    VARIABLE        reduce using rule 105 (struct_field -> type .)
    INT_TYPE        reduce using rule 105 (struct_field -> type .)
    FLOAT64_TYPE    reduce using rule 105 (struct_field -> type .)
    STRING_TYPE     reduce using rule 105 (struct_field -> type .)
    BOOL_TYPE       reduce using rule 105 (struct_field -> type .)
    RBRACE          reduce using rule 105 (struct_field -> type .)


state 233

    (110) switch_stmt -> SWITCH expression LBRACE case_list RBRACE .

    VAR             reduce using rule 110 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    VARIABLE        reduce using rule 110 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    FMT             reduce using rule 110 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    CONTINUE        reduce using rule 110 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    FUNC            reduce using rule 110 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    IF              reduce using rule 110 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    FOR             reduce using rule 110 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    TYPE            reduce using rule 110 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    SWITCH          reduce using rule 110 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    LBRACKET        reduce using rule 110 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    BREAK           reduce using rule 110 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    RETURN          reduce using rule 110 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    $end            reduce using rule 110 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    RBRACE          reduce using rule 110 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    CASE            reduce using rule 110 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    DEFAULT         reduce using rule 110 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)


state 234

    (114) case_clause -> CASE expression COLON . program
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_call
    (15) statement -> . if_stmt
    (16) statement -> . for_stmt
    (17) statement -> . struct_def
    (18) statement -> . switch_stmt
    (19) statement -> . map_declaration
    (20) statement -> . map_declaration_values
    (21) statement -> . array_declaration
    (22) statement -> . array_literal
    (23) statement -> . slice_declaration
    (24) statement -> . make_stmt
    (25) statement -> . new_stmt
    (26) statement -> . break_stmt
    (27) statement -> . increment_stmt
    (28) statement -> . return_stmt
    (29) declaration -> . VAR VARIABLE type
    (30) declaration -> . VAR VARIABLE type ASIG expression
    (31) declaration -> . VAR VARIABLE type ASSIGN expression
    (32) declaration -> . VAR id_list type ASSIGN expr_list
    (33) declaration -> . VAR id_list type ASIG expr_list
    (34) declaration -> . VAR id_list ASSIGN expr_list
    (35) declaration -> . VAR id_list ASIG expr_list
    (40) declaration -> . VARIABLE ASIG expression
    (44) assignment -> . VARIABLE ASSIGN expression
    (45) assignment -> . VARIABLE ASIG expression
    (46) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (47) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (48) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (95) continue_stmt -> . CONTINUE
    (99) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (100) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (49) func_def -> . func_header func_body
    (53) func_no_params -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (54) func_no_params -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN
    (91) if_stmt -> . IF expression block
    (92) if_stmt -> . IF expression block ELSE block
    (93) for_stmt -> . FOR expression block
    (94) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (101) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (110) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (111) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (116) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (117) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (122) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (126) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (127) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (128) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (131) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (132) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (118) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (119) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (135) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (136) break_stmt -> . BREAK
    (137) increment_stmt -> . VARIABLE INCREMENT
    (138) increment_stmt -> . VARIABLE DECREMENT
    (52) return_stmt -> . RETURN expression
    (50) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type

    VAR             shift and go to state 32
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 33
    CONTINUE        shift and go to state 34
    FUNC            shift and go to state 35
    IF              shift and go to state 37
    FOR             shift and go to state 38
    TYPE            shift and go to state 39
    SWITCH          shift and go to state 40
    LBRACKET        shift and go to state 41
    BREAK           shift and go to state 42
    RETURN          shift and go to state 43

    program                        shift and go to state 264
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_call                      shift and go to state 17
    if_stmt                        shift and go to state 18
    for_stmt                       shift and go to state 19
    struct_def                     shift and go to state 20
    switch_stmt                    shift and go to state 21
    map_declaration                shift and go to state 22
    map_declaration_values         shift and go to state 23
    array_declaration              shift and go to state 24
    array_literal                  shift and go to state 25
    slice_declaration              shift and go to state 26
    make_stmt                      shift and go to state 27
    new_stmt                       shift and go to state 28
    break_stmt                     shift and go to state 29
    increment_stmt                 shift and go to state 30
    return_stmt                    shift and go to state 31
    func_header                    shift and go to state 36

state 235

    (115) case_clause -> DEFAULT COLON program .

    CASE            reduce using rule 115 (case_clause -> DEFAULT COLON program .)
    DEFAULT         reduce using rule 115 (case_clause -> DEFAULT COLON program .)
    RBRACE          reduce using rule 115 (case_clause -> DEFAULT COLON program .)


state 236

    (128) array_literal -> LBRACKET NUMBER RBRACKET type LBRACE . array_values RBRACE
    (129) array_values -> . expression
    (130) array_values -> . expression COMMA array_values
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    array_values                   shift and go to state 265
    expression                     shift and go to state 266
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 237

    (117) map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET . type
    (122) map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET . type LBRACE map_kv_pairs RBRACE
    (87) type -> . INT_TYPE
    (88) type -> . FLOAT64_TYPE
    (89) type -> . STRING_TYPE
    (90) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 96
    FLOAT64_TYPE    shift and go to state 97
    STRING_TYPE     shift and go to state 98
    BOOL_TYPE       shift and go to state 99

    type                           shift and go to state 267

state 238

    (132) slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE . slice_values RBRACE
    (133) slice_values -> . expression
    (134) slice_values -> . expression COMMA slice_values
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    slice_values                   shift and go to state 268
    expression                     shift and go to state 269
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 239

    (118) make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET . type RBRACKET type RPAREN
    (120) make_expr -> MAKE LPAREN MAP LBRACKET . type RBRACKET type RPAREN
    (87) type -> . INT_TYPE
    (88) type -> . FLOAT64_TYPE
    (89) type -> . STRING_TYPE
    (90) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 96
    FLOAT64_TYPE    shift and go to state 97
    STRING_TYPE     shift and go to state 98
    BOOL_TYPE       shift and go to state 99

    type                           shift and go to state 270

state 240

    (119) make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET . type RPAREN
    (121) make_expr -> MAKE LPAREN LBRACKET RBRACKET . type RPAREN
    (87) type -> . INT_TYPE
    (88) type -> . FLOAT64_TYPE
    (89) type -> . STRING_TYPE
    (90) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 96
    FLOAT64_TYPE    shift and go to state 97
    STRING_TYPE     shift and go to state 98
    BOOL_TYPE       shift and go to state 99

    type                           shift and go to state 271

state 241

    (135) new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .

    VAR             reduce using rule 135 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    VARIABLE        reduce using rule 135 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    FMT             reduce using rule 135 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    CONTINUE        reduce using rule 135 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    FUNC            reduce using rule 135 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    IF              reduce using rule 135 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    FOR             reduce using rule 135 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    TYPE            reduce using rule 135 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    SWITCH          reduce using rule 135 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    LBRACKET        reduce using rule 135 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    BREAK           reduce using rule 135 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    RETURN          reduce using rule 135 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    $end            reduce using rule 135 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    RBRACE          reduce using rule 135 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    CASE            reduce using rule 135 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    DEFAULT         reduce using rule 135 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)


state 242

    (116) map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET . type
    (87) type -> . INT_TYPE
    (88) type -> . FLOAT64_TYPE
    (89) type -> . STRING_TYPE
    (90) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 96
    FLOAT64_TYPE    shift and go to state 97
    STRING_TYPE     shift and go to state 98
    BOOL_TYPE       shift and go to state 99

    type                           shift and go to state 272

state 243

    (126) array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .

    VAR             reduce using rule 126 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    VARIABLE        reduce using rule 126 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    FMT             reduce using rule 126 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    CONTINUE        reduce using rule 126 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    FUNC            reduce using rule 126 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    IF              reduce using rule 126 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    FOR             reduce using rule 126 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    TYPE            reduce using rule 126 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    SWITCH          reduce using rule 126 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    LBRACKET        reduce using rule 126 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    BREAK           reduce using rule 126 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    RETURN          reduce using rule 126 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    $end            reduce using rule 126 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    RBRACE          reduce using rule 126 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    CASE            reduce using rule 126 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    DEFAULT         reduce using rule 126 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)


state 244

    (39) expr_list -> expression COMMA expr_list .

    VAR             reduce using rule 39 (expr_list -> expression COMMA expr_list .)
    VARIABLE        reduce using rule 39 (expr_list -> expression COMMA expr_list .)
    FMT             reduce using rule 39 (expr_list -> expression COMMA expr_list .)
    CONTINUE        reduce using rule 39 (expr_list -> expression COMMA expr_list .)
    FUNC            reduce using rule 39 (expr_list -> expression COMMA expr_list .)
    IF              reduce using rule 39 (expr_list -> expression COMMA expr_list .)
    FOR             reduce using rule 39 (expr_list -> expression COMMA expr_list .)
    TYPE            reduce using rule 39 (expr_list -> expression COMMA expr_list .)
    SWITCH          reduce using rule 39 (expr_list -> expression COMMA expr_list .)
    LBRACKET        reduce using rule 39 (expr_list -> expression COMMA expr_list .)
    BREAK           reduce using rule 39 (expr_list -> expression COMMA expr_list .)
    RETURN          reduce using rule 39 (expr_list -> expression COMMA expr_list .)
    $end            reduce using rule 39 (expr_list -> expression COMMA expr_list .)
    RBRACE          reduce using rule 39 (expr_list -> expression COMMA expr_list .)
    CASE            reduce using rule 39 (expr_list -> expression COMMA expr_list .)
    DEFAULT         reduce using rule 39 (expr_list -> expression COMMA expr_list .)


state 245

    (46) print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA . expression RPAREN
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 273
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 246

    (47) print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .

    VAR             reduce using rule 47 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 47 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    FMT             reduce using rule 47 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 47 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    FUNC            reduce using rule 47 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    IF              reduce using rule 47 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    FOR             reduce using rule 47 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    TYPE            reduce using rule 47 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    SWITCH          reduce using rule 47 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 47 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    BREAK           reduce using rule 47 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    RETURN          reduce using rule 47 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    $end            reduce using rule 47 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    RBRACE          reduce using rule 47 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    CASE            reduce using rule 47 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 47 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)


state 247

    (48) input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE . RPAREN

    RPAREN          shift and go to state 274


state 248

    (99) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE . LPAREN param_list RPAREN type LBRACE program RBRACE
    (100) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE . LPAREN RPAREN type LBRACE program RBRACE

    LPAREN          shift and go to state 275


state 249

    (53) func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE . program RBRACE
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_call
    (15) statement -> . if_stmt
    (16) statement -> . for_stmt
    (17) statement -> . struct_def
    (18) statement -> . switch_stmt
    (19) statement -> . map_declaration
    (20) statement -> . map_declaration_values
    (21) statement -> . array_declaration
    (22) statement -> . array_literal
    (23) statement -> . slice_declaration
    (24) statement -> . make_stmt
    (25) statement -> . new_stmt
    (26) statement -> . break_stmt
    (27) statement -> . increment_stmt
    (28) statement -> . return_stmt
    (29) declaration -> . VAR VARIABLE type
    (30) declaration -> . VAR VARIABLE type ASIG expression
    (31) declaration -> . VAR VARIABLE type ASSIGN expression
    (32) declaration -> . VAR id_list type ASSIGN expr_list
    (33) declaration -> . VAR id_list type ASIG expr_list
    (34) declaration -> . VAR id_list ASSIGN expr_list
    (35) declaration -> . VAR id_list ASIG expr_list
    (40) declaration -> . VARIABLE ASIG expression
    (44) assignment -> . VARIABLE ASSIGN expression
    (45) assignment -> . VARIABLE ASIG expression
    (46) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (47) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (48) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (95) continue_stmt -> . CONTINUE
    (99) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (100) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (49) func_def -> . func_header func_body
    (53) func_no_params -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (54) func_no_params -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN
    (91) if_stmt -> . IF expression block
    (92) if_stmt -> . IF expression block ELSE block
    (93) for_stmt -> . FOR expression block
    (94) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (101) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (110) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (111) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (116) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (117) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (122) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (126) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (127) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (128) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (131) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (132) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (118) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (119) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (135) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (136) break_stmt -> . BREAK
    (137) increment_stmt -> . VARIABLE INCREMENT
    (138) increment_stmt -> . VARIABLE DECREMENT
    (52) return_stmt -> . RETURN expression
    (50) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type

    VAR             shift and go to state 32
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 33
    CONTINUE        shift and go to state 34
    FUNC            shift and go to state 35
    IF              shift and go to state 37
    FOR             shift and go to state 38
    TYPE            shift and go to state 39
    SWITCH          shift and go to state 40
    LBRACKET        shift and go to state 41
    BREAK           shift and go to state 42
    RETURN          shift and go to state 43

    program                        shift and go to state 276
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_call                      shift and go to state 17
    if_stmt                        shift and go to state 18
    for_stmt                       shift and go to state 19
    struct_def                     shift and go to state 20
    switch_stmt                    shift and go to state 21
    map_declaration                shift and go to state 22
    map_declaration_values         shift and go to state 23
    array_declaration              shift and go to state 24
    array_literal                  shift and go to state 25
    slice_declaration              shift and go to state 26
    make_stmt                      shift and go to state 27
    new_stmt                       shift and go to state 28
    break_stmt                     shift and go to state 29
    increment_stmt                 shift and go to state 30
    return_stmt                    shift and go to state 31
    func_header                    shift and go to state 36

state 250

    (54) func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program . RBRACE

    RBRACE          shift and go to state 277


state 251

    (50) func_header -> FUNC VARIABLE LPAREN param_list RPAREN type .

    LBRACE          reduce using rule 50 (func_header -> FUNC VARIABLE LPAREN param_list RPAREN type .)


state 252

    (58) param_list -> param COMMA param_list .

    RPAREN          reduce using rule 58 (param_list -> param COMMA param_list .)


state 253

    (109) field_value -> VARIABLE COLON expression .
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    COMMA           reduce using rule 109 (field_value -> VARIABLE COLON expression .)
    RBRACE          reduce using rule 109 (field_value -> VARIABLE COLON expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119


state 254

    (108) struct_fields_values -> field_value COMMA struct_fields_values .

    RBRACE          reduce using rule 108 (struct_fields_values -> field_value COMMA struct_fields_values .)


state 255

    (120) make_expr -> MAKE LPAREN MAP LBRACKET type . RBRACKET type RPAREN

    RBRACKET        shift and go to state 278


state 256

    (121) make_expr -> MAKE LPAREN LBRACKET RBRACKET type . RPAREN

    RPAREN          shift and go to state 279


state 257

    (96) for_update -> assignment .

    LBRACE          reduce using rule 96 (for_update -> assignment .)


state 258

    (94) for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update . block
    (98) block -> . LBRACE program RBRACE

    LBRACE          shift and go to state 120

    block                          shift and go to state 280

state 259

    (97) for_update -> increment_stmt .

    LBRACE          reduce using rule 97 (for_update -> increment_stmt .)


state 260

    (44) assignment -> VARIABLE . ASSIGN expression
    (45) assignment -> VARIABLE . ASIG expression
    (137) increment_stmt -> VARIABLE . INCREMENT
    (138) increment_stmt -> VARIABLE . DECREMENT

    ASSIGN          shift and go to state 47
    ASIG            shift and go to state 128
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50


state 261

    (104) struct_field -> VARIABLE type .

    VARIABLE        reduce using rule 104 (struct_field -> VARIABLE type .)
    INT_TYPE        reduce using rule 104 (struct_field -> VARIABLE type .)
    FLOAT64_TYPE    reduce using rule 104 (struct_field -> VARIABLE type .)
    STRING_TYPE     reduce using rule 104 (struct_field -> VARIABLE type .)
    BOOL_TYPE       reduce using rule 104 (struct_field -> VARIABLE type .)
    RBRACE          reduce using rule 104 (struct_field -> VARIABLE type .)


state 262

    (101) struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .

    VAR             reduce using rule 101 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    VARIABLE        reduce using rule 101 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    FMT             reduce using rule 101 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    CONTINUE        reduce using rule 101 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    FUNC            reduce using rule 101 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    IF              reduce using rule 101 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    FOR             reduce using rule 101 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    TYPE            reduce using rule 101 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    SWITCH          reduce using rule 101 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    LBRACKET        reduce using rule 101 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    BREAK           reduce using rule 101 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    RETURN          reduce using rule 101 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    $end            reduce using rule 101 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    RBRACE          reduce using rule 101 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    CASE            reduce using rule 101 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    DEFAULT         reduce using rule 101 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)


state 263

    (103) struct_fields -> struct_field struct_fields .

    RBRACE          reduce using rule 103 (struct_fields -> struct_field struct_fields .)


state 264

    (114) case_clause -> CASE expression COLON program .

    CASE            reduce using rule 114 (case_clause -> CASE expression COLON program .)
    DEFAULT         reduce using rule 114 (case_clause -> CASE expression COLON program .)
    RBRACE          reduce using rule 114 (case_clause -> CASE expression COLON program .)


state 265

    (128) array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values . RBRACE

    RBRACE          shift and go to state 281


state 266

    (129) array_values -> expression .
    (130) array_values -> expression . COMMA array_values
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    RBRACE          reduce using rule 129 (array_values -> expression .)
    COMMA           shift and go to state 282
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119


state 267

    (117) map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .
    (122) map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type . LBRACE map_kv_pairs RBRACE

    VAR             reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    VARIABLE        reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    FMT             reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    CONTINUE        reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    FUNC            reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    IF              reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    FOR             reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    TYPE            reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    SWITCH          reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    LBRACKET        reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    BREAK           reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    RETURN          reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    $end            reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    RBRACE          reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    CASE            reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    DEFAULT         reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    LBRACE          shift and go to state 283


state 268

    (132) slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values . RBRACE

    RBRACE          shift and go to state 284


state 269

    (133) slice_values -> expression .
    (134) slice_values -> expression . COMMA slice_values
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    RBRACE          reduce using rule 133 (slice_values -> expression .)
    COMMA           shift and go to state 285
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119


state 270

    (118) make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type . RBRACKET type RPAREN
    (120) make_expr -> MAKE LPAREN MAP LBRACKET type . RBRACKET type RPAREN

    RBRACKET        shift and go to state 286


state 271

    (119) make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type . RPAREN
    (121) make_expr -> MAKE LPAREN LBRACKET RBRACKET type . RPAREN

    RPAREN          shift and go to state 287


state 272

    (116) map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .

    VAR             reduce using rule 116 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    VARIABLE        reduce using rule 116 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    FMT             reduce using rule 116 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    CONTINUE        reduce using rule 116 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    FUNC            reduce using rule 116 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    IF              reduce using rule 116 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    FOR             reduce using rule 116 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    TYPE            reduce using rule 116 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    SWITCH          reduce using rule 116 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    LBRACKET        reduce using rule 116 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    BREAK           reduce using rule 116 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    RETURN          reduce using rule 116 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    $end            reduce using rule 116 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    RBRACE          reduce using rule 116 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    CASE            reduce using rule 116 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    DEFAULT         reduce using rule 116 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)


state 273

    (46) print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression . RPAREN
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    RPAREN          shift and go to state 288
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119


state 274

    (48) input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .

    VAR             reduce using rule 48 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    VARIABLE        reduce using rule 48 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    FMT             reduce using rule 48 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    CONTINUE        reduce using rule 48 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    FUNC            reduce using rule 48 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    IF              reduce using rule 48 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    FOR             reduce using rule 48 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    TYPE            reduce using rule 48 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    SWITCH          reduce using rule 48 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    LBRACKET        reduce using rule 48 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    BREAK           reduce using rule 48 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    RETURN          reduce using rule 48 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    $end            reduce using rule 48 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    RBRACE          reduce using rule 48 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    CASE            reduce using rule 48 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    DEFAULT         reduce using rule 48 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)


state 275

    (99) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN . param_list RPAREN type LBRACE program RBRACE
    (100) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN . RPAREN type LBRACE program RBRACE
    (57) param_list -> . param
    (58) param_list -> . param COMMA param_list
    (59) param -> . VARIABLE type

    RPAREN          shift and go to state 289
    VARIABLE        shift and go to state 160

    param_list                     shift and go to state 290
    param                          shift and go to state 163

state 276

    (53) func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program . RBRACE

    RBRACE          shift and go to state 291


state 277

    (54) func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .

    VAR             reduce using rule 54 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    VARIABLE        reduce using rule 54 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    FMT             reduce using rule 54 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    CONTINUE        reduce using rule 54 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    FUNC            reduce using rule 54 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    IF              reduce using rule 54 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    FOR             reduce using rule 54 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    TYPE            reduce using rule 54 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    SWITCH          reduce using rule 54 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    LBRACKET        reduce using rule 54 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    BREAK           reduce using rule 54 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    RETURN          reduce using rule 54 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    $end            reduce using rule 54 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    RBRACE          reduce using rule 54 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    CASE            reduce using rule 54 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    DEFAULT         reduce using rule 54 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)


state 278

    (120) make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET . type RPAREN
    (87) type -> . INT_TYPE
    (88) type -> . FLOAT64_TYPE
    (89) type -> . STRING_TYPE
    (90) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 96
    FLOAT64_TYPE    shift and go to state 97
    STRING_TYPE     shift and go to state 98
    BOOL_TYPE       shift and go to state 99

    type                           shift and go to state 292

state 279

    (121) make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .

    TIMES           reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    DIVIDE          reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    PLUS            reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    MINUS           reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    AND             reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    OR              reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    EQ              reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    NE              reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LT              reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    GT              reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LE              reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    GE              reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LBRACE          reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    VAR             reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    VARIABLE        reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    FMT             reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    CONTINUE        reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    FUNC            reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    IF              reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    FOR             reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    TYPE            reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    SWITCH          reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LBRACKET        reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    BREAK           reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    RETURN          reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    $end            reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    RBRACE          reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    CASE            reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    DEFAULT         reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    SEMICOLON       reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    COMMA           reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    RPAREN          reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    COLON           reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)


state 280

    (94) for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .

    VAR             reduce using rule 94 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    VARIABLE        reduce using rule 94 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    FMT             reduce using rule 94 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    CONTINUE        reduce using rule 94 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    FUNC            reduce using rule 94 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    IF              reduce using rule 94 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    FOR             reduce using rule 94 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    TYPE            reduce using rule 94 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    SWITCH          reduce using rule 94 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    LBRACKET        reduce using rule 94 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    BREAK           reduce using rule 94 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    RETURN          reduce using rule 94 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    $end            reduce using rule 94 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    RBRACE          reduce using rule 94 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    CASE            reduce using rule 94 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    DEFAULT         reduce using rule 94 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)


state 281

    (128) array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .

    VAR             reduce using rule 128 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    VARIABLE        reduce using rule 128 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    FMT             reduce using rule 128 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    CONTINUE        reduce using rule 128 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    FUNC            reduce using rule 128 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    IF              reduce using rule 128 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    FOR             reduce using rule 128 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    TYPE            reduce using rule 128 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    SWITCH          reduce using rule 128 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    LBRACKET        reduce using rule 128 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    BREAK           reduce using rule 128 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    RETURN          reduce using rule 128 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    $end            reduce using rule 128 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    RBRACE          reduce using rule 128 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    CASE            reduce using rule 128 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    DEFAULT         reduce using rule 128 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)


state 282

    (130) array_values -> expression COMMA . array_values
    (129) array_values -> . expression
    (130) array_values -> . expression COMMA array_values
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 266
    array_values                   shift and go to state 293
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 283

    (122) map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE . map_kv_pairs RBRACE
    (123) map_kv_pairs -> . map_kv_pair
    (124) map_kv_pairs -> . map_kv_pair COMMA map_kv_pairs
    (125) map_kv_pair -> . STRING COLON expression

    STRING          shift and go to state 296

    map_kv_pairs                   shift and go to state 294
    map_kv_pair                    shift and go to state 295

state 284

    (132) slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .

    VAR             reduce using rule 132 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    VARIABLE        reduce using rule 132 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    FMT             reduce using rule 132 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    CONTINUE        reduce using rule 132 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    FUNC            reduce using rule 132 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    IF              reduce using rule 132 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    FOR             reduce using rule 132 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    TYPE            reduce using rule 132 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    SWITCH          reduce using rule 132 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    LBRACKET        reduce using rule 132 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    BREAK           reduce using rule 132 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    RETURN          reduce using rule 132 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    $end            reduce using rule 132 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    RBRACE          reduce using rule 132 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    CASE            reduce using rule 132 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    DEFAULT         reduce using rule 132 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)


state 285

    (134) slice_values -> expression COMMA . slice_values
    (133) slice_values -> . expression
    (134) slice_values -> . expression COMMA slice_values
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 269
    slice_values                   shift and go to state 297
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 286

    (118) make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET . type RPAREN
    (120) make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET . type RPAREN
    (87) type -> . INT_TYPE
    (88) type -> . FLOAT64_TYPE
    (89) type -> . STRING_TYPE
    (90) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 96
    FLOAT64_TYPE    shift and go to state 97
    STRING_TYPE     shift and go to state 98
    BOOL_TYPE       shift and go to state 99

    type                           shift and go to state 298

state 287

    (119) make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .
    (121) make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .

  ! reduce/reduce conflict for VAR resolved using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for FMT resolved using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for FUNC resolved using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for IF resolved using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for FOR resolved using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for TYPE resolved using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for SWITCH resolved using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for BREAK resolved using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for RETURN resolved using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for RBRACE resolved using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for CASE resolved using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    VAR             reduce using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    VARIABLE        reduce using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    FMT             reduce using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    CONTINUE        reduce using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    FUNC            reduce using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    IF              reduce using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    FOR             reduce using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    TYPE            reduce using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    SWITCH          reduce using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LBRACKET        reduce using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    BREAK           reduce using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    RETURN          reduce using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    $end            reduce using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    RBRACE          reduce using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    CASE            reduce using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    DEFAULT         reduce using rule 119 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    TIMES           reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    DIVIDE          reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    PLUS            reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    MINUS           reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    AND             reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    OR              reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    EQ              reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    NE              reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LT              reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    GT              reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LE              reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    GE              reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)

  ! VAR             [ reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! VARIABLE        [ reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! FMT             [ reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! CONTINUE        [ reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! FUNC            [ reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! IF              [ reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! FOR             [ reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! TYPE            [ reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! SWITCH          [ reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! LBRACKET        [ reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! BREAK           [ reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! RETURN          [ reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! $end            [ reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! RBRACE          [ reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! CASE            [ reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! DEFAULT         [ reduce using rule 121 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]


state 288

    (46) print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .

    VAR             reduce using rule 46 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    VARIABLE        reduce using rule 46 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    FMT             reduce using rule 46 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    CONTINUE        reduce using rule 46 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    FUNC            reduce using rule 46 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    IF              reduce using rule 46 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    FOR             reduce using rule 46 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    TYPE            reduce using rule 46 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    SWITCH          reduce using rule 46 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    LBRACKET        reduce using rule 46 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    BREAK           reduce using rule 46 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    RETURN          reduce using rule 46 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    $end            reduce using rule 46 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    RBRACE          reduce using rule 46 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    CASE            reduce using rule 46 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    DEFAULT         reduce using rule 46 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)


state 289

    (100) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN . type LBRACE program RBRACE
    (87) type -> . INT_TYPE
    (88) type -> . FLOAT64_TYPE
    (89) type -> . STRING_TYPE
    (90) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 96
    FLOAT64_TYPE    shift and go to state 97
    STRING_TYPE     shift and go to state 98
    BOOL_TYPE       shift and go to state 99

    type                           shift and go to state 299

state 290

    (99) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list . RPAREN type LBRACE program RBRACE

    RPAREN          shift and go to state 300


state 291

    (53) func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .

    VAR             reduce using rule 53 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    VARIABLE        reduce using rule 53 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    FMT             reduce using rule 53 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    CONTINUE        reduce using rule 53 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    FUNC            reduce using rule 53 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    IF              reduce using rule 53 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    FOR             reduce using rule 53 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    TYPE            reduce using rule 53 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    SWITCH          reduce using rule 53 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    LBRACKET        reduce using rule 53 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    BREAK           reduce using rule 53 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    RETURN          reduce using rule 53 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    $end            reduce using rule 53 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    RBRACE          reduce using rule 53 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    CASE            reduce using rule 53 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    DEFAULT         reduce using rule 53 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)


state 292

    (120) make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type . RPAREN

    RPAREN          shift and go to state 301


state 293

    (130) array_values -> expression COMMA array_values .

    RBRACE          reduce using rule 130 (array_values -> expression COMMA array_values .)


state 294

    (122) map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs . RBRACE

    RBRACE          shift and go to state 302


state 295

    (123) map_kv_pairs -> map_kv_pair .
    (124) map_kv_pairs -> map_kv_pair . COMMA map_kv_pairs

    RBRACE          reduce using rule 123 (map_kv_pairs -> map_kv_pair .)
    COMMA           shift and go to state 303


state 296

    (125) map_kv_pair -> STRING . COLON expression

    COLON           shift and go to state 304


state 297

    (134) slice_values -> expression COMMA slice_values .

    RBRACE          reduce using rule 134 (slice_values -> expression COMMA slice_values .)


state 298

    (118) make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type . RPAREN
    (120) make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type . RPAREN

    RPAREN          shift and go to state 305


state 299

    (100) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type . LBRACE program RBRACE

    LBRACE          shift and go to state 306


state 300

    (99) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN . type LBRACE program RBRACE
    (87) type -> . INT_TYPE
    (88) type -> . FLOAT64_TYPE
    (89) type -> . STRING_TYPE
    (90) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 96
    FLOAT64_TYPE    shift and go to state 97
    STRING_TYPE     shift and go to state 98
    BOOL_TYPE       shift and go to state 99

    type                           shift and go to state 307

state 301

    (120) make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .

    TIMES           reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    DIVIDE          reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    PLUS            reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    MINUS           reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    AND             reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    OR              reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    EQ              reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    NE              reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LT              reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    GT              reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LE              reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    GE              reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LBRACE          reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    VAR             reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    VARIABLE        reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FMT             reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    CONTINUE        reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FUNC            reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    IF              reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FOR             reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    TYPE            reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    SWITCH          reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LBRACKET        reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    BREAK           reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    RETURN          reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    $end            reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    RBRACE          reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    CASE            reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    DEFAULT         reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    SEMICOLON       reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    COMMA           reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    RPAREN          reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    COLON           reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)


state 302

    (122) map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .

    VAR             reduce using rule 122 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    VARIABLE        reduce using rule 122 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    FMT             reduce using rule 122 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    CONTINUE        reduce using rule 122 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    FUNC            reduce using rule 122 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    IF              reduce using rule 122 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    FOR             reduce using rule 122 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    TYPE            reduce using rule 122 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    SWITCH          reduce using rule 122 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    LBRACKET        reduce using rule 122 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    BREAK           reduce using rule 122 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    RETURN          reduce using rule 122 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    $end            reduce using rule 122 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    RBRACE          reduce using rule 122 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    CASE            reduce using rule 122 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    DEFAULT         reduce using rule 122 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)


state 303

    (124) map_kv_pairs -> map_kv_pair COMMA . map_kv_pairs
    (123) map_kv_pairs -> . map_kv_pair
    (124) map_kv_pairs -> . map_kv_pair COMMA map_kv_pairs
    (125) map_kv_pair -> . STRING COLON expression

    STRING          shift and go to state 296

    map_kv_pair                    shift and go to state 295
    map_kv_pairs                   shift and go to state 308

state 304

    (125) map_kv_pair -> STRING COLON . expression
    (41) expression -> . NUMBER
    (42) expression -> . FLOAT
    (43) expression -> . VARIABLE
    (62) expression -> . term
    (63) expression -> . expression PLUS term
    (64) expression -> . expression MINUS term
    (65) expression -> . expression AND expression
    (66) expression -> . expression OR expression
    (67) expression -> . expression EQ expression
    (68) expression -> . expression NE expression
    (69) expression -> . expression LT expression
    (70) expression -> . expression GT expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression GE expression
    (73) term -> . factor
    (74) term -> . term TIMES factor
    (75) term -> . term DIVIDE factor
    (76) term -> . VARIABLE
    (77) factor -> . NUMBER
    (78) factor -> . FLOAT
    (79) factor -> . STRING
    (80) factor -> . VARIABLE
    (81) factor -> . TRUE
    (82) factor -> . FALSE
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . make_expr
    (85) factor -> . struct_instance
    (86) factor -> . func_call
    (120) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (121) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (106) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 60
    FLOAT           shift and go to state 61
    VARIABLE        shift and go to state 62
    STRING          shift and go to state 65
    TRUE            shift and go to state 66
    FALSE           shift and go to state 67
    LPAREN          shift and go to state 68
    MAKE            shift and go to state 72

    expression                     shift and go to state 309
    term                           shift and go to state 63
    factor                         shift and go to state 64
    make_expr                      shift and go to state 69
    struct_instance                shift and go to state 70
    func_call                      shift and go to state 71

state 305

    (118) make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .
    (120) make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .

  ! reduce/reduce conflict for VAR resolved using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for FMT resolved using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for FUNC resolved using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for IF resolved using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for FOR resolved using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for TYPE resolved using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for SWITCH resolved using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for BREAK resolved using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for RETURN resolved using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for RBRACE resolved using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for CASE resolved using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    VAR             reduce using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    VARIABLE        reduce using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FMT             reduce using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    CONTINUE        reduce using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FUNC            reduce using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    IF              reduce using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FOR             reduce using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    TYPE            reduce using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    SWITCH          reduce using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LBRACKET        reduce using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    BREAK           reduce using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    RETURN          reduce using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    $end            reduce using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    RBRACE          reduce using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    CASE            reduce using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    DEFAULT         reduce using rule 118 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    TIMES           reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    DIVIDE          reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    PLUS            reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    MINUS           reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    AND             reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    OR              reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    EQ              reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    NE              reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LT              reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    GT              reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LE              reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    GE              reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)

  ! VAR             [ reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! VARIABLE        [ reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! FMT             [ reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! CONTINUE        [ reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! FUNC            [ reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! IF              [ reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! FOR             [ reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! TYPE            [ reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! SWITCH          [ reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! LBRACKET        [ reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! BREAK           [ reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! RETURN          [ reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! $end            [ reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! RBRACE          [ reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! CASE            [ reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! DEFAULT         [ reduce using rule 120 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]


state 306

    (100) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE . program RBRACE
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_call
    (15) statement -> . if_stmt
    (16) statement -> . for_stmt
    (17) statement -> . struct_def
    (18) statement -> . switch_stmt
    (19) statement -> . map_declaration
    (20) statement -> . map_declaration_values
    (21) statement -> . array_declaration
    (22) statement -> . array_literal
    (23) statement -> . slice_declaration
    (24) statement -> . make_stmt
    (25) statement -> . new_stmt
    (26) statement -> . break_stmt
    (27) statement -> . increment_stmt
    (28) statement -> . return_stmt
    (29) declaration -> . VAR VARIABLE type
    (30) declaration -> . VAR VARIABLE type ASIG expression
    (31) declaration -> . VAR VARIABLE type ASSIGN expression
    (32) declaration -> . VAR id_list type ASSIGN expr_list
    (33) declaration -> . VAR id_list type ASIG expr_list
    (34) declaration -> . VAR id_list ASSIGN expr_list
    (35) declaration -> . VAR id_list ASIG expr_list
    (40) declaration -> . VARIABLE ASIG expression
    (44) assignment -> . VARIABLE ASSIGN expression
    (45) assignment -> . VARIABLE ASIG expression
    (46) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (47) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (48) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (95) continue_stmt -> . CONTINUE
    (99) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (100) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (49) func_def -> . func_header func_body
    (53) func_no_params -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (54) func_no_params -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN
    (91) if_stmt -> . IF expression block
    (92) if_stmt -> . IF expression block ELSE block
    (93) for_stmt -> . FOR expression block
    (94) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (101) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (110) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (111) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (116) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (117) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (122) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (126) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (127) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (128) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (131) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (132) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (118) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (119) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (135) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (136) break_stmt -> . BREAK
    (137) increment_stmt -> . VARIABLE INCREMENT
    (138) increment_stmt -> . VARIABLE DECREMENT
    (52) return_stmt -> . RETURN expression
    (50) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type

    VAR             shift and go to state 32
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 33
    CONTINUE        shift and go to state 34
    FUNC            shift and go to state 35
    IF              shift and go to state 37
    FOR             shift and go to state 38
    TYPE            shift and go to state 39
    SWITCH          shift and go to state 40
    LBRACKET        shift and go to state 41
    BREAK           shift and go to state 42
    RETURN          shift and go to state 43

    program                        shift and go to state 310
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_call                      shift and go to state 17
    if_stmt                        shift and go to state 18
    for_stmt                       shift and go to state 19
    struct_def                     shift and go to state 20
    switch_stmt                    shift and go to state 21
    map_declaration                shift and go to state 22
    map_declaration_values         shift and go to state 23
    array_declaration              shift and go to state 24
    array_literal                  shift and go to state 25
    slice_declaration              shift and go to state 26
    make_stmt                      shift and go to state 27
    new_stmt                       shift and go to state 28
    break_stmt                     shift and go to state 29
    increment_stmt                 shift and go to state 30
    return_stmt                    shift and go to state 31
    func_header                    shift and go to state 36

state 307

    (99) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type . LBRACE program RBRACE

    LBRACE          shift and go to state 311


state 308

    (124) map_kv_pairs -> map_kv_pair COMMA map_kv_pairs .

    RBRACE          reduce using rule 124 (map_kv_pairs -> map_kv_pair COMMA map_kv_pairs .)


state 309

    (125) map_kv_pair -> STRING COLON expression .
    (63) expression -> expression . PLUS term
    (64) expression -> expression . MINUS term
    (65) expression -> expression . AND expression
    (66) expression -> expression . OR expression
    (67) expression -> expression . EQ expression
    (68) expression -> expression . NE expression
    (69) expression -> expression . LT expression
    (70) expression -> expression . GT expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . GE expression

    COMMA           reduce using rule 125 (map_kv_pair -> STRING COLON expression .)
    RBRACE          reduce using rule 125 (map_kv_pair -> STRING COLON expression .)
    PLUS            shift and go to state 110
    MINUS           shift and go to state 111
    AND             shift and go to state 112
    OR              shift and go to state 113
    EQ              shift and go to state 114
    NE              shift and go to state 115
    LT              shift and go to state 116
    GT              shift and go to state 117
    LE              shift and go to state 118
    GE              shift and go to state 119


state 310

    (100) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program . RBRACE

    RBRACE          shift and go to state 312


state 311

    (99) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE . program RBRACE
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_call
    (15) statement -> . if_stmt
    (16) statement -> . for_stmt
    (17) statement -> . struct_def
    (18) statement -> . switch_stmt
    (19) statement -> . map_declaration
    (20) statement -> . map_declaration_values
    (21) statement -> . array_declaration
    (22) statement -> . array_literal
    (23) statement -> . slice_declaration
    (24) statement -> . make_stmt
    (25) statement -> . new_stmt
    (26) statement -> . break_stmt
    (27) statement -> . increment_stmt
    (28) statement -> . return_stmt
    (29) declaration -> . VAR VARIABLE type
    (30) declaration -> . VAR VARIABLE type ASIG expression
    (31) declaration -> . VAR VARIABLE type ASSIGN expression
    (32) declaration -> . VAR id_list type ASSIGN expr_list
    (33) declaration -> . VAR id_list type ASIG expr_list
    (34) declaration -> . VAR id_list ASSIGN expr_list
    (35) declaration -> . VAR id_list ASIG expr_list
    (40) declaration -> . VARIABLE ASIG expression
    (44) assignment -> . VARIABLE ASSIGN expression
    (45) assignment -> . VARIABLE ASIG expression
    (46) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (47) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (48) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (95) continue_stmt -> . CONTINUE
    (99) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (100) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (49) func_def -> . func_header func_body
    (53) func_no_params -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (54) func_no_params -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (55) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (56) func_call -> . VARIABLE LPAREN RPAREN
    (91) if_stmt -> . IF expression block
    (92) if_stmt -> . IF expression block ELSE block
    (93) for_stmt -> . FOR expression block
    (94) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (101) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (110) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (111) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (116) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (117) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (122) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (126) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (127) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (128) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (131) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (132) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (118) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (119) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (135) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (136) break_stmt -> . BREAK
    (137) increment_stmt -> . VARIABLE INCREMENT
    (138) increment_stmt -> . VARIABLE DECREMENT
    (52) return_stmt -> . RETURN expression
    (50) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type

    VAR             shift and go to state 32
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 33
    CONTINUE        shift and go to state 34
    FUNC            shift and go to state 35
    IF              shift and go to state 37
    FOR             shift and go to state 38
    TYPE            shift and go to state 39
    SWITCH          shift and go to state 40
    LBRACKET        shift and go to state 41
    BREAK           shift and go to state 42
    RETURN          shift and go to state 43

    program                        shift and go to state 313
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_call                      shift and go to state 17
    if_stmt                        shift and go to state 18
    for_stmt                       shift and go to state 19
    struct_def                     shift and go to state 20
    switch_stmt                    shift and go to state 21
    map_declaration                shift and go to state 22
    map_declaration_values         shift and go to state 23
    array_declaration              shift and go to state 24
    array_literal                  shift and go to state 25
    slice_declaration              shift and go to state 26
    make_stmt                      shift and go to state 27
    new_stmt                       shift and go to state 28
    break_stmt                     shift and go to state 29
    increment_stmt                 shift and go to state 30
    return_stmt                    shift and go to state 31
    func_header                    shift and go to state 36

state 312

    (100) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .

    VAR             reduce using rule 100 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    VARIABLE        reduce using rule 100 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    FMT             reduce using rule 100 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    CONTINUE        reduce using rule 100 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    FUNC            reduce using rule 100 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    IF              reduce using rule 100 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    FOR             reduce using rule 100 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    TYPE            reduce using rule 100 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    SWITCH          reduce using rule 100 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    LBRACKET        reduce using rule 100 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    BREAK           reduce using rule 100 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    RETURN          reduce using rule 100 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    $end            reduce using rule 100 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    RBRACE          reduce using rule 100 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    CASE            reduce using rule 100 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    DEFAULT         reduce using rule 100 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)


state 313

    (99) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program . RBRACE

    RBRACE          shift and go to state 314


state 314

    (99) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .

    VAR             reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    VARIABLE        reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    FMT             reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    CONTINUE        reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    FUNC            reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    IF              reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    FOR             reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    TYPE            reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    SWITCH          reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    LBRACKET        reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    BREAK           reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    RETURN          reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    $end            reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    RBRACE          reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    CASE            reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    DEFAULT         reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ASSIGN in state 52 resolved as shift
WARNING: shift/reduce conflict for INT_TYPE in state 52 resolved as shift
WARNING: shift/reduce conflict for FLOAT64_TYPE in state 52 resolved as shift
WARNING: shift/reduce conflict for STRING_TYPE in state 52 resolved as shift
WARNING: shift/reduce conflict for BOOL_TYPE in state 52 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 62 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 75 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 167 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 171 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 171 resolved as shift
WARNING: shift/reduce conflict for AND in state 171 resolved as shift
WARNING: shift/reduce conflict for OR in state 171 resolved as shift
WARNING: shift/reduce conflict for EQ in state 171 resolved as shift
WARNING: shift/reduce conflict for NE in state 171 resolved as shift
WARNING: shift/reduce conflict for LT in state 171 resolved as shift
WARNING: shift/reduce conflict for GT in state 171 resolved as shift
WARNING: shift/reduce conflict for LE in state 171 resolved as shift
WARNING: shift/reduce conflict for GE in state 171 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 172 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 172 resolved as shift
WARNING: shift/reduce conflict for AND in state 172 resolved as shift
WARNING: shift/reduce conflict for OR in state 172 resolved as shift
WARNING: shift/reduce conflict for EQ in state 172 resolved as shift
WARNING: shift/reduce conflict for NE in state 172 resolved as shift
WARNING: shift/reduce conflict for LT in state 172 resolved as shift
WARNING: shift/reduce conflict for GT in state 172 resolved as shift
WARNING: shift/reduce conflict for LE in state 172 resolved as shift
WARNING: shift/reduce conflict for GE in state 172 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 173 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 173 resolved as shift
WARNING: shift/reduce conflict for AND in state 173 resolved as shift
WARNING: shift/reduce conflict for OR in state 173 resolved as shift
WARNING: shift/reduce conflict for EQ in state 173 resolved as shift
WARNING: shift/reduce conflict for NE in state 173 resolved as shift
WARNING: shift/reduce conflict for LT in state 173 resolved as shift
WARNING: shift/reduce conflict for GT in state 173 resolved as shift
WARNING: shift/reduce conflict for LE in state 173 resolved as shift
WARNING: shift/reduce conflict for GE in state 173 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 174 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 174 resolved as shift
WARNING: shift/reduce conflict for AND in state 174 resolved as shift
WARNING: shift/reduce conflict for OR in state 174 resolved as shift
WARNING: shift/reduce conflict for EQ in state 174 resolved as shift
WARNING: shift/reduce conflict for NE in state 174 resolved as shift
WARNING: shift/reduce conflict for LT in state 174 resolved as shift
WARNING: shift/reduce conflict for GT in state 174 resolved as shift
WARNING: shift/reduce conflict for LE in state 174 resolved as shift
WARNING: shift/reduce conflict for GE in state 174 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 175 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 175 resolved as shift
WARNING: shift/reduce conflict for AND in state 175 resolved as shift
WARNING: shift/reduce conflict for OR in state 175 resolved as shift
WARNING: shift/reduce conflict for EQ in state 175 resolved as shift
WARNING: shift/reduce conflict for NE in state 175 resolved as shift
WARNING: shift/reduce conflict for LT in state 175 resolved as shift
WARNING: shift/reduce conflict for GT in state 175 resolved as shift
WARNING: shift/reduce conflict for LE in state 175 resolved as shift
WARNING: shift/reduce conflict for GE in state 175 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 176 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 176 resolved as shift
WARNING: shift/reduce conflict for AND in state 176 resolved as shift
WARNING: shift/reduce conflict for OR in state 176 resolved as shift
WARNING: shift/reduce conflict for EQ in state 176 resolved as shift
WARNING: shift/reduce conflict for NE in state 176 resolved as shift
WARNING: shift/reduce conflict for LT in state 176 resolved as shift
WARNING: shift/reduce conflict for GT in state 176 resolved as shift
WARNING: shift/reduce conflict for LE in state 176 resolved as shift
WARNING: shift/reduce conflict for GE in state 176 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 177 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 177 resolved as shift
WARNING: shift/reduce conflict for AND in state 177 resolved as shift
WARNING: shift/reduce conflict for OR in state 177 resolved as shift
WARNING: shift/reduce conflict for EQ in state 177 resolved as shift
WARNING: shift/reduce conflict for NE in state 177 resolved as shift
WARNING: shift/reduce conflict for LT in state 177 resolved as shift
WARNING: shift/reduce conflict for GT in state 177 resolved as shift
WARNING: shift/reduce conflict for LE in state 177 resolved as shift
WARNING: shift/reduce conflict for GE in state 177 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 178 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 178 resolved as shift
WARNING: shift/reduce conflict for AND in state 178 resolved as shift
WARNING: shift/reduce conflict for OR in state 178 resolved as shift
WARNING: shift/reduce conflict for EQ in state 178 resolved as shift
WARNING: shift/reduce conflict for NE in state 178 resolved as shift
WARNING: shift/reduce conflict for LT in state 178 resolved as shift
WARNING: shift/reduce conflict for GT in state 178 resolved as shift
WARNING: shift/reduce conflict for LE in state 178 resolved as shift
WARNING: shift/reduce conflict for GE in state 178 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 184 resolved as shift
WARNING: reduce/reduce conflict in state 60 resolved using rule (expression -> NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 60
WARNING: reduce/reduce conflict in state 61 resolved using rule (expression -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 61
WARNING: reduce/reduce conflict in state 62 resolved using rule (expression -> VARIABLE)
WARNING: rejected rule (term -> VARIABLE) in state 62
WARNING: reduce/reduce conflict in state 62 resolved using rule (term -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 62
WARNING: reduce/reduce conflict in state 62 resolved using rule (expression -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 62
WARNING: reduce/reduce conflict in state 75 resolved using rule (expression -> VARIABLE)
WARNING: rejected rule (term -> VARIABLE) in state 75
WARNING: reduce/reduce conflict in state 75 resolved using rule (term -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 75
WARNING: reduce/reduce conflict in state 75 resolved using rule (expression -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 75
WARNING: reduce/reduce conflict in state 82 resolved using rule (declaration -> VARIABLE ASIG expression)
WARNING: rejected rule (assignment -> VARIABLE ASIG expression) in state 82
WARNING: reduce/reduce conflict in state 167 resolved using rule (term -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 167
WARNING: reduce/reduce conflict in state 287 resolved using rule (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN)
WARNING: rejected rule (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN) in state 287
WARNING: reduce/reduce conflict in state 305 resolved using rule (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN)
WARNING: rejected rule (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN) in state 305
