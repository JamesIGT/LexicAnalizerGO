Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    MOD
    NOT
    PRINT
    RANGE
    UINT

Grammar

Rule 0     S' -> start
Rule 1     start -> PACKAGE VARIABLE import_stmt program
Rule 2     import_stmt -> IMPORT LPAREN STRING RPAREN
Rule 3     import_stmt -> IMPORT STRING
Rule 4     program -> statement
Rule 5     program -> statement program
Rule 6     statement -> declaration
Rule 7     statement -> assignment
Rule 8     statement -> print_stmt
Rule 9     statement -> input_stmt
Rule 10    statement -> continue_stmt
Rule 11    statement -> struct_method
Rule 12    statement -> func_def
Rule 13    statement -> func_no_params
Rule 14    statement -> func_no_params_void
Rule 15    statement -> func_with_map
Rule 16    statement -> func_call
Rule 17    statement -> if_stmt
Rule 18    statement -> for_stmt
Rule 19    statement -> struct_def
Rule 20    statement -> switch_stmt
Rule 21    statement -> map_declaration
Rule 22    statement -> map_declaration_values
Rule 23    statement -> array_declaration
Rule 24    statement -> array_literal
Rule 25    statement -> slice_declaration
Rule 26    statement -> make_stmt
Rule 27    statement -> new_stmt
Rule 28    statement -> break_stmt
Rule 29    statement -> increment_stmt
Rule 30    statement -> return_stmt
Rule 31    declaration -> VAR VARIABLE type
Rule 32    declaration -> VAR VARIABLE type ASIG expression
Rule 33    declaration -> VAR VARIABLE type ASSIGN expression
Rule 34    expression -> NUMBER
Rule 35    expression -> FLOAT
Rule 36    expression -> VARIABLE
Rule 37    assignment -> VARIABLE ASSIGN expression
Rule 38    assignment -> VARIABLE ASIG expression
Rule 39    print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
Rule 40    print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN
Rule 41    print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN
Rule 42    input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
Rule 43    func_def -> func_header func_body
Rule 44    func_header -> FUNC VARIABLE LPAREN param_list RPAREN type
Rule 45    func_body -> LBRACE program RBRACE
Rule 46    return_stmt -> RETURN expression
Rule 47    func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body
Rule 48    func_no_params -> func_header_no_params block
Rule 49    func_header_no_params -> FUNC VARIABLE LPAREN RPAREN type
Rule 50    func_no_params_void -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
Rule 51    func_call -> VARIABLE LPAREN arg_list RPAREN
Rule 52    func_call -> VARIABLE LPAREN RPAREN
Rule 53    param_list -> param
Rule 54    param_list -> param COMMA param_list
Rule 55    param -> VARIABLE type
Rule 56    arg_list -> expression
Rule 57    arg_list -> expression COMMA arg_list
Rule 58    expression -> term
Rule 59    expression -> expression PLUS term
Rule 60    expression -> expression MINUS term
Rule 61    expression -> expression AND expression
Rule 62    expression -> expression OR expression
Rule 63    expression -> expression EQ expression
Rule 64    expression -> expression NE expression
Rule 65    expression -> expression LT expression
Rule 66    expression -> expression GT expression
Rule 67    expression -> expression LE expression
Rule 68    expression -> expression GE expression
Rule 69    term -> factor
Rule 70    term -> term TIMES factor
Rule 71    term -> term DIVIDE factor
Rule 72    term -> VARIABLE
Rule 73    factor -> NUMBER
Rule 74    factor -> FLOAT
Rule 75    factor -> STRING
Rule 76    factor -> VARIABLE
Rule 77    factor -> TRUE
Rule 78    factor -> FALSE
Rule 79    factor -> LPAREN expression RPAREN
Rule 80    factor -> make_expr
Rule 81    factor -> struct_instance
Rule 82    factor -> func_call
Rule 83    type -> INT_TYPE
Rule 84    type -> FLOAT64_TYPE
Rule 85    type -> STRING_TYPE
Rule 86    type -> BOOL_TYPE
Rule 87    if_stmt -> IF expression block
Rule 88    if_stmt -> IF expression block ELSE block
Rule 89    for_stmt -> FOR expression for_block
Rule 90    for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update for_block
Rule 91    for_block -> begin_loop block end_loop
Rule 92    begin_loop -> <empty>
Rule 93    end_loop -> <empty>
Rule 94    continue_stmt -> CONTINUE
Rule 95    for_update -> assignment
Rule 96    for_update -> increment_stmt
Rule 97    block -> LBRACE program RBRACE
Rule 98    struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
Rule 99    struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
Rule 100   struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
Rule 101   struct_fields -> struct_field
Rule 102   struct_fields -> struct_field struct_fields
Rule 103   struct_field -> VARIABLE type
Rule 104   struct_field -> type
Rule 105   struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE
Rule 106   struct_fields_values -> field_value
Rule 107   struct_fields_values -> field_value COMMA struct_fields_values
Rule 108   field_value -> VARIABLE COLON expression
Rule 109   switch_stmt -> SWITCH expression LBRACE case_list RBRACE
Rule 110   switch_stmt -> SWITCH LBRACE case_list RBRACE
Rule 111   case_list -> case_clause
Rule 112   case_list -> case_clause case_list
Rule 113   case_clause -> CASE expression COLON program
Rule 114   case_clause -> DEFAULT COLON program
Rule 115   map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type
Rule 116   map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type
Rule 117   map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE
Rule 118   map_params -> map_param
Rule 119   map_params -> map_param COMMA map_params
Rule 120   map_param -> STRING COLON factor
Rule 121   make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
Rule 122   make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
Rule 123   make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
Rule 124   make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN
Rule 125   map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
Rule 126   map_kv_pairs -> map_kv_pair
Rule 127   map_kv_pairs -> map_kv_pair COMMA map_kv_pairs
Rule 128   map_kv_pair -> STRING COLON expression
Rule 129   array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type
Rule 130   array_declaration -> VAR VARIABLE ASSIGN array_literal
Rule 131   array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
Rule 132   array_values -> expression
Rule 133   array_values -> expression COMMA array_values
Rule 134   slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type
Rule 135   slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
Rule 136   slice_values -> expression
Rule 137   slice_values -> expression COMMA slice_values
Rule 138   new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
Rule 139   break_stmt -> BREAK
Rule 140   increment_stmt -> VARIABLE INCREMENT
Rule 141   increment_stmt -> VARIABLE DECREMENT

Terminals, with rules where they appear

AMPER                : 42
AND                  : 61
ASIG                 : 32 38 116 117 121 122 125 135 138
ASSIGN               : 33 37 130
BOOL_TYPE            : 86
BREAK                : 139
CASE                 : 113
COLON                : 108 113 114 120 128
COMMA                : 39 41 54 57 107 119 127 133 137
CONTINUE             : 94
DECREMENT            : 141
DEFAULT              : 114
DIVIDE               : 71
DOT                  : 39 40 41 42
ELSE                 : 88
EQ                   : 63
FALSE                : 78
FLOAT                : 35 74
FLOAT64_TYPE         : 84
FMT                  : 39 40 41 42
FOR                  : 89 90
FUNC                 : 44 47 49 50 98 99
GE                   : 68
GT                   : 66
IF                   : 87 88
IMPORT               : 2 3
INCREMENT            : 140
INT_TYPE             : 83
LBRACE               : 45 50 97 98 99 100 105 109 110 117 125 131 135
LBRACKET             : 47 115 116 117 121 122 123 124 125 129 131 134 135
LE                   : 67
LPAREN               : 2 39 40 41 42 44 47 49 50 51 52 79 98 98 99 99 121 122 123 124 138
LT                   : 65
MAKE                 : 121 122 123 124
MAP                  : 47 115 116 117 121 123 125
MINUS                : 60
MOD                  : 
NE                   : 64
NEW                  : 138
NOT                  : 
NUMBER               : 34 73 129 131
OR                   : 62
PACKAGE              : 1
PLUS                 : 59
PRINT                : 
PRINTF               : 39
PRINTLN              : 40 41
RANGE                : 
RBRACE               : 45 50 97 98 99 100 105 109 110 117 125 131 135
RBRACKET             : 47 115 116 117 121 122 123 124 125 129 131 134 135
RETURN               : 46
RPAREN               : 2 39 40 41 42 44 47 49 50 51 52 79 98 98 99 99 121 122 123 124 138
SCANLN               : 42
SEMICOLON            : 90 90
STRING               : 2 3 39 41 75 120 128
STRING_TYPE          : 85
STRUCT               : 100
SWITCH               : 109 110
TIMES                : 70
TRUE                 : 77
TYPE                 : 100
UINT                 : 
VAR                  : 31 32 33 115 129 130 134
VARIABLE             : 1 31 32 33 36 37 38 41 42 44 47 49 50 51 52 55 72 76 98 98 98 99 99 99 100 103 105 108 115 116 117 121 122 125 129 130 134 135 138 138 140 141
error                : 

Nonterminals, with rules where they appear

arg_list             : 51 57
array_declaration    : 23
array_literal        : 24 130
array_values         : 131 133
assignment           : 7 90 95
begin_loop           : 91
block                : 48 87 88 88 91
break_stmt           : 28
case_clause          : 111 112
case_list            : 109 110 112
continue_stmt        : 10
declaration          : 6
end_loop             : 91
expression           : 32 33 37 38 39 40 46 56 57 59 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 79 87 88 89 90 108 109 113 128 132 133 136 137
factor               : 69 70 71 120
field_value          : 106 107
for_block            : 89 90
for_stmt             : 18
for_update           : 90
func_body            : 43 47
func_call            : 16 82
func_def             : 12
func_header          : 43
func_header_no_params : 48
func_no_params       : 13
func_no_params_void  : 14
func_with_map        : 15
if_stmt              : 17
import_stmt          : 1
increment_stmt       : 29 96
input_stmt           : 9
make_expr            : 80
make_stmt            : 26
map_declaration      : 21
map_declaration_values : 22
map_kv_pair          : 126 127
map_kv_pairs         : 125 127
map_param            : 118 119
map_params           : 117 119
new_stmt             : 27
param                : 53 54
param_list           : 44 54 98
print_stmt           : 8
program              : 1 5 45 50 97 98 99 113 114
return_stmt          : 30
slice_declaration    : 25
slice_values         : 135 137
start                : 0
statement            : 4 5
struct_def           : 19
struct_field         : 101 102
struct_fields        : 100 102
struct_fields_values : 105 107
struct_instance      : 81
struct_method        : 11
switch_stmt          : 20
term                 : 58 59 60 70 71
type                 : 31 32 33 44 47 47 49 55 98 99 103 104 115 115 116 116 117 117 121 121 122 123 123 124 125 125 129 131 134 135

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . PACKAGE VARIABLE import_stmt program

    PACKAGE         shift and go to state 2

    start                          shift and go to state 1

state 1

    (0) S' -> start .



state 2

    (1) start -> PACKAGE . VARIABLE import_stmt program

    VARIABLE        shift and go to state 3


state 3

    (1) start -> PACKAGE VARIABLE . import_stmt program
    (2) import_stmt -> . IMPORT LPAREN STRING RPAREN
    (3) import_stmt -> . IMPORT STRING

    IMPORT          shift and go to state 5

    import_stmt                    shift and go to state 4

state 4

    (1) start -> PACKAGE VARIABLE import_stmt . program
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_no_params_void
    (15) statement -> . func_with_map
    (16) statement -> . func_call
    (17) statement -> . if_stmt
    (18) statement -> . for_stmt
    (19) statement -> . struct_def
    (20) statement -> . switch_stmt
    (21) statement -> . map_declaration
    (22) statement -> . map_declaration_values
    (23) statement -> . array_declaration
    (24) statement -> . array_literal
    (25) statement -> . slice_declaration
    (26) statement -> . make_stmt
    (27) statement -> . new_stmt
    (28) statement -> . break_stmt
    (29) statement -> . increment_stmt
    (30) statement -> . return_stmt
    (31) declaration -> . VAR VARIABLE type
    (32) declaration -> . VAR VARIABLE type ASIG expression
    (33) declaration -> . VAR VARIABLE type ASSIGN expression
    (37) assignment -> . VARIABLE ASSIGN expression
    (38) assignment -> . VARIABLE ASIG expression
    (39) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (40) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (41) print_stmt -> . FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN
    (42) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (94) continue_stmt -> . CONTINUE
    (98) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (99) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (43) func_def -> . func_header func_body
    (48) func_no_params -> . func_header_no_params block
    (50) func_no_params_void -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (47) func_with_map -> . FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN
    (87) if_stmt -> . IF expression block
    (88) if_stmt -> . IF expression block ELSE block
    (89) for_stmt -> . FOR expression for_block
    (90) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update for_block
    (100) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (109) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (110) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (115) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (116) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (117) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE
    (125) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (129) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (130) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (131) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (134) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (135) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (121) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (122) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (138) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (139) break_stmt -> . BREAK
    (140) increment_stmt -> . VARIABLE INCREMENT
    (141) increment_stmt -> . VARIABLE DECREMENT
    (46) return_stmt -> . RETURN expression
    (44) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type
    (49) func_header_no_params -> . FUNC VARIABLE LPAREN RPAREN type

    VAR             shift and go to state 34
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 35
    CONTINUE        shift and go to state 36
    FUNC            shift and go to state 37
    IF              shift and go to state 41
    FOR             shift and go to state 42
    TYPE            shift and go to state 43
    SWITCH          shift and go to state 44
    LBRACKET        shift and go to state 40
    BREAK           shift and go to state 45
    RETURN          shift and go to state 46

    program                        shift and go to state 7
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_no_params_void            shift and go to state 17
    func_with_map                  shift and go to state 18
    func_call                      shift and go to state 19
    if_stmt                        shift and go to state 20
    for_stmt                       shift and go to state 21
    struct_def                     shift and go to state 22
    switch_stmt                    shift and go to state 23
    map_declaration                shift and go to state 24
    map_declaration_values         shift and go to state 25
    array_declaration              shift and go to state 26
    array_literal                  shift and go to state 27
    slice_declaration              shift and go to state 28
    make_stmt                      shift and go to state 29
    new_stmt                       shift and go to state 30
    break_stmt                     shift and go to state 31
    increment_stmt                 shift and go to state 32
    return_stmt                    shift and go to state 33
    func_header                    shift and go to state 38
    func_header_no_params          shift and go to state 39

state 5

    (2) import_stmt -> IMPORT . LPAREN STRING RPAREN
    (3) import_stmt -> IMPORT . STRING

    LPAREN          shift and go to state 47
    STRING          shift and go to state 48


state 6

    (37) assignment -> VARIABLE . ASSIGN expression
    (38) assignment -> VARIABLE . ASIG expression
    (51) func_call -> VARIABLE . LPAREN arg_list RPAREN
    (52) func_call -> VARIABLE . LPAREN RPAREN
    (116) map_declaration -> VARIABLE . ASIG MAP LBRACKET type RBRACKET type
    (117) map_declaration -> VARIABLE . ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE
    (125) map_declaration_values -> VARIABLE . ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (135) slice_declaration -> VARIABLE . ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (121) make_stmt -> VARIABLE . ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (122) make_stmt -> VARIABLE . ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (138) new_stmt -> VARIABLE . ASIG NEW LPAREN VARIABLE RPAREN
    (140) increment_stmt -> VARIABLE . INCREMENT
    (141) increment_stmt -> VARIABLE . DECREMENT

    ASSIGN          shift and go to state 49
    ASIG            shift and go to state 50
    LPAREN          shift and go to state 51
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53


state 7

    (1) start -> PACKAGE VARIABLE import_stmt program .

    $end            reduce using rule 1 (start -> PACKAGE VARIABLE import_stmt program .)


state 8

    (4) program -> statement .
    (5) program -> statement . program
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_no_params_void
    (15) statement -> . func_with_map
    (16) statement -> . func_call
    (17) statement -> . if_stmt
    (18) statement -> . for_stmt
    (19) statement -> . struct_def
    (20) statement -> . switch_stmt
    (21) statement -> . map_declaration
    (22) statement -> . map_declaration_values
    (23) statement -> . array_declaration
    (24) statement -> . array_literal
    (25) statement -> . slice_declaration
    (26) statement -> . make_stmt
    (27) statement -> . new_stmt
    (28) statement -> . break_stmt
    (29) statement -> . increment_stmt
    (30) statement -> . return_stmt
    (31) declaration -> . VAR VARIABLE type
    (32) declaration -> . VAR VARIABLE type ASIG expression
    (33) declaration -> . VAR VARIABLE type ASSIGN expression
    (37) assignment -> . VARIABLE ASSIGN expression
    (38) assignment -> . VARIABLE ASIG expression
    (39) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (40) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (41) print_stmt -> . FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN
    (42) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (94) continue_stmt -> . CONTINUE
    (98) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (99) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (43) func_def -> . func_header func_body
    (48) func_no_params -> . func_header_no_params block
    (50) func_no_params_void -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (47) func_with_map -> . FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN
    (87) if_stmt -> . IF expression block
    (88) if_stmt -> . IF expression block ELSE block
    (89) for_stmt -> . FOR expression for_block
    (90) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update for_block
    (100) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (109) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (110) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (115) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (116) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (117) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE
    (125) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (129) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (130) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (131) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (134) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (135) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (121) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (122) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (138) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (139) break_stmt -> . BREAK
    (140) increment_stmt -> . VARIABLE INCREMENT
    (141) increment_stmt -> . VARIABLE DECREMENT
    (46) return_stmt -> . RETURN expression
    (44) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type
    (49) func_header_no_params -> . FUNC VARIABLE LPAREN RPAREN type

    $end            reduce using rule 4 (program -> statement .)
    RBRACE          reduce using rule 4 (program -> statement .)
    CASE            reduce using rule 4 (program -> statement .)
    DEFAULT         reduce using rule 4 (program -> statement .)
    VAR             shift and go to state 34
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 35
    CONTINUE        shift and go to state 36
    FUNC            shift and go to state 37
    IF              shift and go to state 41
    FOR             shift and go to state 42
    TYPE            shift and go to state 43
    SWITCH          shift and go to state 44
    LBRACKET        shift and go to state 40
    BREAK           shift and go to state 45
    RETURN          shift and go to state 46

    statement                      shift and go to state 8
    program                        shift and go to state 54
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_no_params_void            shift and go to state 17
    func_with_map                  shift and go to state 18
    func_call                      shift and go to state 19
    if_stmt                        shift and go to state 20
    for_stmt                       shift and go to state 21
    struct_def                     shift and go to state 22
    switch_stmt                    shift and go to state 23
    map_declaration                shift and go to state 24
    map_declaration_values         shift and go to state 25
    array_declaration              shift and go to state 26
    array_literal                  shift and go to state 27
    slice_declaration              shift and go to state 28
    make_stmt                      shift and go to state 29
    new_stmt                       shift and go to state 30
    break_stmt                     shift and go to state 31
    increment_stmt                 shift and go to state 32
    return_stmt                    shift and go to state 33
    func_header                    shift and go to state 38
    func_header_no_params          shift and go to state 39

state 9

    (6) statement -> declaration .

    VAR             reduce using rule 6 (statement -> declaration .)
    VARIABLE        reduce using rule 6 (statement -> declaration .)
    FMT             reduce using rule 6 (statement -> declaration .)
    CONTINUE        reduce using rule 6 (statement -> declaration .)
    FUNC            reduce using rule 6 (statement -> declaration .)
    IF              reduce using rule 6 (statement -> declaration .)
    FOR             reduce using rule 6 (statement -> declaration .)
    TYPE            reduce using rule 6 (statement -> declaration .)
    SWITCH          reduce using rule 6 (statement -> declaration .)
    LBRACKET        reduce using rule 6 (statement -> declaration .)
    BREAK           reduce using rule 6 (statement -> declaration .)
    RETURN          reduce using rule 6 (statement -> declaration .)
    $end            reduce using rule 6 (statement -> declaration .)
    RBRACE          reduce using rule 6 (statement -> declaration .)
    CASE            reduce using rule 6 (statement -> declaration .)
    DEFAULT         reduce using rule 6 (statement -> declaration .)


state 10

    (7) statement -> assignment .

    VAR             reduce using rule 7 (statement -> assignment .)
    VARIABLE        reduce using rule 7 (statement -> assignment .)
    FMT             reduce using rule 7 (statement -> assignment .)
    CONTINUE        reduce using rule 7 (statement -> assignment .)
    FUNC            reduce using rule 7 (statement -> assignment .)
    IF              reduce using rule 7 (statement -> assignment .)
    FOR             reduce using rule 7 (statement -> assignment .)
    TYPE            reduce using rule 7 (statement -> assignment .)
    SWITCH          reduce using rule 7 (statement -> assignment .)
    LBRACKET        reduce using rule 7 (statement -> assignment .)
    BREAK           reduce using rule 7 (statement -> assignment .)
    RETURN          reduce using rule 7 (statement -> assignment .)
    $end            reduce using rule 7 (statement -> assignment .)
    RBRACE          reduce using rule 7 (statement -> assignment .)
    CASE            reduce using rule 7 (statement -> assignment .)
    DEFAULT         reduce using rule 7 (statement -> assignment .)


state 11

    (8) statement -> print_stmt .

    VAR             reduce using rule 8 (statement -> print_stmt .)
    VARIABLE        reduce using rule 8 (statement -> print_stmt .)
    FMT             reduce using rule 8 (statement -> print_stmt .)
    CONTINUE        reduce using rule 8 (statement -> print_stmt .)
    FUNC            reduce using rule 8 (statement -> print_stmt .)
    IF              reduce using rule 8 (statement -> print_stmt .)
    FOR             reduce using rule 8 (statement -> print_stmt .)
    TYPE            reduce using rule 8 (statement -> print_stmt .)
    SWITCH          reduce using rule 8 (statement -> print_stmt .)
    LBRACKET        reduce using rule 8 (statement -> print_stmt .)
    BREAK           reduce using rule 8 (statement -> print_stmt .)
    RETURN          reduce using rule 8 (statement -> print_stmt .)
    $end            reduce using rule 8 (statement -> print_stmt .)
    RBRACE          reduce using rule 8 (statement -> print_stmt .)
    CASE            reduce using rule 8 (statement -> print_stmt .)
    DEFAULT         reduce using rule 8 (statement -> print_stmt .)


state 12

    (9) statement -> input_stmt .

    VAR             reduce using rule 9 (statement -> input_stmt .)
    VARIABLE        reduce using rule 9 (statement -> input_stmt .)
    FMT             reduce using rule 9 (statement -> input_stmt .)
    CONTINUE        reduce using rule 9 (statement -> input_stmt .)
    FUNC            reduce using rule 9 (statement -> input_stmt .)
    IF              reduce using rule 9 (statement -> input_stmt .)
    FOR             reduce using rule 9 (statement -> input_stmt .)
    TYPE            reduce using rule 9 (statement -> input_stmt .)
    SWITCH          reduce using rule 9 (statement -> input_stmt .)
    LBRACKET        reduce using rule 9 (statement -> input_stmt .)
    BREAK           reduce using rule 9 (statement -> input_stmt .)
    RETURN          reduce using rule 9 (statement -> input_stmt .)
    $end            reduce using rule 9 (statement -> input_stmt .)
    RBRACE          reduce using rule 9 (statement -> input_stmt .)
    CASE            reduce using rule 9 (statement -> input_stmt .)
    DEFAULT         reduce using rule 9 (statement -> input_stmt .)


state 13

    (10) statement -> continue_stmt .

    VAR             reduce using rule 10 (statement -> continue_stmt .)
    VARIABLE        reduce using rule 10 (statement -> continue_stmt .)
    FMT             reduce using rule 10 (statement -> continue_stmt .)
    CONTINUE        reduce using rule 10 (statement -> continue_stmt .)
    FUNC            reduce using rule 10 (statement -> continue_stmt .)
    IF              reduce using rule 10 (statement -> continue_stmt .)
    FOR             reduce using rule 10 (statement -> continue_stmt .)
    TYPE            reduce using rule 10 (statement -> continue_stmt .)
    SWITCH          reduce using rule 10 (statement -> continue_stmt .)
    LBRACKET        reduce using rule 10 (statement -> continue_stmt .)
    BREAK           reduce using rule 10 (statement -> continue_stmt .)
    RETURN          reduce using rule 10 (statement -> continue_stmt .)
    $end            reduce using rule 10 (statement -> continue_stmt .)
    RBRACE          reduce using rule 10 (statement -> continue_stmt .)
    CASE            reduce using rule 10 (statement -> continue_stmt .)
    DEFAULT         reduce using rule 10 (statement -> continue_stmt .)


state 14

    (11) statement -> struct_method .

    VAR             reduce using rule 11 (statement -> struct_method .)
    VARIABLE        reduce using rule 11 (statement -> struct_method .)
    FMT             reduce using rule 11 (statement -> struct_method .)
    CONTINUE        reduce using rule 11 (statement -> struct_method .)
    FUNC            reduce using rule 11 (statement -> struct_method .)
    IF              reduce using rule 11 (statement -> struct_method .)
    FOR             reduce using rule 11 (statement -> struct_method .)
    TYPE            reduce using rule 11 (statement -> struct_method .)
    SWITCH          reduce using rule 11 (statement -> struct_method .)
    LBRACKET        reduce using rule 11 (statement -> struct_method .)
    BREAK           reduce using rule 11 (statement -> struct_method .)
    RETURN          reduce using rule 11 (statement -> struct_method .)
    $end            reduce using rule 11 (statement -> struct_method .)
    RBRACE          reduce using rule 11 (statement -> struct_method .)
    CASE            reduce using rule 11 (statement -> struct_method .)
    DEFAULT         reduce using rule 11 (statement -> struct_method .)


state 15

    (12) statement -> func_def .

    VAR             reduce using rule 12 (statement -> func_def .)
    VARIABLE        reduce using rule 12 (statement -> func_def .)
    FMT             reduce using rule 12 (statement -> func_def .)
    CONTINUE        reduce using rule 12 (statement -> func_def .)
    FUNC            reduce using rule 12 (statement -> func_def .)
    IF              reduce using rule 12 (statement -> func_def .)
    FOR             reduce using rule 12 (statement -> func_def .)
    TYPE            reduce using rule 12 (statement -> func_def .)
    SWITCH          reduce using rule 12 (statement -> func_def .)
    LBRACKET        reduce using rule 12 (statement -> func_def .)
    BREAK           reduce using rule 12 (statement -> func_def .)
    RETURN          reduce using rule 12 (statement -> func_def .)
    $end            reduce using rule 12 (statement -> func_def .)
    RBRACE          reduce using rule 12 (statement -> func_def .)
    CASE            reduce using rule 12 (statement -> func_def .)
    DEFAULT         reduce using rule 12 (statement -> func_def .)


state 16

    (13) statement -> func_no_params .

    VAR             reduce using rule 13 (statement -> func_no_params .)
    VARIABLE        reduce using rule 13 (statement -> func_no_params .)
    FMT             reduce using rule 13 (statement -> func_no_params .)
    CONTINUE        reduce using rule 13 (statement -> func_no_params .)
    FUNC            reduce using rule 13 (statement -> func_no_params .)
    IF              reduce using rule 13 (statement -> func_no_params .)
    FOR             reduce using rule 13 (statement -> func_no_params .)
    TYPE            reduce using rule 13 (statement -> func_no_params .)
    SWITCH          reduce using rule 13 (statement -> func_no_params .)
    LBRACKET        reduce using rule 13 (statement -> func_no_params .)
    BREAK           reduce using rule 13 (statement -> func_no_params .)
    RETURN          reduce using rule 13 (statement -> func_no_params .)
    $end            reduce using rule 13 (statement -> func_no_params .)
    RBRACE          reduce using rule 13 (statement -> func_no_params .)
    CASE            reduce using rule 13 (statement -> func_no_params .)
    DEFAULT         reduce using rule 13 (statement -> func_no_params .)


state 17

    (14) statement -> func_no_params_void .

    VAR             reduce using rule 14 (statement -> func_no_params_void .)
    VARIABLE        reduce using rule 14 (statement -> func_no_params_void .)
    FMT             reduce using rule 14 (statement -> func_no_params_void .)
    CONTINUE        reduce using rule 14 (statement -> func_no_params_void .)
    FUNC            reduce using rule 14 (statement -> func_no_params_void .)
    IF              reduce using rule 14 (statement -> func_no_params_void .)
    FOR             reduce using rule 14 (statement -> func_no_params_void .)
    TYPE            reduce using rule 14 (statement -> func_no_params_void .)
    SWITCH          reduce using rule 14 (statement -> func_no_params_void .)
    LBRACKET        reduce using rule 14 (statement -> func_no_params_void .)
    BREAK           reduce using rule 14 (statement -> func_no_params_void .)
    RETURN          reduce using rule 14 (statement -> func_no_params_void .)
    $end            reduce using rule 14 (statement -> func_no_params_void .)
    RBRACE          reduce using rule 14 (statement -> func_no_params_void .)
    CASE            reduce using rule 14 (statement -> func_no_params_void .)
    DEFAULT         reduce using rule 14 (statement -> func_no_params_void .)


state 18

    (15) statement -> func_with_map .

    VAR             reduce using rule 15 (statement -> func_with_map .)
    VARIABLE        reduce using rule 15 (statement -> func_with_map .)
    FMT             reduce using rule 15 (statement -> func_with_map .)
    CONTINUE        reduce using rule 15 (statement -> func_with_map .)
    FUNC            reduce using rule 15 (statement -> func_with_map .)
    IF              reduce using rule 15 (statement -> func_with_map .)
    FOR             reduce using rule 15 (statement -> func_with_map .)
    TYPE            reduce using rule 15 (statement -> func_with_map .)
    SWITCH          reduce using rule 15 (statement -> func_with_map .)
    LBRACKET        reduce using rule 15 (statement -> func_with_map .)
    BREAK           reduce using rule 15 (statement -> func_with_map .)
    RETURN          reduce using rule 15 (statement -> func_with_map .)
    $end            reduce using rule 15 (statement -> func_with_map .)
    RBRACE          reduce using rule 15 (statement -> func_with_map .)
    CASE            reduce using rule 15 (statement -> func_with_map .)
    DEFAULT         reduce using rule 15 (statement -> func_with_map .)


state 19

    (16) statement -> func_call .

    VAR             reduce using rule 16 (statement -> func_call .)
    VARIABLE        reduce using rule 16 (statement -> func_call .)
    FMT             reduce using rule 16 (statement -> func_call .)
    CONTINUE        reduce using rule 16 (statement -> func_call .)
    FUNC            reduce using rule 16 (statement -> func_call .)
    IF              reduce using rule 16 (statement -> func_call .)
    FOR             reduce using rule 16 (statement -> func_call .)
    TYPE            reduce using rule 16 (statement -> func_call .)
    SWITCH          reduce using rule 16 (statement -> func_call .)
    LBRACKET        reduce using rule 16 (statement -> func_call .)
    BREAK           reduce using rule 16 (statement -> func_call .)
    RETURN          reduce using rule 16 (statement -> func_call .)
    $end            reduce using rule 16 (statement -> func_call .)
    RBRACE          reduce using rule 16 (statement -> func_call .)
    CASE            reduce using rule 16 (statement -> func_call .)
    DEFAULT         reduce using rule 16 (statement -> func_call .)


state 20

    (17) statement -> if_stmt .

    VAR             reduce using rule 17 (statement -> if_stmt .)
    VARIABLE        reduce using rule 17 (statement -> if_stmt .)
    FMT             reduce using rule 17 (statement -> if_stmt .)
    CONTINUE        reduce using rule 17 (statement -> if_stmt .)
    FUNC            reduce using rule 17 (statement -> if_stmt .)
    IF              reduce using rule 17 (statement -> if_stmt .)
    FOR             reduce using rule 17 (statement -> if_stmt .)
    TYPE            reduce using rule 17 (statement -> if_stmt .)
    SWITCH          reduce using rule 17 (statement -> if_stmt .)
    LBRACKET        reduce using rule 17 (statement -> if_stmt .)
    BREAK           reduce using rule 17 (statement -> if_stmt .)
    RETURN          reduce using rule 17 (statement -> if_stmt .)
    $end            reduce using rule 17 (statement -> if_stmt .)
    RBRACE          reduce using rule 17 (statement -> if_stmt .)
    CASE            reduce using rule 17 (statement -> if_stmt .)
    DEFAULT         reduce using rule 17 (statement -> if_stmt .)


state 21

    (18) statement -> for_stmt .

    VAR             reduce using rule 18 (statement -> for_stmt .)
    VARIABLE        reduce using rule 18 (statement -> for_stmt .)
    FMT             reduce using rule 18 (statement -> for_stmt .)
    CONTINUE        reduce using rule 18 (statement -> for_stmt .)
    FUNC            reduce using rule 18 (statement -> for_stmt .)
    IF              reduce using rule 18 (statement -> for_stmt .)
    FOR             reduce using rule 18 (statement -> for_stmt .)
    TYPE            reduce using rule 18 (statement -> for_stmt .)
    SWITCH          reduce using rule 18 (statement -> for_stmt .)
    LBRACKET        reduce using rule 18 (statement -> for_stmt .)
    BREAK           reduce using rule 18 (statement -> for_stmt .)
    RETURN          reduce using rule 18 (statement -> for_stmt .)
    $end            reduce using rule 18 (statement -> for_stmt .)
    RBRACE          reduce using rule 18 (statement -> for_stmt .)
    CASE            reduce using rule 18 (statement -> for_stmt .)
    DEFAULT         reduce using rule 18 (statement -> for_stmt .)


state 22

    (19) statement -> struct_def .

    VAR             reduce using rule 19 (statement -> struct_def .)
    VARIABLE        reduce using rule 19 (statement -> struct_def .)
    FMT             reduce using rule 19 (statement -> struct_def .)
    CONTINUE        reduce using rule 19 (statement -> struct_def .)
    FUNC            reduce using rule 19 (statement -> struct_def .)
    IF              reduce using rule 19 (statement -> struct_def .)
    FOR             reduce using rule 19 (statement -> struct_def .)
    TYPE            reduce using rule 19 (statement -> struct_def .)
    SWITCH          reduce using rule 19 (statement -> struct_def .)
    LBRACKET        reduce using rule 19 (statement -> struct_def .)
    BREAK           reduce using rule 19 (statement -> struct_def .)
    RETURN          reduce using rule 19 (statement -> struct_def .)
    $end            reduce using rule 19 (statement -> struct_def .)
    RBRACE          reduce using rule 19 (statement -> struct_def .)
    CASE            reduce using rule 19 (statement -> struct_def .)
    DEFAULT         reduce using rule 19 (statement -> struct_def .)


state 23

    (20) statement -> switch_stmt .

    VAR             reduce using rule 20 (statement -> switch_stmt .)
    VARIABLE        reduce using rule 20 (statement -> switch_stmt .)
    FMT             reduce using rule 20 (statement -> switch_stmt .)
    CONTINUE        reduce using rule 20 (statement -> switch_stmt .)
    FUNC            reduce using rule 20 (statement -> switch_stmt .)
    IF              reduce using rule 20 (statement -> switch_stmt .)
    FOR             reduce using rule 20 (statement -> switch_stmt .)
    TYPE            reduce using rule 20 (statement -> switch_stmt .)
    SWITCH          reduce using rule 20 (statement -> switch_stmt .)
    LBRACKET        reduce using rule 20 (statement -> switch_stmt .)
    BREAK           reduce using rule 20 (statement -> switch_stmt .)
    RETURN          reduce using rule 20 (statement -> switch_stmt .)
    $end            reduce using rule 20 (statement -> switch_stmt .)
    RBRACE          reduce using rule 20 (statement -> switch_stmt .)
    CASE            reduce using rule 20 (statement -> switch_stmt .)
    DEFAULT         reduce using rule 20 (statement -> switch_stmt .)


state 24

    (21) statement -> map_declaration .

    VAR             reduce using rule 21 (statement -> map_declaration .)
    VARIABLE        reduce using rule 21 (statement -> map_declaration .)
    FMT             reduce using rule 21 (statement -> map_declaration .)
    CONTINUE        reduce using rule 21 (statement -> map_declaration .)
    FUNC            reduce using rule 21 (statement -> map_declaration .)
    IF              reduce using rule 21 (statement -> map_declaration .)
    FOR             reduce using rule 21 (statement -> map_declaration .)
    TYPE            reduce using rule 21 (statement -> map_declaration .)
    SWITCH          reduce using rule 21 (statement -> map_declaration .)
    LBRACKET        reduce using rule 21 (statement -> map_declaration .)
    BREAK           reduce using rule 21 (statement -> map_declaration .)
    RETURN          reduce using rule 21 (statement -> map_declaration .)
    $end            reduce using rule 21 (statement -> map_declaration .)
    RBRACE          reduce using rule 21 (statement -> map_declaration .)
    CASE            reduce using rule 21 (statement -> map_declaration .)
    DEFAULT         reduce using rule 21 (statement -> map_declaration .)


state 25

    (22) statement -> map_declaration_values .

    VAR             reduce using rule 22 (statement -> map_declaration_values .)
    VARIABLE        reduce using rule 22 (statement -> map_declaration_values .)
    FMT             reduce using rule 22 (statement -> map_declaration_values .)
    CONTINUE        reduce using rule 22 (statement -> map_declaration_values .)
    FUNC            reduce using rule 22 (statement -> map_declaration_values .)
    IF              reduce using rule 22 (statement -> map_declaration_values .)
    FOR             reduce using rule 22 (statement -> map_declaration_values .)
    TYPE            reduce using rule 22 (statement -> map_declaration_values .)
    SWITCH          reduce using rule 22 (statement -> map_declaration_values .)
    LBRACKET        reduce using rule 22 (statement -> map_declaration_values .)
    BREAK           reduce using rule 22 (statement -> map_declaration_values .)
    RETURN          reduce using rule 22 (statement -> map_declaration_values .)
    $end            reduce using rule 22 (statement -> map_declaration_values .)
    RBRACE          reduce using rule 22 (statement -> map_declaration_values .)
    CASE            reduce using rule 22 (statement -> map_declaration_values .)
    DEFAULT         reduce using rule 22 (statement -> map_declaration_values .)


state 26

    (23) statement -> array_declaration .

    VAR             reduce using rule 23 (statement -> array_declaration .)
    VARIABLE        reduce using rule 23 (statement -> array_declaration .)
    FMT             reduce using rule 23 (statement -> array_declaration .)
    CONTINUE        reduce using rule 23 (statement -> array_declaration .)
    FUNC            reduce using rule 23 (statement -> array_declaration .)
    IF              reduce using rule 23 (statement -> array_declaration .)
    FOR             reduce using rule 23 (statement -> array_declaration .)
    TYPE            reduce using rule 23 (statement -> array_declaration .)
    SWITCH          reduce using rule 23 (statement -> array_declaration .)
    LBRACKET        reduce using rule 23 (statement -> array_declaration .)
    BREAK           reduce using rule 23 (statement -> array_declaration .)
    RETURN          reduce using rule 23 (statement -> array_declaration .)
    $end            reduce using rule 23 (statement -> array_declaration .)
    RBRACE          reduce using rule 23 (statement -> array_declaration .)
    CASE            reduce using rule 23 (statement -> array_declaration .)
    DEFAULT         reduce using rule 23 (statement -> array_declaration .)


state 27

    (24) statement -> array_literal .

    VAR             reduce using rule 24 (statement -> array_literal .)
    VARIABLE        reduce using rule 24 (statement -> array_literal .)
    FMT             reduce using rule 24 (statement -> array_literal .)
    CONTINUE        reduce using rule 24 (statement -> array_literal .)
    FUNC            reduce using rule 24 (statement -> array_literal .)
    IF              reduce using rule 24 (statement -> array_literal .)
    FOR             reduce using rule 24 (statement -> array_literal .)
    TYPE            reduce using rule 24 (statement -> array_literal .)
    SWITCH          reduce using rule 24 (statement -> array_literal .)
    LBRACKET        reduce using rule 24 (statement -> array_literal .)
    BREAK           reduce using rule 24 (statement -> array_literal .)
    RETURN          reduce using rule 24 (statement -> array_literal .)
    $end            reduce using rule 24 (statement -> array_literal .)
    RBRACE          reduce using rule 24 (statement -> array_literal .)
    CASE            reduce using rule 24 (statement -> array_literal .)
    DEFAULT         reduce using rule 24 (statement -> array_literal .)


state 28

    (25) statement -> slice_declaration .

    VAR             reduce using rule 25 (statement -> slice_declaration .)
    VARIABLE        reduce using rule 25 (statement -> slice_declaration .)
    FMT             reduce using rule 25 (statement -> slice_declaration .)
    CONTINUE        reduce using rule 25 (statement -> slice_declaration .)
    FUNC            reduce using rule 25 (statement -> slice_declaration .)
    IF              reduce using rule 25 (statement -> slice_declaration .)
    FOR             reduce using rule 25 (statement -> slice_declaration .)
    TYPE            reduce using rule 25 (statement -> slice_declaration .)
    SWITCH          reduce using rule 25 (statement -> slice_declaration .)
    LBRACKET        reduce using rule 25 (statement -> slice_declaration .)
    BREAK           reduce using rule 25 (statement -> slice_declaration .)
    RETURN          reduce using rule 25 (statement -> slice_declaration .)
    $end            reduce using rule 25 (statement -> slice_declaration .)
    RBRACE          reduce using rule 25 (statement -> slice_declaration .)
    CASE            reduce using rule 25 (statement -> slice_declaration .)
    DEFAULT         reduce using rule 25 (statement -> slice_declaration .)


state 29

    (26) statement -> make_stmt .

    VAR             reduce using rule 26 (statement -> make_stmt .)
    VARIABLE        reduce using rule 26 (statement -> make_stmt .)
    FMT             reduce using rule 26 (statement -> make_stmt .)
    CONTINUE        reduce using rule 26 (statement -> make_stmt .)
    FUNC            reduce using rule 26 (statement -> make_stmt .)
    IF              reduce using rule 26 (statement -> make_stmt .)
    FOR             reduce using rule 26 (statement -> make_stmt .)
    TYPE            reduce using rule 26 (statement -> make_stmt .)
    SWITCH          reduce using rule 26 (statement -> make_stmt .)
    LBRACKET        reduce using rule 26 (statement -> make_stmt .)
    BREAK           reduce using rule 26 (statement -> make_stmt .)
    RETURN          reduce using rule 26 (statement -> make_stmt .)
    $end            reduce using rule 26 (statement -> make_stmt .)
    RBRACE          reduce using rule 26 (statement -> make_stmt .)
    CASE            reduce using rule 26 (statement -> make_stmt .)
    DEFAULT         reduce using rule 26 (statement -> make_stmt .)


state 30

    (27) statement -> new_stmt .

    VAR             reduce using rule 27 (statement -> new_stmt .)
    VARIABLE        reduce using rule 27 (statement -> new_stmt .)
    FMT             reduce using rule 27 (statement -> new_stmt .)
    CONTINUE        reduce using rule 27 (statement -> new_stmt .)
    FUNC            reduce using rule 27 (statement -> new_stmt .)
    IF              reduce using rule 27 (statement -> new_stmt .)
    FOR             reduce using rule 27 (statement -> new_stmt .)
    TYPE            reduce using rule 27 (statement -> new_stmt .)
    SWITCH          reduce using rule 27 (statement -> new_stmt .)
    LBRACKET        reduce using rule 27 (statement -> new_stmt .)
    BREAK           reduce using rule 27 (statement -> new_stmt .)
    RETURN          reduce using rule 27 (statement -> new_stmt .)
    $end            reduce using rule 27 (statement -> new_stmt .)
    RBRACE          reduce using rule 27 (statement -> new_stmt .)
    CASE            reduce using rule 27 (statement -> new_stmt .)
    DEFAULT         reduce using rule 27 (statement -> new_stmt .)


state 31

    (28) statement -> break_stmt .

    VAR             reduce using rule 28 (statement -> break_stmt .)
    VARIABLE        reduce using rule 28 (statement -> break_stmt .)
    FMT             reduce using rule 28 (statement -> break_stmt .)
    CONTINUE        reduce using rule 28 (statement -> break_stmt .)
    FUNC            reduce using rule 28 (statement -> break_stmt .)
    IF              reduce using rule 28 (statement -> break_stmt .)
    FOR             reduce using rule 28 (statement -> break_stmt .)
    TYPE            reduce using rule 28 (statement -> break_stmt .)
    SWITCH          reduce using rule 28 (statement -> break_stmt .)
    LBRACKET        reduce using rule 28 (statement -> break_stmt .)
    BREAK           reduce using rule 28 (statement -> break_stmt .)
    RETURN          reduce using rule 28 (statement -> break_stmt .)
    $end            reduce using rule 28 (statement -> break_stmt .)
    RBRACE          reduce using rule 28 (statement -> break_stmt .)
    CASE            reduce using rule 28 (statement -> break_stmt .)
    DEFAULT         reduce using rule 28 (statement -> break_stmt .)


state 32

    (29) statement -> increment_stmt .

    VAR             reduce using rule 29 (statement -> increment_stmt .)
    VARIABLE        reduce using rule 29 (statement -> increment_stmt .)
    FMT             reduce using rule 29 (statement -> increment_stmt .)
    CONTINUE        reduce using rule 29 (statement -> increment_stmt .)
    FUNC            reduce using rule 29 (statement -> increment_stmt .)
    IF              reduce using rule 29 (statement -> increment_stmt .)
    FOR             reduce using rule 29 (statement -> increment_stmt .)
    TYPE            reduce using rule 29 (statement -> increment_stmt .)
    SWITCH          reduce using rule 29 (statement -> increment_stmt .)
    LBRACKET        reduce using rule 29 (statement -> increment_stmt .)
    BREAK           reduce using rule 29 (statement -> increment_stmt .)
    RETURN          reduce using rule 29 (statement -> increment_stmt .)
    $end            reduce using rule 29 (statement -> increment_stmt .)
    RBRACE          reduce using rule 29 (statement -> increment_stmt .)
    CASE            reduce using rule 29 (statement -> increment_stmt .)
    DEFAULT         reduce using rule 29 (statement -> increment_stmt .)


state 33

    (30) statement -> return_stmt .

    VAR             reduce using rule 30 (statement -> return_stmt .)
    VARIABLE        reduce using rule 30 (statement -> return_stmt .)
    FMT             reduce using rule 30 (statement -> return_stmt .)
    CONTINUE        reduce using rule 30 (statement -> return_stmt .)
    FUNC            reduce using rule 30 (statement -> return_stmt .)
    IF              reduce using rule 30 (statement -> return_stmt .)
    FOR             reduce using rule 30 (statement -> return_stmt .)
    TYPE            reduce using rule 30 (statement -> return_stmt .)
    SWITCH          reduce using rule 30 (statement -> return_stmt .)
    LBRACKET        reduce using rule 30 (statement -> return_stmt .)
    BREAK           reduce using rule 30 (statement -> return_stmt .)
    RETURN          reduce using rule 30 (statement -> return_stmt .)
    $end            reduce using rule 30 (statement -> return_stmt .)
    RBRACE          reduce using rule 30 (statement -> return_stmt .)
    CASE            reduce using rule 30 (statement -> return_stmt .)
    DEFAULT         reduce using rule 30 (statement -> return_stmt .)


state 34

    (31) declaration -> VAR . VARIABLE type
    (32) declaration -> VAR . VARIABLE type ASIG expression
    (33) declaration -> VAR . VARIABLE type ASSIGN expression
    (115) map_declaration -> VAR . VARIABLE MAP LBRACKET type RBRACKET type
    (129) array_declaration -> VAR . VARIABLE LBRACKET NUMBER RBRACKET type
    (130) array_declaration -> VAR . VARIABLE ASSIGN array_literal
    (134) slice_declaration -> VAR . VARIABLE LBRACKET RBRACKET type

    VARIABLE        shift and go to state 55


state 35

    (39) print_stmt -> FMT . DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (40) print_stmt -> FMT . DOT PRINTLN LPAREN expression RPAREN
    (41) print_stmt -> FMT . DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN
    (42) input_stmt -> FMT . DOT SCANLN LPAREN AMPER VARIABLE RPAREN

    DOT             shift and go to state 56


state 36

    (94) continue_stmt -> CONTINUE .

    VAR             reduce using rule 94 (continue_stmt -> CONTINUE .)
    VARIABLE        reduce using rule 94 (continue_stmt -> CONTINUE .)
    FMT             reduce using rule 94 (continue_stmt -> CONTINUE .)
    CONTINUE        reduce using rule 94 (continue_stmt -> CONTINUE .)
    FUNC            reduce using rule 94 (continue_stmt -> CONTINUE .)
    IF              reduce using rule 94 (continue_stmt -> CONTINUE .)
    FOR             reduce using rule 94 (continue_stmt -> CONTINUE .)
    TYPE            reduce using rule 94 (continue_stmt -> CONTINUE .)
    SWITCH          reduce using rule 94 (continue_stmt -> CONTINUE .)
    LBRACKET        reduce using rule 94 (continue_stmt -> CONTINUE .)
    BREAK           reduce using rule 94 (continue_stmt -> CONTINUE .)
    RETURN          reduce using rule 94 (continue_stmt -> CONTINUE .)
    $end            reduce using rule 94 (continue_stmt -> CONTINUE .)
    RBRACE          reduce using rule 94 (continue_stmt -> CONTINUE .)
    CASE            reduce using rule 94 (continue_stmt -> CONTINUE .)
    DEFAULT         reduce using rule 94 (continue_stmt -> CONTINUE .)


state 37

    (98) struct_method -> FUNC . LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (99) struct_method -> FUNC . LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (50) func_no_params_void -> FUNC . VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (47) func_with_map -> FUNC . VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body
    (44) func_header -> FUNC . VARIABLE LPAREN param_list RPAREN type
    (49) func_header_no_params -> FUNC . VARIABLE LPAREN RPAREN type

    LPAREN          shift and go to state 57
    VARIABLE        shift and go to state 58


state 38

    (43) func_def -> func_header . func_body
    (45) func_body -> . LBRACE program RBRACE

    LBRACE          shift and go to state 60

    func_body                      shift and go to state 59

state 39

    (48) func_no_params -> func_header_no_params . block
    (97) block -> . LBRACE program RBRACE

    LBRACE          shift and go to state 62

    block                          shift and go to state 61

state 40

    (131) array_literal -> LBRACKET . NUMBER RBRACKET type LBRACE array_values RBRACE

    NUMBER          shift and go to state 63


state 41

    (87) if_stmt -> IF . expression block
    (88) if_stmt -> IF . expression block ELSE block
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 64
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 42

    (89) for_stmt -> FOR . expression for_block
    (90) for_stmt -> FOR . assignment SEMICOLON expression SEMICOLON for_update for_block
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (37) assignment -> . VARIABLE ASSIGN expression
    (38) assignment -> . VARIABLE ASIG expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 80
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 78
    assignment                     shift and go to state 79
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 43

    (100) struct_def -> TYPE . VARIABLE STRUCT LBRACE struct_fields RBRACE

    VARIABLE        shift and go to state 81


state 44

    (109) switch_stmt -> SWITCH . expression LBRACE case_list RBRACE
    (110) switch_stmt -> SWITCH . LBRACE case_list RBRACE
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    LBRACE          shift and go to state 83
    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 82
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 45

    (139) break_stmt -> BREAK .

    VAR             reduce using rule 139 (break_stmt -> BREAK .)
    VARIABLE        reduce using rule 139 (break_stmt -> BREAK .)
    FMT             reduce using rule 139 (break_stmt -> BREAK .)
    CONTINUE        reduce using rule 139 (break_stmt -> BREAK .)
    FUNC            reduce using rule 139 (break_stmt -> BREAK .)
    IF              reduce using rule 139 (break_stmt -> BREAK .)
    FOR             reduce using rule 139 (break_stmt -> BREAK .)
    TYPE            reduce using rule 139 (break_stmt -> BREAK .)
    SWITCH          reduce using rule 139 (break_stmt -> BREAK .)
    LBRACKET        reduce using rule 139 (break_stmt -> BREAK .)
    BREAK           reduce using rule 139 (break_stmt -> BREAK .)
    RETURN          reduce using rule 139 (break_stmt -> BREAK .)
    $end            reduce using rule 139 (break_stmt -> BREAK .)
    RBRACE          reduce using rule 139 (break_stmt -> BREAK .)
    CASE            reduce using rule 139 (break_stmt -> BREAK .)
    DEFAULT         reduce using rule 139 (break_stmt -> BREAK .)


state 46

    (46) return_stmt -> RETURN . expression
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 84
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 47

    (2) import_stmt -> IMPORT LPAREN . STRING RPAREN

    STRING          shift and go to state 85


state 48

    (3) import_stmt -> IMPORT STRING .

    VAR             reduce using rule 3 (import_stmt -> IMPORT STRING .)
    VARIABLE        reduce using rule 3 (import_stmt -> IMPORT STRING .)
    FMT             reduce using rule 3 (import_stmt -> IMPORT STRING .)
    CONTINUE        reduce using rule 3 (import_stmt -> IMPORT STRING .)
    FUNC            reduce using rule 3 (import_stmt -> IMPORT STRING .)
    IF              reduce using rule 3 (import_stmt -> IMPORT STRING .)
    FOR             reduce using rule 3 (import_stmt -> IMPORT STRING .)
    TYPE            reduce using rule 3 (import_stmt -> IMPORT STRING .)
    SWITCH          reduce using rule 3 (import_stmt -> IMPORT STRING .)
    LBRACKET        reduce using rule 3 (import_stmt -> IMPORT STRING .)
    BREAK           reduce using rule 3 (import_stmt -> IMPORT STRING .)
    RETURN          reduce using rule 3 (import_stmt -> IMPORT STRING .)


state 49

    (37) assignment -> VARIABLE ASSIGN . expression
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 86
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 50

    (38) assignment -> VARIABLE ASIG . expression
    (116) map_declaration -> VARIABLE ASIG . MAP LBRACKET type RBRACKET type
    (117) map_declaration -> VARIABLE ASIG . MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE
    (125) map_declaration_values -> VARIABLE ASIG . MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (135) slice_declaration -> VARIABLE ASIG . LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (121) make_stmt -> VARIABLE ASIG . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (122) make_stmt -> VARIABLE ASIG . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (138) new_stmt -> VARIABLE ASIG . NEW LPAREN VARIABLE RPAREN
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    MAP             shift and go to state 88
    LBRACKET        shift and go to state 89
    MAKE            shift and go to state 90
    NEW             shift and go to state 91
    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73

    expression                     shift and go to state 87
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 51

    (51) func_call -> VARIABLE LPAREN . arg_list RPAREN
    (52) func_call -> VARIABLE LPAREN . RPAREN
    (56) arg_list -> . expression
    (57) arg_list -> . expression COMMA arg_list
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    RPAREN          shift and go to state 93
    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    arg_list                       shift and go to state 92
    expression                     shift and go to state 94
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 52

    (140) increment_stmt -> VARIABLE INCREMENT .

    VAR             reduce using rule 140 (increment_stmt -> VARIABLE INCREMENT .)
    VARIABLE        reduce using rule 140 (increment_stmt -> VARIABLE INCREMENT .)
    FMT             reduce using rule 140 (increment_stmt -> VARIABLE INCREMENT .)
    CONTINUE        reduce using rule 140 (increment_stmt -> VARIABLE INCREMENT .)
    FUNC            reduce using rule 140 (increment_stmt -> VARIABLE INCREMENT .)
    IF              reduce using rule 140 (increment_stmt -> VARIABLE INCREMENT .)
    FOR             reduce using rule 140 (increment_stmt -> VARIABLE INCREMENT .)
    TYPE            reduce using rule 140 (increment_stmt -> VARIABLE INCREMENT .)
    SWITCH          reduce using rule 140 (increment_stmt -> VARIABLE INCREMENT .)
    LBRACKET        reduce using rule 140 (increment_stmt -> VARIABLE INCREMENT .)
    BREAK           reduce using rule 140 (increment_stmt -> VARIABLE INCREMENT .)
    RETURN          reduce using rule 140 (increment_stmt -> VARIABLE INCREMENT .)
    $end            reduce using rule 140 (increment_stmt -> VARIABLE INCREMENT .)
    RBRACE          reduce using rule 140 (increment_stmt -> VARIABLE INCREMENT .)
    CASE            reduce using rule 140 (increment_stmt -> VARIABLE INCREMENT .)
    DEFAULT         reduce using rule 140 (increment_stmt -> VARIABLE INCREMENT .)
    LBRACE          reduce using rule 140 (increment_stmt -> VARIABLE INCREMENT .)


state 53

    (141) increment_stmt -> VARIABLE DECREMENT .

    VAR             reduce using rule 141 (increment_stmt -> VARIABLE DECREMENT .)
    VARIABLE        reduce using rule 141 (increment_stmt -> VARIABLE DECREMENT .)
    FMT             reduce using rule 141 (increment_stmt -> VARIABLE DECREMENT .)
    CONTINUE        reduce using rule 141 (increment_stmt -> VARIABLE DECREMENT .)
    FUNC            reduce using rule 141 (increment_stmt -> VARIABLE DECREMENT .)
    IF              reduce using rule 141 (increment_stmt -> VARIABLE DECREMENT .)
    FOR             reduce using rule 141 (increment_stmt -> VARIABLE DECREMENT .)
    TYPE            reduce using rule 141 (increment_stmt -> VARIABLE DECREMENT .)
    SWITCH          reduce using rule 141 (increment_stmt -> VARIABLE DECREMENT .)
    LBRACKET        reduce using rule 141 (increment_stmt -> VARIABLE DECREMENT .)
    BREAK           reduce using rule 141 (increment_stmt -> VARIABLE DECREMENT .)
    RETURN          reduce using rule 141 (increment_stmt -> VARIABLE DECREMENT .)
    $end            reduce using rule 141 (increment_stmt -> VARIABLE DECREMENT .)
    RBRACE          reduce using rule 141 (increment_stmt -> VARIABLE DECREMENT .)
    CASE            reduce using rule 141 (increment_stmt -> VARIABLE DECREMENT .)
    DEFAULT         reduce using rule 141 (increment_stmt -> VARIABLE DECREMENT .)
    LBRACE          reduce using rule 141 (increment_stmt -> VARIABLE DECREMENT .)


state 54

    (5) program -> statement program .

    $end            reduce using rule 5 (program -> statement program .)
    RBRACE          reduce using rule 5 (program -> statement program .)
    CASE            reduce using rule 5 (program -> statement program .)
    DEFAULT         reduce using rule 5 (program -> statement program .)


state 55

    (31) declaration -> VAR VARIABLE . type
    (32) declaration -> VAR VARIABLE . type ASIG expression
    (33) declaration -> VAR VARIABLE . type ASSIGN expression
    (115) map_declaration -> VAR VARIABLE . MAP LBRACKET type RBRACKET type
    (129) array_declaration -> VAR VARIABLE . LBRACKET NUMBER RBRACKET type
    (130) array_declaration -> VAR VARIABLE . ASSIGN array_literal
    (134) slice_declaration -> VAR VARIABLE . LBRACKET RBRACKET type
    (83) type -> . INT_TYPE
    (84) type -> . FLOAT64_TYPE
    (85) type -> . STRING_TYPE
    (86) type -> . BOOL_TYPE

    MAP             shift and go to state 97
    LBRACKET        shift and go to state 98
    ASSIGN          shift and go to state 96
    INT_TYPE        shift and go to state 99
    FLOAT64_TYPE    shift and go to state 100
    STRING_TYPE     shift and go to state 101
    BOOL_TYPE       shift and go to state 102

    type                           shift and go to state 95

state 56

    (39) print_stmt -> FMT DOT . PRINTF LPAREN STRING COMMA expression RPAREN
    (40) print_stmt -> FMT DOT . PRINTLN LPAREN expression RPAREN
    (41) print_stmt -> FMT DOT . PRINTLN LPAREN STRING COMMA VARIABLE RPAREN
    (42) input_stmt -> FMT DOT . SCANLN LPAREN AMPER VARIABLE RPAREN

    PRINTF          shift and go to state 103
    PRINTLN         shift and go to state 104
    SCANLN          shift and go to state 105


state 57

    (98) struct_method -> FUNC LPAREN . VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (99) struct_method -> FUNC LPAREN . VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE

    VARIABLE        shift and go to state 106


state 58

    (50) func_no_params_void -> FUNC VARIABLE . LPAREN RPAREN LBRACE program RBRACE
    (47) func_with_map -> FUNC VARIABLE . LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body
    (44) func_header -> FUNC VARIABLE . LPAREN param_list RPAREN type
    (49) func_header_no_params -> FUNC VARIABLE . LPAREN RPAREN type

    LPAREN          shift and go to state 107


state 59

    (43) func_def -> func_header func_body .

    VAR             reduce using rule 43 (func_def -> func_header func_body .)
    VARIABLE        reduce using rule 43 (func_def -> func_header func_body .)
    FMT             reduce using rule 43 (func_def -> func_header func_body .)
    CONTINUE        reduce using rule 43 (func_def -> func_header func_body .)
    FUNC            reduce using rule 43 (func_def -> func_header func_body .)
    IF              reduce using rule 43 (func_def -> func_header func_body .)
    FOR             reduce using rule 43 (func_def -> func_header func_body .)
    TYPE            reduce using rule 43 (func_def -> func_header func_body .)
    SWITCH          reduce using rule 43 (func_def -> func_header func_body .)
    LBRACKET        reduce using rule 43 (func_def -> func_header func_body .)
    BREAK           reduce using rule 43 (func_def -> func_header func_body .)
    RETURN          reduce using rule 43 (func_def -> func_header func_body .)
    $end            reduce using rule 43 (func_def -> func_header func_body .)
    RBRACE          reduce using rule 43 (func_def -> func_header func_body .)
    CASE            reduce using rule 43 (func_def -> func_header func_body .)
    DEFAULT         reduce using rule 43 (func_def -> func_header func_body .)


state 60

    (45) func_body -> LBRACE . program RBRACE
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_no_params_void
    (15) statement -> . func_with_map
    (16) statement -> . func_call
    (17) statement -> . if_stmt
    (18) statement -> . for_stmt
    (19) statement -> . struct_def
    (20) statement -> . switch_stmt
    (21) statement -> . map_declaration
    (22) statement -> . map_declaration_values
    (23) statement -> . array_declaration
    (24) statement -> . array_literal
    (25) statement -> . slice_declaration
    (26) statement -> . make_stmt
    (27) statement -> . new_stmt
    (28) statement -> . break_stmt
    (29) statement -> . increment_stmt
    (30) statement -> . return_stmt
    (31) declaration -> . VAR VARIABLE type
    (32) declaration -> . VAR VARIABLE type ASIG expression
    (33) declaration -> . VAR VARIABLE type ASSIGN expression
    (37) assignment -> . VARIABLE ASSIGN expression
    (38) assignment -> . VARIABLE ASIG expression
    (39) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (40) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (41) print_stmt -> . FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN
    (42) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (94) continue_stmt -> . CONTINUE
    (98) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (99) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (43) func_def -> . func_header func_body
    (48) func_no_params -> . func_header_no_params block
    (50) func_no_params_void -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (47) func_with_map -> . FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN
    (87) if_stmt -> . IF expression block
    (88) if_stmt -> . IF expression block ELSE block
    (89) for_stmt -> . FOR expression for_block
    (90) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update for_block
    (100) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (109) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (110) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (115) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (116) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (117) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE
    (125) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (129) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (130) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (131) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (134) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (135) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (121) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (122) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (138) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (139) break_stmt -> . BREAK
    (140) increment_stmt -> . VARIABLE INCREMENT
    (141) increment_stmt -> . VARIABLE DECREMENT
    (46) return_stmt -> . RETURN expression
    (44) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type
    (49) func_header_no_params -> . FUNC VARIABLE LPAREN RPAREN type

    VAR             shift and go to state 34
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 35
    CONTINUE        shift and go to state 36
    FUNC            shift and go to state 37
    IF              shift and go to state 41
    FOR             shift and go to state 42
    TYPE            shift and go to state 43
    SWITCH          shift and go to state 44
    LBRACKET        shift and go to state 40
    BREAK           shift and go to state 45
    RETURN          shift and go to state 46

    program                        shift and go to state 108
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_no_params_void            shift and go to state 17
    func_with_map                  shift and go to state 18
    func_call                      shift and go to state 19
    if_stmt                        shift and go to state 20
    for_stmt                       shift and go to state 21
    struct_def                     shift and go to state 22
    switch_stmt                    shift and go to state 23
    map_declaration                shift and go to state 24
    map_declaration_values         shift and go to state 25
    array_declaration              shift and go to state 26
    array_literal                  shift and go to state 27
    slice_declaration              shift and go to state 28
    make_stmt                      shift and go to state 29
    new_stmt                       shift and go to state 30
    break_stmt                     shift and go to state 31
    increment_stmt                 shift and go to state 32
    return_stmt                    shift and go to state 33
    func_header                    shift and go to state 38
    func_header_no_params          shift and go to state 39

state 61

    (48) func_no_params -> func_header_no_params block .

    VAR             reduce using rule 48 (func_no_params -> func_header_no_params block .)
    VARIABLE        reduce using rule 48 (func_no_params -> func_header_no_params block .)
    FMT             reduce using rule 48 (func_no_params -> func_header_no_params block .)
    CONTINUE        reduce using rule 48 (func_no_params -> func_header_no_params block .)
    FUNC            reduce using rule 48 (func_no_params -> func_header_no_params block .)
    IF              reduce using rule 48 (func_no_params -> func_header_no_params block .)
    FOR             reduce using rule 48 (func_no_params -> func_header_no_params block .)
    TYPE            reduce using rule 48 (func_no_params -> func_header_no_params block .)
    SWITCH          reduce using rule 48 (func_no_params -> func_header_no_params block .)
    LBRACKET        reduce using rule 48 (func_no_params -> func_header_no_params block .)
    BREAK           reduce using rule 48 (func_no_params -> func_header_no_params block .)
    RETURN          reduce using rule 48 (func_no_params -> func_header_no_params block .)
    $end            reduce using rule 48 (func_no_params -> func_header_no_params block .)
    RBRACE          reduce using rule 48 (func_no_params -> func_header_no_params block .)
    CASE            reduce using rule 48 (func_no_params -> func_header_no_params block .)
    DEFAULT         reduce using rule 48 (func_no_params -> func_header_no_params block .)


state 62

    (97) block -> LBRACE . program RBRACE
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_no_params_void
    (15) statement -> . func_with_map
    (16) statement -> . func_call
    (17) statement -> . if_stmt
    (18) statement -> . for_stmt
    (19) statement -> . struct_def
    (20) statement -> . switch_stmt
    (21) statement -> . map_declaration
    (22) statement -> . map_declaration_values
    (23) statement -> . array_declaration
    (24) statement -> . array_literal
    (25) statement -> . slice_declaration
    (26) statement -> . make_stmt
    (27) statement -> . new_stmt
    (28) statement -> . break_stmt
    (29) statement -> . increment_stmt
    (30) statement -> . return_stmt
    (31) declaration -> . VAR VARIABLE type
    (32) declaration -> . VAR VARIABLE type ASIG expression
    (33) declaration -> . VAR VARIABLE type ASSIGN expression
    (37) assignment -> . VARIABLE ASSIGN expression
    (38) assignment -> . VARIABLE ASIG expression
    (39) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (40) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (41) print_stmt -> . FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN
    (42) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (94) continue_stmt -> . CONTINUE
    (98) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (99) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (43) func_def -> . func_header func_body
    (48) func_no_params -> . func_header_no_params block
    (50) func_no_params_void -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (47) func_with_map -> . FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN
    (87) if_stmt -> . IF expression block
    (88) if_stmt -> . IF expression block ELSE block
    (89) for_stmt -> . FOR expression for_block
    (90) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update for_block
    (100) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (109) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (110) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (115) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (116) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (117) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE
    (125) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (129) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (130) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (131) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (134) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (135) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (121) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (122) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (138) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (139) break_stmt -> . BREAK
    (140) increment_stmt -> . VARIABLE INCREMENT
    (141) increment_stmt -> . VARIABLE DECREMENT
    (46) return_stmt -> . RETURN expression
    (44) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type
    (49) func_header_no_params -> . FUNC VARIABLE LPAREN RPAREN type

    VAR             shift and go to state 34
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 35
    CONTINUE        shift and go to state 36
    FUNC            shift and go to state 37
    IF              shift and go to state 41
    FOR             shift and go to state 42
    TYPE            shift and go to state 43
    SWITCH          shift and go to state 44
    LBRACKET        shift and go to state 40
    BREAK           shift and go to state 45
    RETURN          shift and go to state 46

    program                        shift and go to state 109
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_no_params_void            shift and go to state 17
    func_with_map                  shift and go to state 18
    func_call                      shift and go to state 19
    if_stmt                        shift and go to state 20
    for_stmt                       shift and go to state 21
    struct_def                     shift and go to state 22
    switch_stmt                    shift and go to state 23
    map_declaration                shift and go to state 24
    map_declaration_values         shift and go to state 25
    array_declaration              shift and go to state 26
    array_literal                  shift and go to state 27
    slice_declaration              shift and go to state 28
    make_stmt                      shift and go to state 29
    new_stmt                       shift and go to state 30
    break_stmt                     shift and go to state 31
    increment_stmt                 shift and go to state 32
    return_stmt                    shift and go to state 33
    func_header                    shift and go to state 38
    func_header_no_params          shift and go to state 39

state 63

    (131) array_literal -> LBRACKET NUMBER . RBRACKET type LBRACE array_values RBRACE

    RBRACKET        shift and go to state 110


state 64

    (87) if_stmt -> IF expression . block
    (88) if_stmt -> IF expression . block ELSE block
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression
    (97) block -> . LBRACE program RBRACE

    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121
    LBRACE          shift and go to state 62

    block                          shift and go to state 111

state 65

    (34) expression -> NUMBER .
    (73) factor -> NUMBER .

  ! reduce/reduce conflict for PLUS resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for MINUS resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for AND resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for OR resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for EQ resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for NE resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for LT resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for GT resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for LE resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for GE resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for LBRACE resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for VAR resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for FMT resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for FUNC resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for IF resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for FOR resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for TYPE resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for SWITCH resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for BREAK resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for RETURN resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for RBRACE resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for CASE resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for COMMA resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for COLON resolved using rule 34 (expression -> NUMBER .)
    PLUS            reduce using rule 34 (expression -> NUMBER .)
    MINUS           reduce using rule 34 (expression -> NUMBER .)
    AND             reduce using rule 34 (expression -> NUMBER .)
    OR              reduce using rule 34 (expression -> NUMBER .)
    EQ              reduce using rule 34 (expression -> NUMBER .)
    NE              reduce using rule 34 (expression -> NUMBER .)
    LT              reduce using rule 34 (expression -> NUMBER .)
    GT              reduce using rule 34 (expression -> NUMBER .)
    LE              reduce using rule 34 (expression -> NUMBER .)
    GE              reduce using rule 34 (expression -> NUMBER .)
    LBRACE          reduce using rule 34 (expression -> NUMBER .)
    VAR             reduce using rule 34 (expression -> NUMBER .)
    VARIABLE        reduce using rule 34 (expression -> NUMBER .)
    FMT             reduce using rule 34 (expression -> NUMBER .)
    CONTINUE        reduce using rule 34 (expression -> NUMBER .)
    FUNC            reduce using rule 34 (expression -> NUMBER .)
    IF              reduce using rule 34 (expression -> NUMBER .)
    FOR             reduce using rule 34 (expression -> NUMBER .)
    TYPE            reduce using rule 34 (expression -> NUMBER .)
    SWITCH          reduce using rule 34 (expression -> NUMBER .)
    LBRACKET        reduce using rule 34 (expression -> NUMBER .)
    BREAK           reduce using rule 34 (expression -> NUMBER .)
    RETURN          reduce using rule 34 (expression -> NUMBER .)
    $end            reduce using rule 34 (expression -> NUMBER .)
    RBRACE          reduce using rule 34 (expression -> NUMBER .)
    CASE            reduce using rule 34 (expression -> NUMBER .)
    DEFAULT         reduce using rule 34 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 34 (expression -> NUMBER .)
    COMMA           reduce using rule 34 (expression -> NUMBER .)
    RPAREN          reduce using rule 34 (expression -> NUMBER .)
    COLON           reduce using rule 34 (expression -> NUMBER .)
    TIMES           reduce using rule 73 (factor -> NUMBER .)
    DIVIDE          reduce using rule 73 (factor -> NUMBER .)

  ! PLUS            [ reduce using rule 73 (factor -> NUMBER .) ]
  ! MINUS           [ reduce using rule 73 (factor -> NUMBER .) ]
  ! AND             [ reduce using rule 73 (factor -> NUMBER .) ]
  ! OR              [ reduce using rule 73 (factor -> NUMBER .) ]
  ! EQ              [ reduce using rule 73 (factor -> NUMBER .) ]
  ! NE              [ reduce using rule 73 (factor -> NUMBER .) ]
  ! LT              [ reduce using rule 73 (factor -> NUMBER .) ]
  ! GT              [ reduce using rule 73 (factor -> NUMBER .) ]
  ! LE              [ reduce using rule 73 (factor -> NUMBER .) ]
  ! GE              [ reduce using rule 73 (factor -> NUMBER .) ]
  ! LBRACE          [ reduce using rule 73 (factor -> NUMBER .) ]
  ! VAR             [ reduce using rule 73 (factor -> NUMBER .) ]
  ! VARIABLE        [ reduce using rule 73 (factor -> NUMBER .) ]
  ! FMT             [ reduce using rule 73 (factor -> NUMBER .) ]
  ! CONTINUE        [ reduce using rule 73 (factor -> NUMBER .) ]
  ! FUNC            [ reduce using rule 73 (factor -> NUMBER .) ]
  ! IF              [ reduce using rule 73 (factor -> NUMBER .) ]
  ! FOR             [ reduce using rule 73 (factor -> NUMBER .) ]
  ! TYPE            [ reduce using rule 73 (factor -> NUMBER .) ]
  ! SWITCH          [ reduce using rule 73 (factor -> NUMBER .) ]
  ! LBRACKET        [ reduce using rule 73 (factor -> NUMBER .) ]
  ! BREAK           [ reduce using rule 73 (factor -> NUMBER .) ]
  ! RETURN          [ reduce using rule 73 (factor -> NUMBER .) ]
  ! $end            [ reduce using rule 73 (factor -> NUMBER .) ]
  ! RBRACE          [ reduce using rule 73 (factor -> NUMBER .) ]
  ! CASE            [ reduce using rule 73 (factor -> NUMBER .) ]
  ! DEFAULT         [ reduce using rule 73 (factor -> NUMBER .) ]
  ! SEMICOLON       [ reduce using rule 73 (factor -> NUMBER .) ]
  ! COMMA           [ reduce using rule 73 (factor -> NUMBER .) ]
  ! RPAREN          [ reduce using rule 73 (factor -> NUMBER .) ]
  ! COLON           [ reduce using rule 73 (factor -> NUMBER .) ]


state 66

    (35) expression -> FLOAT .
    (74) factor -> FLOAT .

  ! reduce/reduce conflict for PLUS resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for MINUS resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for AND resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for OR resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for EQ resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for NE resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for LT resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for GT resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for LE resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for GE resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for LBRACE resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for VAR resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for FMT resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for FUNC resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for IF resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for FOR resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for TYPE resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for SWITCH resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for BREAK resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for RETURN resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for $end resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for RBRACE resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for CASE resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for COMMA resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for COLON resolved using rule 35 (expression -> FLOAT .)
    PLUS            reduce using rule 35 (expression -> FLOAT .)
    MINUS           reduce using rule 35 (expression -> FLOAT .)
    AND             reduce using rule 35 (expression -> FLOAT .)
    OR              reduce using rule 35 (expression -> FLOAT .)
    EQ              reduce using rule 35 (expression -> FLOAT .)
    NE              reduce using rule 35 (expression -> FLOAT .)
    LT              reduce using rule 35 (expression -> FLOAT .)
    GT              reduce using rule 35 (expression -> FLOAT .)
    LE              reduce using rule 35 (expression -> FLOAT .)
    GE              reduce using rule 35 (expression -> FLOAT .)
    LBRACE          reduce using rule 35 (expression -> FLOAT .)
    VAR             reduce using rule 35 (expression -> FLOAT .)
    VARIABLE        reduce using rule 35 (expression -> FLOAT .)
    FMT             reduce using rule 35 (expression -> FLOAT .)
    CONTINUE        reduce using rule 35 (expression -> FLOAT .)
    FUNC            reduce using rule 35 (expression -> FLOAT .)
    IF              reduce using rule 35 (expression -> FLOAT .)
    FOR             reduce using rule 35 (expression -> FLOAT .)
    TYPE            reduce using rule 35 (expression -> FLOAT .)
    SWITCH          reduce using rule 35 (expression -> FLOAT .)
    LBRACKET        reduce using rule 35 (expression -> FLOAT .)
    BREAK           reduce using rule 35 (expression -> FLOAT .)
    RETURN          reduce using rule 35 (expression -> FLOAT .)
    $end            reduce using rule 35 (expression -> FLOAT .)
    RBRACE          reduce using rule 35 (expression -> FLOAT .)
    CASE            reduce using rule 35 (expression -> FLOAT .)
    DEFAULT         reduce using rule 35 (expression -> FLOAT .)
    SEMICOLON       reduce using rule 35 (expression -> FLOAT .)
    COMMA           reduce using rule 35 (expression -> FLOAT .)
    RPAREN          reduce using rule 35 (expression -> FLOAT .)
    COLON           reduce using rule 35 (expression -> FLOAT .)
    TIMES           reduce using rule 74 (factor -> FLOAT .)
    DIVIDE          reduce using rule 74 (factor -> FLOAT .)

  ! PLUS            [ reduce using rule 74 (factor -> FLOAT .) ]
  ! MINUS           [ reduce using rule 74 (factor -> FLOAT .) ]
  ! AND             [ reduce using rule 74 (factor -> FLOAT .) ]
  ! OR              [ reduce using rule 74 (factor -> FLOAT .) ]
  ! EQ              [ reduce using rule 74 (factor -> FLOAT .) ]
  ! NE              [ reduce using rule 74 (factor -> FLOAT .) ]
  ! LT              [ reduce using rule 74 (factor -> FLOAT .) ]
  ! GT              [ reduce using rule 74 (factor -> FLOAT .) ]
  ! LE              [ reduce using rule 74 (factor -> FLOAT .) ]
  ! GE              [ reduce using rule 74 (factor -> FLOAT .) ]
  ! LBRACE          [ reduce using rule 74 (factor -> FLOAT .) ]
  ! VAR             [ reduce using rule 74 (factor -> FLOAT .) ]
  ! VARIABLE        [ reduce using rule 74 (factor -> FLOAT .) ]
  ! FMT             [ reduce using rule 74 (factor -> FLOAT .) ]
  ! CONTINUE        [ reduce using rule 74 (factor -> FLOAT .) ]
  ! FUNC            [ reduce using rule 74 (factor -> FLOAT .) ]
  ! IF              [ reduce using rule 74 (factor -> FLOAT .) ]
  ! FOR             [ reduce using rule 74 (factor -> FLOAT .) ]
  ! TYPE            [ reduce using rule 74 (factor -> FLOAT .) ]
  ! SWITCH          [ reduce using rule 74 (factor -> FLOAT .) ]
  ! LBRACKET        [ reduce using rule 74 (factor -> FLOAT .) ]
  ! BREAK           [ reduce using rule 74 (factor -> FLOAT .) ]
  ! RETURN          [ reduce using rule 74 (factor -> FLOAT .) ]
  ! $end            [ reduce using rule 74 (factor -> FLOAT .) ]
  ! RBRACE          [ reduce using rule 74 (factor -> FLOAT .) ]
  ! CASE            [ reduce using rule 74 (factor -> FLOAT .) ]
  ! DEFAULT         [ reduce using rule 74 (factor -> FLOAT .) ]
  ! SEMICOLON       [ reduce using rule 74 (factor -> FLOAT .) ]
  ! COMMA           [ reduce using rule 74 (factor -> FLOAT .) ]
  ! RPAREN          [ reduce using rule 74 (factor -> FLOAT .) ]
  ! COLON           [ reduce using rule 74 (factor -> FLOAT .) ]


state 67

    (36) expression -> VARIABLE .
    (72) term -> VARIABLE .
    (76) factor -> VARIABLE .
    (105) struct_instance -> VARIABLE . LBRACE struct_fields_values RBRACE
    (51) func_call -> VARIABLE . LPAREN arg_list RPAREN
    (52) func_call -> VARIABLE . LPAREN RPAREN

  ! reduce/reduce conflict for PLUS resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for MINUS resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for AND resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for OR resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for EQ resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for NE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LT resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GT resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for VAR resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for FMT resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for FUNC resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for IF resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for FOR resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for TYPE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for SWITCH resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for BREAK resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for RETURN resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for $end resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for CASE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for COLON resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for TIMES resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for PLUS resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for MINUS resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for AND resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for OR resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for EQ resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for NE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LT resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GT resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for VAR resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for FMT resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for FUNC resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for IF resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for FOR resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for TYPE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for SWITCH resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for BREAK resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for RETURN resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for $end resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for CASE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for COLON resolved using rule 36 (expression -> VARIABLE .)
  ! shift/reduce conflict for LBRACE resolved as shift
    PLUS            reduce using rule 36 (expression -> VARIABLE .)
    MINUS           reduce using rule 36 (expression -> VARIABLE .)
    AND             reduce using rule 36 (expression -> VARIABLE .)
    OR              reduce using rule 36 (expression -> VARIABLE .)
    EQ              reduce using rule 36 (expression -> VARIABLE .)
    NE              reduce using rule 36 (expression -> VARIABLE .)
    LT              reduce using rule 36 (expression -> VARIABLE .)
    GT              reduce using rule 36 (expression -> VARIABLE .)
    LE              reduce using rule 36 (expression -> VARIABLE .)
    GE              reduce using rule 36 (expression -> VARIABLE .)
    VAR             reduce using rule 36 (expression -> VARIABLE .)
    VARIABLE        reduce using rule 36 (expression -> VARIABLE .)
    FMT             reduce using rule 36 (expression -> VARIABLE .)
    CONTINUE        reduce using rule 36 (expression -> VARIABLE .)
    FUNC            reduce using rule 36 (expression -> VARIABLE .)
    IF              reduce using rule 36 (expression -> VARIABLE .)
    FOR             reduce using rule 36 (expression -> VARIABLE .)
    TYPE            reduce using rule 36 (expression -> VARIABLE .)
    SWITCH          reduce using rule 36 (expression -> VARIABLE .)
    LBRACKET        reduce using rule 36 (expression -> VARIABLE .)
    BREAK           reduce using rule 36 (expression -> VARIABLE .)
    RETURN          reduce using rule 36 (expression -> VARIABLE .)
    $end            reduce using rule 36 (expression -> VARIABLE .)
    RBRACE          reduce using rule 36 (expression -> VARIABLE .)
    CASE            reduce using rule 36 (expression -> VARIABLE .)
    DEFAULT         reduce using rule 36 (expression -> VARIABLE .)
    SEMICOLON       reduce using rule 36 (expression -> VARIABLE .)
    COMMA           reduce using rule 36 (expression -> VARIABLE .)
    RPAREN          reduce using rule 36 (expression -> VARIABLE .)
    COLON           reduce using rule 36 (expression -> VARIABLE .)
    TIMES           reduce using rule 72 (term -> VARIABLE .)
    DIVIDE          reduce using rule 72 (term -> VARIABLE .)
    LBRACE          shift and go to state 122
    LPAREN          shift and go to state 51

  ! LBRACE          [ reduce using rule 36 (expression -> VARIABLE .) ]
  ! PLUS            [ reduce using rule 72 (term -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 72 (term -> VARIABLE .) ]
  ! AND             [ reduce using rule 72 (term -> VARIABLE .) ]
  ! OR              [ reduce using rule 72 (term -> VARIABLE .) ]
  ! EQ              [ reduce using rule 72 (term -> VARIABLE .) ]
  ! NE              [ reduce using rule 72 (term -> VARIABLE .) ]
  ! LT              [ reduce using rule 72 (term -> VARIABLE .) ]
  ! GT              [ reduce using rule 72 (term -> VARIABLE .) ]
  ! LE              [ reduce using rule 72 (term -> VARIABLE .) ]
  ! GE              [ reduce using rule 72 (term -> VARIABLE .) ]
  ! LBRACE          [ reduce using rule 72 (term -> VARIABLE .) ]
  ! VAR             [ reduce using rule 72 (term -> VARIABLE .) ]
  ! VARIABLE        [ reduce using rule 72 (term -> VARIABLE .) ]
  ! FMT             [ reduce using rule 72 (term -> VARIABLE .) ]
  ! CONTINUE        [ reduce using rule 72 (term -> VARIABLE .) ]
  ! FUNC            [ reduce using rule 72 (term -> VARIABLE .) ]
  ! IF              [ reduce using rule 72 (term -> VARIABLE .) ]
  ! FOR             [ reduce using rule 72 (term -> VARIABLE .) ]
  ! TYPE            [ reduce using rule 72 (term -> VARIABLE .) ]
  ! SWITCH          [ reduce using rule 72 (term -> VARIABLE .) ]
  ! LBRACKET        [ reduce using rule 72 (term -> VARIABLE .) ]
  ! BREAK           [ reduce using rule 72 (term -> VARIABLE .) ]
  ! RETURN          [ reduce using rule 72 (term -> VARIABLE .) ]
  ! $end            [ reduce using rule 72 (term -> VARIABLE .) ]
  ! RBRACE          [ reduce using rule 72 (term -> VARIABLE .) ]
  ! CASE            [ reduce using rule 72 (term -> VARIABLE .) ]
  ! DEFAULT         [ reduce using rule 72 (term -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 72 (term -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 72 (term -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 72 (term -> VARIABLE .) ]
  ! COLON           [ reduce using rule 72 (term -> VARIABLE .) ]
  ! TIMES           [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! PLUS            [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! AND             [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! OR              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! EQ              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! NE              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! LT              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! GT              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! LE              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! GE              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! LBRACE          [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! VAR             [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! VARIABLE        [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! FMT             [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! CONTINUE        [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! FUNC            [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! IF              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! FOR             [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! TYPE            [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! SWITCH          [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! LBRACKET        [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! BREAK           [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! RETURN          [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! $end            [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! RBRACE          [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! CASE            [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! DEFAULT         [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! COLON           [ reduce using rule 76 (factor -> VARIABLE .) ]


state 68

    (58) expression -> term .
    (70) term -> term . TIMES factor
    (71) term -> term . DIVIDE factor

    PLUS            reduce using rule 58 (expression -> term .)
    MINUS           reduce using rule 58 (expression -> term .)
    AND             reduce using rule 58 (expression -> term .)
    OR              reduce using rule 58 (expression -> term .)
    EQ              reduce using rule 58 (expression -> term .)
    NE              reduce using rule 58 (expression -> term .)
    LT              reduce using rule 58 (expression -> term .)
    GT              reduce using rule 58 (expression -> term .)
    LE              reduce using rule 58 (expression -> term .)
    GE              reduce using rule 58 (expression -> term .)
    LBRACE          reduce using rule 58 (expression -> term .)
    VAR             reduce using rule 58 (expression -> term .)
    VARIABLE        reduce using rule 58 (expression -> term .)
    FMT             reduce using rule 58 (expression -> term .)
    CONTINUE        reduce using rule 58 (expression -> term .)
    FUNC            reduce using rule 58 (expression -> term .)
    IF              reduce using rule 58 (expression -> term .)
    FOR             reduce using rule 58 (expression -> term .)
    TYPE            reduce using rule 58 (expression -> term .)
    SWITCH          reduce using rule 58 (expression -> term .)
    LBRACKET        reduce using rule 58 (expression -> term .)
    BREAK           reduce using rule 58 (expression -> term .)
    RETURN          reduce using rule 58 (expression -> term .)
    $end            reduce using rule 58 (expression -> term .)
    RBRACE          reduce using rule 58 (expression -> term .)
    CASE            reduce using rule 58 (expression -> term .)
    DEFAULT         reduce using rule 58 (expression -> term .)
    SEMICOLON       reduce using rule 58 (expression -> term .)
    COMMA           reduce using rule 58 (expression -> term .)
    RPAREN          reduce using rule 58 (expression -> term .)
    COLON           reduce using rule 58 (expression -> term .)
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124


state 69

    (69) term -> factor .

    TIMES           reduce using rule 69 (term -> factor .)
    DIVIDE          reduce using rule 69 (term -> factor .)
    PLUS            reduce using rule 69 (term -> factor .)
    MINUS           reduce using rule 69 (term -> factor .)
    AND             reduce using rule 69 (term -> factor .)
    OR              reduce using rule 69 (term -> factor .)
    EQ              reduce using rule 69 (term -> factor .)
    NE              reduce using rule 69 (term -> factor .)
    LT              reduce using rule 69 (term -> factor .)
    GT              reduce using rule 69 (term -> factor .)
    LE              reduce using rule 69 (term -> factor .)
    GE              reduce using rule 69 (term -> factor .)
    LBRACE          reduce using rule 69 (term -> factor .)
    VAR             reduce using rule 69 (term -> factor .)
    VARIABLE        reduce using rule 69 (term -> factor .)
    FMT             reduce using rule 69 (term -> factor .)
    CONTINUE        reduce using rule 69 (term -> factor .)
    FUNC            reduce using rule 69 (term -> factor .)
    IF              reduce using rule 69 (term -> factor .)
    FOR             reduce using rule 69 (term -> factor .)
    TYPE            reduce using rule 69 (term -> factor .)
    SWITCH          reduce using rule 69 (term -> factor .)
    LBRACKET        reduce using rule 69 (term -> factor .)
    BREAK           reduce using rule 69 (term -> factor .)
    RETURN          reduce using rule 69 (term -> factor .)
    $end            reduce using rule 69 (term -> factor .)
    RBRACE          reduce using rule 69 (term -> factor .)
    CASE            reduce using rule 69 (term -> factor .)
    DEFAULT         reduce using rule 69 (term -> factor .)
    SEMICOLON       reduce using rule 69 (term -> factor .)
    COMMA           reduce using rule 69 (term -> factor .)
    RPAREN          reduce using rule 69 (term -> factor .)
    COLON           reduce using rule 69 (term -> factor .)


state 70

    (75) factor -> STRING .

    TIMES           reduce using rule 75 (factor -> STRING .)
    DIVIDE          reduce using rule 75 (factor -> STRING .)
    PLUS            reduce using rule 75 (factor -> STRING .)
    MINUS           reduce using rule 75 (factor -> STRING .)
    AND             reduce using rule 75 (factor -> STRING .)
    OR              reduce using rule 75 (factor -> STRING .)
    EQ              reduce using rule 75 (factor -> STRING .)
    NE              reduce using rule 75 (factor -> STRING .)
    LT              reduce using rule 75 (factor -> STRING .)
    GT              reduce using rule 75 (factor -> STRING .)
    LE              reduce using rule 75 (factor -> STRING .)
    GE              reduce using rule 75 (factor -> STRING .)
    LBRACE          reduce using rule 75 (factor -> STRING .)
    VAR             reduce using rule 75 (factor -> STRING .)
    VARIABLE        reduce using rule 75 (factor -> STRING .)
    FMT             reduce using rule 75 (factor -> STRING .)
    CONTINUE        reduce using rule 75 (factor -> STRING .)
    FUNC            reduce using rule 75 (factor -> STRING .)
    IF              reduce using rule 75 (factor -> STRING .)
    FOR             reduce using rule 75 (factor -> STRING .)
    TYPE            reduce using rule 75 (factor -> STRING .)
    SWITCH          reduce using rule 75 (factor -> STRING .)
    LBRACKET        reduce using rule 75 (factor -> STRING .)
    BREAK           reduce using rule 75 (factor -> STRING .)
    RETURN          reduce using rule 75 (factor -> STRING .)
    $end            reduce using rule 75 (factor -> STRING .)
    RBRACE          reduce using rule 75 (factor -> STRING .)
    CASE            reduce using rule 75 (factor -> STRING .)
    DEFAULT         reduce using rule 75 (factor -> STRING .)
    SEMICOLON       reduce using rule 75 (factor -> STRING .)
    COMMA           reduce using rule 75 (factor -> STRING .)
    RPAREN          reduce using rule 75 (factor -> STRING .)
    COLON           reduce using rule 75 (factor -> STRING .)


state 71

    (77) factor -> TRUE .

    TIMES           reduce using rule 77 (factor -> TRUE .)
    DIVIDE          reduce using rule 77 (factor -> TRUE .)
    PLUS            reduce using rule 77 (factor -> TRUE .)
    MINUS           reduce using rule 77 (factor -> TRUE .)
    AND             reduce using rule 77 (factor -> TRUE .)
    OR              reduce using rule 77 (factor -> TRUE .)
    EQ              reduce using rule 77 (factor -> TRUE .)
    NE              reduce using rule 77 (factor -> TRUE .)
    LT              reduce using rule 77 (factor -> TRUE .)
    GT              reduce using rule 77 (factor -> TRUE .)
    LE              reduce using rule 77 (factor -> TRUE .)
    GE              reduce using rule 77 (factor -> TRUE .)
    LBRACE          reduce using rule 77 (factor -> TRUE .)
    VAR             reduce using rule 77 (factor -> TRUE .)
    VARIABLE        reduce using rule 77 (factor -> TRUE .)
    FMT             reduce using rule 77 (factor -> TRUE .)
    CONTINUE        reduce using rule 77 (factor -> TRUE .)
    FUNC            reduce using rule 77 (factor -> TRUE .)
    IF              reduce using rule 77 (factor -> TRUE .)
    FOR             reduce using rule 77 (factor -> TRUE .)
    TYPE            reduce using rule 77 (factor -> TRUE .)
    SWITCH          reduce using rule 77 (factor -> TRUE .)
    LBRACKET        reduce using rule 77 (factor -> TRUE .)
    BREAK           reduce using rule 77 (factor -> TRUE .)
    RETURN          reduce using rule 77 (factor -> TRUE .)
    $end            reduce using rule 77 (factor -> TRUE .)
    RBRACE          reduce using rule 77 (factor -> TRUE .)
    CASE            reduce using rule 77 (factor -> TRUE .)
    DEFAULT         reduce using rule 77 (factor -> TRUE .)
    SEMICOLON       reduce using rule 77 (factor -> TRUE .)
    COMMA           reduce using rule 77 (factor -> TRUE .)
    RPAREN          reduce using rule 77 (factor -> TRUE .)
    COLON           reduce using rule 77 (factor -> TRUE .)


state 72

    (78) factor -> FALSE .

    TIMES           reduce using rule 78 (factor -> FALSE .)
    DIVIDE          reduce using rule 78 (factor -> FALSE .)
    PLUS            reduce using rule 78 (factor -> FALSE .)
    MINUS           reduce using rule 78 (factor -> FALSE .)
    AND             reduce using rule 78 (factor -> FALSE .)
    OR              reduce using rule 78 (factor -> FALSE .)
    EQ              reduce using rule 78 (factor -> FALSE .)
    NE              reduce using rule 78 (factor -> FALSE .)
    LT              reduce using rule 78 (factor -> FALSE .)
    GT              reduce using rule 78 (factor -> FALSE .)
    LE              reduce using rule 78 (factor -> FALSE .)
    GE              reduce using rule 78 (factor -> FALSE .)
    LBRACE          reduce using rule 78 (factor -> FALSE .)
    VAR             reduce using rule 78 (factor -> FALSE .)
    VARIABLE        reduce using rule 78 (factor -> FALSE .)
    FMT             reduce using rule 78 (factor -> FALSE .)
    CONTINUE        reduce using rule 78 (factor -> FALSE .)
    FUNC            reduce using rule 78 (factor -> FALSE .)
    IF              reduce using rule 78 (factor -> FALSE .)
    FOR             reduce using rule 78 (factor -> FALSE .)
    TYPE            reduce using rule 78 (factor -> FALSE .)
    SWITCH          reduce using rule 78 (factor -> FALSE .)
    LBRACKET        reduce using rule 78 (factor -> FALSE .)
    BREAK           reduce using rule 78 (factor -> FALSE .)
    RETURN          reduce using rule 78 (factor -> FALSE .)
    $end            reduce using rule 78 (factor -> FALSE .)
    RBRACE          reduce using rule 78 (factor -> FALSE .)
    CASE            reduce using rule 78 (factor -> FALSE .)
    DEFAULT         reduce using rule 78 (factor -> FALSE .)
    SEMICOLON       reduce using rule 78 (factor -> FALSE .)
    COMMA           reduce using rule 78 (factor -> FALSE .)
    RPAREN          reduce using rule 78 (factor -> FALSE .)
    COLON           reduce using rule 78 (factor -> FALSE .)


state 73

    (79) factor -> LPAREN . expression RPAREN
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 125
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 74

    (80) factor -> make_expr .

    TIMES           reduce using rule 80 (factor -> make_expr .)
    DIVIDE          reduce using rule 80 (factor -> make_expr .)
    PLUS            reduce using rule 80 (factor -> make_expr .)
    MINUS           reduce using rule 80 (factor -> make_expr .)
    AND             reduce using rule 80 (factor -> make_expr .)
    OR              reduce using rule 80 (factor -> make_expr .)
    EQ              reduce using rule 80 (factor -> make_expr .)
    NE              reduce using rule 80 (factor -> make_expr .)
    LT              reduce using rule 80 (factor -> make_expr .)
    GT              reduce using rule 80 (factor -> make_expr .)
    LE              reduce using rule 80 (factor -> make_expr .)
    GE              reduce using rule 80 (factor -> make_expr .)
    LBRACE          reduce using rule 80 (factor -> make_expr .)
    VAR             reduce using rule 80 (factor -> make_expr .)
    VARIABLE        reduce using rule 80 (factor -> make_expr .)
    FMT             reduce using rule 80 (factor -> make_expr .)
    CONTINUE        reduce using rule 80 (factor -> make_expr .)
    FUNC            reduce using rule 80 (factor -> make_expr .)
    IF              reduce using rule 80 (factor -> make_expr .)
    FOR             reduce using rule 80 (factor -> make_expr .)
    TYPE            reduce using rule 80 (factor -> make_expr .)
    SWITCH          reduce using rule 80 (factor -> make_expr .)
    LBRACKET        reduce using rule 80 (factor -> make_expr .)
    BREAK           reduce using rule 80 (factor -> make_expr .)
    RETURN          reduce using rule 80 (factor -> make_expr .)
    $end            reduce using rule 80 (factor -> make_expr .)
    RBRACE          reduce using rule 80 (factor -> make_expr .)
    CASE            reduce using rule 80 (factor -> make_expr .)
    DEFAULT         reduce using rule 80 (factor -> make_expr .)
    SEMICOLON       reduce using rule 80 (factor -> make_expr .)
    COMMA           reduce using rule 80 (factor -> make_expr .)
    RPAREN          reduce using rule 80 (factor -> make_expr .)
    COLON           reduce using rule 80 (factor -> make_expr .)


state 75

    (81) factor -> struct_instance .

    TIMES           reduce using rule 81 (factor -> struct_instance .)
    DIVIDE          reduce using rule 81 (factor -> struct_instance .)
    PLUS            reduce using rule 81 (factor -> struct_instance .)
    MINUS           reduce using rule 81 (factor -> struct_instance .)
    AND             reduce using rule 81 (factor -> struct_instance .)
    OR              reduce using rule 81 (factor -> struct_instance .)
    EQ              reduce using rule 81 (factor -> struct_instance .)
    NE              reduce using rule 81 (factor -> struct_instance .)
    LT              reduce using rule 81 (factor -> struct_instance .)
    GT              reduce using rule 81 (factor -> struct_instance .)
    LE              reduce using rule 81 (factor -> struct_instance .)
    GE              reduce using rule 81 (factor -> struct_instance .)
    LBRACE          reduce using rule 81 (factor -> struct_instance .)
    VAR             reduce using rule 81 (factor -> struct_instance .)
    VARIABLE        reduce using rule 81 (factor -> struct_instance .)
    FMT             reduce using rule 81 (factor -> struct_instance .)
    CONTINUE        reduce using rule 81 (factor -> struct_instance .)
    FUNC            reduce using rule 81 (factor -> struct_instance .)
    IF              reduce using rule 81 (factor -> struct_instance .)
    FOR             reduce using rule 81 (factor -> struct_instance .)
    TYPE            reduce using rule 81 (factor -> struct_instance .)
    SWITCH          reduce using rule 81 (factor -> struct_instance .)
    LBRACKET        reduce using rule 81 (factor -> struct_instance .)
    BREAK           reduce using rule 81 (factor -> struct_instance .)
    RETURN          reduce using rule 81 (factor -> struct_instance .)
    $end            reduce using rule 81 (factor -> struct_instance .)
    RBRACE          reduce using rule 81 (factor -> struct_instance .)
    CASE            reduce using rule 81 (factor -> struct_instance .)
    DEFAULT         reduce using rule 81 (factor -> struct_instance .)
    SEMICOLON       reduce using rule 81 (factor -> struct_instance .)
    COMMA           reduce using rule 81 (factor -> struct_instance .)
    RPAREN          reduce using rule 81 (factor -> struct_instance .)
    COLON           reduce using rule 81 (factor -> struct_instance .)


state 76

    (82) factor -> func_call .

    TIMES           reduce using rule 82 (factor -> func_call .)
    DIVIDE          reduce using rule 82 (factor -> func_call .)
    PLUS            reduce using rule 82 (factor -> func_call .)
    MINUS           reduce using rule 82 (factor -> func_call .)
    AND             reduce using rule 82 (factor -> func_call .)
    OR              reduce using rule 82 (factor -> func_call .)
    EQ              reduce using rule 82 (factor -> func_call .)
    NE              reduce using rule 82 (factor -> func_call .)
    LT              reduce using rule 82 (factor -> func_call .)
    GT              reduce using rule 82 (factor -> func_call .)
    LE              reduce using rule 82 (factor -> func_call .)
    GE              reduce using rule 82 (factor -> func_call .)
    LBRACE          reduce using rule 82 (factor -> func_call .)
    VAR             reduce using rule 82 (factor -> func_call .)
    VARIABLE        reduce using rule 82 (factor -> func_call .)
    FMT             reduce using rule 82 (factor -> func_call .)
    CONTINUE        reduce using rule 82 (factor -> func_call .)
    FUNC            reduce using rule 82 (factor -> func_call .)
    IF              reduce using rule 82 (factor -> func_call .)
    FOR             reduce using rule 82 (factor -> func_call .)
    TYPE            reduce using rule 82 (factor -> func_call .)
    SWITCH          reduce using rule 82 (factor -> func_call .)
    LBRACKET        reduce using rule 82 (factor -> func_call .)
    BREAK           reduce using rule 82 (factor -> func_call .)
    RETURN          reduce using rule 82 (factor -> func_call .)
    $end            reduce using rule 82 (factor -> func_call .)
    RBRACE          reduce using rule 82 (factor -> func_call .)
    CASE            reduce using rule 82 (factor -> func_call .)
    DEFAULT         reduce using rule 82 (factor -> func_call .)
    SEMICOLON       reduce using rule 82 (factor -> func_call .)
    COMMA           reduce using rule 82 (factor -> func_call .)
    RPAREN          reduce using rule 82 (factor -> func_call .)
    COLON           reduce using rule 82 (factor -> func_call .)


state 77

    (123) make_expr -> MAKE . LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> MAKE . LPAREN LBRACKET RBRACKET type RPAREN

    LPAREN          shift and go to state 126


state 78

    (89) for_stmt -> FOR expression . for_block
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression
    (91) for_block -> . begin_loop block end_loop
    (92) begin_loop -> .

    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121
    LBRACE          reduce using rule 92 (begin_loop -> .)

    for_block                      shift and go to state 127
    begin_loop                     shift and go to state 128

state 79

    (90) for_stmt -> FOR assignment . SEMICOLON expression SEMICOLON for_update for_block

    SEMICOLON       shift and go to state 129


state 80

    (36) expression -> VARIABLE .
    (37) assignment -> VARIABLE . ASSIGN expression
    (38) assignment -> VARIABLE . ASIG expression
    (72) term -> VARIABLE .
    (76) factor -> VARIABLE .
    (105) struct_instance -> VARIABLE . LBRACE struct_fields_values RBRACE
    (51) func_call -> VARIABLE . LPAREN arg_list RPAREN
    (52) func_call -> VARIABLE . LPAREN RPAREN

  ! reduce/reduce conflict for PLUS resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for MINUS resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for AND resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for OR resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for EQ resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for NE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LT resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GT resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for TIMES resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for PLUS resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for MINUS resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for AND resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for OR resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for EQ resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for NE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LT resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GT resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 36 (expression -> VARIABLE .)
  ! shift/reduce conflict for LBRACE resolved as shift
    PLUS            reduce using rule 36 (expression -> VARIABLE .)
    MINUS           reduce using rule 36 (expression -> VARIABLE .)
    AND             reduce using rule 36 (expression -> VARIABLE .)
    OR              reduce using rule 36 (expression -> VARIABLE .)
    EQ              reduce using rule 36 (expression -> VARIABLE .)
    NE              reduce using rule 36 (expression -> VARIABLE .)
    LT              reduce using rule 36 (expression -> VARIABLE .)
    GT              reduce using rule 36 (expression -> VARIABLE .)
    LE              reduce using rule 36 (expression -> VARIABLE .)
    GE              reduce using rule 36 (expression -> VARIABLE .)
    ASSIGN          shift and go to state 49
    ASIG            shift and go to state 130
    TIMES           reduce using rule 72 (term -> VARIABLE .)
    DIVIDE          reduce using rule 72 (term -> VARIABLE .)
    LBRACE          shift and go to state 122
    LPAREN          shift and go to state 51

  ! LBRACE          [ reduce using rule 36 (expression -> VARIABLE .) ]
  ! PLUS            [ reduce using rule 72 (term -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 72 (term -> VARIABLE .) ]
  ! AND             [ reduce using rule 72 (term -> VARIABLE .) ]
  ! OR              [ reduce using rule 72 (term -> VARIABLE .) ]
  ! EQ              [ reduce using rule 72 (term -> VARIABLE .) ]
  ! NE              [ reduce using rule 72 (term -> VARIABLE .) ]
  ! LT              [ reduce using rule 72 (term -> VARIABLE .) ]
  ! GT              [ reduce using rule 72 (term -> VARIABLE .) ]
  ! LE              [ reduce using rule 72 (term -> VARIABLE .) ]
  ! GE              [ reduce using rule 72 (term -> VARIABLE .) ]
  ! LBRACE          [ reduce using rule 72 (term -> VARIABLE .) ]
  ! TIMES           [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! PLUS            [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! AND             [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! OR              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! EQ              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! NE              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! LT              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! GT              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! LE              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! GE              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! LBRACE          [ reduce using rule 76 (factor -> VARIABLE .) ]


state 81

    (100) struct_def -> TYPE VARIABLE . STRUCT LBRACE struct_fields RBRACE

    STRUCT          shift and go to state 131


state 82

    (109) switch_stmt -> SWITCH expression . LBRACE case_list RBRACE
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression

    LBRACE          shift and go to state 132
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121


state 83

    (110) switch_stmt -> SWITCH LBRACE . case_list RBRACE
    (111) case_list -> . case_clause
    (112) case_list -> . case_clause case_list
    (113) case_clause -> . CASE expression COLON program
    (114) case_clause -> . DEFAULT COLON program

    CASE            shift and go to state 135
    DEFAULT         shift and go to state 136

    case_list                      shift and go to state 133
    case_clause                    shift and go to state 134

state 84

    (46) return_stmt -> RETURN expression .
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression

    VAR             reduce using rule 46 (return_stmt -> RETURN expression .)
    VARIABLE        reduce using rule 46 (return_stmt -> RETURN expression .)
    FMT             reduce using rule 46 (return_stmt -> RETURN expression .)
    CONTINUE        reduce using rule 46 (return_stmt -> RETURN expression .)
    FUNC            reduce using rule 46 (return_stmt -> RETURN expression .)
    IF              reduce using rule 46 (return_stmt -> RETURN expression .)
    FOR             reduce using rule 46 (return_stmt -> RETURN expression .)
    TYPE            reduce using rule 46 (return_stmt -> RETURN expression .)
    SWITCH          reduce using rule 46 (return_stmt -> RETURN expression .)
    LBRACKET        reduce using rule 46 (return_stmt -> RETURN expression .)
    BREAK           reduce using rule 46 (return_stmt -> RETURN expression .)
    RETURN          reduce using rule 46 (return_stmt -> RETURN expression .)
    $end            reduce using rule 46 (return_stmt -> RETURN expression .)
    RBRACE          reduce using rule 46 (return_stmt -> RETURN expression .)
    CASE            reduce using rule 46 (return_stmt -> RETURN expression .)
    DEFAULT         reduce using rule 46 (return_stmt -> RETURN expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121


state 85

    (2) import_stmt -> IMPORT LPAREN STRING . RPAREN

    RPAREN          shift and go to state 137


state 86

    (37) assignment -> VARIABLE ASSIGN expression .
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression

    VAR             reduce using rule 37 (assignment -> VARIABLE ASSIGN expression .)
    VARIABLE        reduce using rule 37 (assignment -> VARIABLE ASSIGN expression .)
    FMT             reduce using rule 37 (assignment -> VARIABLE ASSIGN expression .)
    CONTINUE        reduce using rule 37 (assignment -> VARIABLE ASSIGN expression .)
    FUNC            reduce using rule 37 (assignment -> VARIABLE ASSIGN expression .)
    IF              reduce using rule 37 (assignment -> VARIABLE ASSIGN expression .)
    FOR             reduce using rule 37 (assignment -> VARIABLE ASSIGN expression .)
    TYPE            reduce using rule 37 (assignment -> VARIABLE ASSIGN expression .)
    SWITCH          reduce using rule 37 (assignment -> VARIABLE ASSIGN expression .)
    LBRACKET        reduce using rule 37 (assignment -> VARIABLE ASSIGN expression .)
    BREAK           reduce using rule 37 (assignment -> VARIABLE ASSIGN expression .)
    RETURN          reduce using rule 37 (assignment -> VARIABLE ASSIGN expression .)
    $end            reduce using rule 37 (assignment -> VARIABLE ASSIGN expression .)
    RBRACE          reduce using rule 37 (assignment -> VARIABLE ASSIGN expression .)
    CASE            reduce using rule 37 (assignment -> VARIABLE ASSIGN expression .)
    DEFAULT         reduce using rule 37 (assignment -> VARIABLE ASSIGN expression .)
    SEMICOLON       reduce using rule 37 (assignment -> VARIABLE ASSIGN expression .)
    LBRACE          reduce using rule 37 (assignment -> VARIABLE ASSIGN expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121


state 87

    (38) assignment -> VARIABLE ASIG expression .
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression

    VAR             reduce using rule 38 (assignment -> VARIABLE ASIG expression .)
    VARIABLE        reduce using rule 38 (assignment -> VARIABLE ASIG expression .)
    FMT             reduce using rule 38 (assignment -> VARIABLE ASIG expression .)
    CONTINUE        reduce using rule 38 (assignment -> VARIABLE ASIG expression .)
    FUNC            reduce using rule 38 (assignment -> VARIABLE ASIG expression .)
    IF              reduce using rule 38 (assignment -> VARIABLE ASIG expression .)
    FOR             reduce using rule 38 (assignment -> VARIABLE ASIG expression .)
    TYPE            reduce using rule 38 (assignment -> VARIABLE ASIG expression .)
    SWITCH          reduce using rule 38 (assignment -> VARIABLE ASIG expression .)
    LBRACKET        reduce using rule 38 (assignment -> VARIABLE ASIG expression .)
    BREAK           reduce using rule 38 (assignment -> VARIABLE ASIG expression .)
    RETURN          reduce using rule 38 (assignment -> VARIABLE ASIG expression .)
    $end            reduce using rule 38 (assignment -> VARIABLE ASIG expression .)
    RBRACE          reduce using rule 38 (assignment -> VARIABLE ASIG expression .)
    CASE            reduce using rule 38 (assignment -> VARIABLE ASIG expression .)
    DEFAULT         reduce using rule 38 (assignment -> VARIABLE ASIG expression .)
    SEMICOLON       reduce using rule 38 (assignment -> VARIABLE ASIG expression .)
    LBRACE          reduce using rule 38 (assignment -> VARIABLE ASIG expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121


state 88

    (116) map_declaration -> VARIABLE ASIG MAP . LBRACKET type RBRACKET type
    (117) map_declaration -> VARIABLE ASIG MAP . LBRACKET type RBRACKET type LBRACE map_params RBRACE
    (125) map_declaration_values -> VARIABLE ASIG MAP . LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE

    LBRACKET        shift and go to state 138


state 89

    (135) slice_declaration -> VARIABLE ASIG LBRACKET . RBRACKET type LBRACE slice_values RBRACE

    RBRACKET        shift and go to state 139


state 90

    (121) make_stmt -> VARIABLE ASIG MAKE . LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (122) make_stmt -> VARIABLE ASIG MAKE . LPAREN LBRACKET RBRACKET type RPAREN
    (123) make_expr -> MAKE . LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> MAKE . LPAREN LBRACKET RBRACKET type RPAREN

    LPAREN          shift and go to state 140


state 91

    (138) new_stmt -> VARIABLE ASIG NEW . LPAREN VARIABLE RPAREN

    LPAREN          shift and go to state 141


state 92

    (51) func_call -> VARIABLE LPAREN arg_list . RPAREN

    RPAREN          shift and go to state 142


state 93

    (52) func_call -> VARIABLE LPAREN RPAREN .

    VAR             reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    VARIABLE        reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    FMT             reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    CONTINUE        reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    FUNC            reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    IF              reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    FOR             reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    TYPE            reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    SWITCH          reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    LBRACKET        reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    BREAK           reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    RETURN          reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    $end            reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    RBRACE          reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    CASE            reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    DEFAULT         reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    TIMES           reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    DIVIDE          reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    PLUS            reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    MINUS           reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    AND             reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    OR              reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    EQ              reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    NE              reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    LT              reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    GT              reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    LE              reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    GE              reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    LBRACE          reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    SEMICOLON       reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    COMMA           reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    RPAREN          reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)
    COLON           reduce using rule 52 (func_call -> VARIABLE LPAREN RPAREN .)


state 94

    (56) arg_list -> expression .
    (57) arg_list -> expression . COMMA arg_list
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression

    RPAREN          reduce using rule 56 (arg_list -> expression .)
    COMMA           shift and go to state 143
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121


state 95

    (31) declaration -> VAR VARIABLE type .
    (32) declaration -> VAR VARIABLE type . ASIG expression
    (33) declaration -> VAR VARIABLE type . ASSIGN expression

    VAR             reduce using rule 31 (declaration -> VAR VARIABLE type .)
    VARIABLE        reduce using rule 31 (declaration -> VAR VARIABLE type .)
    FMT             reduce using rule 31 (declaration -> VAR VARIABLE type .)
    CONTINUE        reduce using rule 31 (declaration -> VAR VARIABLE type .)
    FUNC            reduce using rule 31 (declaration -> VAR VARIABLE type .)
    IF              reduce using rule 31 (declaration -> VAR VARIABLE type .)
    FOR             reduce using rule 31 (declaration -> VAR VARIABLE type .)
    TYPE            reduce using rule 31 (declaration -> VAR VARIABLE type .)
    SWITCH          reduce using rule 31 (declaration -> VAR VARIABLE type .)
    LBRACKET        reduce using rule 31 (declaration -> VAR VARIABLE type .)
    BREAK           reduce using rule 31 (declaration -> VAR VARIABLE type .)
    RETURN          reduce using rule 31 (declaration -> VAR VARIABLE type .)
    $end            reduce using rule 31 (declaration -> VAR VARIABLE type .)
    RBRACE          reduce using rule 31 (declaration -> VAR VARIABLE type .)
    CASE            reduce using rule 31 (declaration -> VAR VARIABLE type .)
    DEFAULT         reduce using rule 31 (declaration -> VAR VARIABLE type .)
    ASIG            shift and go to state 144
    ASSIGN          shift and go to state 145


state 96

    (130) array_declaration -> VAR VARIABLE ASSIGN . array_literal
    (131) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE

    LBRACKET        shift and go to state 40

    array_literal                  shift and go to state 146

state 97

    (115) map_declaration -> VAR VARIABLE MAP . LBRACKET type RBRACKET type

    LBRACKET        shift and go to state 147


state 98

    (129) array_declaration -> VAR VARIABLE LBRACKET . NUMBER RBRACKET type
    (134) slice_declaration -> VAR VARIABLE LBRACKET . RBRACKET type

    NUMBER          shift and go to state 148
    RBRACKET        shift and go to state 149


state 99

    (83) type -> INT_TYPE .

    ASIG            reduce using rule 83 (type -> INT_TYPE .)
    ASSIGN          reduce using rule 83 (type -> INT_TYPE .)
    VAR             reduce using rule 83 (type -> INT_TYPE .)
    VARIABLE        reduce using rule 83 (type -> INT_TYPE .)
    FMT             reduce using rule 83 (type -> INT_TYPE .)
    CONTINUE        reduce using rule 83 (type -> INT_TYPE .)
    FUNC            reduce using rule 83 (type -> INT_TYPE .)
    IF              reduce using rule 83 (type -> INT_TYPE .)
    FOR             reduce using rule 83 (type -> INT_TYPE .)
    TYPE            reduce using rule 83 (type -> INT_TYPE .)
    SWITCH          reduce using rule 83 (type -> INT_TYPE .)
    LBRACKET        reduce using rule 83 (type -> INT_TYPE .)
    BREAK           reduce using rule 83 (type -> INT_TYPE .)
    RETURN          reduce using rule 83 (type -> INT_TYPE .)
    $end            reduce using rule 83 (type -> INT_TYPE .)
    RBRACE          reduce using rule 83 (type -> INT_TYPE .)
    CASE            reduce using rule 83 (type -> INT_TYPE .)
    DEFAULT         reduce using rule 83 (type -> INT_TYPE .)
    LBRACE          reduce using rule 83 (type -> INT_TYPE .)
    RBRACKET        reduce using rule 83 (type -> INT_TYPE .)
    COMMA           reduce using rule 83 (type -> INT_TYPE .)
    RPAREN          reduce using rule 83 (type -> INT_TYPE .)
    INT_TYPE        reduce using rule 83 (type -> INT_TYPE .)
    FLOAT64_TYPE    reduce using rule 83 (type -> INT_TYPE .)
    STRING_TYPE     reduce using rule 83 (type -> INT_TYPE .)
    BOOL_TYPE       reduce using rule 83 (type -> INT_TYPE .)


state 100

    (84) type -> FLOAT64_TYPE .

    ASIG            reduce using rule 84 (type -> FLOAT64_TYPE .)
    ASSIGN          reduce using rule 84 (type -> FLOAT64_TYPE .)
    VAR             reduce using rule 84 (type -> FLOAT64_TYPE .)
    VARIABLE        reduce using rule 84 (type -> FLOAT64_TYPE .)
    FMT             reduce using rule 84 (type -> FLOAT64_TYPE .)
    CONTINUE        reduce using rule 84 (type -> FLOAT64_TYPE .)
    FUNC            reduce using rule 84 (type -> FLOAT64_TYPE .)
    IF              reduce using rule 84 (type -> FLOAT64_TYPE .)
    FOR             reduce using rule 84 (type -> FLOAT64_TYPE .)
    TYPE            reduce using rule 84 (type -> FLOAT64_TYPE .)
    SWITCH          reduce using rule 84 (type -> FLOAT64_TYPE .)
    LBRACKET        reduce using rule 84 (type -> FLOAT64_TYPE .)
    BREAK           reduce using rule 84 (type -> FLOAT64_TYPE .)
    RETURN          reduce using rule 84 (type -> FLOAT64_TYPE .)
    $end            reduce using rule 84 (type -> FLOAT64_TYPE .)
    RBRACE          reduce using rule 84 (type -> FLOAT64_TYPE .)
    CASE            reduce using rule 84 (type -> FLOAT64_TYPE .)
    DEFAULT         reduce using rule 84 (type -> FLOAT64_TYPE .)
    LBRACE          reduce using rule 84 (type -> FLOAT64_TYPE .)
    RBRACKET        reduce using rule 84 (type -> FLOAT64_TYPE .)
    COMMA           reduce using rule 84 (type -> FLOAT64_TYPE .)
    RPAREN          reduce using rule 84 (type -> FLOAT64_TYPE .)
    INT_TYPE        reduce using rule 84 (type -> FLOAT64_TYPE .)
    FLOAT64_TYPE    reduce using rule 84 (type -> FLOAT64_TYPE .)
    STRING_TYPE     reduce using rule 84 (type -> FLOAT64_TYPE .)
    BOOL_TYPE       reduce using rule 84 (type -> FLOAT64_TYPE .)


state 101

    (85) type -> STRING_TYPE .

    ASIG            reduce using rule 85 (type -> STRING_TYPE .)
    ASSIGN          reduce using rule 85 (type -> STRING_TYPE .)
    VAR             reduce using rule 85 (type -> STRING_TYPE .)
    VARIABLE        reduce using rule 85 (type -> STRING_TYPE .)
    FMT             reduce using rule 85 (type -> STRING_TYPE .)
    CONTINUE        reduce using rule 85 (type -> STRING_TYPE .)
    FUNC            reduce using rule 85 (type -> STRING_TYPE .)
    IF              reduce using rule 85 (type -> STRING_TYPE .)
    FOR             reduce using rule 85 (type -> STRING_TYPE .)
    TYPE            reduce using rule 85 (type -> STRING_TYPE .)
    SWITCH          reduce using rule 85 (type -> STRING_TYPE .)
    LBRACKET        reduce using rule 85 (type -> STRING_TYPE .)
    BREAK           reduce using rule 85 (type -> STRING_TYPE .)
    RETURN          reduce using rule 85 (type -> STRING_TYPE .)
    $end            reduce using rule 85 (type -> STRING_TYPE .)
    RBRACE          reduce using rule 85 (type -> STRING_TYPE .)
    CASE            reduce using rule 85 (type -> STRING_TYPE .)
    DEFAULT         reduce using rule 85 (type -> STRING_TYPE .)
    LBRACE          reduce using rule 85 (type -> STRING_TYPE .)
    RBRACKET        reduce using rule 85 (type -> STRING_TYPE .)
    COMMA           reduce using rule 85 (type -> STRING_TYPE .)
    RPAREN          reduce using rule 85 (type -> STRING_TYPE .)
    INT_TYPE        reduce using rule 85 (type -> STRING_TYPE .)
    FLOAT64_TYPE    reduce using rule 85 (type -> STRING_TYPE .)
    STRING_TYPE     reduce using rule 85 (type -> STRING_TYPE .)
    BOOL_TYPE       reduce using rule 85 (type -> STRING_TYPE .)


state 102

    (86) type -> BOOL_TYPE .

    ASIG            reduce using rule 86 (type -> BOOL_TYPE .)
    ASSIGN          reduce using rule 86 (type -> BOOL_TYPE .)
    VAR             reduce using rule 86 (type -> BOOL_TYPE .)
    VARIABLE        reduce using rule 86 (type -> BOOL_TYPE .)
    FMT             reduce using rule 86 (type -> BOOL_TYPE .)
    CONTINUE        reduce using rule 86 (type -> BOOL_TYPE .)
    FUNC            reduce using rule 86 (type -> BOOL_TYPE .)
    IF              reduce using rule 86 (type -> BOOL_TYPE .)
    FOR             reduce using rule 86 (type -> BOOL_TYPE .)
    TYPE            reduce using rule 86 (type -> BOOL_TYPE .)
    SWITCH          reduce using rule 86 (type -> BOOL_TYPE .)
    LBRACKET        reduce using rule 86 (type -> BOOL_TYPE .)
    BREAK           reduce using rule 86 (type -> BOOL_TYPE .)
    RETURN          reduce using rule 86 (type -> BOOL_TYPE .)
    $end            reduce using rule 86 (type -> BOOL_TYPE .)
    RBRACE          reduce using rule 86 (type -> BOOL_TYPE .)
    CASE            reduce using rule 86 (type -> BOOL_TYPE .)
    DEFAULT         reduce using rule 86 (type -> BOOL_TYPE .)
    LBRACE          reduce using rule 86 (type -> BOOL_TYPE .)
    RBRACKET        reduce using rule 86 (type -> BOOL_TYPE .)
    COMMA           reduce using rule 86 (type -> BOOL_TYPE .)
    RPAREN          reduce using rule 86 (type -> BOOL_TYPE .)
    INT_TYPE        reduce using rule 86 (type -> BOOL_TYPE .)
    FLOAT64_TYPE    reduce using rule 86 (type -> BOOL_TYPE .)
    STRING_TYPE     reduce using rule 86 (type -> BOOL_TYPE .)
    BOOL_TYPE       reduce using rule 86 (type -> BOOL_TYPE .)


state 103

    (39) print_stmt -> FMT DOT PRINTF . LPAREN STRING COMMA expression RPAREN

    LPAREN          shift and go to state 150


state 104

    (40) print_stmt -> FMT DOT PRINTLN . LPAREN expression RPAREN
    (41) print_stmt -> FMT DOT PRINTLN . LPAREN STRING COMMA VARIABLE RPAREN

    LPAREN          shift and go to state 151


state 105

    (42) input_stmt -> FMT DOT SCANLN . LPAREN AMPER VARIABLE RPAREN

    LPAREN          shift and go to state 152


state 106

    (98) struct_method -> FUNC LPAREN VARIABLE . VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (99) struct_method -> FUNC LPAREN VARIABLE . VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE

    VARIABLE        shift and go to state 153


state 107

    (50) func_no_params_void -> FUNC VARIABLE LPAREN . RPAREN LBRACE program RBRACE
    (47) func_with_map -> FUNC VARIABLE LPAREN . RPAREN MAP LBRACKET type RBRACKET type func_body
    (44) func_header -> FUNC VARIABLE LPAREN . param_list RPAREN type
    (49) func_header_no_params -> FUNC VARIABLE LPAREN . RPAREN type
    (53) param_list -> . param
    (54) param_list -> . param COMMA param_list
    (55) param -> . VARIABLE type

    RPAREN          shift and go to state 155
    VARIABLE        shift and go to state 154

    param_list                     shift and go to state 156
    param                          shift and go to state 157

state 108

    (45) func_body -> LBRACE program . RBRACE

    RBRACE          shift and go to state 158


state 109

    (97) block -> LBRACE program . RBRACE

    RBRACE          shift and go to state 159


state 110

    (131) array_literal -> LBRACKET NUMBER RBRACKET . type LBRACE array_values RBRACE
    (83) type -> . INT_TYPE
    (84) type -> . FLOAT64_TYPE
    (85) type -> . STRING_TYPE
    (86) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 99
    FLOAT64_TYPE    shift and go to state 100
    STRING_TYPE     shift and go to state 101
    BOOL_TYPE       shift and go to state 102

    type                           shift and go to state 160

state 111

    (87) if_stmt -> IF expression block .
    (88) if_stmt -> IF expression block . ELSE block

    VAR             reduce using rule 87 (if_stmt -> IF expression block .)
    VARIABLE        reduce using rule 87 (if_stmt -> IF expression block .)
    FMT             reduce using rule 87 (if_stmt -> IF expression block .)
    CONTINUE        reduce using rule 87 (if_stmt -> IF expression block .)
    FUNC            reduce using rule 87 (if_stmt -> IF expression block .)
    IF              reduce using rule 87 (if_stmt -> IF expression block .)
    FOR             reduce using rule 87 (if_stmt -> IF expression block .)
    TYPE            reduce using rule 87 (if_stmt -> IF expression block .)
    SWITCH          reduce using rule 87 (if_stmt -> IF expression block .)
    LBRACKET        reduce using rule 87 (if_stmt -> IF expression block .)
    BREAK           reduce using rule 87 (if_stmt -> IF expression block .)
    RETURN          reduce using rule 87 (if_stmt -> IF expression block .)
    $end            reduce using rule 87 (if_stmt -> IF expression block .)
    RBRACE          reduce using rule 87 (if_stmt -> IF expression block .)
    CASE            reduce using rule 87 (if_stmt -> IF expression block .)
    DEFAULT         reduce using rule 87 (if_stmt -> IF expression block .)
    ELSE            shift and go to state 161


state 112

    (59) expression -> expression PLUS . term
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    VARIABLE        shift and go to state 163
    NUMBER          shift and go to state 164
    FLOAT           shift and go to state 165
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    term                           shift and go to state 162
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 113

    (60) expression -> expression MINUS . term
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    VARIABLE        shift and go to state 163
    NUMBER          shift and go to state 164
    FLOAT           shift and go to state 165
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    term                           shift and go to state 166
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 114

    (61) expression -> expression AND . expression
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 167
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 115

    (62) expression -> expression OR . expression
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 168
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 116

    (63) expression -> expression EQ . expression
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 169
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 117

    (64) expression -> expression NE . expression
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 170
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 118

    (65) expression -> expression LT . expression
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 171
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 119

    (66) expression -> expression GT . expression
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 172
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 120

    (67) expression -> expression LE . expression
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 173
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 121

    (68) expression -> expression GE . expression
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 174
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 122

    (105) struct_instance -> VARIABLE LBRACE . struct_fields_values RBRACE
    (106) struct_fields_values -> . field_value
    (107) struct_fields_values -> . field_value COMMA struct_fields_values
    (108) field_value -> . VARIABLE COLON expression

    VARIABLE        shift and go to state 175

    struct_fields_values           shift and go to state 176
    field_value                    shift and go to state 177

state 123

    (70) term -> term TIMES . factor
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 164
    FLOAT           shift and go to state 165
    STRING          shift and go to state 70
    VARIABLE        shift and go to state 179
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    factor                         shift and go to state 178
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 124

    (71) term -> term DIVIDE . factor
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 164
    FLOAT           shift and go to state 165
    STRING          shift and go to state 70
    VARIABLE        shift and go to state 179
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    factor                         shift and go to state 180
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 125

    (79) factor -> LPAREN expression . RPAREN
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression

    RPAREN          shift and go to state 181
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121


state 126

    (123) make_expr -> MAKE LPAREN . MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> MAKE LPAREN . LBRACKET RBRACKET type RPAREN

    MAP             shift and go to state 182
    LBRACKET        shift and go to state 183


state 127

    (89) for_stmt -> FOR expression for_block .

    VAR             reduce using rule 89 (for_stmt -> FOR expression for_block .)
    VARIABLE        reduce using rule 89 (for_stmt -> FOR expression for_block .)
    FMT             reduce using rule 89 (for_stmt -> FOR expression for_block .)
    CONTINUE        reduce using rule 89 (for_stmt -> FOR expression for_block .)
    FUNC            reduce using rule 89 (for_stmt -> FOR expression for_block .)
    IF              reduce using rule 89 (for_stmt -> FOR expression for_block .)
    FOR             reduce using rule 89 (for_stmt -> FOR expression for_block .)
    TYPE            reduce using rule 89 (for_stmt -> FOR expression for_block .)
    SWITCH          reduce using rule 89 (for_stmt -> FOR expression for_block .)
    LBRACKET        reduce using rule 89 (for_stmt -> FOR expression for_block .)
    BREAK           reduce using rule 89 (for_stmt -> FOR expression for_block .)
    RETURN          reduce using rule 89 (for_stmt -> FOR expression for_block .)
    $end            reduce using rule 89 (for_stmt -> FOR expression for_block .)
    RBRACE          reduce using rule 89 (for_stmt -> FOR expression for_block .)
    CASE            reduce using rule 89 (for_stmt -> FOR expression for_block .)
    DEFAULT         reduce using rule 89 (for_stmt -> FOR expression for_block .)


state 128

    (91) for_block -> begin_loop . block end_loop
    (97) block -> . LBRACE program RBRACE

    LBRACE          shift and go to state 62

    block                          shift and go to state 184

state 129

    (90) for_stmt -> FOR assignment SEMICOLON . expression SEMICOLON for_update for_block
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 185
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 130

    (38) assignment -> VARIABLE ASIG . expression
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 87
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 131

    (100) struct_def -> TYPE VARIABLE STRUCT . LBRACE struct_fields RBRACE

    LBRACE          shift and go to state 186


state 132

    (109) switch_stmt -> SWITCH expression LBRACE . case_list RBRACE
    (111) case_list -> . case_clause
    (112) case_list -> . case_clause case_list
    (113) case_clause -> . CASE expression COLON program
    (114) case_clause -> . DEFAULT COLON program

    CASE            shift and go to state 135
    DEFAULT         shift and go to state 136

    case_list                      shift and go to state 187
    case_clause                    shift and go to state 134

state 133

    (110) switch_stmt -> SWITCH LBRACE case_list . RBRACE

    RBRACE          shift and go to state 188


state 134

    (111) case_list -> case_clause .
    (112) case_list -> case_clause . case_list
    (111) case_list -> . case_clause
    (112) case_list -> . case_clause case_list
    (113) case_clause -> . CASE expression COLON program
    (114) case_clause -> . DEFAULT COLON program

    RBRACE          reduce using rule 111 (case_list -> case_clause .)
    CASE            shift and go to state 135
    DEFAULT         shift and go to state 136

    case_clause                    shift and go to state 134
    case_list                      shift and go to state 189

state 135

    (113) case_clause -> CASE . expression COLON program
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 190
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 136

    (114) case_clause -> DEFAULT . COLON program

    COLON           shift and go to state 191


state 137

    (2) import_stmt -> IMPORT LPAREN STRING RPAREN .

    VAR             reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    VARIABLE        reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    FMT             reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    CONTINUE        reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    FUNC            reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    IF              reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    FOR             reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    TYPE            reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    SWITCH          reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    LBRACKET        reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    BREAK           reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    RETURN          reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)


state 138

    (116) map_declaration -> VARIABLE ASIG MAP LBRACKET . type RBRACKET type
    (117) map_declaration -> VARIABLE ASIG MAP LBRACKET . type RBRACKET type LBRACE map_params RBRACE
    (125) map_declaration_values -> VARIABLE ASIG MAP LBRACKET . type RBRACKET type LBRACE map_kv_pairs RBRACE
    (83) type -> . INT_TYPE
    (84) type -> . FLOAT64_TYPE
    (85) type -> . STRING_TYPE
    (86) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 99
    FLOAT64_TYPE    shift and go to state 100
    STRING_TYPE     shift and go to state 101
    BOOL_TYPE       shift and go to state 102

    type                           shift and go to state 192

state 139

    (135) slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET . type LBRACE slice_values RBRACE
    (83) type -> . INT_TYPE
    (84) type -> . FLOAT64_TYPE
    (85) type -> . STRING_TYPE
    (86) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 99
    FLOAT64_TYPE    shift and go to state 100
    STRING_TYPE     shift and go to state 101
    BOOL_TYPE       shift and go to state 102

    type                           shift and go to state 193

state 140

    (121) make_stmt -> VARIABLE ASIG MAKE LPAREN . MAP LBRACKET type RBRACKET type RPAREN
    (122) make_stmt -> VARIABLE ASIG MAKE LPAREN . LBRACKET RBRACKET type RPAREN
    (123) make_expr -> MAKE LPAREN . MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> MAKE LPAREN . LBRACKET RBRACKET type RPAREN

    MAP             shift and go to state 194
    LBRACKET        shift and go to state 195


state 141

    (138) new_stmt -> VARIABLE ASIG NEW LPAREN . VARIABLE RPAREN

    VARIABLE        shift and go to state 196


state 142

    (51) func_call -> VARIABLE LPAREN arg_list RPAREN .

    VAR             reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    VARIABLE        reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    FMT             reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    CONTINUE        reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    FUNC            reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    IF              reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    FOR             reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    TYPE            reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    SWITCH          reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    LBRACKET        reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    BREAK           reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    RETURN          reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    $end            reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    RBRACE          reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    CASE            reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    DEFAULT         reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    DIVIDE          reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    PLUS            reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    AND             reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    OR              reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    EQ              reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    NE              reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    LT              reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    GT              reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    LE              reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    GE              reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    LBRACE          reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    SEMICOLON       reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    COLON           reduce using rule 51 (func_call -> VARIABLE LPAREN arg_list RPAREN .)


state 143

    (57) arg_list -> expression COMMA . arg_list
    (56) arg_list -> . expression
    (57) arg_list -> . expression COMMA arg_list
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 94
    arg_list                       shift and go to state 197
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 144

    (32) declaration -> VAR VARIABLE type ASIG . expression
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 198
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 145

    (33) declaration -> VAR VARIABLE type ASSIGN . expression
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 199
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 146

    (130) array_declaration -> VAR VARIABLE ASSIGN array_literal .

    VAR             reduce using rule 130 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    VARIABLE        reduce using rule 130 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    FMT             reduce using rule 130 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    CONTINUE        reduce using rule 130 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    FUNC            reduce using rule 130 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    IF              reduce using rule 130 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    FOR             reduce using rule 130 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    TYPE            reduce using rule 130 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    SWITCH          reduce using rule 130 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    LBRACKET        reduce using rule 130 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    BREAK           reduce using rule 130 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    RETURN          reduce using rule 130 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    $end            reduce using rule 130 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    RBRACE          reduce using rule 130 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    CASE            reduce using rule 130 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    DEFAULT         reduce using rule 130 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)


state 147

    (115) map_declaration -> VAR VARIABLE MAP LBRACKET . type RBRACKET type
    (83) type -> . INT_TYPE
    (84) type -> . FLOAT64_TYPE
    (85) type -> . STRING_TYPE
    (86) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 99
    FLOAT64_TYPE    shift and go to state 100
    STRING_TYPE     shift and go to state 101
    BOOL_TYPE       shift and go to state 102

    type                           shift and go to state 200

state 148

    (129) array_declaration -> VAR VARIABLE LBRACKET NUMBER . RBRACKET type

    RBRACKET        shift and go to state 201


state 149

    (134) slice_declaration -> VAR VARIABLE LBRACKET RBRACKET . type
    (83) type -> . INT_TYPE
    (84) type -> . FLOAT64_TYPE
    (85) type -> . STRING_TYPE
    (86) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 99
    FLOAT64_TYPE    shift and go to state 100
    STRING_TYPE     shift and go to state 101
    BOOL_TYPE       shift and go to state 102

    type                           shift and go to state 202

state 150

    (39) print_stmt -> FMT DOT PRINTF LPAREN . STRING COMMA expression RPAREN

    STRING          shift and go to state 203


state 151

    (40) print_stmt -> FMT DOT PRINTLN LPAREN . expression RPAREN
    (41) print_stmt -> FMT DOT PRINTLN LPAREN . STRING COMMA VARIABLE RPAREN
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    STRING          shift and go to state 205
    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 204
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 152

    (42) input_stmt -> FMT DOT SCANLN LPAREN . AMPER VARIABLE RPAREN

    AMPER           shift and go to state 206


state 153

    (98) struct_method -> FUNC LPAREN VARIABLE VARIABLE . RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (99) struct_method -> FUNC LPAREN VARIABLE VARIABLE . RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE

    RPAREN          shift and go to state 207


state 154

    (55) param -> VARIABLE . type
    (83) type -> . INT_TYPE
    (84) type -> . FLOAT64_TYPE
    (85) type -> . STRING_TYPE
    (86) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 99
    FLOAT64_TYPE    shift and go to state 100
    STRING_TYPE     shift and go to state 101
    BOOL_TYPE       shift and go to state 102

    type                           shift and go to state 208

state 155

    (50) func_no_params_void -> FUNC VARIABLE LPAREN RPAREN . LBRACE program RBRACE
    (47) func_with_map -> FUNC VARIABLE LPAREN RPAREN . MAP LBRACKET type RBRACKET type func_body
    (49) func_header_no_params -> FUNC VARIABLE LPAREN RPAREN . type
    (83) type -> . INT_TYPE
    (84) type -> . FLOAT64_TYPE
    (85) type -> . STRING_TYPE
    (86) type -> . BOOL_TYPE

    LBRACE          shift and go to state 209
    MAP             shift and go to state 210
    INT_TYPE        shift and go to state 99
    FLOAT64_TYPE    shift and go to state 100
    STRING_TYPE     shift and go to state 101
    BOOL_TYPE       shift and go to state 102

    type                           shift and go to state 211

state 156

    (44) func_header -> FUNC VARIABLE LPAREN param_list . RPAREN type

    RPAREN          shift and go to state 212


state 157

    (53) param_list -> param .
    (54) param_list -> param . COMMA param_list

    RPAREN          reduce using rule 53 (param_list -> param .)
    COMMA           shift and go to state 213


state 158

    (45) func_body -> LBRACE program RBRACE .

    VAR             reduce using rule 45 (func_body -> LBRACE program RBRACE .)
    VARIABLE        reduce using rule 45 (func_body -> LBRACE program RBRACE .)
    FMT             reduce using rule 45 (func_body -> LBRACE program RBRACE .)
    CONTINUE        reduce using rule 45 (func_body -> LBRACE program RBRACE .)
    FUNC            reduce using rule 45 (func_body -> LBRACE program RBRACE .)
    IF              reduce using rule 45 (func_body -> LBRACE program RBRACE .)
    FOR             reduce using rule 45 (func_body -> LBRACE program RBRACE .)
    TYPE            reduce using rule 45 (func_body -> LBRACE program RBRACE .)
    SWITCH          reduce using rule 45 (func_body -> LBRACE program RBRACE .)
    LBRACKET        reduce using rule 45 (func_body -> LBRACE program RBRACE .)
    BREAK           reduce using rule 45 (func_body -> LBRACE program RBRACE .)
    RETURN          reduce using rule 45 (func_body -> LBRACE program RBRACE .)
    $end            reduce using rule 45 (func_body -> LBRACE program RBRACE .)
    RBRACE          reduce using rule 45 (func_body -> LBRACE program RBRACE .)
    CASE            reduce using rule 45 (func_body -> LBRACE program RBRACE .)
    DEFAULT         reduce using rule 45 (func_body -> LBRACE program RBRACE .)


state 159

    (97) block -> LBRACE program RBRACE .

    VAR             reduce using rule 97 (block -> LBRACE program RBRACE .)
    VARIABLE        reduce using rule 97 (block -> LBRACE program RBRACE .)
    FMT             reduce using rule 97 (block -> LBRACE program RBRACE .)
    CONTINUE        reduce using rule 97 (block -> LBRACE program RBRACE .)
    FUNC            reduce using rule 97 (block -> LBRACE program RBRACE .)
    IF              reduce using rule 97 (block -> LBRACE program RBRACE .)
    FOR             reduce using rule 97 (block -> LBRACE program RBRACE .)
    TYPE            reduce using rule 97 (block -> LBRACE program RBRACE .)
    SWITCH          reduce using rule 97 (block -> LBRACE program RBRACE .)
    LBRACKET        reduce using rule 97 (block -> LBRACE program RBRACE .)
    BREAK           reduce using rule 97 (block -> LBRACE program RBRACE .)
    RETURN          reduce using rule 97 (block -> LBRACE program RBRACE .)
    $end            reduce using rule 97 (block -> LBRACE program RBRACE .)
    RBRACE          reduce using rule 97 (block -> LBRACE program RBRACE .)
    CASE            reduce using rule 97 (block -> LBRACE program RBRACE .)
    DEFAULT         reduce using rule 97 (block -> LBRACE program RBRACE .)
    ELSE            reduce using rule 97 (block -> LBRACE program RBRACE .)


state 160

    (131) array_literal -> LBRACKET NUMBER RBRACKET type . LBRACE array_values RBRACE

    LBRACE          shift and go to state 214


state 161

    (88) if_stmt -> IF expression block ELSE . block
    (97) block -> . LBRACE program RBRACE

    LBRACE          shift and go to state 62

    block                          shift and go to state 215

state 162

    (59) expression -> expression PLUS term .
    (70) term -> term . TIMES factor
    (71) term -> term . DIVIDE factor

    PLUS            reduce using rule 59 (expression -> expression PLUS term .)
    MINUS           reduce using rule 59 (expression -> expression PLUS term .)
    AND             reduce using rule 59 (expression -> expression PLUS term .)
    OR              reduce using rule 59 (expression -> expression PLUS term .)
    EQ              reduce using rule 59 (expression -> expression PLUS term .)
    NE              reduce using rule 59 (expression -> expression PLUS term .)
    LT              reduce using rule 59 (expression -> expression PLUS term .)
    GT              reduce using rule 59 (expression -> expression PLUS term .)
    LE              reduce using rule 59 (expression -> expression PLUS term .)
    GE              reduce using rule 59 (expression -> expression PLUS term .)
    LBRACE          reduce using rule 59 (expression -> expression PLUS term .)
    VAR             reduce using rule 59 (expression -> expression PLUS term .)
    VARIABLE        reduce using rule 59 (expression -> expression PLUS term .)
    FMT             reduce using rule 59 (expression -> expression PLUS term .)
    CONTINUE        reduce using rule 59 (expression -> expression PLUS term .)
    FUNC            reduce using rule 59 (expression -> expression PLUS term .)
    IF              reduce using rule 59 (expression -> expression PLUS term .)
    FOR             reduce using rule 59 (expression -> expression PLUS term .)
    TYPE            reduce using rule 59 (expression -> expression PLUS term .)
    SWITCH          reduce using rule 59 (expression -> expression PLUS term .)
    LBRACKET        reduce using rule 59 (expression -> expression PLUS term .)
    BREAK           reduce using rule 59 (expression -> expression PLUS term .)
    RETURN          reduce using rule 59 (expression -> expression PLUS term .)
    $end            reduce using rule 59 (expression -> expression PLUS term .)
    RBRACE          reduce using rule 59 (expression -> expression PLUS term .)
    CASE            reduce using rule 59 (expression -> expression PLUS term .)
    DEFAULT         reduce using rule 59 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 59 (expression -> expression PLUS term .)
    COMMA           reduce using rule 59 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 59 (expression -> expression PLUS term .)
    COLON           reduce using rule 59 (expression -> expression PLUS term .)
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124


state 163

    (72) term -> VARIABLE .
    (76) factor -> VARIABLE .
    (105) struct_instance -> VARIABLE . LBRACE struct_fields_values RBRACE
    (51) func_call -> VARIABLE . LPAREN arg_list RPAREN
    (52) func_call -> VARIABLE . LPAREN RPAREN

  ! reduce/reduce conflict for TIMES resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for PLUS resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for MINUS resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for AND resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for OR resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for EQ resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for NE resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for LT resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for GT resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for LE resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for GE resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for VAR resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for FMT resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for FUNC resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for IF resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for FOR resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for TYPE resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for SWITCH resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for BREAK resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for RETURN resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for $end resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for CASE resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for COLON resolved using rule 72 (term -> VARIABLE .)
  ! shift/reduce conflict for LBRACE resolved as shift
    TIMES           reduce using rule 72 (term -> VARIABLE .)
    DIVIDE          reduce using rule 72 (term -> VARIABLE .)
    PLUS            reduce using rule 72 (term -> VARIABLE .)
    MINUS           reduce using rule 72 (term -> VARIABLE .)
    AND             reduce using rule 72 (term -> VARIABLE .)
    OR              reduce using rule 72 (term -> VARIABLE .)
    EQ              reduce using rule 72 (term -> VARIABLE .)
    NE              reduce using rule 72 (term -> VARIABLE .)
    LT              reduce using rule 72 (term -> VARIABLE .)
    GT              reduce using rule 72 (term -> VARIABLE .)
    LE              reduce using rule 72 (term -> VARIABLE .)
    GE              reduce using rule 72 (term -> VARIABLE .)
    VAR             reduce using rule 72 (term -> VARIABLE .)
    VARIABLE        reduce using rule 72 (term -> VARIABLE .)
    FMT             reduce using rule 72 (term -> VARIABLE .)
    CONTINUE        reduce using rule 72 (term -> VARIABLE .)
    FUNC            reduce using rule 72 (term -> VARIABLE .)
    IF              reduce using rule 72 (term -> VARIABLE .)
    FOR             reduce using rule 72 (term -> VARIABLE .)
    TYPE            reduce using rule 72 (term -> VARIABLE .)
    SWITCH          reduce using rule 72 (term -> VARIABLE .)
    LBRACKET        reduce using rule 72 (term -> VARIABLE .)
    BREAK           reduce using rule 72 (term -> VARIABLE .)
    RETURN          reduce using rule 72 (term -> VARIABLE .)
    $end            reduce using rule 72 (term -> VARIABLE .)
    RBRACE          reduce using rule 72 (term -> VARIABLE .)
    CASE            reduce using rule 72 (term -> VARIABLE .)
    DEFAULT         reduce using rule 72 (term -> VARIABLE .)
    SEMICOLON       reduce using rule 72 (term -> VARIABLE .)
    COMMA           reduce using rule 72 (term -> VARIABLE .)
    RPAREN          reduce using rule 72 (term -> VARIABLE .)
    COLON           reduce using rule 72 (term -> VARIABLE .)
    LBRACE          shift and go to state 122
    LPAREN          shift and go to state 51

  ! LBRACE          [ reduce using rule 72 (term -> VARIABLE .) ]
  ! TIMES           [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! PLUS            [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! AND             [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! OR              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! EQ              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! NE              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! LT              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! GT              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! LE              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! GE              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! LBRACE          [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! VAR             [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! VARIABLE        [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! FMT             [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! CONTINUE        [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! FUNC            [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! IF              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! FOR             [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! TYPE            [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! SWITCH          [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! LBRACKET        [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! BREAK           [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! RETURN          [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! $end            [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! RBRACE          [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! CASE            [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! DEFAULT         [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! COLON           [ reduce using rule 76 (factor -> VARIABLE .) ]


state 164

    (73) factor -> NUMBER .

    TIMES           reduce using rule 73 (factor -> NUMBER .)
    DIVIDE          reduce using rule 73 (factor -> NUMBER .)
    PLUS            reduce using rule 73 (factor -> NUMBER .)
    MINUS           reduce using rule 73 (factor -> NUMBER .)
    AND             reduce using rule 73 (factor -> NUMBER .)
    OR              reduce using rule 73 (factor -> NUMBER .)
    EQ              reduce using rule 73 (factor -> NUMBER .)
    NE              reduce using rule 73 (factor -> NUMBER .)
    LT              reduce using rule 73 (factor -> NUMBER .)
    GT              reduce using rule 73 (factor -> NUMBER .)
    LE              reduce using rule 73 (factor -> NUMBER .)
    GE              reduce using rule 73 (factor -> NUMBER .)
    LBRACE          reduce using rule 73 (factor -> NUMBER .)
    VAR             reduce using rule 73 (factor -> NUMBER .)
    VARIABLE        reduce using rule 73 (factor -> NUMBER .)
    FMT             reduce using rule 73 (factor -> NUMBER .)
    CONTINUE        reduce using rule 73 (factor -> NUMBER .)
    FUNC            reduce using rule 73 (factor -> NUMBER .)
    IF              reduce using rule 73 (factor -> NUMBER .)
    FOR             reduce using rule 73 (factor -> NUMBER .)
    TYPE            reduce using rule 73 (factor -> NUMBER .)
    SWITCH          reduce using rule 73 (factor -> NUMBER .)
    LBRACKET        reduce using rule 73 (factor -> NUMBER .)
    BREAK           reduce using rule 73 (factor -> NUMBER .)
    RETURN          reduce using rule 73 (factor -> NUMBER .)
    $end            reduce using rule 73 (factor -> NUMBER .)
    RBRACE          reduce using rule 73 (factor -> NUMBER .)
    CASE            reduce using rule 73 (factor -> NUMBER .)
    DEFAULT         reduce using rule 73 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 73 (factor -> NUMBER .)
    COMMA           reduce using rule 73 (factor -> NUMBER .)
    RPAREN          reduce using rule 73 (factor -> NUMBER .)
    COLON           reduce using rule 73 (factor -> NUMBER .)


state 165

    (74) factor -> FLOAT .

    TIMES           reduce using rule 74 (factor -> FLOAT .)
    DIVIDE          reduce using rule 74 (factor -> FLOAT .)
    PLUS            reduce using rule 74 (factor -> FLOAT .)
    MINUS           reduce using rule 74 (factor -> FLOAT .)
    AND             reduce using rule 74 (factor -> FLOAT .)
    OR              reduce using rule 74 (factor -> FLOAT .)
    EQ              reduce using rule 74 (factor -> FLOAT .)
    NE              reduce using rule 74 (factor -> FLOAT .)
    LT              reduce using rule 74 (factor -> FLOAT .)
    GT              reduce using rule 74 (factor -> FLOAT .)
    LE              reduce using rule 74 (factor -> FLOAT .)
    GE              reduce using rule 74 (factor -> FLOAT .)
    LBRACE          reduce using rule 74 (factor -> FLOAT .)
    VAR             reduce using rule 74 (factor -> FLOAT .)
    VARIABLE        reduce using rule 74 (factor -> FLOAT .)
    FMT             reduce using rule 74 (factor -> FLOAT .)
    CONTINUE        reduce using rule 74 (factor -> FLOAT .)
    FUNC            reduce using rule 74 (factor -> FLOAT .)
    IF              reduce using rule 74 (factor -> FLOAT .)
    FOR             reduce using rule 74 (factor -> FLOAT .)
    TYPE            reduce using rule 74 (factor -> FLOAT .)
    SWITCH          reduce using rule 74 (factor -> FLOAT .)
    LBRACKET        reduce using rule 74 (factor -> FLOAT .)
    BREAK           reduce using rule 74 (factor -> FLOAT .)
    RETURN          reduce using rule 74 (factor -> FLOAT .)
    $end            reduce using rule 74 (factor -> FLOAT .)
    RBRACE          reduce using rule 74 (factor -> FLOAT .)
    CASE            reduce using rule 74 (factor -> FLOAT .)
    DEFAULT         reduce using rule 74 (factor -> FLOAT .)
    SEMICOLON       reduce using rule 74 (factor -> FLOAT .)
    COMMA           reduce using rule 74 (factor -> FLOAT .)
    RPAREN          reduce using rule 74 (factor -> FLOAT .)
    COLON           reduce using rule 74 (factor -> FLOAT .)


state 166

    (60) expression -> expression MINUS term .
    (70) term -> term . TIMES factor
    (71) term -> term . DIVIDE factor

    PLUS            reduce using rule 60 (expression -> expression MINUS term .)
    MINUS           reduce using rule 60 (expression -> expression MINUS term .)
    AND             reduce using rule 60 (expression -> expression MINUS term .)
    OR              reduce using rule 60 (expression -> expression MINUS term .)
    EQ              reduce using rule 60 (expression -> expression MINUS term .)
    NE              reduce using rule 60 (expression -> expression MINUS term .)
    LT              reduce using rule 60 (expression -> expression MINUS term .)
    GT              reduce using rule 60 (expression -> expression MINUS term .)
    LE              reduce using rule 60 (expression -> expression MINUS term .)
    GE              reduce using rule 60 (expression -> expression MINUS term .)
    LBRACE          reduce using rule 60 (expression -> expression MINUS term .)
    VAR             reduce using rule 60 (expression -> expression MINUS term .)
    VARIABLE        reduce using rule 60 (expression -> expression MINUS term .)
    FMT             reduce using rule 60 (expression -> expression MINUS term .)
    CONTINUE        reduce using rule 60 (expression -> expression MINUS term .)
    FUNC            reduce using rule 60 (expression -> expression MINUS term .)
    IF              reduce using rule 60 (expression -> expression MINUS term .)
    FOR             reduce using rule 60 (expression -> expression MINUS term .)
    TYPE            reduce using rule 60 (expression -> expression MINUS term .)
    SWITCH          reduce using rule 60 (expression -> expression MINUS term .)
    LBRACKET        reduce using rule 60 (expression -> expression MINUS term .)
    BREAK           reduce using rule 60 (expression -> expression MINUS term .)
    RETURN          reduce using rule 60 (expression -> expression MINUS term .)
    $end            reduce using rule 60 (expression -> expression MINUS term .)
    RBRACE          reduce using rule 60 (expression -> expression MINUS term .)
    CASE            reduce using rule 60 (expression -> expression MINUS term .)
    DEFAULT         reduce using rule 60 (expression -> expression MINUS term .)
    SEMICOLON       reduce using rule 60 (expression -> expression MINUS term .)
    COMMA           reduce using rule 60 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 60 (expression -> expression MINUS term .)
    COLON           reduce using rule 60 (expression -> expression MINUS term .)
    TIMES           shift and go to state 123
    DIVIDE          shift and go to state 124


state 167

    (61) expression -> expression AND expression .
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 61 (expression -> expression AND expression .)
    VAR             reduce using rule 61 (expression -> expression AND expression .)
    VARIABLE        reduce using rule 61 (expression -> expression AND expression .)
    FMT             reduce using rule 61 (expression -> expression AND expression .)
    CONTINUE        reduce using rule 61 (expression -> expression AND expression .)
    FUNC            reduce using rule 61 (expression -> expression AND expression .)
    IF              reduce using rule 61 (expression -> expression AND expression .)
    FOR             reduce using rule 61 (expression -> expression AND expression .)
    TYPE            reduce using rule 61 (expression -> expression AND expression .)
    SWITCH          reduce using rule 61 (expression -> expression AND expression .)
    LBRACKET        reduce using rule 61 (expression -> expression AND expression .)
    BREAK           reduce using rule 61 (expression -> expression AND expression .)
    RETURN          reduce using rule 61 (expression -> expression AND expression .)
    $end            reduce using rule 61 (expression -> expression AND expression .)
    RBRACE          reduce using rule 61 (expression -> expression AND expression .)
    CASE            reduce using rule 61 (expression -> expression AND expression .)
    DEFAULT         reduce using rule 61 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 61 (expression -> expression AND expression .)
    COMMA           reduce using rule 61 (expression -> expression AND expression .)
    RPAREN          reduce using rule 61 (expression -> expression AND expression .)
    COLON           reduce using rule 61 (expression -> expression AND expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121

  ! PLUS            [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! NE              [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 61 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 61 (expression -> expression AND expression .) ]


state 168

    (62) expression -> expression OR expression .
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 62 (expression -> expression OR expression .)
    VAR             reduce using rule 62 (expression -> expression OR expression .)
    VARIABLE        reduce using rule 62 (expression -> expression OR expression .)
    FMT             reduce using rule 62 (expression -> expression OR expression .)
    CONTINUE        reduce using rule 62 (expression -> expression OR expression .)
    FUNC            reduce using rule 62 (expression -> expression OR expression .)
    IF              reduce using rule 62 (expression -> expression OR expression .)
    FOR             reduce using rule 62 (expression -> expression OR expression .)
    TYPE            reduce using rule 62 (expression -> expression OR expression .)
    SWITCH          reduce using rule 62 (expression -> expression OR expression .)
    LBRACKET        reduce using rule 62 (expression -> expression OR expression .)
    BREAK           reduce using rule 62 (expression -> expression OR expression .)
    RETURN          reduce using rule 62 (expression -> expression OR expression .)
    $end            reduce using rule 62 (expression -> expression OR expression .)
    RBRACE          reduce using rule 62 (expression -> expression OR expression .)
    CASE            reduce using rule 62 (expression -> expression OR expression .)
    DEFAULT         reduce using rule 62 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 62 (expression -> expression OR expression .)
    COMMA           reduce using rule 62 (expression -> expression OR expression .)
    RPAREN          reduce using rule 62 (expression -> expression OR expression .)
    COLON           reduce using rule 62 (expression -> expression OR expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121

  ! PLUS            [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! NE              [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 62 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 62 (expression -> expression OR expression .) ]


state 169

    (63) expression -> expression EQ expression .
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 63 (expression -> expression EQ expression .)
    VAR             reduce using rule 63 (expression -> expression EQ expression .)
    VARIABLE        reduce using rule 63 (expression -> expression EQ expression .)
    FMT             reduce using rule 63 (expression -> expression EQ expression .)
    CONTINUE        reduce using rule 63 (expression -> expression EQ expression .)
    FUNC            reduce using rule 63 (expression -> expression EQ expression .)
    IF              reduce using rule 63 (expression -> expression EQ expression .)
    FOR             reduce using rule 63 (expression -> expression EQ expression .)
    TYPE            reduce using rule 63 (expression -> expression EQ expression .)
    SWITCH          reduce using rule 63 (expression -> expression EQ expression .)
    LBRACKET        reduce using rule 63 (expression -> expression EQ expression .)
    BREAK           reduce using rule 63 (expression -> expression EQ expression .)
    RETURN          reduce using rule 63 (expression -> expression EQ expression .)
    $end            reduce using rule 63 (expression -> expression EQ expression .)
    RBRACE          reduce using rule 63 (expression -> expression EQ expression .)
    CASE            reduce using rule 63 (expression -> expression EQ expression .)
    DEFAULT         reduce using rule 63 (expression -> expression EQ expression .)
    SEMICOLON       reduce using rule 63 (expression -> expression EQ expression .)
    COMMA           reduce using rule 63 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 63 (expression -> expression EQ expression .)
    COLON           reduce using rule 63 (expression -> expression EQ expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121

  ! PLUS            [ reduce using rule 63 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 63 (expression -> expression EQ expression .) ]
  ! AND             [ reduce using rule 63 (expression -> expression EQ expression .) ]
  ! OR              [ reduce using rule 63 (expression -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 63 (expression -> expression EQ expression .) ]
  ! NE              [ reduce using rule 63 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 63 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 63 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 63 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 63 (expression -> expression EQ expression .) ]


state 170

    (64) expression -> expression NE expression .
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 64 (expression -> expression NE expression .)
    VAR             reduce using rule 64 (expression -> expression NE expression .)
    VARIABLE        reduce using rule 64 (expression -> expression NE expression .)
    FMT             reduce using rule 64 (expression -> expression NE expression .)
    CONTINUE        reduce using rule 64 (expression -> expression NE expression .)
    FUNC            reduce using rule 64 (expression -> expression NE expression .)
    IF              reduce using rule 64 (expression -> expression NE expression .)
    FOR             reduce using rule 64 (expression -> expression NE expression .)
    TYPE            reduce using rule 64 (expression -> expression NE expression .)
    SWITCH          reduce using rule 64 (expression -> expression NE expression .)
    LBRACKET        reduce using rule 64 (expression -> expression NE expression .)
    BREAK           reduce using rule 64 (expression -> expression NE expression .)
    RETURN          reduce using rule 64 (expression -> expression NE expression .)
    $end            reduce using rule 64 (expression -> expression NE expression .)
    RBRACE          reduce using rule 64 (expression -> expression NE expression .)
    CASE            reduce using rule 64 (expression -> expression NE expression .)
    DEFAULT         reduce using rule 64 (expression -> expression NE expression .)
    SEMICOLON       reduce using rule 64 (expression -> expression NE expression .)
    COMMA           reduce using rule 64 (expression -> expression NE expression .)
    RPAREN          reduce using rule 64 (expression -> expression NE expression .)
    COLON           reduce using rule 64 (expression -> expression NE expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121

  ! PLUS            [ reduce using rule 64 (expression -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 64 (expression -> expression NE expression .) ]
  ! AND             [ reduce using rule 64 (expression -> expression NE expression .) ]
  ! OR              [ reduce using rule 64 (expression -> expression NE expression .) ]
  ! EQ              [ reduce using rule 64 (expression -> expression NE expression .) ]
  ! NE              [ reduce using rule 64 (expression -> expression NE expression .) ]
  ! LT              [ reduce using rule 64 (expression -> expression NE expression .) ]
  ! GT              [ reduce using rule 64 (expression -> expression NE expression .) ]
  ! LE              [ reduce using rule 64 (expression -> expression NE expression .) ]
  ! GE              [ reduce using rule 64 (expression -> expression NE expression .) ]


state 171

    (65) expression -> expression LT expression .
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 65 (expression -> expression LT expression .)
    VAR             reduce using rule 65 (expression -> expression LT expression .)
    VARIABLE        reduce using rule 65 (expression -> expression LT expression .)
    FMT             reduce using rule 65 (expression -> expression LT expression .)
    CONTINUE        reduce using rule 65 (expression -> expression LT expression .)
    FUNC            reduce using rule 65 (expression -> expression LT expression .)
    IF              reduce using rule 65 (expression -> expression LT expression .)
    FOR             reduce using rule 65 (expression -> expression LT expression .)
    TYPE            reduce using rule 65 (expression -> expression LT expression .)
    SWITCH          reduce using rule 65 (expression -> expression LT expression .)
    LBRACKET        reduce using rule 65 (expression -> expression LT expression .)
    BREAK           reduce using rule 65 (expression -> expression LT expression .)
    RETURN          reduce using rule 65 (expression -> expression LT expression .)
    $end            reduce using rule 65 (expression -> expression LT expression .)
    RBRACE          reduce using rule 65 (expression -> expression LT expression .)
    CASE            reduce using rule 65 (expression -> expression LT expression .)
    DEFAULT         reduce using rule 65 (expression -> expression LT expression .)
    SEMICOLON       reduce using rule 65 (expression -> expression LT expression .)
    COMMA           reduce using rule 65 (expression -> expression LT expression .)
    RPAREN          reduce using rule 65 (expression -> expression LT expression .)
    COLON           reduce using rule 65 (expression -> expression LT expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121

  ! PLUS            [ reduce using rule 65 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 65 (expression -> expression LT expression .) ]
  ! AND             [ reduce using rule 65 (expression -> expression LT expression .) ]
  ! OR              [ reduce using rule 65 (expression -> expression LT expression .) ]
  ! EQ              [ reduce using rule 65 (expression -> expression LT expression .) ]
  ! NE              [ reduce using rule 65 (expression -> expression LT expression .) ]
  ! LT              [ reduce using rule 65 (expression -> expression LT expression .) ]
  ! GT              [ reduce using rule 65 (expression -> expression LT expression .) ]
  ! LE              [ reduce using rule 65 (expression -> expression LT expression .) ]
  ! GE              [ reduce using rule 65 (expression -> expression LT expression .) ]


state 172

    (66) expression -> expression GT expression .
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 66 (expression -> expression GT expression .)
    VAR             reduce using rule 66 (expression -> expression GT expression .)
    VARIABLE        reduce using rule 66 (expression -> expression GT expression .)
    FMT             reduce using rule 66 (expression -> expression GT expression .)
    CONTINUE        reduce using rule 66 (expression -> expression GT expression .)
    FUNC            reduce using rule 66 (expression -> expression GT expression .)
    IF              reduce using rule 66 (expression -> expression GT expression .)
    FOR             reduce using rule 66 (expression -> expression GT expression .)
    TYPE            reduce using rule 66 (expression -> expression GT expression .)
    SWITCH          reduce using rule 66 (expression -> expression GT expression .)
    LBRACKET        reduce using rule 66 (expression -> expression GT expression .)
    BREAK           reduce using rule 66 (expression -> expression GT expression .)
    RETURN          reduce using rule 66 (expression -> expression GT expression .)
    $end            reduce using rule 66 (expression -> expression GT expression .)
    RBRACE          reduce using rule 66 (expression -> expression GT expression .)
    CASE            reduce using rule 66 (expression -> expression GT expression .)
    DEFAULT         reduce using rule 66 (expression -> expression GT expression .)
    SEMICOLON       reduce using rule 66 (expression -> expression GT expression .)
    COMMA           reduce using rule 66 (expression -> expression GT expression .)
    RPAREN          reduce using rule 66 (expression -> expression GT expression .)
    COLON           reduce using rule 66 (expression -> expression GT expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121

  ! PLUS            [ reduce using rule 66 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 66 (expression -> expression GT expression .) ]
  ! AND             [ reduce using rule 66 (expression -> expression GT expression .) ]
  ! OR              [ reduce using rule 66 (expression -> expression GT expression .) ]
  ! EQ              [ reduce using rule 66 (expression -> expression GT expression .) ]
  ! NE              [ reduce using rule 66 (expression -> expression GT expression .) ]
  ! LT              [ reduce using rule 66 (expression -> expression GT expression .) ]
  ! GT              [ reduce using rule 66 (expression -> expression GT expression .) ]
  ! LE              [ reduce using rule 66 (expression -> expression GT expression .) ]
  ! GE              [ reduce using rule 66 (expression -> expression GT expression .) ]


state 173

    (67) expression -> expression LE expression .
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 67 (expression -> expression LE expression .)
    VAR             reduce using rule 67 (expression -> expression LE expression .)
    VARIABLE        reduce using rule 67 (expression -> expression LE expression .)
    FMT             reduce using rule 67 (expression -> expression LE expression .)
    CONTINUE        reduce using rule 67 (expression -> expression LE expression .)
    FUNC            reduce using rule 67 (expression -> expression LE expression .)
    IF              reduce using rule 67 (expression -> expression LE expression .)
    FOR             reduce using rule 67 (expression -> expression LE expression .)
    TYPE            reduce using rule 67 (expression -> expression LE expression .)
    SWITCH          reduce using rule 67 (expression -> expression LE expression .)
    LBRACKET        reduce using rule 67 (expression -> expression LE expression .)
    BREAK           reduce using rule 67 (expression -> expression LE expression .)
    RETURN          reduce using rule 67 (expression -> expression LE expression .)
    $end            reduce using rule 67 (expression -> expression LE expression .)
    RBRACE          reduce using rule 67 (expression -> expression LE expression .)
    CASE            reduce using rule 67 (expression -> expression LE expression .)
    DEFAULT         reduce using rule 67 (expression -> expression LE expression .)
    SEMICOLON       reduce using rule 67 (expression -> expression LE expression .)
    COMMA           reduce using rule 67 (expression -> expression LE expression .)
    RPAREN          reduce using rule 67 (expression -> expression LE expression .)
    COLON           reduce using rule 67 (expression -> expression LE expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121

  ! PLUS            [ reduce using rule 67 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 67 (expression -> expression LE expression .) ]
  ! AND             [ reduce using rule 67 (expression -> expression LE expression .) ]
  ! OR              [ reduce using rule 67 (expression -> expression LE expression .) ]
  ! EQ              [ reduce using rule 67 (expression -> expression LE expression .) ]
  ! NE              [ reduce using rule 67 (expression -> expression LE expression .) ]
  ! LT              [ reduce using rule 67 (expression -> expression LE expression .) ]
  ! GT              [ reduce using rule 67 (expression -> expression LE expression .) ]
  ! LE              [ reduce using rule 67 (expression -> expression LE expression .) ]
  ! GE              [ reduce using rule 67 (expression -> expression LE expression .) ]


state 174

    (68) expression -> expression GE expression .
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 68 (expression -> expression GE expression .)
    VAR             reduce using rule 68 (expression -> expression GE expression .)
    VARIABLE        reduce using rule 68 (expression -> expression GE expression .)
    FMT             reduce using rule 68 (expression -> expression GE expression .)
    CONTINUE        reduce using rule 68 (expression -> expression GE expression .)
    FUNC            reduce using rule 68 (expression -> expression GE expression .)
    IF              reduce using rule 68 (expression -> expression GE expression .)
    FOR             reduce using rule 68 (expression -> expression GE expression .)
    TYPE            reduce using rule 68 (expression -> expression GE expression .)
    SWITCH          reduce using rule 68 (expression -> expression GE expression .)
    LBRACKET        reduce using rule 68 (expression -> expression GE expression .)
    BREAK           reduce using rule 68 (expression -> expression GE expression .)
    RETURN          reduce using rule 68 (expression -> expression GE expression .)
    $end            reduce using rule 68 (expression -> expression GE expression .)
    RBRACE          reduce using rule 68 (expression -> expression GE expression .)
    CASE            reduce using rule 68 (expression -> expression GE expression .)
    DEFAULT         reduce using rule 68 (expression -> expression GE expression .)
    SEMICOLON       reduce using rule 68 (expression -> expression GE expression .)
    COMMA           reduce using rule 68 (expression -> expression GE expression .)
    RPAREN          reduce using rule 68 (expression -> expression GE expression .)
    COLON           reduce using rule 68 (expression -> expression GE expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121

  ! PLUS            [ reduce using rule 68 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 68 (expression -> expression GE expression .) ]
  ! AND             [ reduce using rule 68 (expression -> expression GE expression .) ]
  ! OR              [ reduce using rule 68 (expression -> expression GE expression .) ]
  ! EQ              [ reduce using rule 68 (expression -> expression GE expression .) ]
  ! NE              [ reduce using rule 68 (expression -> expression GE expression .) ]
  ! LT              [ reduce using rule 68 (expression -> expression GE expression .) ]
  ! GT              [ reduce using rule 68 (expression -> expression GE expression .) ]
  ! LE              [ reduce using rule 68 (expression -> expression GE expression .) ]
  ! GE              [ reduce using rule 68 (expression -> expression GE expression .) ]


state 175

    (108) field_value -> VARIABLE . COLON expression

    COLON           shift and go to state 216


state 176

    (105) struct_instance -> VARIABLE LBRACE struct_fields_values . RBRACE

    RBRACE          shift and go to state 217


state 177

    (106) struct_fields_values -> field_value .
    (107) struct_fields_values -> field_value . COMMA struct_fields_values

    RBRACE          reduce using rule 106 (struct_fields_values -> field_value .)
    COMMA           shift and go to state 218


state 178

    (70) term -> term TIMES factor .

    TIMES           reduce using rule 70 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 70 (term -> term TIMES factor .)
    PLUS            reduce using rule 70 (term -> term TIMES factor .)
    MINUS           reduce using rule 70 (term -> term TIMES factor .)
    AND             reduce using rule 70 (term -> term TIMES factor .)
    OR              reduce using rule 70 (term -> term TIMES factor .)
    EQ              reduce using rule 70 (term -> term TIMES factor .)
    NE              reduce using rule 70 (term -> term TIMES factor .)
    LT              reduce using rule 70 (term -> term TIMES factor .)
    GT              reduce using rule 70 (term -> term TIMES factor .)
    LE              reduce using rule 70 (term -> term TIMES factor .)
    GE              reduce using rule 70 (term -> term TIMES factor .)
    LBRACE          reduce using rule 70 (term -> term TIMES factor .)
    VAR             reduce using rule 70 (term -> term TIMES factor .)
    VARIABLE        reduce using rule 70 (term -> term TIMES factor .)
    FMT             reduce using rule 70 (term -> term TIMES factor .)
    CONTINUE        reduce using rule 70 (term -> term TIMES factor .)
    FUNC            reduce using rule 70 (term -> term TIMES factor .)
    IF              reduce using rule 70 (term -> term TIMES factor .)
    FOR             reduce using rule 70 (term -> term TIMES factor .)
    TYPE            reduce using rule 70 (term -> term TIMES factor .)
    SWITCH          reduce using rule 70 (term -> term TIMES factor .)
    LBRACKET        reduce using rule 70 (term -> term TIMES factor .)
    BREAK           reduce using rule 70 (term -> term TIMES factor .)
    RETURN          reduce using rule 70 (term -> term TIMES factor .)
    $end            reduce using rule 70 (term -> term TIMES factor .)
    RBRACE          reduce using rule 70 (term -> term TIMES factor .)
    CASE            reduce using rule 70 (term -> term TIMES factor .)
    DEFAULT         reduce using rule 70 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 70 (term -> term TIMES factor .)
    COMMA           reduce using rule 70 (term -> term TIMES factor .)
    RPAREN          reduce using rule 70 (term -> term TIMES factor .)
    COLON           reduce using rule 70 (term -> term TIMES factor .)


state 179

    (76) factor -> VARIABLE .
    (105) struct_instance -> VARIABLE . LBRACE struct_fields_values RBRACE
    (51) func_call -> VARIABLE . LPAREN arg_list RPAREN
    (52) func_call -> VARIABLE . LPAREN RPAREN

  ! shift/reduce conflict for LBRACE resolved as shift
    TIMES           reduce using rule 76 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 76 (factor -> VARIABLE .)
    PLUS            reduce using rule 76 (factor -> VARIABLE .)
    MINUS           reduce using rule 76 (factor -> VARIABLE .)
    AND             reduce using rule 76 (factor -> VARIABLE .)
    OR              reduce using rule 76 (factor -> VARIABLE .)
    EQ              reduce using rule 76 (factor -> VARIABLE .)
    NE              reduce using rule 76 (factor -> VARIABLE .)
    LT              reduce using rule 76 (factor -> VARIABLE .)
    GT              reduce using rule 76 (factor -> VARIABLE .)
    LE              reduce using rule 76 (factor -> VARIABLE .)
    GE              reduce using rule 76 (factor -> VARIABLE .)
    VAR             reduce using rule 76 (factor -> VARIABLE .)
    VARIABLE        reduce using rule 76 (factor -> VARIABLE .)
    FMT             reduce using rule 76 (factor -> VARIABLE .)
    CONTINUE        reduce using rule 76 (factor -> VARIABLE .)
    FUNC            reduce using rule 76 (factor -> VARIABLE .)
    IF              reduce using rule 76 (factor -> VARIABLE .)
    FOR             reduce using rule 76 (factor -> VARIABLE .)
    TYPE            reduce using rule 76 (factor -> VARIABLE .)
    SWITCH          reduce using rule 76 (factor -> VARIABLE .)
    LBRACKET        reduce using rule 76 (factor -> VARIABLE .)
    BREAK           reduce using rule 76 (factor -> VARIABLE .)
    RETURN          reduce using rule 76 (factor -> VARIABLE .)
    $end            reduce using rule 76 (factor -> VARIABLE .)
    RBRACE          reduce using rule 76 (factor -> VARIABLE .)
    CASE            reduce using rule 76 (factor -> VARIABLE .)
    DEFAULT         reduce using rule 76 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 76 (factor -> VARIABLE .)
    COMMA           reduce using rule 76 (factor -> VARIABLE .)
    RPAREN          reduce using rule 76 (factor -> VARIABLE .)
    COLON           reduce using rule 76 (factor -> VARIABLE .)
    LBRACE          shift and go to state 122
    LPAREN          shift and go to state 51

  ! LBRACE          [ reduce using rule 76 (factor -> VARIABLE .) ]


state 180

    (71) term -> term DIVIDE factor .

    TIMES           reduce using rule 71 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 71 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 71 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 71 (term -> term DIVIDE factor .)
    AND             reduce using rule 71 (term -> term DIVIDE factor .)
    OR              reduce using rule 71 (term -> term DIVIDE factor .)
    EQ              reduce using rule 71 (term -> term DIVIDE factor .)
    NE              reduce using rule 71 (term -> term DIVIDE factor .)
    LT              reduce using rule 71 (term -> term DIVIDE factor .)
    GT              reduce using rule 71 (term -> term DIVIDE factor .)
    LE              reduce using rule 71 (term -> term DIVIDE factor .)
    GE              reduce using rule 71 (term -> term DIVIDE factor .)
    LBRACE          reduce using rule 71 (term -> term DIVIDE factor .)
    VAR             reduce using rule 71 (term -> term DIVIDE factor .)
    VARIABLE        reduce using rule 71 (term -> term DIVIDE factor .)
    FMT             reduce using rule 71 (term -> term DIVIDE factor .)
    CONTINUE        reduce using rule 71 (term -> term DIVIDE factor .)
    FUNC            reduce using rule 71 (term -> term DIVIDE factor .)
    IF              reduce using rule 71 (term -> term DIVIDE factor .)
    FOR             reduce using rule 71 (term -> term DIVIDE factor .)
    TYPE            reduce using rule 71 (term -> term DIVIDE factor .)
    SWITCH          reduce using rule 71 (term -> term DIVIDE factor .)
    LBRACKET        reduce using rule 71 (term -> term DIVIDE factor .)
    BREAK           reduce using rule 71 (term -> term DIVIDE factor .)
    RETURN          reduce using rule 71 (term -> term DIVIDE factor .)
    $end            reduce using rule 71 (term -> term DIVIDE factor .)
    RBRACE          reduce using rule 71 (term -> term DIVIDE factor .)
    CASE            reduce using rule 71 (term -> term DIVIDE factor .)
    DEFAULT         reduce using rule 71 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 71 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 71 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 71 (term -> term DIVIDE factor .)
    COLON           reduce using rule 71 (term -> term DIVIDE factor .)


state 181

    (79) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    EQ              reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    VAR             reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    FMT             reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    TYPE            reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    CASE            reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 79 (factor -> LPAREN expression RPAREN .)
    COLON           reduce using rule 79 (factor -> LPAREN expression RPAREN .)


state 182

    (123) make_expr -> MAKE LPAREN MAP . LBRACKET type RBRACKET type RPAREN

    LBRACKET        shift and go to state 219


state 183

    (124) make_expr -> MAKE LPAREN LBRACKET . RBRACKET type RPAREN

    RBRACKET        shift and go to state 220


state 184

    (91) for_block -> begin_loop block . end_loop
    (93) end_loop -> .

    VAR             reduce using rule 93 (end_loop -> .)
    VARIABLE        reduce using rule 93 (end_loop -> .)
    FMT             reduce using rule 93 (end_loop -> .)
    CONTINUE        reduce using rule 93 (end_loop -> .)
    FUNC            reduce using rule 93 (end_loop -> .)
    IF              reduce using rule 93 (end_loop -> .)
    FOR             reduce using rule 93 (end_loop -> .)
    TYPE            reduce using rule 93 (end_loop -> .)
    SWITCH          reduce using rule 93 (end_loop -> .)
    LBRACKET        reduce using rule 93 (end_loop -> .)
    BREAK           reduce using rule 93 (end_loop -> .)
    RETURN          reduce using rule 93 (end_loop -> .)
    $end            reduce using rule 93 (end_loop -> .)
    RBRACE          reduce using rule 93 (end_loop -> .)
    CASE            reduce using rule 93 (end_loop -> .)
    DEFAULT         reduce using rule 93 (end_loop -> .)

    end_loop                       shift and go to state 221

state 185

    (90) for_stmt -> FOR assignment SEMICOLON expression . SEMICOLON for_update for_block
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression

    SEMICOLON       shift and go to state 222
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121


state 186

    (100) struct_def -> TYPE VARIABLE STRUCT LBRACE . struct_fields RBRACE
    (101) struct_fields -> . struct_field
    (102) struct_fields -> . struct_field struct_fields
    (103) struct_field -> . VARIABLE type
    (104) struct_field -> . type
    (83) type -> . INT_TYPE
    (84) type -> . FLOAT64_TYPE
    (85) type -> . STRING_TYPE
    (86) type -> . BOOL_TYPE

    VARIABLE        shift and go to state 223
    INT_TYPE        shift and go to state 99
    FLOAT64_TYPE    shift and go to state 100
    STRING_TYPE     shift and go to state 101
    BOOL_TYPE       shift and go to state 102

    struct_fields                  shift and go to state 224
    struct_field                   shift and go to state 225
    type                           shift and go to state 226

state 187

    (109) switch_stmt -> SWITCH expression LBRACE case_list . RBRACE

    RBRACE          shift and go to state 227


state 188

    (110) switch_stmt -> SWITCH LBRACE case_list RBRACE .

    VAR             reduce using rule 110 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    VARIABLE        reduce using rule 110 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    FMT             reduce using rule 110 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    CONTINUE        reduce using rule 110 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    FUNC            reduce using rule 110 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    IF              reduce using rule 110 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    FOR             reduce using rule 110 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    TYPE            reduce using rule 110 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    SWITCH          reduce using rule 110 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    LBRACKET        reduce using rule 110 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    BREAK           reduce using rule 110 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    RETURN          reduce using rule 110 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    $end            reduce using rule 110 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    RBRACE          reduce using rule 110 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    CASE            reduce using rule 110 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    DEFAULT         reduce using rule 110 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)


state 189

    (112) case_list -> case_clause case_list .

    RBRACE          reduce using rule 112 (case_list -> case_clause case_list .)


state 190

    (113) case_clause -> CASE expression . COLON program
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression

    COLON           shift and go to state 228
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121


state 191

    (114) case_clause -> DEFAULT COLON . program
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_no_params_void
    (15) statement -> . func_with_map
    (16) statement -> . func_call
    (17) statement -> . if_stmt
    (18) statement -> . for_stmt
    (19) statement -> . struct_def
    (20) statement -> . switch_stmt
    (21) statement -> . map_declaration
    (22) statement -> . map_declaration_values
    (23) statement -> . array_declaration
    (24) statement -> . array_literal
    (25) statement -> . slice_declaration
    (26) statement -> . make_stmt
    (27) statement -> . new_stmt
    (28) statement -> . break_stmt
    (29) statement -> . increment_stmt
    (30) statement -> . return_stmt
    (31) declaration -> . VAR VARIABLE type
    (32) declaration -> . VAR VARIABLE type ASIG expression
    (33) declaration -> . VAR VARIABLE type ASSIGN expression
    (37) assignment -> . VARIABLE ASSIGN expression
    (38) assignment -> . VARIABLE ASIG expression
    (39) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (40) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (41) print_stmt -> . FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN
    (42) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (94) continue_stmt -> . CONTINUE
    (98) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (99) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (43) func_def -> . func_header func_body
    (48) func_no_params -> . func_header_no_params block
    (50) func_no_params_void -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (47) func_with_map -> . FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN
    (87) if_stmt -> . IF expression block
    (88) if_stmt -> . IF expression block ELSE block
    (89) for_stmt -> . FOR expression for_block
    (90) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update for_block
    (100) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (109) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (110) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (115) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (116) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (117) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE
    (125) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (129) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (130) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (131) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (134) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (135) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (121) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (122) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (138) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (139) break_stmt -> . BREAK
    (140) increment_stmt -> . VARIABLE INCREMENT
    (141) increment_stmt -> . VARIABLE DECREMENT
    (46) return_stmt -> . RETURN expression
    (44) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type
    (49) func_header_no_params -> . FUNC VARIABLE LPAREN RPAREN type

    VAR             shift and go to state 34
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 35
    CONTINUE        shift and go to state 36
    FUNC            shift and go to state 37
    IF              shift and go to state 41
    FOR             shift and go to state 42
    TYPE            shift and go to state 43
    SWITCH          shift and go to state 44
    LBRACKET        shift and go to state 40
    BREAK           shift and go to state 45
    RETURN          shift and go to state 46

    program                        shift and go to state 229
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_no_params_void            shift and go to state 17
    func_with_map                  shift and go to state 18
    func_call                      shift and go to state 19
    if_stmt                        shift and go to state 20
    for_stmt                       shift and go to state 21
    struct_def                     shift and go to state 22
    switch_stmt                    shift and go to state 23
    map_declaration                shift and go to state 24
    map_declaration_values         shift and go to state 25
    array_declaration              shift and go to state 26
    array_literal                  shift and go to state 27
    slice_declaration              shift and go to state 28
    make_stmt                      shift and go to state 29
    new_stmt                       shift and go to state 30
    break_stmt                     shift and go to state 31
    increment_stmt                 shift and go to state 32
    return_stmt                    shift and go to state 33
    func_header                    shift and go to state 38
    func_header_no_params          shift and go to state 39

state 192

    (116) map_declaration -> VARIABLE ASIG MAP LBRACKET type . RBRACKET type
    (117) map_declaration -> VARIABLE ASIG MAP LBRACKET type . RBRACKET type LBRACE map_params RBRACE
    (125) map_declaration_values -> VARIABLE ASIG MAP LBRACKET type . RBRACKET type LBRACE map_kv_pairs RBRACE

    RBRACKET        shift and go to state 230


state 193

    (135) slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type . LBRACE slice_values RBRACE

    LBRACE          shift and go to state 231


state 194

    (121) make_stmt -> VARIABLE ASIG MAKE LPAREN MAP . LBRACKET type RBRACKET type RPAREN
    (123) make_expr -> MAKE LPAREN MAP . LBRACKET type RBRACKET type RPAREN

    LBRACKET        shift and go to state 232


state 195

    (122) make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET . RBRACKET type RPAREN
    (124) make_expr -> MAKE LPAREN LBRACKET . RBRACKET type RPAREN

    RBRACKET        shift and go to state 233


state 196

    (138) new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE . RPAREN

    RPAREN          shift and go to state 234


state 197

    (57) arg_list -> expression COMMA arg_list .

    RPAREN          reduce using rule 57 (arg_list -> expression COMMA arg_list .)


state 198

    (32) declaration -> VAR VARIABLE type ASIG expression .
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression

    VAR             reduce using rule 32 (declaration -> VAR VARIABLE type ASIG expression .)
    VARIABLE        reduce using rule 32 (declaration -> VAR VARIABLE type ASIG expression .)
    FMT             reduce using rule 32 (declaration -> VAR VARIABLE type ASIG expression .)
    CONTINUE        reduce using rule 32 (declaration -> VAR VARIABLE type ASIG expression .)
    FUNC            reduce using rule 32 (declaration -> VAR VARIABLE type ASIG expression .)
    IF              reduce using rule 32 (declaration -> VAR VARIABLE type ASIG expression .)
    FOR             reduce using rule 32 (declaration -> VAR VARIABLE type ASIG expression .)
    TYPE            reduce using rule 32 (declaration -> VAR VARIABLE type ASIG expression .)
    SWITCH          reduce using rule 32 (declaration -> VAR VARIABLE type ASIG expression .)
    LBRACKET        reduce using rule 32 (declaration -> VAR VARIABLE type ASIG expression .)
    BREAK           reduce using rule 32 (declaration -> VAR VARIABLE type ASIG expression .)
    RETURN          reduce using rule 32 (declaration -> VAR VARIABLE type ASIG expression .)
    $end            reduce using rule 32 (declaration -> VAR VARIABLE type ASIG expression .)
    RBRACE          reduce using rule 32 (declaration -> VAR VARIABLE type ASIG expression .)
    CASE            reduce using rule 32 (declaration -> VAR VARIABLE type ASIG expression .)
    DEFAULT         reduce using rule 32 (declaration -> VAR VARIABLE type ASIG expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121


state 199

    (33) declaration -> VAR VARIABLE type ASSIGN expression .
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression

    VAR             reduce using rule 33 (declaration -> VAR VARIABLE type ASSIGN expression .)
    VARIABLE        reduce using rule 33 (declaration -> VAR VARIABLE type ASSIGN expression .)
    FMT             reduce using rule 33 (declaration -> VAR VARIABLE type ASSIGN expression .)
    CONTINUE        reduce using rule 33 (declaration -> VAR VARIABLE type ASSIGN expression .)
    FUNC            reduce using rule 33 (declaration -> VAR VARIABLE type ASSIGN expression .)
    IF              reduce using rule 33 (declaration -> VAR VARIABLE type ASSIGN expression .)
    FOR             reduce using rule 33 (declaration -> VAR VARIABLE type ASSIGN expression .)
    TYPE            reduce using rule 33 (declaration -> VAR VARIABLE type ASSIGN expression .)
    SWITCH          reduce using rule 33 (declaration -> VAR VARIABLE type ASSIGN expression .)
    LBRACKET        reduce using rule 33 (declaration -> VAR VARIABLE type ASSIGN expression .)
    BREAK           reduce using rule 33 (declaration -> VAR VARIABLE type ASSIGN expression .)
    RETURN          reduce using rule 33 (declaration -> VAR VARIABLE type ASSIGN expression .)
    $end            reduce using rule 33 (declaration -> VAR VARIABLE type ASSIGN expression .)
    RBRACE          reduce using rule 33 (declaration -> VAR VARIABLE type ASSIGN expression .)
    CASE            reduce using rule 33 (declaration -> VAR VARIABLE type ASSIGN expression .)
    DEFAULT         reduce using rule 33 (declaration -> VAR VARIABLE type ASSIGN expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121


state 200

    (115) map_declaration -> VAR VARIABLE MAP LBRACKET type . RBRACKET type

    RBRACKET        shift and go to state 235


state 201

    (129) array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET . type
    (83) type -> . INT_TYPE
    (84) type -> . FLOAT64_TYPE
    (85) type -> . STRING_TYPE
    (86) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 99
    FLOAT64_TYPE    shift and go to state 100
    STRING_TYPE     shift and go to state 101
    BOOL_TYPE       shift and go to state 102

    type                           shift and go to state 236

state 202

    (134) slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .

    VAR             reduce using rule 134 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    VARIABLE        reduce using rule 134 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    FMT             reduce using rule 134 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    CONTINUE        reduce using rule 134 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    FUNC            reduce using rule 134 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    IF              reduce using rule 134 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    FOR             reduce using rule 134 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    TYPE            reduce using rule 134 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    SWITCH          reduce using rule 134 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    LBRACKET        reduce using rule 134 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    BREAK           reduce using rule 134 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    RETURN          reduce using rule 134 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    $end            reduce using rule 134 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    RBRACE          reduce using rule 134 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    CASE            reduce using rule 134 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    DEFAULT         reduce using rule 134 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)


state 203

    (39) print_stmt -> FMT DOT PRINTF LPAREN STRING . COMMA expression RPAREN

    COMMA           shift and go to state 237


state 204

    (40) print_stmt -> FMT DOT PRINTLN LPAREN expression . RPAREN
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression

    RPAREN          shift and go to state 238
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121


state 205

    (41) print_stmt -> FMT DOT PRINTLN LPAREN STRING . COMMA VARIABLE RPAREN
    (75) factor -> STRING .

    COMMA           shift and go to state 239
    TIMES           reduce using rule 75 (factor -> STRING .)
    DIVIDE          reduce using rule 75 (factor -> STRING .)
    RPAREN          reduce using rule 75 (factor -> STRING .)
    PLUS            reduce using rule 75 (factor -> STRING .)
    MINUS           reduce using rule 75 (factor -> STRING .)
    AND             reduce using rule 75 (factor -> STRING .)
    OR              reduce using rule 75 (factor -> STRING .)
    EQ              reduce using rule 75 (factor -> STRING .)
    NE              reduce using rule 75 (factor -> STRING .)
    LT              reduce using rule 75 (factor -> STRING .)
    GT              reduce using rule 75 (factor -> STRING .)
    LE              reduce using rule 75 (factor -> STRING .)
    GE              reduce using rule 75 (factor -> STRING .)


state 206

    (42) input_stmt -> FMT DOT SCANLN LPAREN AMPER . VARIABLE RPAREN

    VARIABLE        shift and go to state 240


state 207

    (98) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN . VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (99) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN . VARIABLE LPAREN RPAREN type LBRACE program RBRACE

    VARIABLE        shift and go to state 241


state 208

    (55) param -> VARIABLE type .

    COMMA           reduce using rule 55 (param -> VARIABLE type .)
    RPAREN          reduce using rule 55 (param -> VARIABLE type .)


state 209

    (50) func_no_params_void -> FUNC VARIABLE LPAREN RPAREN LBRACE . program RBRACE
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_no_params_void
    (15) statement -> . func_with_map
    (16) statement -> . func_call
    (17) statement -> . if_stmt
    (18) statement -> . for_stmt
    (19) statement -> . struct_def
    (20) statement -> . switch_stmt
    (21) statement -> . map_declaration
    (22) statement -> . map_declaration_values
    (23) statement -> . array_declaration
    (24) statement -> . array_literal
    (25) statement -> . slice_declaration
    (26) statement -> . make_stmt
    (27) statement -> . new_stmt
    (28) statement -> . break_stmt
    (29) statement -> . increment_stmt
    (30) statement -> . return_stmt
    (31) declaration -> . VAR VARIABLE type
    (32) declaration -> . VAR VARIABLE type ASIG expression
    (33) declaration -> . VAR VARIABLE type ASSIGN expression
    (37) assignment -> . VARIABLE ASSIGN expression
    (38) assignment -> . VARIABLE ASIG expression
    (39) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (40) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (41) print_stmt -> . FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN
    (42) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (94) continue_stmt -> . CONTINUE
    (98) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (99) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (43) func_def -> . func_header func_body
    (48) func_no_params -> . func_header_no_params block
    (50) func_no_params_void -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (47) func_with_map -> . FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN
    (87) if_stmt -> . IF expression block
    (88) if_stmt -> . IF expression block ELSE block
    (89) for_stmt -> . FOR expression for_block
    (90) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update for_block
    (100) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (109) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (110) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (115) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (116) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (117) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE
    (125) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (129) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (130) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (131) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (134) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (135) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (121) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (122) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (138) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (139) break_stmt -> . BREAK
    (140) increment_stmt -> . VARIABLE INCREMENT
    (141) increment_stmt -> . VARIABLE DECREMENT
    (46) return_stmt -> . RETURN expression
    (44) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type
    (49) func_header_no_params -> . FUNC VARIABLE LPAREN RPAREN type

    VAR             shift and go to state 34
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 35
    CONTINUE        shift and go to state 36
    FUNC            shift and go to state 37
    IF              shift and go to state 41
    FOR             shift and go to state 42
    TYPE            shift and go to state 43
    SWITCH          shift and go to state 44
    LBRACKET        shift and go to state 40
    BREAK           shift and go to state 45
    RETURN          shift and go to state 46

    program                        shift and go to state 242
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_no_params_void            shift and go to state 17
    func_with_map                  shift and go to state 18
    func_call                      shift and go to state 19
    if_stmt                        shift and go to state 20
    for_stmt                       shift and go to state 21
    struct_def                     shift and go to state 22
    switch_stmt                    shift and go to state 23
    map_declaration                shift and go to state 24
    map_declaration_values         shift and go to state 25
    array_declaration              shift and go to state 26
    array_literal                  shift and go to state 27
    slice_declaration              shift and go to state 28
    make_stmt                      shift and go to state 29
    new_stmt                       shift and go to state 30
    break_stmt                     shift and go to state 31
    increment_stmt                 shift and go to state 32
    return_stmt                    shift and go to state 33
    func_header                    shift and go to state 38
    func_header_no_params          shift and go to state 39

state 210

    (47) func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP . LBRACKET type RBRACKET type func_body

    LBRACKET        shift and go to state 243


state 211

    (49) func_header_no_params -> FUNC VARIABLE LPAREN RPAREN type .

    LBRACE          reduce using rule 49 (func_header_no_params -> FUNC VARIABLE LPAREN RPAREN type .)


state 212

    (44) func_header -> FUNC VARIABLE LPAREN param_list RPAREN . type
    (83) type -> . INT_TYPE
    (84) type -> . FLOAT64_TYPE
    (85) type -> . STRING_TYPE
    (86) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 99
    FLOAT64_TYPE    shift and go to state 100
    STRING_TYPE     shift and go to state 101
    BOOL_TYPE       shift and go to state 102

    type                           shift and go to state 244

state 213

    (54) param_list -> param COMMA . param_list
    (53) param_list -> . param
    (54) param_list -> . param COMMA param_list
    (55) param -> . VARIABLE type

    VARIABLE        shift and go to state 154

    param                          shift and go to state 157
    param_list                     shift and go to state 245

state 214

    (131) array_literal -> LBRACKET NUMBER RBRACKET type LBRACE . array_values RBRACE
    (132) array_values -> . expression
    (133) array_values -> . expression COMMA array_values
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    array_values                   shift and go to state 246
    expression                     shift and go to state 247
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 215

    (88) if_stmt -> IF expression block ELSE block .

    VAR             reduce using rule 88 (if_stmt -> IF expression block ELSE block .)
    VARIABLE        reduce using rule 88 (if_stmt -> IF expression block ELSE block .)
    FMT             reduce using rule 88 (if_stmt -> IF expression block ELSE block .)
    CONTINUE        reduce using rule 88 (if_stmt -> IF expression block ELSE block .)
    FUNC            reduce using rule 88 (if_stmt -> IF expression block ELSE block .)
    IF              reduce using rule 88 (if_stmt -> IF expression block ELSE block .)
    FOR             reduce using rule 88 (if_stmt -> IF expression block ELSE block .)
    TYPE            reduce using rule 88 (if_stmt -> IF expression block ELSE block .)
    SWITCH          reduce using rule 88 (if_stmt -> IF expression block ELSE block .)
    LBRACKET        reduce using rule 88 (if_stmt -> IF expression block ELSE block .)
    BREAK           reduce using rule 88 (if_stmt -> IF expression block ELSE block .)
    RETURN          reduce using rule 88 (if_stmt -> IF expression block ELSE block .)
    $end            reduce using rule 88 (if_stmt -> IF expression block ELSE block .)
    RBRACE          reduce using rule 88 (if_stmt -> IF expression block ELSE block .)
    CASE            reduce using rule 88 (if_stmt -> IF expression block ELSE block .)
    DEFAULT         reduce using rule 88 (if_stmt -> IF expression block ELSE block .)


state 216

    (108) field_value -> VARIABLE COLON . expression
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 248
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 217

    (105) struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .

    TIMES           reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    DIVIDE          reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    PLUS            reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    MINUS           reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    AND             reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    OR              reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    EQ              reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    NE              reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    LT              reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    GT              reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    LE              reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    GE              reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    LBRACE          reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    VAR             reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    VARIABLE        reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    FMT             reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    CONTINUE        reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    FUNC            reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    IF              reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    FOR             reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    TYPE            reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    SWITCH          reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    LBRACKET        reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    BREAK           reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    RETURN          reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    $end            reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    RBRACE          reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    CASE            reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    DEFAULT         reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    SEMICOLON       reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    COMMA           reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    RPAREN          reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    COLON           reduce using rule 105 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)


state 218

    (107) struct_fields_values -> field_value COMMA . struct_fields_values
    (106) struct_fields_values -> . field_value
    (107) struct_fields_values -> . field_value COMMA struct_fields_values
    (108) field_value -> . VARIABLE COLON expression

    VARIABLE        shift and go to state 175

    field_value                    shift and go to state 177
    struct_fields_values           shift and go to state 249

state 219

    (123) make_expr -> MAKE LPAREN MAP LBRACKET . type RBRACKET type RPAREN
    (83) type -> . INT_TYPE
    (84) type -> . FLOAT64_TYPE
    (85) type -> . STRING_TYPE
    (86) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 99
    FLOAT64_TYPE    shift and go to state 100
    STRING_TYPE     shift and go to state 101
    BOOL_TYPE       shift and go to state 102

    type                           shift and go to state 250

state 220

    (124) make_expr -> MAKE LPAREN LBRACKET RBRACKET . type RPAREN
    (83) type -> . INT_TYPE
    (84) type -> . FLOAT64_TYPE
    (85) type -> . STRING_TYPE
    (86) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 99
    FLOAT64_TYPE    shift and go to state 100
    STRING_TYPE     shift and go to state 101
    BOOL_TYPE       shift and go to state 102

    type                           shift and go to state 251

state 221

    (91) for_block -> begin_loop block end_loop .

    VAR             reduce using rule 91 (for_block -> begin_loop block end_loop .)
    VARIABLE        reduce using rule 91 (for_block -> begin_loop block end_loop .)
    FMT             reduce using rule 91 (for_block -> begin_loop block end_loop .)
    CONTINUE        reduce using rule 91 (for_block -> begin_loop block end_loop .)
    FUNC            reduce using rule 91 (for_block -> begin_loop block end_loop .)
    IF              reduce using rule 91 (for_block -> begin_loop block end_loop .)
    FOR             reduce using rule 91 (for_block -> begin_loop block end_loop .)
    TYPE            reduce using rule 91 (for_block -> begin_loop block end_loop .)
    SWITCH          reduce using rule 91 (for_block -> begin_loop block end_loop .)
    LBRACKET        reduce using rule 91 (for_block -> begin_loop block end_loop .)
    BREAK           reduce using rule 91 (for_block -> begin_loop block end_loop .)
    RETURN          reduce using rule 91 (for_block -> begin_loop block end_loop .)
    $end            reduce using rule 91 (for_block -> begin_loop block end_loop .)
    RBRACE          reduce using rule 91 (for_block -> begin_loop block end_loop .)
    CASE            reduce using rule 91 (for_block -> begin_loop block end_loop .)
    DEFAULT         reduce using rule 91 (for_block -> begin_loop block end_loop .)


state 222

    (90) for_stmt -> FOR assignment SEMICOLON expression SEMICOLON . for_update for_block
    (95) for_update -> . assignment
    (96) for_update -> . increment_stmt
    (37) assignment -> . VARIABLE ASSIGN expression
    (38) assignment -> . VARIABLE ASIG expression
    (140) increment_stmt -> . VARIABLE INCREMENT
    (141) increment_stmt -> . VARIABLE DECREMENT

    VARIABLE        shift and go to state 255

    assignment                     shift and go to state 252
    for_update                     shift and go to state 253
    increment_stmt                 shift and go to state 254

state 223

    (103) struct_field -> VARIABLE . type
    (83) type -> . INT_TYPE
    (84) type -> . FLOAT64_TYPE
    (85) type -> . STRING_TYPE
    (86) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 99
    FLOAT64_TYPE    shift and go to state 100
    STRING_TYPE     shift and go to state 101
    BOOL_TYPE       shift and go to state 102

    type                           shift and go to state 256

state 224

    (100) struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields . RBRACE

    RBRACE          shift and go to state 257


state 225

    (101) struct_fields -> struct_field .
    (102) struct_fields -> struct_field . struct_fields
    (101) struct_fields -> . struct_field
    (102) struct_fields -> . struct_field struct_fields
    (103) struct_field -> . VARIABLE type
    (104) struct_field -> . type
    (83) type -> . INT_TYPE
    (84) type -> . FLOAT64_TYPE
    (85) type -> . STRING_TYPE
    (86) type -> . BOOL_TYPE

    RBRACE          reduce using rule 101 (struct_fields -> struct_field .)
    VARIABLE        shift and go to state 223
    INT_TYPE        shift and go to state 99
    FLOAT64_TYPE    shift and go to state 100
    STRING_TYPE     shift and go to state 101
    BOOL_TYPE       shift and go to state 102

    struct_field                   shift and go to state 225
    struct_fields                  shift and go to state 258
    type                           shift and go to state 226

state 226

    (104) struct_field -> type .

    VARIABLE        reduce using rule 104 (struct_field -> type .)
    INT_TYPE        reduce using rule 104 (struct_field -> type .)
    FLOAT64_TYPE    reduce using rule 104 (struct_field -> type .)
    STRING_TYPE     reduce using rule 104 (struct_field -> type .)
    BOOL_TYPE       reduce using rule 104 (struct_field -> type .)
    RBRACE          reduce using rule 104 (struct_field -> type .)


state 227

    (109) switch_stmt -> SWITCH expression LBRACE case_list RBRACE .

    VAR             reduce using rule 109 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    VARIABLE        reduce using rule 109 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    FMT             reduce using rule 109 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    CONTINUE        reduce using rule 109 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    FUNC            reduce using rule 109 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    IF              reduce using rule 109 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    FOR             reduce using rule 109 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    TYPE            reduce using rule 109 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    SWITCH          reduce using rule 109 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    LBRACKET        reduce using rule 109 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    BREAK           reduce using rule 109 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    RETURN          reduce using rule 109 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    $end            reduce using rule 109 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    RBRACE          reduce using rule 109 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    CASE            reduce using rule 109 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    DEFAULT         reduce using rule 109 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)


state 228

    (113) case_clause -> CASE expression COLON . program
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_no_params_void
    (15) statement -> . func_with_map
    (16) statement -> . func_call
    (17) statement -> . if_stmt
    (18) statement -> . for_stmt
    (19) statement -> . struct_def
    (20) statement -> . switch_stmt
    (21) statement -> . map_declaration
    (22) statement -> . map_declaration_values
    (23) statement -> . array_declaration
    (24) statement -> . array_literal
    (25) statement -> . slice_declaration
    (26) statement -> . make_stmt
    (27) statement -> . new_stmt
    (28) statement -> . break_stmt
    (29) statement -> . increment_stmt
    (30) statement -> . return_stmt
    (31) declaration -> . VAR VARIABLE type
    (32) declaration -> . VAR VARIABLE type ASIG expression
    (33) declaration -> . VAR VARIABLE type ASSIGN expression
    (37) assignment -> . VARIABLE ASSIGN expression
    (38) assignment -> . VARIABLE ASIG expression
    (39) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (40) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (41) print_stmt -> . FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN
    (42) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (94) continue_stmt -> . CONTINUE
    (98) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (99) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (43) func_def -> . func_header func_body
    (48) func_no_params -> . func_header_no_params block
    (50) func_no_params_void -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (47) func_with_map -> . FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN
    (87) if_stmt -> . IF expression block
    (88) if_stmt -> . IF expression block ELSE block
    (89) for_stmt -> . FOR expression for_block
    (90) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update for_block
    (100) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (109) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (110) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (115) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (116) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (117) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE
    (125) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (129) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (130) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (131) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (134) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (135) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (121) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (122) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (138) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (139) break_stmt -> . BREAK
    (140) increment_stmt -> . VARIABLE INCREMENT
    (141) increment_stmt -> . VARIABLE DECREMENT
    (46) return_stmt -> . RETURN expression
    (44) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type
    (49) func_header_no_params -> . FUNC VARIABLE LPAREN RPAREN type

    VAR             shift and go to state 34
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 35
    CONTINUE        shift and go to state 36
    FUNC            shift and go to state 37
    IF              shift and go to state 41
    FOR             shift and go to state 42
    TYPE            shift and go to state 43
    SWITCH          shift and go to state 44
    LBRACKET        shift and go to state 40
    BREAK           shift and go to state 45
    RETURN          shift and go to state 46

    program                        shift and go to state 259
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_no_params_void            shift and go to state 17
    func_with_map                  shift and go to state 18
    func_call                      shift and go to state 19
    if_stmt                        shift and go to state 20
    for_stmt                       shift and go to state 21
    struct_def                     shift and go to state 22
    switch_stmt                    shift and go to state 23
    map_declaration                shift and go to state 24
    map_declaration_values         shift and go to state 25
    array_declaration              shift and go to state 26
    array_literal                  shift and go to state 27
    slice_declaration              shift and go to state 28
    make_stmt                      shift and go to state 29
    new_stmt                       shift and go to state 30
    break_stmt                     shift and go to state 31
    increment_stmt                 shift and go to state 32
    return_stmt                    shift and go to state 33
    func_header                    shift and go to state 38
    func_header_no_params          shift and go to state 39

state 229

    (114) case_clause -> DEFAULT COLON program .

    CASE            reduce using rule 114 (case_clause -> DEFAULT COLON program .)
    DEFAULT         reduce using rule 114 (case_clause -> DEFAULT COLON program .)
    RBRACE          reduce using rule 114 (case_clause -> DEFAULT COLON program .)


state 230

    (116) map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET . type
    (117) map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET . type LBRACE map_params RBRACE
    (125) map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET . type LBRACE map_kv_pairs RBRACE
    (83) type -> . INT_TYPE
    (84) type -> . FLOAT64_TYPE
    (85) type -> . STRING_TYPE
    (86) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 99
    FLOAT64_TYPE    shift and go to state 100
    STRING_TYPE     shift and go to state 101
    BOOL_TYPE       shift and go to state 102

    type                           shift and go to state 260

state 231

    (135) slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE . slice_values RBRACE
    (136) slice_values -> . expression
    (137) slice_values -> . expression COMMA slice_values
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    slice_values                   shift and go to state 261
    expression                     shift and go to state 262
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 232

    (121) make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET . type RBRACKET type RPAREN
    (123) make_expr -> MAKE LPAREN MAP LBRACKET . type RBRACKET type RPAREN
    (83) type -> . INT_TYPE
    (84) type -> . FLOAT64_TYPE
    (85) type -> . STRING_TYPE
    (86) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 99
    FLOAT64_TYPE    shift and go to state 100
    STRING_TYPE     shift and go to state 101
    BOOL_TYPE       shift and go to state 102

    type                           shift and go to state 263

state 233

    (122) make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET . type RPAREN
    (124) make_expr -> MAKE LPAREN LBRACKET RBRACKET . type RPAREN
    (83) type -> . INT_TYPE
    (84) type -> . FLOAT64_TYPE
    (85) type -> . STRING_TYPE
    (86) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 99
    FLOAT64_TYPE    shift and go to state 100
    STRING_TYPE     shift and go to state 101
    BOOL_TYPE       shift and go to state 102

    type                           shift and go to state 264

state 234

    (138) new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .

    VAR             reduce using rule 138 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    VARIABLE        reduce using rule 138 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    FMT             reduce using rule 138 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    CONTINUE        reduce using rule 138 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    FUNC            reduce using rule 138 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    IF              reduce using rule 138 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    FOR             reduce using rule 138 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    TYPE            reduce using rule 138 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    SWITCH          reduce using rule 138 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    LBRACKET        reduce using rule 138 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    BREAK           reduce using rule 138 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    RETURN          reduce using rule 138 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    $end            reduce using rule 138 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    RBRACE          reduce using rule 138 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    CASE            reduce using rule 138 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    DEFAULT         reduce using rule 138 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)


state 235

    (115) map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET . type
    (83) type -> . INT_TYPE
    (84) type -> . FLOAT64_TYPE
    (85) type -> . STRING_TYPE
    (86) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 99
    FLOAT64_TYPE    shift and go to state 100
    STRING_TYPE     shift and go to state 101
    BOOL_TYPE       shift and go to state 102

    type                           shift and go to state 265

state 236

    (129) array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .

    VAR             reduce using rule 129 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    VARIABLE        reduce using rule 129 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    FMT             reduce using rule 129 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    CONTINUE        reduce using rule 129 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    FUNC            reduce using rule 129 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    IF              reduce using rule 129 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    FOR             reduce using rule 129 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    TYPE            reduce using rule 129 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    SWITCH          reduce using rule 129 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    LBRACKET        reduce using rule 129 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    BREAK           reduce using rule 129 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    RETURN          reduce using rule 129 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    $end            reduce using rule 129 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    RBRACE          reduce using rule 129 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    CASE            reduce using rule 129 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    DEFAULT         reduce using rule 129 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)


state 237

    (39) print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA . expression RPAREN
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 266
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 238

    (40) print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .

    VAR             reduce using rule 40 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 40 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    FMT             reduce using rule 40 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 40 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    FUNC            reduce using rule 40 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    IF              reduce using rule 40 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    FOR             reduce using rule 40 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    TYPE            reduce using rule 40 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    SWITCH          reduce using rule 40 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 40 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    BREAK           reduce using rule 40 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    RETURN          reduce using rule 40 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    $end            reduce using rule 40 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    RBRACE          reduce using rule 40 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    CASE            reduce using rule 40 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 40 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)


state 239

    (41) print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA . VARIABLE RPAREN

    VARIABLE        shift and go to state 267


state 240

    (42) input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE . RPAREN

    RPAREN          shift and go to state 268


state 241

    (98) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE . LPAREN param_list RPAREN type LBRACE program RBRACE
    (99) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE . LPAREN RPAREN type LBRACE program RBRACE

    LPAREN          shift and go to state 269


state 242

    (50) func_no_params_void -> FUNC VARIABLE LPAREN RPAREN LBRACE program . RBRACE

    RBRACE          shift and go to state 270


state 243

    (47) func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP LBRACKET . type RBRACKET type func_body
    (83) type -> . INT_TYPE
    (84) type -> . FLOAT64_TYPE
    (85) type -> . STRING_TYPE
    (86) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 99
    FLOAT64_TYPE    shift and go to state 100
    STRING_TYPE     shift and go to state 101
    BOOL_TYPE       shift and go to state 102

    type                           shift and go to state 271

state 244

    (44) func_header -> FUNC VARIABLE LPAREN param_list RPAREN type .

    LBRACE          reduce using rule 44 (func_header -> FUNC VARIABLE LPAREN param_list RPAREN type .)


state 245

    (54) param_list -> param COMMA param_list .

    RPAREN          reduce using rule 54 (param_list -> param COMMA param_list .)


state 246

    (131) array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values . RBRACE

    RBRACE          shift and go to state 272


state 247

    (132) array_values -> expression .
    (133) array_values -> expression . COMMA array_values
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression

    RBRACE          reduce using rule 132 (array_values -> expression .)
    COMMA           shift and go to state 273
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121


state 248

    (108) field_value -> VARIABLE COLON expression .
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression

    COMMA           reduce using rule 108 (field_value -> VARIABLE COLON expression .)
    RBRACE          reduce using rule 108 (field_value -> VARIABLE COLON expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121


state 249

    (107) struct_fields_values -> field_value COMMA struct_fields_values .

    RBRACE          reduce using rule 107 (struct_fields_values -> field_value COMMA struct_fields_values .)


state 250

    (123) make_expr -> MAKE LPAREN MAP LBRACKET type . RBRACKET type RPAREN

    RBRACKET        shift and go to state 274


state 251

    (124) make_expr -> MAKE LPAREN LBRACKET RBRACKET type . RPAREN

    RPAREN          shift and go to state 275


state 252

    (95) for_update -> assignment .

    LBRACE          reduce using rule 95 (for_update -> assignment .)


state 253

    (90) for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update . for_block
    (91) for_block -> . begin_loop block end_loop
    (92) begin_loop -> .

    LBRACE          reduce using rule 92 (begin_loop -> .)

    for_block                      shift and go to state 276
    begin_loop                     shift and go to state 128

state 254

    (96) for_update -> increment_stmt .

    LBRACE          reduce using rule 96 (for_update -> increment_stmt .)


state 255

    (37) assignment -> VARIABLE . ASSIGN expression
    (38) assignment -> VARIABLE . ASIG expression
    (140) increment_stmt -> VARIABLE . INCREMENT
    (141) increment_stmt -> VARIABLE . DECREMENT

    ASSIGN          shift and go to state 49
    ASIG            shift and go to state 130
    INCREMENT       shift and go to state 52
    DECREMENT       shift and go to state 53


state 256

    (103) struct_field -> VARIABLE type .

    VARIABLE        reduce using rule 103 (struct_field -> VARIABLE type .)
    INT_TYPE        reduce using rule 103 (struct_field -> VARIABLE type .)
    FLOAT64_TYPE    reduce using rule 103 (struct_field -> VARIABLE type .)
    STRING_TYPE     reduce using rule 103 (struct_field -> VARIABLE type .)
    BOOL_TYPE       reduce using rule 103 (struct_field -> VARIABLE type .)
    RBRACE          reduce using rule 103 (struct_field -> VARIABLE type .)


state 257

    (100) struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .

    VAR             reduce using rule 100 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    VARIABLE        reduce using rule 100 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    FMT             reduce using rule 100 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    CONTINUE        reduce using rule 100 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    FUNC            reduce using rule 100 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    IF              reduce using rule 100 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    FOR             reduce using rule 100 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    TYPE            reduce using rule 100 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    SWITCH          reduce using rule 100 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    LBRACKET        reduce using rule 100 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    BREAK           reduce using rule 100 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    RETURN          reduce using rule 100 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    $end            reduce using rule 100 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    RBRACE          reduce using rule 100 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    CASE            reduce using rule 100 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    DEFAULT         reduce using rule 100 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)


state 258

    (102) struct_fields -> struct_field struct_fields .

    RBRACE          reduce using rule 102 (struct_fields -> struct_field struct_fields .)


state 259

    (113) case_clause -> CASE expression COLON program .

    CASE            reduce using rule 113 (case_clause -> CASE expression COLON program .)
    DEFAULT         reduce using rule 113 (case_clause -> CASE expression COLON program .)
    RBRACE          reduce using rule 113 (case_clause -> CASE expression COLON program .)


state 260

    (116) map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .
    (117) map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type . LBRACE map_params RBRACE
    (125) map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type . LBRACE map_kv_pairs RBRACE

    VAR             reduce using rule 116 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    VARIABLE        reduce using rule 116 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    FMT             reduce using rule 116 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    CONTINUE        reduce using rule 116 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    FUNC            reduce using rule 116 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    IF              reduce using rule 116 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    FOR             reduce using rule 116 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    TYPE            reduce using rule 116 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    SWITCH          reduce using rule 116 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    LBRACKET        reduce using rule 116 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    BREAK           reduce using rule 116 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    RETURN          reduce using rule 116 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    $end            reduce using rule 116 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    RBRACE          reduce using rule 116 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    CASE            reduce using rule 116 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    DEFAULT         reduce using rule 116 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    LBRACE          shift and go to state 277


state 261

    (135) slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values . RBRACE

    RBRACE          shift and go to state 278


state 262

    (136) slice_values -> expression .
    (137) slice_values -> expression . COMMA slice_values
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression

    RBRACE          reduce using rule 136 (slice_values -> expression .)
    COMMA           shift and go to state 279
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121


state 263

    (121) make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type . RBRACKET type RPAREN
    (123) make_expr -> MAKE LPAREN MAP LBRACKET type . RBRACKET type RPAREN

    RBRACKET        shift and go to state 280


state 264

    (122) make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type . RPAREN
    (124) make_expr -> MAKE LPAREN LBRACKET RBRACKET type . RPAREN

    RPAREN          shift and go to state 281


state 265

    (115) map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .

    VAR             reduce using rule 115 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    VARIABLE        reduce using rule 115 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    FMT             reduce using rule 115 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    CONTINUE        reduce using rule 115 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    FUNC            reduce using rule 115 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    IF              reduce using rule 115 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    FOR             reduce using rule 115 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    TYPE            reduce using rule 115 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    SWITCH          reduce using rule 115 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    LBRACKET        reduce using rule 115 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    BREAK           reduce using rule 115 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    RETURN          reduce using rule 115 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    $end            reduce using rule 115 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    RBRACE          reduce using rule 115 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    CASE            reduce using rule 115 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    DEFAULT         reduce using rule 115 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)


state 266

    (39) print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression . RPAREN
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression

    RPAREN          shift and go to state 282
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121


state 267

    (41) print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE . RPAREN

    RPAREN          shift and go to state 283


state 268

    (42) input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .

    VAR             reduce using rule 42 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    VARIABLE        reduce using rule 42 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    FMT             reduce using rule 42 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    CONTINUE        reduce using rule 42 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    FUNC            reduce using rule 42 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    IF              reduce using rule 42 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    FOR             reduce using rule 42 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    TYPE            reduce using rule 42 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    SWITCH          reduce using rule 42 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    LBRACKET        reduce using rule 42 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    BREAK           reduce using rule 42 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    RETURN          reduce using rule 42 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    $end            reduce using rule 42 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    RBRACE          reduce using rule 42 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    CASE            reduce using rule 42 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    DEFAULT         reduce using rule 42 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)


state 269

    (98) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN . param_list RPAREN type LBRACE program RBRACE
    (99) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN . RPAREN type LBRACE program RBRACE
    (53) param_list -> . param
    (54) param_list -> . param COMMA param_list
    (55) param -> . VARIABLE type

    RPAREN          shift and go to state 284
    VARIABLE        shift and go to state 154

    param_list                     shift and go to state 285
    param                          shift and go to state 157

state 270

    (50) func_no_params_void -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .

    VAR             reduce using rule 50 (func_no_params_void -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    VARIABLE        reduce using rule 50 (func_no_params_void -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    FMT             reduce using rule 50 (func_no_params_void -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    CONTINUE        reduce using rule 50 (func_no_params_void -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    FUNC            reduce using rule 50 (func_no_params_void -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    IF              reduce using rule 50 (func_no_params_void -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    FOR             reduce using rule 50 (func_no_params_void -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    TYPE            reduce using rule 50 (func_no_params_void -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    SWITCH          reduce using rule 50 (func_no_params_void -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    LBRACKET        reduce using rule 50 (func_no_params_void -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    BREAK           reduce using rule 50 (func_no_params_void -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    RETURN          reduce using rule 50 (func_no_params_void -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    $end            reduce using rule 50 (func_no_params_void -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    RBRACE          reduce using rule 50 (func_no_params_void -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    CASE            reduce using rule 50 (func_no_params_void -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    DEFAULT         reduce using rule 50 (func_no_params_void -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)


state 271

    (47) func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type . RBRACKET type func_body

    RBRACKET        shift and go to state 286


state 272

    (131) array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .

    VAR             reduce using rule 131 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    VARIABLE        reduce using rule 131 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    FMT             reduce using rule 131 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    CONTINUE        reduce using rule 131 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    FUNC            reduce using rule 131 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    IF              reduce using rule 131 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    FOR             reduce using rule 131 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    TYPE            reduce using rule 131 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    SWITCH          reduce using rule 131 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    LBRACKET        reduce using rule 131 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    BREAK           reduce using rule 131 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    RETURN          reduce using rule 131 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    $end            reduce using rule 131 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    RBRACE          reduce using rule 131 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    CASE            reduce using rule 131 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    DEFAULT         reduce using rule 131 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)


state 273

    (133) array_values -> expression COMMA . array_values
    (132) array_values -> . expression
    (133) array_values -> . expression COMMA array_values
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 247
    array_values                   shift and go to state 287
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 274

    (123) make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET . type RPAREN
    (83) type -> . INT_TYPE
    (84) type -> . FLOAT64_TYPE
    (85) type -> . STRING_TYPE
    (86) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 99
    FLOAT64_TYPE    shift and go to state 100
    STRING_TYPE     shift and go to state 101
    BOOL_TYPE       shift and go to state 102

    type                           shift and go to state 288

state 275

    (124) make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .

    TIMES           reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    DIVIDE          reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    PLUS            reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    MINUS           reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    AND             reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    OR              reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    EQ              reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    NE              reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LT              reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    GT              reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LE              reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    GE              reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LBRACE          reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    VAR             reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    VARIABLE        reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    FMT             reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    CONTINUE        reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    FUNC            reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    IF              reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    FOR             reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    TYPE            reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    SWITCH          reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LBRACKET        reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    BREAK           reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    RETURN          reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    $end            reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    RBRACE          reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    CASE            reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    DEFAULT         reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    SEMICOLON       reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    COMMA           reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    RPAREN          reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    COLON           reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)


state 276

    (90) for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update for_block .

    VAR             reduce using rule 90 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update for_block .)
    VARIABLE        reduce using rule 90 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update for_block .)
    FMT             reduce using rule 90 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update for_block .)
    CONTINUE        reduce using rule 90 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update for_block .)
    FUNC            reduce using rule 90 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update for_block .)
    IF              reduce using rule 90 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update for_block .)
    FOR             reduce using rule 90 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update for_block .)
    TYPE            reduce using rule 90 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update for_block .)
    SWITCH          reduce using rule 90 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update for_block .)
    LBRACKET        reduce using rule 90 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update for_block .)
    BREAK           reduce using rule 90 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update for_block .)
    RETURN          reduce using rule 90 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update for_block .)
    $end            reduce using rule 90 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update for_block .)
    RBRACE          reduce using rule 90 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update for_block .)
    CASE            reduce using rule 90 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update for_block .)
    DEFAULT         reduce using rule 90 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update for_block .)


state 277

    (117) map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE . map_params RBRACE
    (125) map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE . map_kv_pairs RBRACE
    (118) map_params -> . map_param
    (119) map_params -> . map_param COMMA map_params
    (126) map_kv_pairs -> . map_kv_pair
    (127) map_kv_pairs -> . map_kv_pair COMMA map_kv_pairs
    (120) map_param -> . STRING COLON factor
    (128) map_kv_pair -> . STRING COLON expression

    STRING          shift and go to state 293

    map_params                     shift and go to state 289
    map_kv_pairs                   shift and go to state 290
    map_param                      shift and go to state 291
    map_kv_pair                    shift and go to state 292

state 278

    (135) slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .

    VAR             reduce using rule 135 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    VARIABLE        reduce using rule 135 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    FMT             reduce using rule 135 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    CONTINUE        reduce using rule 135 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    FUNC            reduce using rule 135 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    IF              reduce using rule 135 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    FOR             reduce using rule 135 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    TYPE            reduce using rule 135 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    SWITCH          reduce using rule 135 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    LBRACKET        reduce using rule 135 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    BREAK           reduce using rule 135 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    RETURN          reduce using rule 135 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    $end            reduce using rule 135 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    RBRACE          reduce using rule 135 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    CASE            reduce using rule 135 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    DEFAULT         reduce using rule 135 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)


state 279

    (137) slice_values -> expression COMMA . slice_values
    (136) slice_values -> . expression
    (137) slice_values -> . expression COMMA slice_values
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 262
    slice_values                   shift and go to state 294
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 280

    (121) make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET . type RPAREN
    (123) make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET . type RPAREN
    (83) type -> . INT_TYPE
    (84) type -> . FLOAT64_TYPE
    (85) type -> . STRING_TYPE
    (86) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 99
    FLOAT64_TYPE    shift and go to state 100
    STRING_TYPE     shift and go to state 101
    BOOL_TYPE       shift and go to state 102

    type                           shift and go to state 295

state 281

    (122) make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .
    (124) make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .

  ! reduce/reduce conflict for VAR resolved using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for FMT resolved using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for FUNC resolved using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for IF resolved using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for FOR resolved using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for TYPE resolved using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for SWITCH resolved using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for BREAK resolved using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for RETURN resolved using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for RBRACE resolved using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for CASE resolved using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    VAR             reduce using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    VARIABLE        reduce using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    FMT             reduce using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    CONTINUE        reduce using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    FUNC            reduce using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    IF              reduce using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    FOR             reduce using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    TYPE            reduce using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    SWITCH          reduce using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LBRACKET        reduce using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    BREAK           reduce using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    RETURN          reduce using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    $end            reduce using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    RBRACE          reduce using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    CASE            reduce using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    DEFAULT         reduce using rule 122 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    TIMES           reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    DIVIDE          reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    PLUS            reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    MINUS           reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    AND             reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    OR              reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    EQ              reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    NE              reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LT              reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    GT              reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LE              reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    GE              reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)

  ! VAR             [ reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! VARIABLE        [ reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! FMT             [ reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! CONTINUE        [ reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! FUNC            [ reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! IF              [ reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! FOR             [ reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! TYPE            [ reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! SWITCH          [ reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! LBRACKET        [ reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! BREAK           [ reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! RETURN          [ reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! $end            [ reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! RBRACE          [ reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! CASE            [ reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! DEFAULT         [ reduce using rule 124 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]


state 282

    (39) print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .

    VAR             reduce using rule 39 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    VARIABLE        reduce using rule 39 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    FMT             reduce using rule 39 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    CONTINUE        reduce using rule 39 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    FUNC            reduce using rule 39 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    IF              reduce using rule 39 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    FOR             reduce using rule 39 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    TYPE            reduce using rule 39 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    SWITCH          reduce using rule 39 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    LBRACKET        reduce using rule 39 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    BREAK           reduce using rule 39 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    RETURN          reduce using rule 39 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    $end            reduce using rule 39 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    RBRACE          reduce using rule 39 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    CASE            reduce using rule 39 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    DEFAULT         reduce using rule 39 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)


state 283

    (41) print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .

    VAR             reduce using rule 41 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    VARIABLE        reduce using rule 41 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    FMT             reduce using rule 41 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    CONTINUE        reduce using rule 41 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    FUNC            reduce using rule 41 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    IF              reduce using rule 41 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    FOR             reduce using rule 41 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    TYPE            reduce using rule 41 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    SWITCH          reduce using rule 41 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    LBRACKET        reduce using rule 41 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    BREAK           reduce using rule 41 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    RETURN          reduce using rule 41 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    $end            reduce using rule 41 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    RBRACE          reduce using rule 41 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    CASE            reduce using rule 41 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    DEFAULT         reduce using rule 41 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)


state 284

    (99) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN . type LBRACE program RBRACE
    (83) type -> . INT_TYPE
    (84) type -> . FLOAT64_TYPE
    (85) type -> . STRING_TYPE
    (86) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 99
    FLOAT64_TYPE    shift and go to state 100
    STRING_TYPE     shift and go to state 101
    BOOL_TYPE       shift and go to state 102

    type                           shift and go to state 296

state 285

    (98) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list . RPAREN type LBRACE program RBRACE

    RPAREN          shift and go to state 297


state 286

    (47) func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET . type func_body
    (83) type -> . INT_TYPE
    (84) type -> . FLOAT64_TYPE
    (85) type -> . STRING_TYPE
    (86) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 99
    FLOAT64_TYPE    shift and go to state 100
    STRING_TYPE     shift and go to state 101
    BOOL_TYPE       shift and go to state 102

    type                           shift and go to state 298

state 287

    (133) array_values -> expression COMMA array_values .

    RBRACE          reduce using rule 133 (array_values -> expression COMMA array_values .)


state 288

    (123) make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type . RPAREN

    RPAREN          shift and go to state 299


state 289

    (117) map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params . RBRACE

    RBRACE          shift and go to state 300


state 290

    (125) map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs . RBRACE

    RBRACE          shift and go to state 301


state 291

    (118) map_params -> map_param .
    (119) map_params -> map_param . COMMA map_params

    RBRACE          reduce using rule 118 (map_params -> map_param .)
    COMMA           shift and go to state 302


state 292

    (126) map_kv_pairs -> map_kv_pair .
    (127) map_kv_pairs -> map_kv_pair . COMMA map_kv_pairs

    RBRACE          reduce using rule 126 (map_kv_pairs -> map_kv_pair .)
    COMMA           shift and go to state 303


state 293

    (120) map_param -> STRING . COLON factor
    (128) map_kv_pair -> STRING . COLON expression

    COLON           shift and go to state 304


state 294

    (137) slice_values -> expression COMMA slice_values .

    RBRACE          reduce using rule 137 (slice_values -> expression COMMA slice_values .)


state 295

    (121) make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type . RPAREN
    (123) make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type . RPAREN

    RPAREN          shift and go to state 305


state 296

    (99) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type . LBRACE program RBRACE

    LBRACE          shift and go to state 306


state 297

    (98) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN . type LBRACE program RBRACE
    (83) type -> . INT_TYPE
    (84) type -> . FLOAT64_TYPE
    (85) type -> . STRING_TYPE
    (86) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 99
    FLOAT64_TYPE    shift and go to state 100
    STRING_TYPE     shift and go to state 101
    BOOL_TYPE       shift and go to state 102

    type                           shift and go to state 307

state 298

    (47) func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type . func_body
    (45) func_body -> . LBRACE program RBRACE

    LBRACE          shift and go to state 60

    func_body                      shift and go to state 308

state 299

    (123) make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .

    TIMES           reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    DIVIDE          reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    PLUS            reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    MINUS           reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    AND             reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    OR              reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    EQ              reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    NE              reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LT              reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    GT              reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LE              reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    GE              reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LBRACE          reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    VAR             reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    VARIABLE        reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FMT             reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    CONTINUE        reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FUNC            reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    IF              reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FOR             reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    TYPE            reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    SWITCH          reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LBRACKET        reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    BREAK           reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    RETURN          reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    $end            reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    RBRACE          reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    CASE            reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    DEFAULT         reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    SEMICOLON       reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    COMMA           reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    RPAREN          reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    COLON           reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)


state 300

    (117) map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .

    VAR             reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    VARIABLE        reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    FMT             reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    CONTINUE        reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    FUNC            reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    IF              reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    FOR             reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    TYPE            reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    SWITCH          reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    LBRACKET        reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    BREAK           reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    RETURN          reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    $end            reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    RBRACE          reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    CASE            reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    DEFAULT         reduce using rule 117 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)


state 301

    (125) map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .

    VAR             reduce using rule 125 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    VARIABLE        reduce using rule 125 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    FMT             reduce using rule 125 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    CONTINUE        reduce using rule 125 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    FUNC            reduce using rule 125 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    IF              reduce using rule 125 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    FOR             reduce using rule 125 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    TYPE            reduce using rule 125 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    SWITCH          reduce using rule 125 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    LBRACKET        reduce using rule 125 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    BREAK           reduce using rule 125 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    RETURN          reduce using rule 125 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    $end            reduce using rule 125 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    RBRACE          reduce using rule 125 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    CASE            reduce using rule 125 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    DEFAULT         reduce using rule 125 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)


state 302

    (119) map_params -> map_param COMMA . map_params
    (118) map_params -> . map_param
    (119) map_params -> . map_param COMMA map_params
    (120) map_param -> . STRING COLON factor

    STRING          shift and go to state 310

    map_param                      shift and go to state 291
    map_params                     shift and go to state 309

state 303

    (127) map_kv_pairs -> map_kv_pair COMMA . map_kv_pairs
    (126) map_kv_pairs -> . map_kv_pair
    (127) map_kv_pairs -> . map_kv_pair COMMA map_kv_pairs
    (128) map_kv_pair -> . STRING COLON expression

    STRING          shift and go to state 312

    map_kv_pair                    shift and go to state 292
    map_kv_pairs                   shift and go to state 311

state 304

    (120) map_param -> STRING COLON . factor
    (128) map_kv_pair -> STRING COLON . expression
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE

    NUMBER          shift and go to state 315
    FLOAT           shift and go to state 316
    STRING          shift and go to state 70
    VARIABLE        shift and go to state 317
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    factor                         shift and go to state 313
    expression                     shift and go to state 314
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76
    term                           shift and go to state 68

state 305

    (121) make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .
    (123) make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .

  ! reduce/reduce conflict for VAR resolved using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for FMT resolved using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for FUNC resolved using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for IF resolved using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for FOR resolved using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for TYPE resolved using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for SWITCH resolved using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for BREAK resolved using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for RETURN resolved using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for RBRACE resolved using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for CASE resolved using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    VAR             reduce using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    VARIABLE        reduce using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FMT             reduce using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    CONTINUE        reduce using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FUNC            reduce using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    IF              reduce using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FOR             reduce using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    TYPE            reduce using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    SWITCH          reduce using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LBRACKET        reduce using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    BREAK           reduce using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    RETURN          reduce using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    $end            reduce using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    RBRACE          reduce using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    CASE            reduce using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    DEFAULT         reduce using rule 121 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    TIMES           reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    DIVIDE          reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    PLUS            reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    MINUS           reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    AND             reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    OR              reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    EQ              reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    NE              reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LT              reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    GT              reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LE              reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    GE              reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)

  ! VAR             [ reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! VARIABLE        [ reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! FMT             [ reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! CONTINUE        [ reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! FUNC            [ reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! IF              [ reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! FOR             [ reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! TYPE            [ reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! SWITCH          [ reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! LBRACKET        [ reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! BREAK           [ reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! RETURN          [ reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! $end            [ reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! RBRACE          [ reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! CASE            [ reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! DEFAULT         [ reduce using rule 123 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]


state 306

    (99) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE . program RBRACE
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_no_params_void
    (15) statement -> . func_with_map
    (16) statement -> . func_call
    (17) statement -> . if_stmt
    (18) statement -> . for_stmt
    (19) statement -> . struct_def
    (20) statement -> . switch_stmt
    (21) statement -> . map_declaration
    (22) statement -> . map_declaration_values
    (23) statement -> . array_declaration
    (24) statement -> . array_literal
    (25) statement -> . slice_declaration
    (26) statement -> . make_stmt
    (27) statement -> . new_stmt
    (28) statement -> . break_stmt
    (29) statement -> . increment_stmt
    (30) statement -> . return_stmt
    (31) declaration -> . VAR VARIABLE type
    (32) declaration -> . VAR VARIABLE type ASIG expression
    (33) declaration -> . VAR VARIABLE type ASSIGN expression
    (37) assignment -> . VARIABLE ASSIGN expression
    (38) assignment -> . VARIABLE ASIG expression
    (39) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (40) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (41) print_stmt -> . FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN
    (42) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (94) continue_stmt -> . CONTINUE
    (98) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (99) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (43) func_def -> . func_header func_body
    (48) func_no_params -> . func_header_no_params block
    (50) func_no_params_void -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (47) func_with_map -> . FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN
    (87) if_stmt -> . IF expression block
    (88) if_stmt -> . IF expression block ELSE block
    (89) for_stmt -> . FOR expression for_block
    (90) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update for_block
    (100) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (109) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (110) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (115) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (116) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (117) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE
    (125) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (129) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (130) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (131) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (134) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (135) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (121) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (122) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (138) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (139) break_stmt -> . BREAK
    (140) increment_stmt -> . VARIABLE INCREMENT
    (141) increment_stmt -> . VARIABLE DECREMENT
    (46) return_stmt -> . RETURN expression
    (44) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type
    (49) func_header_no_params -> . FUNC VARIABLE LPAREN RPAREN type

    VAR             shift and go to state 34
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 35
    CONTINUE        shift and go to state 36
    FUNC            shift and go to state 37
    IF              shift and go to state 41
    FOR             shift and go to state 42
    TYPE            shift and go to state 43
    SWITCH          shift and go to state 44
    LBRACKET        shift and go to state 40
    BREAK           shift and go to state 45
    RETURN          shift and go to state 46

    program                        shift and go to state 318
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_no_params_void            shift and go to state 17
    func_with_map                  shift and go to state 18
    func_call                      shift and go to state 19
    if_stmt                        shift and go to state 20
    for_stmt                       shift and go to state 21
    struct_def                     shift and go to state 22
    switch_stmt                    shift and go to state 23
    map_declaration                shift and go to state 24
    map_declaration_values         shift and go to state 25
    array_declaration              shift and go to state 26
    array_literal                  shift and go to state 27
    slice_declaration              shift and go to state 28
    make_stmt                      shift and go to state 29
    new_stmt                       shift and go to state 30
    break_stmt                     shift and go to state 31
    increment_stmt                 shift and go to state 32
    return_stmt                    shift and go to state 33
    func_header                    shift and go to state 38
    func_header_no_params          shift and go to state 39

state 307

    (98) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type . LBRACE program RBRACE

    LBRACE          shift and go to state 319


state 308

    (47) func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body .

    VAR             reduce using rule 47 (func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body .)
    VARIABLE        reduce using rule 47 (func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body .)
    FMT             reduce using rule 47 (func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body .)
    CONTINUE        reduce using rule 47 (func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body .)
    FUNC            reduce using rule 47 (func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body .)
    IF              reduce using rule 47 (func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body .)
    FOR             reduce using rule 47 (func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body .)
    TYPE            reduce using rule 47 (func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body .)
    SWITCH          reduce using rule 47 (func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body .)
    LBRACKET        reduce using rule 47 (func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body .)
    BREAK           reduce using rule 47 (func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body .)
    RETURN          reduce using rule 47 (func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body .)
    $end            reduce using rule 47 (func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body .)
    RBRACE          reduce using rule 47 (func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body .)
    CASE            reduce using rule 47 (func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body .)
    DEFAULT         reduce using rule 47 (func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body .)


state 309

    (119) map_params -> map_param COMMA map_params .

    RBRACE          reduce using rule 119 (map_params -> map_param COMMA map_params .)


state 310

    (120) map_param -> STRING . COLON factor

    COLON           shift and go to state 320


state 311

    (127) map_kv_pairs -> map_kv_pair COMMA map_kv_pairs .

    RBRACE          reduce using rule 127 (map_kv_pairs -> map_kv_pair COMMA map_kv_pairs .)


state 312

    (128) map_kv_pair -> STRING . COLON expression

    COLON           shift and go to state 321


state 313

    (120) map_param -> STRING COLON factor .
    (69) term -> factor .

  ! reduce/reduce conflict for COMMA resolved using rule 69 (term -> factor .)
  ! reduce/reduce conflict for RBRACE resolved using rule 69 (term -> factor .)
    TIMES           reduce using rule 69 (term -> factor .)
    DIVIDE          reduce using rule 69 (term -> factor .)
    PLUS            reduce using rule 69 (term -> factor .)
    MINUS           reduce using rule 69 (term -> factor .)
    AND             reduce using rule 69 (term -> factor .)
    OR              reduce using rule 69 (term -> factor .)
    EQ              reduce using rule 69 (term -> factor .)
    NE              reduce using rule 69 (term -> factor .)
    LT              reduce using rule 69 (term -> factor .)
    GT              reduce using rule 69 (term -> factor .)
    LE              reduce using rule 69 (term -> factor .)
    GE              reduce using rule 69 (term -> factor .)
    COMMA           reduce using rule 69 (term -> factor .)
    RBRACE          reduce using rule 69 (term -> factor .)

  ! COMMA           [ reduce using rule 120 (map_param -> STRING COLON factor .) ]
  ! RBRACE          [ reduce using rule 120 (map_param -> STRING COLON factor .) ]


state 314

    (128) map_kv_pair -> STRING COLON expression .
    (59) expression -> expression . PLUS term
    (60) expression -> expression . MINUS term
    (61) expression -> expression . AND expression
    (62) expression -> expression . OR expression
    (63) expression -> expression . EQ expression
    (64) expression -> expression . NE expression
    (65) expression -> expression . LT expression
    (66) expression -> expression . GT expression
    (67) expression -> expression . LE expression
    (68) expression -> expression . GE expression

    COMMA           reduce using rule 128 (map_kv_pair -> STRING COLON expression .)
    RBRACE          reduce using rule 128 (map_kv_pair -> STRING COLON expression .)
    PLUS            shift and go to state 112
    MINUS           shift and go to state 113
    AND             shift and go to state 114
    OR              shift and go to state 115
    EQ              shift and go to state 116
    NE              shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    LE              shift and go to state 120
    GE              shift and go to state 121


state 315

    (73) factor -> NUMBER .
    (34) expression -> NUMBER .

  ! reduce/reduce conflict for PLUS resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for MINUS resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for AND resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for OR resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for EQ resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for NE resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for LT resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for GT resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for LE resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for GE resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for COMMA resolved using rule 34 (expression -> NUMBER .)
  ! reduce/reduce conflict for RBRACE resolved using rule 34 (expression -> NUMBER .)
    TIMES           reduce using rule 73 (factor -> NUMBER .)
    DIVIDE          reduce using rule 73 (factor -> NUMBER .)
    PLUS            reduce using rule 34 (expression -> NUMBER .)
    MINUS           reduce using rule 34 (expression -> NUMBER .)
    AND             reduce using rule 34 (expression -> NUMBER .)
    OR              reduce using rule 34 (expression -> NUMBER .)
    EQ              reduce using rule 34 (expression -> NUMBER .)
    NE              reduce using rule 34 (expression -> NUMBER .)
    LT              reduce using rule 34 (expression -> NUMBER .)
    GT              reduce using rule 34 (expression -> NUMBER .)
    LE              reduce using rule 34 (expression -> NUMBER .)
    GE              reduce using rule 34 (expression -> NUMBER .)
    COMMA           reduce using rule 34 (expression -> NUMBER .)
    RBRACE          reduce using rule 34 (expression -> NUMBER .)

  ! COMMA           [ reduce using rule 73 (factor -> NUMBER .) ]
  ! RBRACE          [ reduce using rule 73 (factor -> NUMBER .) ]
  ! PLUS            [ reduce using rule 73 (factor -> NUMBER .) ]
  ! MINUS           [ reduce using rule 73 (factor -> NUMBER .) ]
  ! AND             [ reduce using rule 73 (factor -> NUMBER .) ]
  ! OR              [ reduce using rule 73 (factor -> NUMBER .) ]
  ! EQ              [ reduce using rule 73 (factor -> NUMBER .) ]
  ! NE              [ reduce using rule 73 (factor -> NUMBER .) ]
  ! LT              [ reduce using rule 73 (factor -> NUMBER .) ]
  ! GT              [ reduce using rule 73 (factor -> NUMBER .) ]
  ! LE              [ reduce using rule 73 (factor -> NUMBER .) ]
  ! GE              [ reduce using rule 73 (factor -> NUMBER .) ]


state 316

    (74) factor -> FLOAT .
    (35) expression -> FLOAT .

  ! reduce/reduce conflict for PLUS resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for MINUS resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for AND resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for OR resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for EQ resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for NE resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for LT resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for GT resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for LE resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for GE resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for COMMA resolved using rule 35 (expression -> FLOAT .)
  ! reduce/reduce conflict for RBRACE resolved using rule 35 (expression -> FLOAT .)
    TIMES           reduce using rule 74 (factor -> FLOAT .)
    DIVIDE          reduce using rule 74 (factor -> FLOAT .)
    PLUS            reduce using rule 35 (expression -> FLOAT .)
    MINUS           reduce using rule 35 (expression -> FLOAT .)
    AND             reduce using rule 35 (expression -> FLOAT .)
    OR              reduce using rule 35 (expression -> FLOAT .)
    EQ              reduce using rule 35 (expression -> FLOAT .)
    NE              reduce using rule 35 (expression -> FLOAT .)
    LT              reduce using rule 35 (expression -> FLOAT .)
    GT              reduce using rule 35 (expression -> FLOAT .)
    LE              reduce using rule 35 (expression -> FLOAT .)
    GE              reduce using rule 35 (expression -> FLOAT .)
    COMMA           reduce using rule 35 (expression -> FLOAT .)
    RBRACE          reduce using rule 35 (expression -> FLOAT .)

  ! COMMA           [ reduce using rule 74 (factor -> FLOAT .) ]
  ! RBRACE          [ reduce using rule 74 (factor -> FLOAT .) ]
  ! PLUS            [ reduce using rule 74 (factor -> FLOAT .) ]
  ! MINUS           [ reduce using rule 74 (factor -> FLOAT .) ]
  ! AND             [ reduce using rule 74 (factor -> FLOAT .) ]
  ! OR              [ reduce using rule 74 (factor -> FLOAT .) ]
  ! EQ              [ reduce using rule 74 (factor -> FLOAT .) ]
  ! NE              [ reduce using rule 74 (factor -> FLOAT .) ]
  ! LT              [ reduce using rule 74 (factor -> FLOAT .) ]
  ! GT              [ reduce using rule 74 (factor -> FLOAT .) ]
  ! LE              [ reduce using rule 74 (factor -> FLOAT .) ]
  ! GE              [ reduce using rule 74 (factor -> FLOAT .) ]


state 317

    (76) factor -> VARIABLE .
    (36) expression -> VARIABLE .
    (105) struct_instance -> VARIABLE . LBRACE struct_fields_values RBRACE
    (51) func_call -> VARIABLE . LPAREN arg_list RPAREN
    (52) func_call -> VARIABLE . LPAREN RPAREN
    (72) term -> VARIABLE .

  ! reduce/reduce conflict for PLUS resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for MINUS resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for AND resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for OR resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for EQ resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for NE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LT resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GT resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for TIMES resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 72 (term -> VARIABLE .)
  ! reduce/reduce conflict for PLUS resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for MINUS resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for AND resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for OR resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for EQ resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for NE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LT resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GT resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GE resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 36 (expression -> VARIABLE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 36 (expression -> VARIABLE .)
    PLUS            reduce using rule 36 (expression -> VARIABLE .)
    MINUS           reduce using rule 36 (expression -> VARIABLE .)
    AND             reduce using rule 36 (expression -> VARIABLE .)
    OR              reduce using rule 36 (expression -> VARIABLE .)
    EQ              reduce using rule 36 (expression -> VARIABLE .)
    NE              reduce using rule 36 (expression -> VARIABLE .)
    LT              reduce using rule 36 (expression -> VARIABLE .)
    GT              reduce using rule 36 (expression -> VARIABLE .)
    LE              reduce using rule 36 (expression -> VARIABLE .)
    GE              reduce using rule 36 (expression -> VARIABLE .)
    COMMA           reduce using rule 36 (expression -> VARIABLE .)
    RBRACE          reduce using rule 36 (expression -> VARIABLE .)
    LBRACE          shift and go to state 122
    LPAREN          shift and go to state 51
    TIMES           reduce using rule 72 (term -> VARIABLE .)
    DIVIDE          reduce using rule 72 (term -> VARIABLE .)

  ! COMMA           [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! RBRACE          [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! TIMES           [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! PLUS            [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! AND             [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! OR              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! EQ              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! NE              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! LT              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! GT              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! LE              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! GE              [ reduce using rule 76 (factor -> VARIABLE .) ]
  ! PLUS            [ reduce using rule 72 (term -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 72 (term -> VARIABLE .) ]
  ! AND             [ reduce using rule 72 (term -> VARIABLE .) ]
  ! OR              [ reduce using rule 72 (term -> VARIABLE .) ]
  ! EQ              [ reduce using rule 72 (term -> VARIABLE .) ]
  ! NE              [ reduce using rule 72 (term -> VARIABLE .) ]
  ! LT              [ reduce using rule 72 (term -> VARIABLE .) ]
  ! GT              [ reduce using rule 72 (term -> VARIABLE .) ]
  ! LE              [ reduce using rule 72 (term -> VARIABLE .) ]
  ! GE              [ reduce using rule 72 (term -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 72 (term -> VARIABLE .) ]
  ! RBRACE          [ reduce using rule 72 (term -> VARIABLE .) ]


state 318

    (99) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program . RBRACE

    RBRACE          shift and go to state 322


state 319

    (98) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE . program RBRACE
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_no_params_void
    (15) statement -> . func_with_map
    (16) statement -> . func_call
    (17) statement -> . if_stmt
    (18) statement -> . for_stmt
    (19) statement -> . struct_def
    (20) statement -> . switch_stmt
    (21) statement -> . map_declaration
    (22) statement -> . map_declaration_values
    (23) statement -> . array_declaration
    (24) statement -> . array_literal
    (25) statement -> . slice_declaration
    (26) statement -> . make_stmt
    (27) statement -> . new_stmt
    (28) statement -> . break_stmt
    (29) statement -> . increment_stmt
    (30) statement -> . return_stmt
    (31) declaration -> . VAR VARIABLE type
    (32) declaration -> . VAR VARIABLE type ASIG expression
    (33) declaration -> . VAR VARIABLE type ASSIGN expression
    (37) assignment -> . VARIABLE ASSIGN expression
    (38) assignment -> . VARIABLE ASIG expression
    (39) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (40) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (41) print_stmt -> . FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN
    (42) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (94) continue_stmt -> . CONTINUE
    (98) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (99) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (43) func_def -> . func_header func_body
    (48) func_no_params -> . func_header_no_params block
    (50) func_no_params_void -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (47) func_with_map -> . FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN
    (87) if_stmt -> . IF expression block
    (88) if_stmt -> . IF expression block ELSE block
    (89) for_stmt -> . FOR expression for_block
    (90) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update for_block
    (100) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (109) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (110) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (115) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (116) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (117) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE
    (125) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (129) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (130) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (131) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (134) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (135) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (121) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (122) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (138) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (139) break_stmt -> . BREAK
    (140) increment_stmt -> . VARIABLE INCREMENT
    (141) increment_stmt -> . VARIABLE DECREMENT
    (46) return_stmt -> . RETURN expression
    (44) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type
    (49) func_header_no_params -> . FUNC VARIABLE LPAREN RPAREN type

    VAR             shift and go to state 34
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 35
    CONTINUE        shift and go to state 36
    FUNC            shift and go to state 37
    IF              shift and go to state 41
    FOR             shift and go to state 42
    TYPE            shift and go to state 43
    SWITCH          shift and go to state 44
    LBRACKET        shift and go to state 40
    BREAK           shift and go to state 45
    RETURN          shift and go to state 46

    program                        shift and go to state 323
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_no_params_void            shift and go to state 17
    func_with_map                  shift and go to state 18
    func_call                      shift and go to state 19
    if_stmt                        shift and go to state 20
    for_stmt                       shift and go to state 21
    struct_def                     shift and go to state 22
    switch_stmt                    shift and go to state 23
    map_declaration                shift and go to state 24
    map_declaration_values         shift and go to state 25
    array_declaration              shift and go to state 26
    array_literal                  shift and go to state 27
    slice_declaration              shift and go to state 28
    make_stmt                      shift and go to state 29
    new_stmt                       shift and go to state 30
    break_stmt                     shift and go to state 31
    increment_stmt                 shift and go to state 32
    return_stmt                    shift and go to state 33
    func_header                    shift and go to state 38
    func_header_no_params          shift and go to state 39

state 320

    (120) map_param -> STRING COLON . factor
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 164
    FLOAT           shift and go to state 165
    STRING          shift and go to state 70
    VARIABLE        shift and go to state 179
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    factor                         shift and go to state 324
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 321

    (128) map_kv_pair -> STRING COLON . expression
    (34) expression -> . NUMBER
    (35) expression -> . FLOAT
    (36) expression -> . VARIABLE
    (58) expression -> . term
    (59) expression -> . expression PLUS term
    (60) expression -> . expression MINUS term
    (61) expression -> . expression AND expression
    (62) expression -> . expression OR expression
    (63) expression -> . expression EQ expression
    (64) expression -> . expression NE expression
    (65) expression -> . expression LT expression
    (66) expression -> . expression GT expression
    (67) expression -> . expression LE expression
    (68) expression -> . expression GE expression
    (69) term -> . factor
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . VARIABLE
    (73) factor -> . NUMBER
    (74) factor -> . FLOAT
    (75) factor -> . STRING
    (76) factor -> . VARIABLE
    (77) factor -> . TRUE
    (78) factor -> . FALSE
    (79) factor -> . LPAREN expression RPAREN
    (80) factor -> . make_expr
    (81) factor -> . struct_instance
    (82) factor -> . func_call
    (123) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (124) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (105) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (51) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (52) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 65
    FLOAT           shift and go to state 66
    VARIABLE        shift and go to state 67
    STRING          shift and go to state 70
    TRUE            shift and go to state 71
    FALSE           shift and go to state 72
    LPAREN          shift and go to state 73
    MAKE            shift and go to state 77

    expression                     shift and go to state 314
    term                           shift and go to state 68
    factor                         shift and go to state 69
    make_expr                      shift and go to state 74
    struct_instance                shift and go to state 75
    func_call                      shift and go to state 76

state 322

    (99) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .

    VAR             reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    VARIABLE        reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    FMT             reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    CONTINUE        reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    FUNC            reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    IF              reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    FOR             reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    TYPE            reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    SWITCH          reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    LBRACKET        reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    BREAK           reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    RETURN          reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    $end            reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    RBRACE          reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    CASE            reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    DEFAULT         reduce using rule 99 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)


state 323

    (98) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program . RBRACE

    RBRACE          shift and go to state 325


state 324

    (120) map_param -> STRING COLON factor .

    COMMA           reduce using rule 120 (map_param -> STRING COLON factor .)
    RBRACE          reduce using rule 120 (map_param -> STRING COLON factor .)


state 325

    (98) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .

    VAR             reduce using rule 98 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    VARIABLE        reduce using rule 98 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    FMT             reduce using rule 98 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    CONTINUE        reduce using rule 98 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    FUNC            reduce using rule 98 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    IF              reduce using rule 98 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    FOR             reduce using rule 98 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    TYPE            reduce using rule 98 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    SWITCH          reduce using rule 98 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    LBRACKET        reduce using rule 98 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    BREAK           reduce using rule 98 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    RETURN          reduce using rule 98 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    $end            reduce using rule 98 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    RBRACE          reduce using rule 98 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    CASE            reduce using rule 98 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    DEFAULT         reduce using rule 98 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACE in state 67 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 80 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 163 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 167 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 167 resolved as shift
WARNING: shift/reduce conflict for AND in state 167 resolved as shift
WARNING: shift/reduce conflict for OR in state 167 resolved as shift
WARNING: shift/reduce conflict for EQ in state 167 resolved as shift
WARNING: shift/reduce conflict for NE in state 167 resolved as shift
WARNING: shift/reduce conflict for LT in state 167 resolved as shift
WARNING: shift/reduce conflict for GT in state 167 resolved as shift
WARNING: shift/reduce conflict for LE in state 167 resolved as shift
WARNING: shift/reduce conflict for GE in state 167 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 168 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 168 resolved as shift
WARNING: shift/reduce conflict for AND in state 168 resolved as shift
WARNING: shift/reduce conflict for OR in state 168 resolved as shift
WARNING: shift/reduce conflict for EQ in state 168 resolved as shift
WARNING: shift/reduce conflict for NE in state 168 resolved as shift
WARNING: shift/reduce conflict for LT in state 168 resolved as shift
WARNING: shift/reduce conflict for GT in state 168 resolved as shift
WARNING: shift/reduce conflict for LE in state 168 resolved as shift
WARNING: shift/reduce conflict for GE in state 168 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 169 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 169 resolved as shift
WARNING: shift/reduce conflict for AND in state 169 resolved as shift
WARNING: shift/reduce conflict for OR in state 169 resolved as shift
WARNING: shift/reduce conflict for EQ in state 169 resolved as shift
WARNING: shift/reduce conflict for NE in state 169 resolved as shift
WARNING: shift/reduce conflict for LT in state 169 resolved as shift
WARNING: shift/reduce conflict for GT in state 169 resolved as shift
WARNING: shift/reduce conflict for LE in state 169 resolved as shift
WARNING: shift/reduce conflict for GE in state 169 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 170 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 170 resolved as shift
WARNING: shift/reduce conflict for AND in state 170 resolved as shift
WARNING: shift/reduce conflict for OR in state 170 resolved as shift
WARNING: shift/reduce conflict for EQ in state 170 resolved as shift
WARNING: shift/reduce conflict for NE in state 170 resolved as shift
WARNING: shift/reduce conflict for LT in state 170 resolved as shift
WARNING: shift/reduce conflict for GT in state 170 resolved as shift
WARNING: shift/reduce conflict for LE in state 170 resolved as shift
WARNING: shift/reduce conflict for GE in state 170 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 171 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 171 resolved as shift
WARNING: shift/reduce conflict for AND in state 171 resolved as shift
WARNING: shift/reduce conflict for OR in state 171 resolved as shift
WARNING: shift/reduce conflict for EQ in state 171 resolved as shift
WARNING: shift/reduce conflict for NE in state 171 resolved as shift
WARNING: shift/reduce conflict for LT in state 171 resolved as shift
WARNING: shift/reduce conflict for GT in state 171 resolved as shift
WARNING: shift/reduce conflict for LE in state 171 resolved as shift
WARNING: shift/reduce conflict for GE in state 171 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 172 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 172 resolved as shift
WARNING: shift/reduce conflict for AND in state 172 resolved as shift
WARNING: shift/reduce conflict for OR in state 172 resolved as shift
WARNING: shift/reduce conflict for EQ in state 172 resolved as shift
WARNING: shift/reduce conflict for NE in state 172 resolved as shift
WARNING: shift/reduce conflict for LT in state 172 resolved as shift
WARNING: shift/reduce conflict for GT in state 172 resolved as shift
WARNING: shift/reduce conflict for LE in state 172 resolved as shift
WARNING: shift/reduce conflict for GE in state 172 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 173 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 173 resolved as shift
WARNING: shift/reduce conflict for AND in state 173 resolved as shift
WARNING: shift/reduce conflict for OR in state 173 resolved as shift
WARNING: shift/reduce conflict for EQ in state 173 resolved as shift
WARNING: shift/reduce conflict for NE in state 173 resolved as shift
WARNING: shift/reduce conflict for LT in state 173 resolved as shift
WARNING: shift/reduce conflict for GT in state 173 resolved as shift
WARNING: shift/reduce conflict for LE in state 173 resolved as shift
WARNING: shift/reduce conflict for GE in state 173 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 174 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 174 resolved as shift
WARNING: shift/reduce conflict for AND in state 174 resolved as shift
WARNING: shift/reduce conflict for OR in state 174 resolved as shift
WARNING: shift/reduce conflict for EQ in state 174 resolved as shift
WARNING: shift/reduce conflict for NE in state 174 resolved as shift
WARNING: shift/reduce conflict for LT in state 174 resolved as shift
WARNING: shift/reduce conflict for GT in state 174 resolved as shift
WARNING: shift/reduce conflict for LE in state 174 resolved as shift
WARNING: shift/reduce conflict for GE in state 174 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 179 resolved as shift
WARNING: reduce/reduce conflict in state 65 resolved using rule (expression -> NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 65
WARNING: reduce/reduce conflict in state 66 resolved using rule (expression -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 66
WARNING: reduce/reduce conflict in state 67 resolved using rule (expression -> VARIABLE)
WARNING: rejected rule (term -> VARIABLE) in state 67
WARNING: reduce/reduce conflict in state 67 resolved using rule (term -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 67
WARNING: reduce/reduce conflict in state 67 resolved using rule (expression -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 67
WARNING: reduce/reduce conflict in state 80 resolved using rule (expression -> VARIABLE)
WARNING: rejected rule (term -> VARIABLE) in state 80
WARNING: reduce/reduce conflict in state 80 resolved using rule (term -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 80
WARNING: reduce/reduce conflict in state 80 resolved using rule (expression -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 80
WARNING: reduce/reduce conflict in state 163 resolved using rule (term -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 163
WARNING: reduce/reduce conflict in state 281 resolved using rule (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN)
WARNING: rejected rule (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN) in state 281
WARNING: reduce/reduce conflict in state 305 resolved using rule (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN)
WARNING: rejected rule (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN) in state 305
WARNING: reduce/reduce conflict in state 313 resolved using rule (term -> factor)
WARNING: rejected rule (map_param -> STRING COLON factor) in state 313
WARNING: reduce/reduce conflict in state 315 resolved using rule (expression -> NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 315
WARNING: reduce/reduce conflict in state 316 resolved using rule (expression -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 316
WARNING: reduce/reduce conflict in state 317 resolved using rule (expression -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 317
WARNING: reduce/reduce conflict in state 317 resolved using rule (term -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 317
WARNING: reduce/reduce conflict in state 317 resolved using rule (expression -> VARIABLE)
WARNING: rejected rule (term -> VARIABLE) in state 317
