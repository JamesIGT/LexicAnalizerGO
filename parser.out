Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    MOD
    NOT
    PRINT
    RANGE
    UINT

Grammar

Rule 0     S' -> start
Rule 1     start -> PACKAGE VARIABLE import_stmt program
Rule 2     import_stmt -> IMPORT LPAREN STRING RPAREN
Rule 3     import_stmt -> IMPORT STRING
Rule 4     program -> statement
Rule 5     program -> statement program
Rule 6     statement -> declaration
Rule 7     statement -> assignment
Rule 8     statement -> print_stmt
Rule 9     statement -> input_stmt
Rule 10    statement -> continue_stmt
Rule 11    statement -> struct_method
Rule 12    statement -> func_def
Rule 13    statement -> func_no_params
Rule 14    statement -> func_call
Rule 15    statement -> if_stmt
Rule 16    statement -> for_stmt
Rule 17    statement -> struct_def
Rule 18    statement -> switch_stmt
Rule 19    statement -> map_declaration
Rule 20    statement -> map_declaration_values
Rule 21    statement -> array_declaration
Rule 22    statement -> array_literal
Rule 23    statement -> slice_declaration
Rule 24    statement -> make_stmt
Rule 25    statement -> new_stmt
Rule 26    statement -> break_stmt
Rule 27    statement -> increment_stmt
Rule 28    statement -> return_stmt
Rule 29    declaration -> VAR VARIABLE type
Rule 30    declaration -> VAR VARIABLE type ASIG expression
Rule 31    declaration -> VAR VARIABLE type ASSIGN expression
Rule 32    expression -> NUMBER
Rule 33    expression -> FLOAT
Rule 34    expression -> VARIABLE
Rule 35    assignment -> VARIABLE ASSIGN expression
Rule 36    assignment -> VARIABLE ASIG expression
Rule 37    print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
Rule 38    print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN
Rule 39    print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN
Rule 40    input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
Rule 41    func_def -> func_header func_body
Rule 42    func_header -> FUNC VARIABLE LPAREN param_list RPAREN type
Rule 43    func_body -> LBRACE program RBRACE
Rule 44    return_stmt -> RETURN expression
Rule 45    func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
Rule 46    func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
Rule 47    func_call -> VARIABLE LPAREN arg_list RPAREN
Rule 48    func_call -> VARIABLE LPAREN RPAREN
Rule 49    param_list -> param
Rule 50    param_list -> param COMMA param_list
Rule 51    param -> VARIABLE type
Rule 52    arg_list -> expression
Rule 53    arg_list -> expression COMMA arg_list
Rule 54    expression -> term
Rule 55    expression -> expression PLUS term
Rule 56    expression -> expression MINUS term
Rule 57    expression -> expression AND expression
Rule 58    expression -> expression OR expression
Rule 59    expression -> expression EQ expression
Rule 60    expression -> expression NE expression
Rule 61    expression -> expression LT expression
Rule 62    expression -> expression GT expression
Rule 63    expression -> expression LE expression
Rule 64    expression -> expression GE expression
Rule 65    term -> factor
Rule 66    term -> term TIMES factor
Rule 67    term -> term DIVIDE factor
Rule 68    term -> VARIABLE
Rule 69    factor -> NUMBER
Rule 70    factor -> FLOAT
Rule 71    factor -> STRING
Rule 72    factor -> VARIABLE
Rule 73    factor -> TRUE
Rule 74    factor -> FALSE
Rule 75    factor -> LPAREN expression RPAREN
Rule 76    factor -> make_expr
Rule 77    factor -> struct_instance
Rule 78    factor -> func_call
Rule 79    type -> INT_TYPE
Rule 80    type -> FLOAT64_TYPE
Rule 81    type -> STRING_TYPE
Rule 82    type -> BOOL_TYPE
Rule 83    if_stmt -> IF expression block
Rule 84    if_stmt -> IF expression block ELSE block
Rule 85    for_stmt -> FOR expression block
Rule 86    for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block
Rule 87    continue_stmt -> CONTINUE
Rule 88    for_update -> assignment
Rule 89    for_update -> increment_stmt
Rule 90    block -> LBRACE program RBRACE
Rule 91    struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
Rule 92    struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
Rule 93    struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
Rule 94    struct_fields -> struct_field
Rule 95    struct_fields -> struct_field struct_fields
Rule 96    struct_field -> VARIABLE type
Rule 97    struct_field -> type
Rule 98    struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE
Rule 99    struct_fields_values -> field_value
Rule 100   struct_fields_values -> field_value COMMA struct_fields_values
Rule 101   field_value -> VARIABLE COLON expression
Rule 102   switch_stmt -> SWITCH expression LBRACE case_list RBRACE
Rule 103   switch_stmt -> SWITCH LBRACE case_list RBRACE
Rule 104   case_list -> case_clause
Rule 105   case_list -> case_clause case_list
Rule 106   case_clause -> CASE expression COLON program
Rule 107   case_clause -> DEFAULT COLON program
Rule 108   map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type
Rule 109   map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type
Rule 110   map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE
Rule 111   map_params -> map_param
Rule 112   map_params -> map_param COMMA map_params
Rule 113   map_param -> STRING COLON factor
Rule 114   make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
Rule 115   make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
Rule 116   make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
Rule 117   make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN
Rule 118   map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
Rule 119   map_kv_pairs -> map_kv_pair
Rule 120   map_kv_pairs -> map_kv_pair COMMA map_kv_pairs
Rule 121   map_kv_pair -> STRING COLON expression
Rule 122   array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type
Rule 123   array_declaration -> VAR VARIABLE ASSIGN array_literal
Rule 124   array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
Rule 125   array_values -> expression
Rule 126   array_values -> expression COMMA array_values
Rule 127   slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type
Rule 128   slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
Rule 129   slice_values -> expression
Rule 130   slice_values -> expression COMMA slice_values
Rule 131   new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
Rule 132   break_stmt -> BREAK
Rule 133   increment_stmt -> VARIABLE INCREMENT
Rule 134   increment_stmt -> VARIABLE DECREMENT

Terminals, with rules where they appear

AMPER                : 40
AND                  : 57
ASIG                 : 30 36 109 110 114 115 118 128 131
ASSIGN               : 31 35 123
BOOL_TYPE            : 82
BREAK                : 132
CASE                 : 106
COLON                : 101 106 107 113 121
COMMA                : 37 39 50 53 100 112 120 126 130
CONTINUE             : 87
DECREMENT            : 134
DEFAULT              : 107
DIVIDE               : 67
DOT                  : 37 38 39 40
ELSE                 : 84
EQ                   : 59
FALSE                : 74
FLOAT                : 33 70
FLOAT64_TYPE         : 80
FMT                  : 37 38 39 40
FOR                  : 85 86
FUNC                 : 42 45 46 91 92
GE                   : 64
GT                   : 62
IF                   : 83 84
IMPORT               : 2 3
INCREMENT            : 133
INT_TYPE             : 79
LBRACE               : 43 45 46 90 91 92 93 98 102 103 110 118 124 128
LBRACKET             : 108 109 110 114 115 116 117 118 122 124 127 128
LE                   : 63
LPAREN               : 2 37 38 39 40 42 45 46 47 48 75 91 91 92 92 114 115 116 117 131
LT                   : 61
MAKE                 : 114 115 116 117
MAP                  : 108 109 110 114 116 118
MINUS                : 56
MOD                  : 
NE                   : 60
NEW                  : 131
NOT                  : 
NUMBER               : 32 69 122 124
OR                   : 58
PACKAGE              : 1
PLUS                 : 55
PRINT                : 
PRINTF               : 37
PRINTLN              : 38 39
RANGE                : 
RBRACE               : 43 45 46 90 91 92 93 98 102 103 110 118 124 128
RBRACKET             : 108 109 110 114 115 116 117 118 122 124 127 128
RETURN               : 44
RPAREN               : 2 37 38 39 40 42 45 46 47 48 75 91 91 92 92 114 115 116 117 131
SCANLN               : 40
SEMICOLON            : 86 86
STRING               : 2 3 37 39 71 113 121
STRING_TYPE          : 81
STRUCT               : 93
SWITCH               : 102 103
TIMES                : 66
TRUE                 : 73
TYPE                 : 93
UINT                 : 
VAR                  : 29 30 31 108 122 123 127
VARIABLE             : 1 29 30 31 34 35 36 39 40 42 45 46 47 48 51 68 72 91 91 91 92 92 92 93 96 98 101 108 109 110 114 115 118 122 123 127 128 131 131 133 134
error                : 

Nonterminals, with rules where they appear

arg_list             : 47 53
array_declaration    : 21
array_literal        : 22 123
array_values         : 124 126
assignment           : 7 86 88
block                : 83 84 84 85 86
break_stmt           : 26
case_clause          : 104 105
case_list            : 102 103 105
continue_stmt        : 10
declaration          : 6
expression           : 30 31 35 36 37 38 44 52 53 55 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 75 83 84 85 86 101 102 106 121 125 126 129 130
factor               : 65 66 67 113
field_value          : 99 100
for_stmt             : 16
for_update           : 86
func_body            : 41
func_call            : 14 78
func_def             : 12
func_header          : 41
func_no_params       : 13
if_stmt              : 15
import_stmt          : 1
increment_stmt       : 27 89
input_stmt           : 9
make_expr            : 76
make_stmt            : 24
map_declaration      : 19
map_declaration_values : 20
map_kv_pair          : 119 120
map_kv_pairs         : 118 120
map_param            : 111 112
map_params           : 110 112
new_stmt             : 25
param                : 49 50
param_list           : 42 50 91
print_stmt           : 8
program              : 1 5 43 45 46 90 91 92 106 107
return_stmt          : 28
slice_declaration    : 23
slice_values         : 128 130
start                : 0
statement            : 4 5
struct_def           : 17
struct_field         : 94 95
struct_fields        : 93 95
struct_fields_values : 98 100
struct_instance      : 77
struct_method        : 11
switch_stmt          : 18
term                 : 54 55 56 66 67
type                 : 29 30 31 42 45 51 91 92 96 97 108 108 109 109 110 110 114 114 115 116 116 117 118 118 122 124 127 128

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . PACKAGE VARIABLE import_stmt program

    PACKAGE         shift and go to state 2

    start                          shift and go to state 1

state 1

    (0) S' -> start .



state 2

    (1) start -> PACKAGE . VARIABLE import_stmt program

    VARIABLE        shift and go to state 3


state 3

    (1) start -> PACKAGE VARIABLE . import_stmt program
    (2) import_stmt -> . IMPORT LPAREN STRING RPAREN
    (3) import_stmt -> . IMPORT STRING

    IMPORT          shift and go to state 5

    import_stmt                    shift and go to state 4

state 4

    (1) start -> PACKAGE VARIABLE import_stmt . program
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_call
    (15) statement -> . if_stmt
    (16) statement -> . for_stmt
    (17) statement -> . struct_def
    (18) statement -> . switch_stmt
    (19) statement -> . map_declaration
    (20) statement -> . map_declaration_values
    (21) statement -> . array_declaration
    (22) statement -> . array_literal
    (23) statement -> . slice_declaration
    (24) statement -> . make_stmt
    (25) statement -> . new_stmt
    (26) statement -> . break_stmt
    (27) statement -> . increment_stmt
    (28) statement -> . return_stmt
    (29) declaration -> . VAR VARIABLE type
    (30) declaration -> . VAR VARIABLE type ASIG expression
    (31) declaration -> . VAR VARIABLE type ASSIGN expression
    (35) assignment -> . VARIABLE ASSIGN expression
    (36) assignment -> . VARIABLE ASIG expression
    (37) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (38) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (39) print_stmt -> . FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN
    (40) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (87) continue_stmt -> . CONTINUE
    (91) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (92) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (41) func_def -> . func_header func_body
    (45) func_no_params -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (46) func_no_params -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN
    (83) if_stmt -> . IF expression block
    (84) if_stmt -> . IF expression block ELSE block
    (85) for_stmt -> . FOR expression block
    (86) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (93) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (102) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (103) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (108) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (109) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (110) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE
    (118) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (122) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (123) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (124) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (127) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (128) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (114) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (115) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (131) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (132) break_stmt -> . BREAK
    (133) increment_stmt -> . VARIABLE INCREMENT
    (134) increment_stmt -> . VARIABLE DECREMENT
    (44) return_stmt -> . RETURN expression
    (42) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type

    VAR             shift and go to state 32
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 33
    CONTINUE        shift and go to state 34
    FUNC            shift and go to state 35
    IF              shift and go to state 37
    FOR             shift and go to state 38
    TYPE            shift and go to state 39
    SWITCH          shift and go to state 40
    LBRACKET        shift and go to state 41
    BREAK           shift and go to state 42
    RETURN          shift and go to state 43

    program                        shift and go to state 7
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_call                      shift and go to state 17
    if_stmt                        shift and go to state 18
    for_stmt                       shift and go to state 19
    struct_def                     shift and go to state 20
    switch_stmt                    shift and go to state 21
    map_declaration                shift and go to state 22
    map_declaration_values         shift and go to state 23
    array_declaration              shift and go to state 24
    array_literal                  shift and go to state 25
    slice_declaration              shift and go to state 26
    make_stmt                      shift and go to state 27
    new_stmt                       shift and go to state 28
    break_stmt                     shift and go to state 29
    increment_stmt                 shift and go to state 30
    return_stmt                    shift and go to state 31
    func_header                    shift and go to state 36

state 5

    (2) import_stmt -> IMPORT . LPAREN STRING RPAREN
    (3) import_stmt -> IMPORT . STRING

    LPAREN          shift and go to state 44
    STRING          shift and go to state 45


state 6

    (35) assignment -> VARIABLE . ASSIGN expression
    (36) assignment -> VARIABLE . ASIG expression
    (47) func_call -> VARIABLE . LPAREN arg_list RPAREN
    (48) func_call -> VARIABLE . LPAREN RPAREN
    (109) map_declaration -> VARIABLE . ASIG MAP LBRACKET type RBRACKET type
    (110) map_declaration -> VARIABLE . ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE
    (118) map_declaration_values -> VARIABLE . ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (128) slice_declaration -> VARIABLE . ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (114) make_stmt -> VARIABLE . ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (115) make_stmt -> VARIABLE . ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (131) new_stmt -> VARIABLE . ASIG NEW LPAREN VARIABLE RPAREN
    (133) increment_stmt -> VARIABLE . INCREMENT
    (134) increment_stmt -> VARIABLE . DECREMENT

    ASSIGN          shift and go to state 46
    ASIG            shift and go to state 47
    LPAREN          shift and go to state 48
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50


state 7

    (1) start -> PACKAGE VARIABLE import_stmt program .

    $end            reduce using rule 1 (start -> PACKAGE VARIABLE import_stmt program .)


state 8

    (4) program -> statement .
    (5) program -> statement . program
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_call
    (15) statement -> . if_stmt
    (16) statement -> . for_stmt
    (17) statement -> . struct_def
    (18) statement -> . switch_stmt
    (19) statement -> . map_declaration
    (20) statement -> . map_declaration_values
    (21) statement -> . array_declaration
    (22) statement -> . array_literal
    (23) statement -> . slice_declaration
    (24) statement -> . make_stmt
    (25) statement -> . new_stmt
    (26) statement -> . break_stmt
    (27) statement -> . increment_stmt
    (28) statement -> . return_stmt
    (29) declaration -> . VAR VARIABLE type
    (30) declaration -> . VAR VARIABLE type ASIG expression
    (31) declaration -> . VAR VARIABLE type ASSIGN expression
    (35) assignment -> . VARIABLE ASSIGN expression
    (36) assignment -> . VARIABLE ASIG expression
    (37) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (38) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (39) print_stmt -> . FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN
    (40) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (87) continue_stmt -> . CONTINUE
    (91) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (92) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (41) func_def -> . func_header func_body
    (45) func_no_params -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (46) func_no_params -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN
    (83) if_stmt -> . IF expression block
    (84) if_stmt -> . IF expression block ELSE block
    (85) for_stmt -> . FOR expression block
    (86) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (93) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (102) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (103) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (108) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (109) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (110) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE
    (118) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (122) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (123) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (124) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (127) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (128) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (114) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (115) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (131) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (132) break_stmt -> . BREAK
    (133) increment_stmt -> . VARIABLE INCREMENT
    (134) increment_stmt -> . VARIABLE DECREMENT
    (44) return_stmt -> . RETURN expression
    (42) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type

    $end            reduce using rule 4 (program -> statement .)
    RBRACE          reduce using rule 4 (program -> statement .)
    CASE            reduce using rule 4 (program -> statement .)
    DEFAULT         reduce using rule 4 (program -> statement .)
    VAR             shift and go to state 32
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 33
    CONTINUE        shift and go to state 34
    FUNC            shift and go to state 35
    IF              shift and go to state 37
    FOR             shift and go to state 38
    TYPE            shift and go to state 39
    SWITCH          shift and go to state 40
    LBRACKET        shift and go to state 41
    BREAK           shift and go to state 42
    RETURN          shift and go to state 43

    statement                      shift and go to state 8
    program                        shift and go to state 51
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_call                      shift and go to state 17
    if_stmt                        shift and go to state 18
    for_stmt                       shift and go to state 19
    struct_def                     shift and go to state 20
    switch_stmt                    shift and go to state 21
    map_declaration                shift and go to state 22
    map_declaration_values         shift and go to state 23
    array_declaration              shift and go to state 24
    array_literal                  shift and go to state 25
    slice_declaration              shift and go to state 26
    make_stmt                      shift and go to state 27
    new_stmt                       shift and go to state 28
    break_stmt                     shift and go to state 29
    increment_stmt                 shift and go to state 30
    return_stmt                    shift and go to state 31
    func_header                    shift and go to state 36

state 9

    (6) statement -> declaration .

    VAR             reduce using rule 6 (statement -> declaration .)
    VARIABLE        reduce using rule 6 (statement -> declaration .)
    FMT             reduce using rule 6 (statement -> declaration .)
    CONTINUE        reduce using rule 6 (statement -> declaration .)
    FUNC            reduce using rule 6 (statement -> declaration .)
    IF              reduce using rule 6 (statement -> declaration .)
    FOR             reduce using rule 6 (statement -> declaration .)
    TYPE            reduce using rule 6 (statement -> declaration .)
    SWITCH          reduce using rule 6 (statement -> declaration .)
    LBRACKET        reduce using rule 6 (statement -> declaration .)
    BREAK           reduce using rule 6 (statement -> declaration .)
    RETURN          reduce using rule 6 (statement -> declaration .)
    $end            reduce using rule 6 (statement -> declaration .)
    RBRACE          reduce using rule 6 (statement -> declaration .)
    CASE            reduce using rule 6 (statement -> declaration .)
    DEFAULT         reduce using rule 6 (statement -> declaration .)


state 10

    (7) statement -> assignment .

    VAR             reduce using rule 7 (statement -> assignment .)
    VARIABLE        reduce using rule 7 (statement -> assignment .)
    FMT             reduce using rule 7 (statement -> assignment .)
    CONTINUE        reduce using rule 7 (statement -> assignment .)
    FUNC            reduce using rule 7 (statement -> assignment .)
    IF              reduce using rule 7 (statement -> assignment .)
    FOR             reduce using rule 7 (statement -> assignment .)
    TYPE            reduce using rule 7 (statement -> assignment .)
    SWITCH          reduce using rule 7 (statement -> assignment .)
    LBRACKET        reduce using rule 7 (statement -> assignment .)
    BREAK           reduce using rule 7 (statement -> assignment .)
    RETURN          reduce using rule 7 (statement -> assignment .)
    $end            reduce using rule 7 (statement -> assignment .)
    RBRACE          reduce using rule 7 (statement -> assignment .)
    CASE            reduce using rule 7 (statement -> assignment .)
    DEFAULT         reduce using rule 7 (statement -> assignment .)


state 11

    (8) statement -> print_stmt .

    VAR             reduce using rule 8 (statement -> print_stmt .)
    VARIABLE        reduce using rule 8 (statement -> print_stmt .)
    FMT             reduce using rule 8 (statement -> print_stmt .)
    CONTINUE        reduce using rule 8 (statement -> print_stmt .)
    FUNC            reduce using rule 8 (statement -> print_stmt .)
    IF              reduce using rule 8 (statement -> print_stmt .)
    FOR             reduce using rule 8 (statement -> print_stmt .)
    TYPE            reduce using rule 8 (statement -> print_stmt .)
    SWITCH          reduce using rule 8 (statement -> print_stmt .)
    LBRACKET        reduce using rule 8 (statement -> print_stmt .)
    BREAK           reduce using rule 8 (statement -> print_stmt .)
    RETURN          reduce using rule 8 (statement -> print_stmt .)
    $end            reduce using rule 8 (statement -> print_stmt .)
    RBRACE          reduce using rule 8 (statement -> print_stmt .)
    CASE            reduce using rule 8 (statement -> print_stmt .)
    DEFAULT         reduce using rule 8 (statement -> print_stmt .)


state 12

    (9) statement -> input_stmt .

    VAR             reduce using rule 9 (statement -> input_stmt .)
    VARIABLE        reduce using rule 9 (statement -> input_stmt .)
    FMT             reduce using rule 9 (statement -> input_stmt .)
    CONTINUE        reduce using rule 9 (statement -> input_stmt .)
    FUNC            reduce using rule 9 (statement -> input_stmt .)
    IF              reduce using rule 9 (statement -> input_stmt .)
    FOR             reduce using rule 9 (statement -> input_stmt .)
    TYPE            reduce using rule 9 (statement -> input_stmt .)
    SWITCH          reduce using rule 9 (statement -> input_stmt .)
    LBRACKET        reduce using rule 9 (statement -> input_stmt .)
    BREAK           reduce using rule 9 (statement -> input_stmt .)
    RETURN          reduce using rule 9 (statement -> input_stmt .)
    $end            reduce using rule 9 (statement -> input_stmt .)
    RBRACE          reduce using rule 9 (statement -> input_stmt .)
    CASE            reduce using rule 9 (statement -> input_stmt .)
    DEFAULT         reduce using rule 9 (statement -> input_stmt .)


state 13

    (10) statement -> continue_stmt .

    VAR             reduce using rule 10 (statement -> continue_stmt .)
    VARIABLE        reduce using rule 10 (statement -> continue_stmt .)
    FMT             reduce using rule 10 (statement -> continue_stmt .)
    CONTINUE        reduce using rule 10 (statement -> continue_stmt .)
    FUNC            reduce using rule 10 (statement -> continue_stmt .)
    IF              reduce using rule 10 (statement -> continue_stmt .)
    FOR             reduce using rule 10 (statement -> continue_stmt .)
    TYPE            reduce using rule 10 (statement -> continue_stmt .)
    SWITCH          reduce using rule 10 (statement -> continue_stmt .)
    LBRACKET        reduce using rule 10 (statement -> continue_stmt .)
    BREAK           reduce using rule 10 (statement -> continue_stmt .)
    RETURN          reduce using rule 10 (statement -> continue_stmt .)
    $end            reduce using rule 10 (statement -> continue_stmt .)
    RBRACE          reduce using rule 10 (statement -> continue_stmt .)
    CASE            reduce using rule 10 (statement -> continue_stmt .)
    DEFAULT         reduce using rule 10 (statement -> continue_stmt .)


state 14

    (11) statement -> struct_method .

    VAR             reduce using rule 11 (statement -> struct_method .)
    VARIABLE        reduce using rule 11 (statement -> struct_method .)
    FMT             reduce using rule 11 (statement -> struct_method .)
    CONTINUE        reduce using rule 11 (statement -> struct_method .)
    FUNC            reduce using rule 11 (statement -> struct_method .)
    IF              reduce using rule 11 (statement -> struct_method .)
    FOR             reduce using rule 11 (statement -> struct_method .)
    TYPE            reduce using rule 11 (statement -> struct_method .)
    SWITCH          reduce using rule 11 (statement -> struct_method .)
    LBRACKET        reduce using rule 11 (statement -> struct_method .)
    BREAK           reduce using rule 11 (statement -> struct_method .)
    RETURN          reduce using rule 11 (statement -> struct_method .)
    $end            reduce using rule 11 (statement -> struct_method .)
    RBRACE          reduce using rule 11 (statement -> struct_method .)
    CASE            reduce using rule 11 (statement -> struct_method .)
    DEFAULT         reduce using rule 11 (statement -> struct_method .)


state 15

    (12) statement -> func_def .

    VAR             reduce using rule 12 (statement -> func_def .)
    VARIABLE        reduce using rule 12 (statement -> func_def .)
    FMT             reduce using rule 12 (statement -> func_def .)
    CONTINUE        reduce using rule 12 (statement -> func_def .)
    FUNC            reduce using rule 12 (statement -> func_def .)
    IF              reduce using rule 12 (statement -> func_def .)
    FOR             reduce using rule 12 (statement -> func_def .)
    TYPE            reduce using rule 12 (statement -> func_def .)
    SWITCH          reduce using rule 12 (statement -> func_def .)
    LBRACKET        reduce using rule 12 (statement -> func_def .)
    BREAK           reduce using rule 12 (statement -> func_def .)
    RETURN          reduce using rule 12 (statement -> func_def .)
    $end            reduce using rule 12 (statement -> func_def .)
    RBRACE          reduce using rule 12 (statement -> func_def .)
    CASE            reduce using rule 12 (statement -> func_def .)
    DEFAULT         reduce using rule 12 (statement -> func_def .)


state 16

    (13) statement -> func_no_params .

    VAR             reduce using rule 13 (statement -> func_no_params .)
    VARIABLE        reduce using rule 13 (statement -> func_no_params .)
    FMT             reduce using rule 13 (statement -> func_no_params .)
    CONTINUE        reduce using rule 13 (statement -> func_no_params .)
    FUNC            reduce using rule 13 (statement -> func_no_params .)
    IF              reduce using rule 13 (statement -> func_no_params .)
    FOR             reduce using rule 13 (statement -> func_no_params .)
    TYPE            reduce using rule 13 (statement -> func_no_params .)
    SWITCH          reduce using rule 13 (statement -> func_no_params .)
    LBRACKET        reduce using rule 13 (statement -> func_no_params .)
    BREAK           reduce using rule 13 (statement -> func_no_params .)
    RETURN          reduce using rule 13 (statement -> func_no_params .)
    $end            reduce using rule 13 (statement -> func_no_params .)
    RBRACE          reduce using rule 13 (statement -> func_no_params .)
    CASE            reduce using rule 13 (statement -> func_no_params .)
    DEFAULT         reduce using rule 13 (statement -> func_no_params .)


state 17

    (14) statement -> func_call .

    VAR             reduce using rule 14 (statement -> func_call .)
    VARIABLE        reduce using rule 14 (statement -> func_call .)
    FMT             reduce using rule 14 (statement -> func_call .)
    CONTINUE        reduce using rule 14 (statement -> func_call .)
    FUNC            reduce using rule 14 (statement -> func_call .)
    IF              reduce using rule 14 (statement -> func_call .)
    FOR             reduce using rule 14 (statement -> func_call .)
    TYPE            reduce using rule 14 (statement -> func_call .)
    SWITCH          reduce using rule 14 (statement -> func_call .)
    LBRACKET        reduce using rule 14 (statement -> func_call .)
    BREAK           reduce using rule 14 (statement -> func_call .)
    RETURN          reduce using rule 14 (statement -> func_call .)
    $end            reduce using rule 14 (statement -> func_call .)
    RBRACE          reduce using rule 14 (statement -> func_call .)
    CASE            reduce using rule 14 (statement -> func_call .)
    DEFAULT         reduce using rule 14 (statement -> func_call .)


state 18

    (15) statement -> if_stmt .

    VAR             reduce using rule 15 (statement -> if_stmt .)
    VARIABLE        reduce using rule 15 (statement -> if_stmt .)
    FMT             reduce using rule 15 (statement -> if_stmt .)
    CONTINUE        reduce using rule 15 (statement -> if_stmt .)
    FUNC            reduce using rule 15 (statement -> if_stmt .)
    IF              reduce using rule 15 (statement -> if_stmt .)
    FOR             reduce using rule 15 (statement -> if_stmt .)
    TYPE            reduce using rule 15 (statement -> if_stmt .)
    SWITCH          reduce using rule 15 (statement -> if_stmt .)
    LBRACKET        reduce using rule 15 (statement -> if_stmt .)
    BREAK           reduce using rule 15 (statement -> if_stmt .)
    RETURN          reduce using rule 15 (statement -> if_stmt .)
    $end            reduce using rule 15 (statement -> if_stmt .)
    RBRACE          reduce using rule 15 (statement -> if_stmt .)
    CASE            reduce using rule 15 (statement -> if_stmt .)
    DEFAULT         reduce using rule 15 (statement -> if_stmt .)


state 19

    (16) statement -> for_stmt .

    VAR             reduce using rule 16 (statement -> for_stmt .)
    VARIABLE        reduce using rule 16 (statement -> for_stmt .)
    FMT             reduce using rule 16 (statement -> for_stmt .)
    CONTINUE        reduce using rule 16 (statement -> for_stmt .)
    FUNC            reduce using rule 16 (statement -> for_stmt .)
    IF              reduce using rule 16 (statement -> for_stmt .)
    FOR             reduce using rule 16 (statement -> for_stmt .)
    TYPE            reduce using rule 16 (statement -> for_stmt .)
    SWITCH          reduce using rule 16 (statement -> for_stmt .)
    LBRACKET        reduce using rule 16 (statement -> for_stmt .)
    BREAK           reduce using rule 16 (statement -> for_stmt .)
    RETURN          reduce using rule 16 (statement -> for_stmt .)
    $end            reduce using rule 16 (statement -> for_stmt .)
    RBRACE          reduce using rule 16 (statement -> for_stmt .)
    CASE            reduce using rule 16 (statement -> for_stmt .)
    DEFAULT         reduce using rule 16 (statement -> for_stmt .)


state 20

    (17) statement -> struct_def .

    VAR             reduce using rule 17 (statement -> struct_def .)
    VARIABLE        reduce using rule 17 (statement -> struct_def .)
    FMT             reduce using rule 17 (statement -> struct_def .)
    CONTINUE        reduce using rule 17 (statement -> struct_def .)
    FUNC            reduce using rule 17 (statement -> struct_def .)
    IF              reduce using rule 17 (statement -> struct_def .)
    FOR             reduce using rule 17 (statement -> struct_def .)
    TYPE            reduce using rule 17 (statement -> struct_def .)
    SWITCH          reduce using rule 17 (statement -> struct_def .)
    LBRACKET        reduce using rule 17 (statement -> struct_def .)
    BREAK           reduce using rule 17 (statement -> struct_def .)
    RETURN          reduce using rule 17 (statement -> struct_def .)
    $end            reduce using rule 17 (statement -> struct_def .)
    RBRACE          reduce using rule 17 (statement -> struct_def .)
    CASE            reduce using rule 17 (statement -> struct_def .)
    DEFAULT         reduce using rule 17 (statement -> struct_def .)


state 21

    (18) statement -> switch_stmt .

    VAR             reduce using rule 18 (statement -> switch_stmt .)
    VARIABLE        reduce using rule 18 (statement -> switch_stmt .)
    FMT             reduce using rule 18 (statement -> switch_stmt .)
    CONTINUE        reduce using rule 18 (statement -> switch_stmt .)
    FUNC            reduce using rule 18 (statement -> switch_stmt .)
    IF              reduce using rule 18 (statement -> switch_stmt .)
    FOR             reduce using rule 18 (statement -> switch_stmt .)
    TYPE            reduce using rule 18 (statement -> switch_stmt .)
    SWITCH          reduce using rule 18 (statement -> switch_stmt .)
    LBRACKET        reduce using rule 18 (statement -> switch_stmt .)
    BREAK           reduce using rule 18 (statement -> switch_stmt .)
    RETURN          reduce using rule 18 (statement -> switch_stmt .)
    $end            reduce using rule 18 (statement -> switch_stmt .)
    RBRACE          reduce using rule 18 (statement -> switch_stmt .)
    CASE            reduce using rule 18 (statement -> switch_stmt .)
    DEFAULT         reduce using rule 18 (statement -> switch_stmt .)


state 22

    (19) statement -> map_declaration .

    VAR             reduce using rule 19 (statement -> map_declaration .)
    VARIABLE        reduce using rule 19 (statement -> map_declaration .)
    FMT             reduce using rule 19 (statement -> map_declaration .)
    CONTINUE        reduce using rule 19 (statement -> map_declaration .)
    FUNC            reduce using rule 19 (statement -> map_declaration .)
    IF              reduce using rule 19 (statement -> map_declaration .)
    FOR             reduce using rule 19 (statement -> map_declaration .)
    TYPE            reduce using rule 19 (statement -> map_declaration .)
    SWITCH          reduce using rule 19 (statement -> map_declaration .)
    LBRACKET        reduce using rule 19 (statement -> map_declaration .)
    BREAK           reduce using rule 19 (statement -> map_declaration .)
    RETURN          reduce using rule 19 (statement -> map_declaration .)
    $end            reduce using rule 19 (statement -> map_declaration .)
    RBRACE          reduce using rule 19 (statement -> map_declaration .)
    CASE            reduce using rule 19 (statement -> map_declaration .)
    DEFAULT         reduce using rule 19 (statement -> map_declaration .)


state 23

    (20) statement -> map_declaration_values .

    VAR             reduce using rule 20 (statement -> map_declaration_values .)
    VARIABLE        reduce using rule 20 (statement -> map_declaration_values .)
    FMT             reduce using rule 20 (statement -> map_declaration_values .)
    CONTINUE        reduce using rule 20 (statement -> map_declaration_values .)
    FUNC            reduce using rule 20 (statement -> map_declaration_values .)
    IF              reduce using rule 20 (statement -> map_declaration_values .)
    FOR             reduce using rule 20 (statement -> map_declaration_values .)
    TYPE            reduce using rule 20 (statement -> map_declaration_values .)
    SWITCH          reduce using rule 20 (statement -> map_declaration_values .)
    LBRACKET        reduce using rule 20 (statement -> map_declaration_values .)
    BREAK           reduce using rule 20 (statement -> map_declaration_values .)
    RETURN          reduce using rule 20 (statement -> map_declaration_values .)
    $end            reduce using rule 20 (statement -> map_declaration_values .)
    RBRACE          reduce using rule 20 (statement -> map_declaration_values .)
    CASE            reduce using rule 20 (statement -> map_declaration_values .)
    DEFAULT         reduce using rule 20 (statement -> map_declaration_values .)


state 24

    (21) statement -> array_declaration .

    VAR             reduce using rule 21 (statement -> array_declaration .)
    VARIABLE        reduce using rule 21 (statement -> array_declaration .)
    FMT             reduce using rule 21 (statement -> array_declaration .)
    CONTINUE        reduce using rule 21 (statement -> array_declaration .)
    FUNC            reduce using rule 21 (statement -> array_declaration .)
    IF              reduce using rule 21 (statement -> array_declaration .)
    FOR             reduce using rule 21 (statement -> array_declaration .)
    TYPE            reduce using rule 21 (statement -> array_declaration .)
    SWITCH          reduce using rule 21 (statement -> array_declaration .)
    LBRACKET        reduce using rule 21 (statement -> array_declaration .)
    BREAK           reduce using rule 21 (statement -> array_declaration .)
    RETURN          reduce using rule 21 (statement -> array_declaration .)
    $end            reduce using rule 21 (statement -> array_declaration .)
    RBRACE          reduce using rule 21 (statement -> array_declaration .)
    CASE            reduce using rule 21 (statement -> array_declaration .)
    DEFAULT         reduce using rule 21 (statement -> array_declaration .)


state 25

    (22) statement -> array_literal .

    VAR             reduce using rule 22 (statement -> array_literal .)
    VARIABLE        reduce using rule 22 (statement -> array_literal .)
    FMT             reduce using rule 22 (statement -> array_literal .)
    CONTINUE        reduce using rule 22 (statement -> array_literal .)
    FUNC            reduce using rule 22 (statement -> array_literal .)
    IF              reduce using rule 22 (statement -> array_literal .)
    FOR             reduce using rule 22 (statement -> array_literal .)
    TYPE            reduce using rule 22 (statement -> array_literal .)
    SWITCH          reduce using rule 22 (statement -> array_literal .)
    LBRACKET        reduce using rule 22 (statement -> array_literal .)
    BREAK           reduce using rule 22 (statement -> array_literal .)
    RETURN          reduce using rule 22 (statement -> array_literal .)
    $end            reduce using rule 22 (statement -> array_literal .)
    RBRACE          reduce using rule 22 (statement -> array_literal .)
    CASE            reduce using rule 22 (statement -> array_literal .)
    DEFAULT         reduce using rule 22 (statement -> array_literal .)


state 26

    (23) statement -> slice_declaration .

    VAR             reduce using rule 23 (statement -> slice_declaration .)
    VARIABLE        reduce using rule 23 (statement -> slice_declaration .)
    FMT             reduce using rule 23 (statement -> slice_declaration .)
    CONTINUE        reduce using rule 23 (statement -> slice_declaration .)
    FUNC            reduce using rule 23 (statement -> slice_declaration .)
    IF              reduce using rule 23 (statement -> slice_declaration .)
    FOR             reduce using rule 23 (statement -> slice_declaration .)
    TYPE            reduce using rule 23 (statement -> slice_declaration .)
    SWITCH          reduce using rule 23 (statement -> slice_declaration .)
    LBRACKET        reduce using rule 23 (statement -> slice_declaration .)
    BREAK           reduce using rule 23 (statement -> slice_declaration .)
    RETURN          reduce using rule 23 (statement -> slice_declaration .)
    $end            reduce using rule 23 (statement -> slice_declaration .)
    RBRACE          reduce using rule 23 (statement -> slice_declaration .)
    CASE            reduce using rule 23 (statement -> slice_declaration .)
    DEFAULT         reduce using rule 23 (statement -> slice_declaration .)


state 27

    (24) statement -> make_stmt .

    VAR             reduce using rule 24 (statement -> make_stmt .)
    VARIABLE        reduce using rule 24 (statement -> make_stmt .)
    FMT             reduce using rule 24 (statement -> make_stmt .)
    CONTINUE        reduce using rule 24 (statement -> make_stmt .)
    FUNC            reduce using rule 24 (statement -> make_stmt .)
    IF              reduce using rule 24 (statement -> make_stmt .)
    FOR             reduce using rule 24 (statement -> make_stmt .)
    TYPE            reduce using rule 24 (statement -> make_stmt .)
    SWITCH          reduce using rule 24 (statement -> make_stmt .)
    LBRACKET        reduce using rule 24 (statement -> make_stmt .)
    BREAK           reduce using rule 24 (statement -> make_stmt .)
    RETURN          reduce using rule 24 (statement -> make_stmt .)
    $end            reduce using rule 24 (statement -> make_stmt .)
    RBRACE          reduce using rule 24 (statement -> make_stmt .)
    CASE            reduce using rule 24 (statement -> make_stmt .)
    DEFAULT         reduce using rule 24 (statement -> make_stmt .)


state 28

    (25) statement -> new_stmt .

    VAR             reduce using rule 25 (statement -> new_stmt .)
    VARIABLE        reduce using rule 25 (statement -> new_stmt .)
    FMT             reduce using rule 25 (statement -> new_stmt .)
    CONTINUE        reduce using rule 25 (statement -> new_stmt .)
    FUNC            reduce using rule 25 (statement -> new_stmt .)
    IF              reduce using rule 25 (statement -> new_stmt .)
    FOR             reduce using rule 25 (statement -> new_stmt .)
    TYPE            reduce using rule 25 (statement -> new_stmt .)
    SWITCH          reduce using rule 25 (statement -> new_stmt .)
    LBRACKET        reduce using rule 25 (statement -> new_stmt .)
    BREAK           reduce using rule 25 (statement -> new_stmt .)
    RETURN          reduce using rule 25 (statement -> new_stmt .)
    $end            reduce using rule 25 (statement -> new_stmt .)
    RBRACE          reduce using rule 25 (statement -> new_stmt .)
    CASE            reduce using rule 25 (statement -> new_stmt .)
    DEFAULT         reduce using rule 25 (statement -> new_stmt .)


state 29

    (26) statement -> break_stmt .

    VAR             reduce using rule 26 (statement -> break_stmt .)
    VARIABLE        reduce using rule 26 (statement -> break_stmt .)
    FMT             reduce using rule 26 (statement -> break_stmt .)
    CONTINUE        reduce using rule 26 (statement -> break_stmt .)
    FUNC            reduce using rule 26 (statement -> break_stmt .)
    IF              reduce using rule 26 (statement -> break_stmt .)
    FOR             reduce using rule 26 (statement -> break_stmt .)
    TYPE            reduce using rule 26 (statement -> break_stmt .)
    SWITCH          reduce using rule 26 (statement -> break_stmt .)
    LBRACKET        reduce using rule 26 (statement -> break_stmt .)
    BREAK           reduce using rule 26 (statement -> break_stmt .)
    RETURN          reduce using rule 26 (statement -> break_stmt .)
    $end            reduce using rule 26 (statement -> break_stmt .)
    RBRACE          reduce using rule 26 (statement -> break_stmt .)
    CASE            reduce using rule 26 (statement -> break_stmt .)
    DEFAULT         reduce using rule 26 (statement -> break_stmt .)


state 30

    (27) statement -> increment_stmt .

    VAR             reduce using rule 27 (statement -> increment_stmt .)
    VARIABLE        reduce using rule 27 (statement -> increment_stmt .)
    FMT             reduce using rule 27 (statement -> increment_stmt .)
    CONTINUE        reduce using rule 27 (statement -> increment_stmt .)
    FUNC            reduce using rule 27 (statement -> increment_stmt .)
    IF              reduce using rule 27 (statement -> increment_stmt .)
    FOR             reduce using rule 27 (statement -> increment_stmt .)
    TYPE            reduce using rule 27 (statement -> increment_stmt .)
    SWITCH          reduce using rule 27 (statement -> increment_stmt .)
    LBRACKET        reduce using rule 27 (statement -> increment_stmt .)
    BREAK           reduce using rule 27 (statement -> increment_stmt .)
    RETURN          reduce using rule 27 (statement -> increment_stmt .)
    $end            reduce using rule 27 (statement -> increment_stmt .)
    RBRACE          reduce using rule 27 (statement -> increment_stmt .)
    CASE            reduce using rule 27 (statement -> increment_stmt .)
    DEFAULT         reduce using rule 27 (statement -> increment_stmt .)


state 31

    (28) statement -> return_stmt .

    VAR             reduce using rule 28 (statement -> return_stmt .)
    VARIABLE        reduce using rule 28 (statement -> return_stmt .)
    FMT             reduce using rule 28 (statement -> return_stmt .)
    CONTINUE        reduce using rule 28 (statement -> return_stmt .)
    FUNC            reduce using rule 28 (statement -> return_stmt .)
    IF              reduce using rule 28 (statement -> return_stmt .)
    FOR             reduce using rule 28 (statement -> return_stmt .)
    TYPE            reduce using rule 28 (statement -> return_stmt .)
    SWITCH          reduce using rule 28 (statement -> return_stmt .)
    LBRACKET        reduce using rule 28 (statement -> return_stmt .)
    BREAK           reduce using rule 28 (statement -> return_stmt .)
    RETURN          reduce using rule 28 (statement -> return_stmt .)
    $end            reduce using rule 28 (statement -> return_stmt .)
    RBRACE          reduce using rule 28 (statement -> return_stmt .)
    CASE            reduce using rule 28 (statement -> return_stmt .)
    DEFAULT         reduce using rule 28 (statement -> return_stmt .)


state 32

    (29) declaration -> VAR . VARIABLE type
    (30) declaration -> VAR . VARIABLE type ASIG expression
    (31) declaration -> VAR . VARIABLE type ASSIGN expression
    (108) map_declaration -> VAR . VARIABLE MAP LBRACKET type RBRACKET type
    (122) array_declaration -> VAR . VARIABLE LBRACKET NUMBER RBRACKET type
    (123) array_declaration -> VAR . VARIABLE ASSIGN array_literal
    (127) slice_declaration -> VAR . VARIABLE LBRACKET RBRACKET type

    VARIABLE        shift and go to state 52


state 33

    (37) print_stmt -> FMT . DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (38) print_stmt -> FMT . DOT PRINTLN LPAREN expression RPAREN
    (39) print_stmt -> FMT . DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN
    (40) input_stmt -> FMT . DOT SCANLN LPAREN AMPER VARIABLE RPAREN

    DOT             shift and go to state 53


state 34

    (87) continue_stmt -> CONTINUE .

    VAR             reduce using rule 87 (continue_stmt -> CONTINUE .)
    VARIABLE        reduce using rule 87 (continue_stmt -> CONTINUE .)
    FMT             reduce using rule 87 (continue_stmt -> CONTINUE .)
    CONTINUE        reduce using rule 87 (continue_stmt -> CONTINUE .)
    FUNC            reduce using rule 87 (continue_stmt -> CONTINUE .)
    IF              reduce using rule 87 (continue_stmt -> CONTINUE .)
    FOR             reduce using rule 87 (continue_stmt -> CONTINUE .)
    TYPE            reduce using rule 87 (continue_stmt -> CONTINUE .)
    SWITCH          reduce using rule 87 (continue_stmt -> CONTINUE .)
    LBRACKET        reduce using rule 87 (continue_stmt -> CONTINUE .)
    BREAK           reduce using rule 87 (continue_stmt -> CONTINUE .)
    RETURN          reduce using rule 87 (continue_stmt -> CONTINUE .)
    $end            reduce using rule 87 (continue_stmt -> CONTINUE .)
    RBRACE          reduce using rule 87 (continue_stmt -> CONTINUE .)
    CASE            reduce using rule 87 (continue_stmt -> CONTINUE .)
    DEFAULT         reduce using rule 87 (continue_stmt -> CONTINUE .)


state 35

    (91) struct_method -> FUNC . LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (92) struct_method -> FUNC . LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (45) func_no_params -> FUNC . VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (46) func_no_params -> FUNC . VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (42) func_header -> FUNC . VARIABLE LPAREN param_list RPAREN type

    LPAREN          shift and go to state 54
    VARIABLE        shift and go to state 55


state 36

    (41) func_def -> func_header . func_body
    (43) func_body -> . LBRACE program RBRACE

    LBRACE          shift and go to state 57

    func_body                      shift and go to state 56

state 37

    (83) if_stmt -> IF . expression block
    (84) if_stmt -> IF . expression block ELSE block
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 58
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 38

    (85) for_stmt -> FOR . expression block
    (86) for_stmt -> FOR . assignment SEMICOLON expression SEMICOLON for_update block
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (35) assignment -> . VARIABLE ASSIGN expression
    (36) assignment -> . VARIABLE ASIG expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 74
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 72
    assignment                     shift and go to state 73
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 39

    (93) struct_def -> TYPE . VARIABLE STRUCT LBRACE struct_fields RBRACE

    VARIABLE        shift and go to state 75


state 40

    (102) switch_stmt -> SWITCH . expression LBRACE case_list RBRACE
    (103) switch_stmt -> SWITCH . LBRACE case_list RBRACE
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    LBRACE          shift and go to state 77
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 76
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 41

    (124) array_literal -> LBRACKET . NUMBER RBRACKET type LBRACE array_values RBRACE

    NUMBER          shift and go to state 78


state 42

    (132) break_stmt -> BREAK .

    VAR             reduce using rule 132 (break_stmt -> BREAK .)
    VARIABLE        reduce using rule 132 (break_stmt -> BREAK .)
    FMT             reduce using rule 132 (break_stmt -> BREAK .)
    CONTINUE        reduce using rule 132 (break_stmt -> BREAK .)
    FUNC            reduce using rule 132 (break_stmt -> BREAK .)
    IF              reduce using rule 132 (break_stmt -> BREAK .)
    FOR             reduce using rule 132 (break_stmt -> BREAK .)
    TYPE            reduce using rule 132 (break_stmt -> BREAK .)
    SWITCH          reduce using rule 132 (break_stmt -> BREAK .)
    LBRACKET        reduce using rule 132 (break_stmt -> BREAK .)
    BREAK           reduce using rule 132 (break_stmt -> BREAK .)
    RETURN          reduce using rule 132 (break_stmt -> BREAK .)
    $end            reduce using rule 132 (break_stmt -> BREAK .)
    RBRACE          reduce using rule 132 (break_stmt -> BREAK .)
    CASE            reduce using rule 132 (break_stmt -> BREAK .)
    DEFAULT         reduce using rule 132 (break_stmt -> BREAK .)


state 43

    (44) return_stmt -> RETURN . expression
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 79
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 44

    (2) import_stmt -> IMPORT LPAREN . STRING RPAREN

    STRING          shift and go to state 80


state 45

    (3) import_stmt -> IMPORT STRING .

    VAR             reduce using rule 3 (import_stmt -> IMPORT STRING .)
    VARIABLE        reduce using rule 3 (import_stmt -> IMPORT STRING .)
    FMT             reduce using rule 3 (import_stmt -> IMPORT STRING .)
    CONTINUE        reduce using rule 3 (import_stmt -> IMPORT STRING .)
    FUNC            reduce using rule 3 (import_stmt -> IMPORT STRING .)
    IF              reduce using rule 3 (import_stmt -> IMPORT STRING .)
    FOR             reduce using rule 3 (import_stmt -> IMPORT STRING .)
    TYPE            reduce using rule 3 (import_stmt -> IMPORT STRING .)
    SWITCH          reduce using rule 3 (import_stmt -> IMPORT STRING .)
    LBRACKET        reduce using rule 3 (import_stmt -> IMPORT STRING .)
    BREAK           reduce using rule 3 (import_stmt -> IMPORT STRING .)
    RETURN          reduce using rule 3 (import_stmt -> IMPORT STRING .)


state 46

    (35) assignment -> VARIABLE ASSIGN . expression
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 81
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 47

    (36) assignment -> VARIABLE ASIG . expression
    (109) map_declaration -> VARIABLE ASIG . MAP LBRACKET type RBRACKET type
    (110) map_declaration -> VARIABLE ASIG . MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE
    (118) map_declaration_values -> VARIABLE ASIG . MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (128) slice_declaration -> VARIABLE ASIG . LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (114) make_stmt -> VARIABLE ASIG . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (115) make_stmt -> VARIABLE ASIG . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (131) new_stmt -> VARIABLE ASIG . NEW LPAREN VARIABLE RPAREN
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    MAP             shift and go to state 83
    LBRACKET        shift and go to state 84
    MAKE            shift and go to state 85
    NEW             shift and go to state 86
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67

    expression                     shift and go to state 82
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 48

    (47) func_call -> VARIABLE LPAREN . arg_list RPAREN
    (48) func_call -> VARIABLE LPAREN . RPAREN
    (52) arg_list -> . expression
    (53) arg_list -> . expression COMMA arg_list
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    RPAREN          shift and go to state 88
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    arg_list                       shift and go to state 87
    expression                     shift and go to state 89
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 49

    (133) increment_stmt -> VARIABLE INCREMENT .

    VAR             reduce using rule 133 (increment_stmt -> VARIABLE INCREMENT .)
    VARIABLE        reduce using rule 133 (increment_stmt -> VARIABLE INCREMENT .)
    FMT             reduce using rule 133 (increment_stmt -> VARIABLE INCREMENT .)
    CONTINUE        reduce using rule 133 (increment_stmt -> VARIABLE INCREMENT .)
    FUNC            reduce using rule 133 (increment_stmt -> VARIABLE INCREMENT .)
    IF              reduce using rule 133 (increment_stmt -> VARIABLE INCREMENT .)
    FOR             reduce using rule 133 (increment_stmt -> VARIABLE INCREMENT .)
    TYPE            reduce using rule 133 (increment_stmt -> VARIABLE INCREMENT .)
    SWITCH          reduce using rule 133 (increment_stmt -> VARIABLE INCREMENT .)
    LBRACKET        reduce using rule 133 (increment_stmt -> VARIABLE INCREMENT .)
    BREAK           reduce using rule 133 (increment_stmt -> VARIABLE INCREMENT .)
    RETURN          reduce using rule 133 (increment_stmt -> VARIABLE INCREMENT .)
    $end            reduce using rule 133 (increment_stmt -> VARIABLE INCREMENT .)
    RBRACE          reduce using rule 133 (increment_stmt -> VARIABLE INCREMENT .)
    CASE            reduce using rule 133 (increment_stmt -> VARIABLE INCREMENT .)
    DEFAULT         reduce using rule 133 (increment_stmt -> VARIABLE INCREMENT .)
    LBRACE          reduce using rule 133 (increment_stmt -> VARIABLE INCREMENT .)


state 50

    (134) increment_stmt -> VARIABLE DECREMENT .

    VAR             reduce using rule 134 (increment_stmt -> VARIABLE DECREMENT .)
    VARIABLE        reduce using rule 134 (increment_stmt -> VARIABLE DECREMENT .)
    FMT             reduce using rule 134 (increment_stmt -> VARIABLE DECREMENT .)
    CONTINUE        reduce using rule 134 (increment_stmt -> VARIABLE DECREMENT .)
    FUNC            reduce using rule 134 (increment_stmt -> VARIABLE DECREMENT .)
    IF              reduce using rule 134 (increment_stmt -> VARIABLE DECREMENT .)
    FOR             reduce using rule 134 (increment_stmt -> VARIABLE DECREMENT .)
    TYPE            reduce using rule 134 (increment_stmt -> VARIABLE DECREMENT .)
    SWITCH          reduce using rule 134 (increment_stmt -> VARIABLE DECREMENT .)
    LBRACKET        reduce using rule 134 (increment_stmt -> VARIABLE DECREMENT .)
    BREAK           reduce using rule 134 (increment_stmt -> VARIABLE DECREMENT .)
    RETURN          reduce using rule 134 (increment_stmt -> VARIABLE DECREMENT .)
    $end            reduce using rule 134 (increment_stmt -> VARIABLE DECREMENT .)
    RBRACE          reduce using rule 134 (increment_stmt -> VARIABLE DECREMENT .)
    CASE            reduce using rule 134 (increment_stmt -> VARIABLE DECREMENT .)
    DEFAULT         reduce using rule 134 (increment_stmt -> VARIABLE DECREMENT .)
    LBRACE          reduce using rule 134 (increment_stmt -> VARIABLE DECREMENT .)


state 51

    (5) program -> statement program .

    $end            reduce using rule 5 (program -> statement program .)
    RBRACE          reduce using rule 5 (program -> statement program .)
    CASE            reduce using rule 5 (program -> statement program .)
    DEFAULT         reduce using rule 5 (program -> statement program .)


state 52

    (29) declaration -> VAR VARIABLE . type
    (30) declaration -> VAR VARIABLE . type ASIG expression
    (31) declaration -> VAR VARIABLE . type ASSIGN expression
    (108) map_declaration -> VAR VARIABLE . MAP LBRACKET type RBRACKET type
    (122) array_declaration -> VAR VARIABLE . LBRACKET NUMBER RBRACKET type
    (123) array_declaration -> VAR VARIABLE . ASSIGN array_literal
    (127) slice_declaration -> VAR VARIABLE . LBRACKET RBRACKET type
    (79) type -> . INT_TYPE
    (80) type -> . FLOAT64_TYPE
    (81) type -> . STRING_TYPE
    (82) type -> . BOOL_TYPE

    MAP             shift and go to state 92
    LBRACKET        shift and go to state 93
    ASSIGN          shift and go to state 91
    INT_TYPE        shift and go to state 94
    FLOAT64_TYPE    shift and go to state 95
    STRING_TYPE     shift and go to state 96
    BOOL_TYPE       shift and go to state 97

    type                           shift and go to state 90

state 53

    (37) print_stmt -> FMT DOT . PRINTF LPAREN STRING COMMA expression RPAREN
    (38) print_stmt -> FMT DOT . PRINTLN LPAREN expression RPAREN
    (39) print_stmt -> FMT DOT . PRINTLN LPAREN STRING COMMA VARIABLE RPAREN
    (40) input_stmt -> FMT DOT . SCANLN LPAREN AMPER VARIABLE RPAREN

    PRINTF          shift and go to state 98
    PRINTLN         shift and go to state 99
    SCANLN          shift and go to state 100


state 54

    (91) struct_method -> FUNC LPAREN . VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (92) struct_method -> FUNC LPAREN . VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE

    VARIABLE        shift and go to state 101


state 55

    (45) func_no_params -> FUNC VARIABLE . LPAREN RPAREN type LBRACE program RBRACE
    (46) func_no_params -> FUNC VARIABLE . LPAREN RPAREN LBRACE program RBRACE
    (42) func_header -> FUNC VARIABLE . LPAREN param_list RPAREN type

    LPAREN          shift and go to state 102


state 56

    (41) func_def -> func_header func_body .

    VAR             reduce using rule 41 (func_def -> func_header func_body .)
    VARIABLE        reduce using rule 41 (func_def -> func_header func_body .)
    FMT             reduce using rule 41 (func_def -> func_header func_body .)
    CONTINUE        reduce using rule 41 (func_def -> func_header func_body .)
    FUNC            reduce using rule 41 (func_def -> func_header func_body .)
    IF              reduce using rule 41 (func_def -> func_header func_body .)
    FOR             reduce using rule 41 (func_def -> func_header func_body .)
    TYPE            reduce using rule 41 (func_def -> func_header func_body .)
    SWITCH          reduce using rule 41 (func_def -> func_header func_body .)
    LBRACKET        reduce using rule 41 (func_def -> func_header func_body .)
    BREAK           reduce using rule 41 (func_def -> func_header func_body .)
    RETURN          reduce using rule 41 (func_def -> func_header func_body .)
    $end            reduce using rule 41 (func_def -> func_header func_body .)
    RBRACE          reduce using rule 41 (func_def -> func_header func_body .)
    CASE            reduce using rule 41 (func_def -> func_header func_body .)
    DEFAULT         reduce using rule 41 (func_def -> func_header func_body .)


state 57

    (43) func_body -> LBRACE . program RBRACE
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_call
    (15) statement -> . if_stmt
    (16) statement -> . for_stmt
    (17) statement -> . struct_def
    (18) statement -> . switch_stmt
    (19) statement -> . map_declaration
    (20) statement -> . map_declaration_values
    (21) statement -> . array_declaration
    (22) statement -> . array_literal
    (23) statement -> . slice_declaration
    (24) statement -> . make_stmt
    (25) statement -> . new_stmt
    (26) statement -> . break_stmt
    (27) statement -> . increment_stmt
    (28) statement -> . return_stmt
    (29) declaration -> . VAR VARIABLE type
    (30) declaration -> . VAR VARIABLE type ASIG expression
    (31) declaration -> . VAR VARIABLE type ASSIGN expression
    (35) assignment -> . VARIABLE ASSIGN expression
    (36) assignment -> . VARIABLE ASIG expression
    (37) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (38) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (39) print_stmt -> . FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN
    (40) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (87) continue_stmt -> . CONTINUE
    (91) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (92) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (41) func_def -> . func_header func_body
    (45) func_no_params -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (46) func_no_params -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN
    (83) if_stmt -> . IF expression block
    (84) if_stmt -> . IF expression block ELSE block
    (85) for_stmt -> . FOR expression block
    (86) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (93) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (102) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (103) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (108) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (109) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (110) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE
    (118) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (122) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (123) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (124) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (127) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (128) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (114) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (115) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (131) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (132) break_stmt -> . BREAK
    (133) increment_stmt -> . VARIABLE INCREMENT
    (134) increment_stmt -> . VARIABLE DECREMENT
    (44) return_stmt -> . RETURN expression
    (42) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type

    VAR             shift and go to state 32
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 33
    CONTINUE        shift and go to state 34
    FUNC            shift and go to state 35
    IF              shift and go to state 37
    FOR             shift and go to state 38
    TYPE            shift and go to state 39
    SWITCH          shift and go to state 40
    LBRACKET        shift and go to state 41
    BREAK           shift and go to state 42
    RETURN          shift and go to state 43

    program                        shift and go to state 103
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_call                      shift and go to state 17
    if_stmt                        shift and go to state 18
    for_stmt                       shift and go to state 19
    struct_def                     shift and go to state 20
    switch_stmt                    shift and go to state 21
    map_declaration                shift and go to state 22
    map_declaration_values         shift and go to state 23
    array_declaration              shift and go to state 24
    array_literal                  shift and go to state 25
    slice_declaration              shift and go to state 26
    make_stmt                      shift and go to state 27
    new_stmt                       shift and go to state 28
    break_stmt                     shift and go to state 29
    increment_stmt                 shift and go to state 30
    return_stmt                    shift and go to state 31
    func_header                    shift and go to state 36

state 58

    (83) if_stmt -> IF expression . block
    (84) if_stmt -> IF expression . block ELSE block
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression
    (90) block -> . LBRACE program RBRACE

    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114
    LBRACE          shift and go to state 115

    block                          shift and go to state 104

state 59

    (32) expression -> NUMBER .
    (69) factor -> NUMBER .

  ! reduce/reduce conflict for PLUS resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for MINUS resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for AND resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for OR resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for EQ resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for NE resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for LT resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for GT resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for LE resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for GE resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for LBRACE resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for VAR resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for FMT resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for FUNC resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for IF resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for FOR resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for TYPE resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for SWITCH resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for BREAK resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for RETURN resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for RBRACE resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for CASE resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for COMMA resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for COLON resolved using rule 32 (expression -> NUMBER .)
    PLUS            reduce using rule 32 (expression -> NUMBER .)
    MINUS           reduce using rule 32 (expression -> NUMBER .)
    AND             reduce using rule 32 (expression -> NUMBER .)
    OR              reduce using rule 32 (expression -> NUMBER .)
    EQ              reduce using rule 32 (expression -> NUMBER .)
    NE              reduce using rule 32 (expression -> NUMBER .)
    LT              reduce using rule 32 (expression -> NUMBER .)
    GT              reduce using rule 32 (expression -> NUMBER .)
    LE              reduce using rule 32 (expression -> NUMBER .)
    GE              reduce using rule 32 (expression -> NUMBER .)
    LBRACE          reduce using rule 32 (expression -> NUMBER .)
    VAR             reduce using rule 32 (expression -> NUMBER .)
    VARIABLE        reduce using rule 32 (expression -> NUMBER .)
    FMT             reduce using rule 32 (expression -> NUMBER .)
    CONTINUE        reduce using rule 32 (expression -> NUMBER .)
    FUNC            reduce using rule 32 (expression -> NUMBER .)
    IF              reduce using rule 32 (expression -> NUMBER .)
    FOR             reduce using rule 32 (expression -> NUMBER .)
    TYPE            reduce using rule 32 (expression -> NUMBER .)
    SWITCH          reduce using rule 32 (expression -> NUMBER .)
    LBRACKET        reduce using rule 32 (expression -> NUMBER .)
    BREAK           reduce using rule 32 (expression -> NUMBER .)
    RETURN          reduce using rule 32 (expression -> NUMBER .)
    $end            reduce using rule 32 (expression -> NUMBER .)
    RBRACE          reduce using rule 32 (expression -> NUMBER .)
    CASE            reduce using rule 32 (expression -> NUMBER .)
    DEFAULT         reduce using rule 32 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 32 (expression -> NUMBER .)
    COMMA           reduce using rule 32 (expression -> NUMBER .)
    RPAREN          reduce using rule 32 (expression -> NUMBER .)
    COLON           reduce using rule 32 (expression -> NUMBER .)
    TIMES           reduce using rule 69 (factor -> NUMBER .)
    DIVIDE          reduce using rule 69 (factor -> NUMBER .)

  ! PLUS            [ reduce using rule 69 (factor -> NUMBER .) ]
  ! MINUS           [ reduce using rule 69 (factor -> NUMBER .) ]
  ! AND             [ reduce using rule 69 (factor -> NUMBER .) ]
  ! OR              [ reduce using rule 69 (factor -> NUMBER .) ]
  ! EQ              [ reduce using rule 69 (factor -> NUMBER .) ]
  ! NE              [ reduce using rule 69 (factor -> NUMBER .) ]
  ! LT              [ reduce using rule 69 (factor -> NUMBER .) ]
  ! GT              [ reduce using rule 69 (factor -> NUMBER .) ]
  ! LE              [ reduce using rule 69 (factor -> NUMBER .) ]
  ! GE              [ reduce using rule 69 (factor -> NUMBER .) ]
  ! LBRACE          [ reduce using rule 69 (factor -> NUMBER .) ]
  ! VAR             [ reduce using rule 69 (factor -> NUMBER .) ]
  ! VARIABLE        [ reduce using rule 69 (factor -> NUMBER .) ]
  ! FMT             [ reduce using rule 69 (factor -> NUMBER .) ]
  ! CONTINUE        [ reduce using rule 69 (factor -> NUMBER .) ]
  ! FUNC            [ reduce using rule 69 (factor -> NUMBER .) ]
  ! IF              [ reduce using rule 69 (factor -> NUMBER .) ]
  ! FOR             [ reduce using rule 69 (factor -> NUMBER .) ]
  ! TYPE            [ reduce using rule 69 (factor -> NUMBER .) ]
  ! SWITCH          [ reduce using rule 69 (factor -> NUMBER .) ]
  ! LBRACKET        [ reduce using rule 69 (factor -> NUMBER .) ]
  ! BREAK           [ reduce using rule 69 (factor -> NUMBER .) ]
  ! RETURN          [ reduce using rule 69 (factor -> NUMBER .) ]
  ! $end            [ reduce using rule 69 (factor -> NUMBER .) ]
  ! RBRACE          [ reduce using rule 69 (factor -> NUMBER .) ]
  ! CASE            [ reduce using rule 69 (factor -> NUMBER .) ]
  ! DEFAULT         [ reduce using rule 69 (factor -> NUMBER .) ]
  ! SEMICOLON       [ reduce using rule 69 (factor -> NUMBER .) ]
  ! COMMA           [ reduce using rule 69 (factor -> NUMBER .) ]
  ! RPAREN          [ reduce using rule 69 (factor -> NUMBER .) ]
  ! COLON           [ reduce using rule 69 (factor -> NUMBER .) ]


state 60

    (33) expression -> FLOAT .
    (70) factor -> FLOAT .

  ! reduce/reduce conflict for PLUS resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for MINUS resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for AND resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for OR resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for EQ resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for NE resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for LT resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for GT resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for LE resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for GE resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for LBRACE resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for VAR resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for FMT resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for FUNC resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for IF resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for FOR resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for TYPE resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for SWITCH resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for BREAK resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for RETURN resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for $end resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for RBRACE resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for CASE resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for COMMA resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for RPAREN resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for COLON resolved using rule 33 (expression -> FLOAT .)
    PLUS            reduce using rule 33 (expression -> FLOAT .)
    MINUS           reduce using rule 33 (expression -> FLOAT .)
    AND             reduce using rule 33 (expression -> FLOAT .)
    OR              reduce using rule 33 (expression -> FLOAT .)
    EQ              reduce using rule 33 (expression -> FLOAT .)
    NE              reduce using rule 33 (expression -> FLOAT .)
    LT              reduce using rule 33 (expression -> FLOAT .)
    GT              reduce using rule 33 (expression -> FLOAT .)
    LE              reduce using rule 33 (expression -> FLOAT .)
    GE              reduce using rule 33 (expression -> FLOAT .)
    LBRACE          reduce using rule 33 (expression -> FLOAT .)
    VAR             reduce using rule 33 (expression -> FLOAT .)
    VARIABLE        reduce using rule 33 (expression -> FLOAT .)
    FMT             reduce using rule 33 (expression -> FLOAT .)
    CONTINUE        reduce using rule 33 (expression -> FLOAT .)
    FUNC            reduce using rule 33 (expression -> FLOAT .)
    IF              reduce using rule 33 (expression -> FLOAT .)
    FOR             reduce using rule 33 (expression -> FLOAT .)
    TYPE            reduce using rule 33 (expression -> FLOAT .)
    SWITCH          reduce using rule 33 (expression -> FLOAT .)
    LBRACKET        reduce using rule 33 (expression -> FLOAT .)
    BREAK           reduce using rule 33 (expression -> FLOAT .)
    RETURN          reduce using rule 33 (expression -> FLOAT .)
    $end            reduce using rule 33 (expression -> FLOAT .)
    RBRACE          reduce using rule 33 (expression -> FLOAT .)
    CASE            reduce using rule 33 (expression -> FLOAT .)
    DEFAULT         reduce using rule 33 (expression -> FLOAT .)
    SEMICOLON       reduce using rule 33 (expression -> FLOAT .)
    COMMA           reduce using rule 33 (expression -> FLOAT .)
    RPAREN          reduce using rule 33 (expression -> FLOAT .)
    COLON           reduce using rule 33 (expression -> FLOAT .)
    TIMES           reduce using rule 70 (factor -> FLOAT .)
    DIVIDE          reduce using rule 70 (factor -> FLOAT .)

  ! PLUS            [ reduce using rule 70 (factor -> FLOAT .) ]
  ! MINUS           [ reduce using rule 70 (factor -> FLOAT .) ]
  ! AND             [ reduce using rule 70 (factor -> FLOAT .) ]
  ! OR              [ reduce using rule 70 (factor -> FLOAT .) ]
  ! EQ              [ reduce using rule 70 (factor -> FLOAT .) ]
  ! NE              [ reduce using rule 70 (factor -> FLOAT .) ]
  ! LT              [ reduce using rule 70 (factor -> FLOAT .) ]
  ! GT              [ reduce using rule 70 (factor -> FLOAT .) ]
  ! LE              [ reduce using rule 70 (factor -> FLOAT .) ]
  ! GE              [ reduce using rule 70 (factor -> FLOAT .) ]
  ! LBRACE          [ reduce using rule 70 (factor -> FLOAT .) ]
  ! VAR             [ reduce using rule 70 (factor -> FLOAT .) ]
  ! VARIABLE        [ reduce using rule 70 (factor -> FLOAT .) ]
  ! FMT             [ reduce using rule 70 (factor -> FLOAT .) ]
  ! CONTINUE        [ reduce using rule 70 (factor -> FLOAT .) ]
  ! FUNC            [ reduce using rule 70 (factor -> FLOAT .) ]
  ! IF              [ reduce using rule 70 (factor -> FLOAT .) ]
  ! FOR             [ reduce using rule 70 (factor -> FLOAT .) ]
  ! TYPE            [ reduce using rule 70 (factor -> FLOAT .) ]
  ! SWITCH          [ reduce using rule 70 (factor -> FLOAT .) ]
  ! LBRACKET        [ reduce using rule 70 (factor -> FLOAT .) ]
  ! BREAK           [ reduce using rule 70 (factor -> FLOAT .) ]
  ! RETURN          [ reduce using rule 70 (factor -> FLOAT .) ]
  ! $end            [ reduce using rule 70 (factor -> FLOAT .) ]
  ! RBRACE          [ reduce using rule 70 (factor -> FLOAT .) ]
  ! CASE            [ reduce using rule 70 (factor -> FLOAT .) ]
  ! DEFAULT         [ reduce using rule 70 (factor -> FLOAT .) ]
  ! SEMICOLON       [ reduce using rule 70 (factor -> FLOAT .) ]
  ! COMMA           [ reduce using rule 70 (factor -> FLOAT .) ]
  ! RPAREN          [ reduce using rule 70 (factor -> FLOAT .) ]
  ! COLON           [ reduce using rule 70 (factor -> FLOAT .) ]


state 61

    (34) expression -> VARIABLE .
    (68) term -> VARIABLE .
    (72) factor -> VARIABLE .
    (98) struct_instance -> VARIABLE . LBRACE struct_fields_values RBRACE
    (47) func_call -> VARIABLE . LPAREN arg_list RPAREN
    (48) func_call -> VARIABLE . LPAREN RPAREN

  ! reduce/reduce conflict for PLUS resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for MINUS resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for AND resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for OR resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for EQ resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for NE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LT resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GT resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for VAR resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for FMT resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for FUNC resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for IF resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for FOR resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for TYPE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for SWITCH resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for BREAK resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for RETURN resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for $end resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for CASE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for COLON resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for TIMES resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for PLUS resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for MINUS resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for AND resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for OR resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for EQ resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for NE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LT resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GT resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for VAR resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for FMT resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for FUNC resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for IF resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for FOR resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for TYPE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for SWITCH resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for BREAK resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for RETURN resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for $end resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for CASE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for COLON resolved using rule 34 (expression -> VARIABLE .)
  ! shift/reduce conflict for LBRACE resolved as shift
    PLUS            reduce using rule 34 (expression -> VARIABLE .)
    MINUS           reduce using rule 34 (expression -> VARIABLE .)
    AND             reduce using rule 34 (expression -> VARIABLE .)
    OR              reduce using rule 34 (expression -> VARIABLE .)
    EQ              reduce using rule 34 (expression -> VARIABLE .)
    NE              reduce using rule 34 (expression -> VARIABLE .)
    LT              reduce using rule 34 (expression -> VARIABLE .)
    GT              reduce using rule 34 (expression -> VARIABLE .)
    LE              reduce using rule 34 (expression -> VARIABLE .)
    GE              reduce using rule 34 (expression -> VARIABLE .)
    VAR             reduce using rule 34 (expression -> VARIABLE .)
    VARIABLE        reduce using rule 34 (expression -> VARIABLE .)
    FMT             reduce using rule 34 (expression -> VARIABLE .)
    CONTINUE        reduce using rule 34 (expression -> VARIABLE .)
    FUNC            reduce using rule 34 (expression -> VARIABLE .)
    IF              reduce using rule 34 (expression -> VARIABLE .)
    FOR             reduce using rule 34 (expression -> VARIABLE .)
    TYPE            reduce using rule 34 (expression -> VARIABLE .)
    SWITCH          reduce using rule 34 (expression -> VARIABLE .)
    LBRACKET        reduce using rule 34 (expression -> VARIABLE .)
    BREAK           reduce using rule 34 (expression -> VARIABLE .)
    RETURN          reduce using rule 34 (expression -> VARIABLE .)
    $end            reduce using rule 34 (expression -> VARIABLE .)
    RBRACE          reduce using rule 34 (expression -> VARIABLE .)
    CASE            reduce using rule 34 (expression -> VARIABLE .)
    DEFAULT         reduce using rule 34 (expression -> VARIABLE .)
    SEMICOLON       reduce using rule 34 (expression -> VARIABLE .)
    COMMA           reduce using rule 34 (expression -> VARIABLE .)
    RPAREN          reduce using rule 34 (expression -> VARIABLE .)
    COLON           reduce using rule 34 (expression -> VARIABLE .)
    TIMES           reduce using rule 68 (term -> VARIABLE .)
    DIVIDE          reduce using rule 68 (term -> VARIABLE .)
    LBRACE          shift and go to state 116
    LPAREN          shift and go to state 48

  ! LBRACE          [ reduce using rule 34 (expression -> VARIABLE .) ]
  ! PLUS            [ reduce using rule 68 (term -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 68 (term -> VARIABLE .) ]
  ! AND             [ reduce using rule 68 (term -> VARIABLE .) ]
  ! OR              [ reduce using rule 68 (term -> VARIABLE .) ]
  ! EQ              [ reduce using rule 68 (term -> VARIABLE .) ]
  ! NE              [ reduce using rule 68 (term -> VARIABLE .) ]
  ! LT              [ reduce using rule 68 (term -> VARIABLE .) ]
  ! GT              [ reduce using rule 68 (term -> VARIABLE .) ]
  ! LE              [ reduce using rule 68 (term -> VARIABLE .) ]
  ! GE              [ reduce using rule 68 (term -> VARIABLE .) ]
  ! LBRACE          [ reduce using rule 68 (term -> VARIABLE .) ]
  ! VAR             [ reduce using rule 68 (term -> VARIABLE .) ]
  ! VARIABLE        [ reduce using rule 68 (term -> VARIABLE .) ]
  ! FMT             [ reduce using rule 68 (term -> VARIABLE .) ]
  ! CONTINUE        [ reduce using rule 68 (term -> VARIABLE .) ]
  ! FUNC            [ reduce using rule 68 (term -> VARIABLE .) ]
  ! IF              [ reduce using rule 68 (term -> VARIABLE .) ]
  ! FOR             [ reduce using rule 68 (term -> VARIABLE .) ]
  ! TYPE            [ reduce using rule 68 (term -> VARIABLE .) ]
  ! SWITCH          [ reduce using rule 68 (term -> VARIABLE .) ]
  ! LBRACKET        [ reduce using rule 68 (term -> VARIABLE .) ]
  ! BREAK           [ reduce using rule 68 (term -> VARIABLE .) ]
  ! RETURN          [ reduce using rule 68 (term -> VARIABLE .) ]
  ! $end            [ reduce using rule 68 (term -> VARIABLE .) ]
  ! RBRACE          [ reduce using rule 68 (term -> VARIABLE .) ]
  ! CASE            [ reduce using rule 68 (term -> VARIABLE .) ]
  ! DEFAULT         [ reduce using rule 68 (term -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 68 (term -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 68 (term -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 68 (term -> VARIABLE .) ]
  ! COLON           [ reduce using rule 68 (term -> VARIABLE .) ]
  ! TIMES           [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! PLUS            [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! AND             [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! OR              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! EQ              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! NE              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! LT              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! GT              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! LE              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! GE              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! LBRACE          [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! VAR             [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! VARIABLE        [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! FMT             [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! CONTINUE        [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! FUNC            [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! IF              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! FOR             [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! TYPE            [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! SWITCH          [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! LBRACKET        [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! BREAK           [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! RETURN          [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! $end            [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! RBRACE          [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! CASE            [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! DEFAULT         [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! COLON           [ reduce using rule 72 (factor -> VARIABLE .) ]


state 62

    (54) expression -> term .
    (66) term -> term . TIMES factor
    (67) term -> term . DIVIDE factor

    PLUS            reduce using rule 54 (expression -> term .)
    MINUS           reduce using rule 54 (expression -> term .)
    AND             reduce using rule 54 (expression -> term .)
    OR              reduce using rule 54 (expression -> term .)
    EQ              reduce using rule 54 (expression -> term .)
    NE              reduce using rule 54 (expression -> term .)
    LT              reduce using rule 54 (expression -> term .)
    GT              reduce using rule 54 (expression -> term .)
    LE              reduce using rule 54 (expression -> term .)
    GE              reduce using rule 54 (expression -> term .)
    LBRACE          reduce using rule 54 (expression -> term .)
    VAR             reduce using rule 54 (expression -> term .)
    VARIABLE        reduce using rule 54 (expression -> term .)
    FMT             reduce using rule 54 (expression -> term .)
    CONTINUE        reduce using rule 54 (expression -> term .)
    FUNC            reduce using rule 54 (expression -> term .)
    IF              reduce using rule 54 (expression -> term .)
    FOR             reduce using rule 54 (expression -> term .)
    TYPE            reduce using rule 54 (expression -> term .)
    SWITCH          reduce using rule 54 (expression -> term .)
    LBRACKET        reduce using rule 54 (expression -> term .)
    BREAK           reduce using rule 54 (expression -> term .)
    RETURN          reduce using rule 54 (expression -> term .)
    $end            reduce using rule 54 (expression -> term .)
    RBRACE          reduce using rule 54 (expression -> term .)
    CASE            reduce using rule 54 (expression -> term .)
    DEFAULT         reduce using rule 54 (expression -> term .)
    SEMICOLON       reduce using rule 54 (expression -> term .)
    COMMA           reduce using rule 54 (expression -> term .)
    RPAREN          reduce using rule 54 (expression -> term .)
    COLON           reduce using rule 54 (expression -> term .)
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 118


state 63

    (65) term -> factor .

    TIMES           reduce using rule 65 (term -> factor .)
    DIVIDE          reduce using rule 65 (term -> factor .)
    PLUS            reduce using rule 65 (term -> factor .)
    MINUS           reduce using rule 65 (term -> factor .)
    AND             reduce using rule 65 (term -> factor .)
    OR              reduce using rule 65 (term -> factor .)
    EQ              reduce using rule 65 (term -> factor .)
    NE              reduce using rule 65 (term -> factor .)
    LT              reduce using rule 65 (term -> factor .)
    GT              reduce using rule 65 (term -> factor .)
    LE              reduce using rule 65 (term -> factor .)
    GE              reduce using rule 65 (term -> factor .)
    LBRACE          reduce using rule 65 (term -> factor .)
    VAR             reduce using rule 65 (term -> factor .)
    VARIABLE        reduce using rule 65 (term -> factor .)
    FMT             reduce using rule 65 (term -> factor .)
    CONTINUE        reduce using rule 65 (term -> factor .)
    FUNC            reduce using rule 65 (term -> factor .)
    IF              reduce using rule 65 (term -> factor .)
    FOR             reduce using rule 65 (term -> factor .)
    TYPE            reduce using rule 65 (term -> factor .)
    SWITCH          reduce using rule 65 (term -> factor .)
    LBRACKET        reduce using rule 65 (term -> factor .)
    BREAK           reduce using rule 65 (term -> factor .)
    RETURN          reduce using rule 65 (term -> factor .)
    $end            reduce using rule 65 (term -> factor .)
    RBRACE          reduce using rule 65 (term -> factor .)
    CASE            reduce using rule 65 (term -> factor .)
    DEFAULT         reduce using rule 65 (term -> factor .)
    SEMICOLON       reduce using rule 65 (term -> factor .)
    COMMA           reduce using rule 65 (term -> factor .)
    RPAREN          reduce using rule 65 (term -> factor .)
    COLON           reduce using rule 65 (term -> factor .)


state 64

    (71) factor -> STRING .

    TIMES           reduce using rule 71 (factor -> STRING .)
    DIVIDE          reduce using rule 71 (factor -> STRING .)
    PLUS            reduce using rule 71 (factor -> STRING .)
    MINUS           reduce using rule 71 (factor -> STRING .)
    AND             reduce using rule 71 (factor -> STRING .)
    OR              reduce using rule 71 (factor -> STRING .)
    EQ              reduce using rule 71 (factor -> STRING .)
    NE              reduce using rule 71 (factor -> STRING .)
    LT              reduce using rule 71 (factor -> STRING .)
    GT              reduce using rule 71 (factor -> STRING .)
    LE              reduce using rule 71 (factor -> STRING .)
    GE              reduce using rule 71 (factor -> STRING .)
    LBRACE          reduce using rule 71 (factor -> STRING .)
    VAR             reduce using rule 71 (factor -> STRING .)
    VARIABLE        reduce using rule 71 (factor -> STRING .)
    FMT             reduce using rule 71 (factor -> STRING .)
    CONTINUE        reduce using rule 71 (factor -> STRING .)
    FUNC            reduce using rule 71 (factor -> STRING .)
    IF              reduce using rule 71 (factor -> STRING .)
    FOR             reduce using rule 71 (factor -> STRING .)
    TYPE            reduce using rule 71 (factor -> STRING .)
    SWITCH          reduce using rule 71 (factor -> STRING .)
    LBRACKET        reduce using rule 71 (factor -> STRING .)
    BREAK           reduce using rule 71 (factor -> STRING .)
    RETURN          reduce using rule 71 (factor -> STRING .)
    $end            reduce using rule 71 (factor -> STRING .)
    RBRACE          reduce using rule 71 (factor -> STRING .)
    CASE            reduce using rule 71 (factor -> STRING .)
    DEFAULT         reduce using rule 71 (factor -> STRING .)
    SEMICOLON       reduce using rule 71 (factor -> STRING .)
    COMMA           reduce using rule 71 (factor -> STRING .)
    RPAREN          reduce using rule 71 (factor -> STRING .)
    COLON           reduce using rule 71 (factor -> STRING .)


state 65

    (73) factor -> TRUE .

    TIMES           reduce using rule 73 (factor -> TRUE .)
    DIVIDE          reduce using rule 73 (factor -> TRUE .)
    PLUS            reduce using rule 73 (factor -> TRUE .)
    MINUS           reduce using rule 73 (factor -> TRUE .)
    AND             reduce using rule 73 (factor -> TRUE .)
    OR              reduce using rule 73 (factor -> TRUE .)
    EQ              reduce using rule 73 (factor -> TRUE .)
    NE              reduce using rule 73 (factor -> TRUE .)
    LT              reduce using rule 73 (factor -> TRUE .)
    GT              reduce using rule 73 (factor -> TRUE .)
    LE              reduce using rule 73 (factor -> TRUE .)
    GE              reduce using rule 73 (factor -> TRUE .)
    LBRACE          reduce using rule 73 (factor -> TRUE .)
    VAR             reduce using rule 73 (factor -> TRUE .)
    VARIABLE        reduce using rule 73 (factor -> TRUE .)
    FMT             reduce using rule 73 (factor -> TRUE .)
    CONTINUE        reduce using rule 73 (factor -> TRUE .)
    FUNC            reduce using rule 73 (factor -> TRUE .)
    IF              reduce using rule 73 (factor -> TRUE .)
    FOR             reduce using rule 73 (factor -> TRUE .)
    TYPE            reduce using rule 73 (factor -> TRUE .)
    SWITCH          reduce using rule 73 (factor -> TRUE .)
    LBRACKET        reduce using rule 73 (factor -> TRUE .)
    BREAK           reduce using rule 73 (factor -> TRUE .)
    RETURN          reduce using rule 73 (factor -> TRUE .)
    $end            reduce using rule 73 (factor -> TRUE .)
    RBRACE          reduce using rule 73 (factor -> TRUE .)
    CASE            reduce using rule 73 (factor -> TRUE .)
    DEFAULT         reduce using rule 73 (factor -> TRUE .)
    SEMICOLON       reduce using rule 73 (factor -> TRUE .)
    COMMA           reduce using rule 73 (factor -> TRUE .)
    RPAREN          reduce using rule 73 (factor -> TRUE .)
    COLON           reduce using rule 73 (factor -> TRUE .)


state 66

    (74) factor -> FALSE .

    TIMES           reduce using rule 74 (factor -> FALSE .)
    DIVIDE          reduce using rule 74 (factor -> FALSE .)
    PLUS            reduce using rule 74 (factor -> FALSE .)
    MINUS           reduce using rule 74 (factor -> FALSE .)
    AND             reduce using rule 74 (factor -> FALSE .)
    OR              reduce using rule 74 (factor -> FALSE .)
    EQ              reduce using rule 74 (factor -> FALSE .)
    NE              reduce using rule 74 (factor -> FALSE .)
    LT              reduce using rule 74 (factor -> FALSE .)
    GT              reduce using rule 74 (factor -> FALSE .)
    LE              reduce using rule 74 (factor -> FALSE .)
    GE              reduce using rule 74 (factor -> FALSE .)
    LBRACE          reduce using rule 74 (factor -> FALSE .)
    VAR             reduce using rule 74 (factor -> FALSE .)
    VARIABLE        reduce using rule 74 (factor -> FALSE .)
    FMT             reduce using rule 74 (factor -> FALSE .)
    CONTINUE        reduce using rule 74 (factor -> FALSE .)
    FUNC            reduce using rule 74 (factor -> FALSE .)
    IF              reduce using rule 74 (factor -> FALSE .)
    FOR             reduce using rule 74 (factor -> FALSE .)
    TYPE            reduce using rule 74 (factor -> FALSE .)
    SWITCH          reduce using rule 74 (factor -> FALSE .)
    LBRACKET        reduce using rule 74 (factor -> FALSE .)
    BREAK           reduce using rule 74 (factor -> FALSE .)
    RETURN          reduce using rule 74 (factor -> FALSE .)
    $end            reduce using rule 74 (factor -> FALSE .)
    RBRACE          reduce using rule 74 (factor -> FALSE .)
    CASE            reduce using rule 74 (factor -> FALSE .)
    DEFAULT         reduce using rule 74 (factor -> FALSE .)
    SEMICOLON       reduce using rule 74 (factor -> FALSE .)
    COMMA           reduce using rule 74 (factor -> FALSE .)
    RPAREN          reduce using rule 74 (factor -> FALSE .)
    COLON           reduce using rule 74 (factor -> FALSE .)


state 67

    (75) factor -> LPAREN . expression RPAREN
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 119
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 68

    (76) factor -> make_expr .

    TIMES           reduce using rule 76 (factor -> make_expr .)
    DIVIDE          reduce using rule 76 (factor -> make_expr .)
    PLUS            reduce using rule 76 (factor -> make_expr .)
    MINUS           reduce using rule 76 (factor -> make_expr .)
    AND             reduce using rule 76 (factor -> make_expr .)
    OR              reduce using rule 76 (factor -> make_expr .)
    EQ              reduce using rule 76 (factor -> make_expr .)
    NE              reduce using rule 76 (factor -> make_expr .)
    LT              reduce using rule 76 (factor -> make_expr .)
    GT              reduce using rule 76 (factor -> make_expr .)
    LE              reduce using rule 76 (factor -> make_expr .)
    GE              reduce using rule 76 (factor -> make_expr .)
    LBRACE          reduce using rule 76 (factor -> make_expr .)
    VAR             reduce using rule 76 (factor -> make_expr .)
    VARIABLE        reduce using rule 76 (factor -> make_expr .)
    FMT             reduce using rule 76 (factor -> make_expr .)
    CONTINUE        reduce using rule 76 (factor -> make_expr .)
    FUNC            reduce using rule 76 (factor -> make_expr .)
    IF              reduce using rule 76 (factor -> make_expr .)
    FOR             reduce using rule 76 (factor -> make_expr .)
    TYPE            reduce using rule 76 (factor -> make_expr .)
    SWITCH          reduce using rule 76 (factor -> make_expr .)
    LBRACKET        reduce using rule 76 (factor -> make_expr .)
    BREAK           reduce using rule 76 (factor -> make_expr .)
    RETURN          reduce using rule 76 (factor -> make_expr .)
    $end            reduce using rule 76 (factor -> make_expr .)
    RBRACE          reduce using rule 76 (factor -> make_expr .)
    CASE            reduce using rule 76 (factor -> make_expr .)
    DEFAULT         reduce using rule 76 (factor -> make_expr .)
    SEMICOLON       reduce using rule 76 (factor -> make_expr .)
    COMMA           reduce using rule 76 (factor -> make_expr .)
    RPAREN          reduce using rule 76 (factor -> make_expr .)
    COLON           reduce using rule 76 (factor -> make_expr .)


state 69

    (77) factor -> struct_instance .

    TIMES           reduce using rule 77 (factor -> struct_instance .)
    DIVIDE          reduce using rule 77 (factor -> struct_instance .)
    PLUS            reduce using rule 77 (factor -> struct_instance .)
    MINUS           reduce using rule 77 (factor -> struct_instance .)
    AND             reduce using rule 77 (factor -> struct_instance .)
    OR              reduce using rule 77 (factor -> struct_instance .)
    EQ              reduce using rule 77 (factor -> struct_instance .)
    NE              reduce using rule 77 (factor -> struct_instance .)
    LT              reduce using rule 77 (factor -> struct_instance .)
    GT              reduce using rule 77 (factor -> struct_instance .)
    LE              reduce using rule 77 (factor -> struct_instance .)
    GE              reduce using rule 77 (factor -> struct_instance .)
    LBRACE          reduce using rule 77 (factor -> struct_instance .)
    VAR             reduce using rule 77 (factor -> struct_instance .)
    VARIABLE        reduce using rule 77 (factor -> struct_instance .)
    FMT             reduce using rule 77 (factor -> struct_instance .)
    CONTINUE        reduce using rule 77 (factor -> struct_instance .)
    FUNC            reduce using rule 77 (factor -> struct_instance .)
    IF              reduce using rule 77 (factor -> struct_instance .)
    FOR             reduce using rule 77 (factor -> struct_instance .)
    TYPE            reduce using rule 77 (factor -> struct_instance .)
    SWITCH          reduce using rule 77 (factor -> struct_instance .)
    LBRACKET        reduce using rule 77 (factor -> struct_instance .)
    BREAK           reduce using rule 77 (factor -> struct_instance .)
    RETURN          reduce using rule 77 (factor -> struct_instance .)
    $end            reduce using rule 77 (factor -> struct_instance .)
    RBRACE          reduce using rule 77 (factor -> struct_instance .)
    CASE            reduce using rule 77 (factor -> struct_instance .)
    DEFAULT         reduce using rule 77 (factor -> struct_instance .)
    SEMICOLON       reduce using rule 77 (factor -> struct_instance .)
    COMMA           reduce using rule 77 (factor -> struct_instance .)
    RPAREN          reduce using rule 77 (factor -> struct_instance .)
    COLON           reduce using rule 77 (factor -> struct_instance .)


state 70

    (78) factor -> func_call .

    TIMES           reduce using rule 78 (factor -> func_call .)
    DIVIDE          reduce using rule 78 (factor -> func_call .)
    PLUS            reduce using rule 78 (factor -> func_call .)
    MINUS           reduce using rule 78 (factor -> func_call .)
    AND             reduce using rule 78 (factor -> func_call .)
    OR              reduce using rule 78 (factor -> func_call .)
    EQ              reduce using rule 78 (factor -> func_call .)
    NE              reduce using rule 78 (factor -> func_call .)
    LT              reduce using rule 78 (factor -> func_call .)
    GT              reduce using rule 78 (factor -> func_call .)
    LE              reduce using rule 78 (factor -> func_call .)
    GE              reduce using rule 78 (factor -> func_call .)
    LBRACE          reduce using rule 78 (factor -> func_call .)
    VAR             reduce using rule 78 (factor -> func_call .)
    VARIABLE        reduce using rule 78 (factor -> func_call .)
    FMT             reduce using rule 78 (factor -> func_call .)
    CONTINUE        reduce using rule 78 (factor -> func_call .)
    FUNC            reduce using rule 78 (factor -> func_call .)
    IF              reduce using rule 78 (factor -> func_call .)
    FOR             reduce using rule 78 (factor -> func_call .)
    TYPE            reduce using rule 78 (factor -> func_call .)
    SWITCH          reduce using rule 78 (factor -> func_call .)
    LBRACKET        reduce using rule 78 (factor -> func_call .)
    BREAK           reduce using rule 78 (factor -> func_call .)
    RETURN          reduce using rule 78 (factor -> func_call .)
    $end            reduce using rule 78 (factor -> func_call .)
    RBRACE          reduce using rule 78 (factor -> func_call .)
    CASE            reduce using rule 78 (factor -> func_call .)
    DEFAULT         reduce using rule 78 (factor -> func_call .)
    SEMICOLON       reduce using rule 78 (factor -> func_call .)
    COMMA           reduce using rule 78 (factor -> func_call .)
    RPAREN          reduce using rule 78 (factor -> func_call .)
    COLON           reduce using rule 78 (factor -> func_call .)


state 71

    (116) make_expr -> MAKE . LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> MAKE . LPAREN LBRACKET RBRACKET type RPAREN

    LPAREN          shift and go to state 120


state 72

    (85) for_stmt -> FOR expression . block
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression
    (90) block -> . LBRACE program RBRACE

    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114
    LBRACE          shift and go to state 115

    block                          shift and go to state 121

state 73

    (86) for_stmt -> FOR assignment . SEMICOLON expression SEMICOLON for_update block

    SEMICOLON       shift and go to state 122


state 74

    (34) expression -> VARIABLE .
    (35) assignment -> VARIABLE . ASSIGN expression
    (36) assignment -> VARIABLE . ASIG expression
    (68) term -> VARIABLE .
    (72) factor -> VARIABLE .
    (98) struct_instance -> VARIABLE . LBRACE struct_fields_values RBRACE
    (47) func_call -> VARIABLE . LPAREN arg_list RPAREN
    (48) func_call -> VARIABLE . LPAREN RPAREN

  ! reduce/reduce conflict for PLUS resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for MINUS resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for AND resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for OR resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for EQ resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for NE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LT resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GT resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for TIMES resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for PLUS resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for MINUS resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for AND resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for OR resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for EQ resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for NE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LT resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GT resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 34 (expression -> VARIABLE .)
  ! shift/reduce conflict for LBRACE resolved as shift
    PLUS            reduce using rule 34 (expression -> VARIABLE .)
    MINUS           reduce using rule 34 (expression -> VARIABLE .)
    AND             reduce using rule 34 (expression -> VARIABLE .)
    OR              reduce using rule 34 (expression -> VARIABLE .)
    EQ              reduce using rule 34 (expression -> VARIABLE .)
    NE              reduce using rule 34 (expression -> VARIABLE .)
    LT              reduce using rule 34 (expression -> VARIABLE .)
    GT              reduce using rule 34 (expression -> VARIABLE .)
    LE              reduce using rule 34 (expression -> VARIABLE .)
    GE              reduce using rule 34 (expression -> VARIABLE .)
    ASSIGN          shift and go to state 46
    ASIG            shift and go to state 123
    TIMES           reduce using rule 68 (term -> VARIABLE .)
    DIVIDE          reduce using rule 68 (term -> VARIABLE .)
    LBRACE          shift and go to state 116
    LPAREN          shift and go to state 48

  ! LBRACE          [ reduce using rule 34 (expression -> VARIABLE .) ]
  ! PLUS            [ reduce using rule 68 (term -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 68 (term -> VARIABLE .) ]
  ! AND             [ reduce using rule 68 (term -> VARIABLE .) ]
  ! OR              [ reduce using rule 68 (term -> VARIABLE .) ]
  ! EQ              [ reduce using rule 68 (term -> VARIABLE .) ]
  ! NE              [ reduce using rule 68 (term -> VARIABLE .) ]
  ! LT              [ reduce using rule 68 (term -> VARIABLE .) ]
  ! GT              [ reduce using rule 68 (term -> VARIABLE .) ]
  ! LE              [ reduce using rule 68 (term -> VARIABLE .) ]
  ! GE              [ reduce using rule 68 (term -> VARIABLE .) ]
  ! LBRACE          [ reduce using rule 68 (term -> VARIABLE .) ]
  ! TIMES           [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! PLUS            [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! AND             [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! OR              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! EQ              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! NE              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! LT              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! GT              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! LE              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! GE              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! LBRACE          [ reduce using rule 72 (factor -> VARIABLE .) ]


state 75

    (93) struct_def -> TYPE VARIABLE . STRUCT LBRACE struct_fields RBRACE

    STRUCT          shift and go to state 124


state 76

    (102) switch_stmt -> SWITCH expression . LBRACE case_list RBRACE
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    LBRACE          shift and go to state 125
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114


state 77

    (103) switch_stmt -> SWITCH LBRACE . case_list RBRACE
    (104) case_list -> . case_clause
    (105) case_list -> . case_clause case_list
    (106) case_clause -> . CASE expression COLON program
    (107) case_clause -> . DEFAULT COLON program

    CASE            shift and go to state 128
    DEFAULT         shift and go to state 129

    case_list                      shift and go to state 126
    case_clause                    shift and go to state 127

state 78

    (124) array_literal -> LBRACKET NUMBER . RBRACKET type LBRACE array_values RBRACE

    RBRACKET        shift and go to state 130


state 79

    (44) return_stmt -> RETURN expression .
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    VAR             reduce using rule 44 (return_stmt -> RETURN expression .)
    VARIABLE        reduce using rule 44 (return_stmt -> RETURN expression .)
    FMT             reduce using rule 44 (return_stmt -> RETURN expression .)
    CONTINUE        reduce using rule 44 (return_stmt -> RETURN expression .)
    FUNC            reduce using rule 44 (return_stmt -> RETURN expression .)
    IF              reduce using rule 44 (return_stmt -> RETURN expression .)
    FOR             reduce using rule 44 (return_stmt -> RETURN expression .)
    TYPE            reduce using rule 44 (return_stmt -> RETURN expression .)
    SWITCH          reduce using rule 44 (return_stmt -> RETURN expression .)
    LBRACKET        reduce using rule 44 (return_stmt -> RETURN expression .)
    BREAK           reduce using rule 44 (return_stmt -> RETURN expression .)
    RETURN          reduce using rule 44 (return_stmt -> RETURN expression .)
    $end            reduce using rule 44 (return_stmt -> RETURN expression .)
    RBRACE          reduce using rule 44 (return_stmt -> RETURN expression .)
    CASE            reduce using rule 44 (return_stmt -> RETURN expression .)
    DEFAULT         reduce using rule 44 (return_stmt -> RETURN expression .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114


state 80

    (2) import_stmt -> IMPORT LPAREN STRING . RPAREN

    RPAREN          shift and go to state 131


state 81

    (35) assignment -> VARIABLE ASSIGN expression .
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    VAR             reduce using rule 35 (assignment -> VARIABLE ASSIGN expression .)
    VARIABLE        reduce using rule 35 (assignment -> VARIABLE ASSIGN expression .)
    FMT             reduce using rule 35 (assignment -> VARIABLE ASSIGN expression .)
    CONTINUE        reduce using rule 35 (assignment -> VARIABLE ASSIGN expression .)
    FUNC            reduce using rule 35 (assignment -> VARIABLE ASSIGN expression .)
    IF              reduce using rule 35 (assignment -> VARIABLE ASSIGN expression .)
    FOR             reduce using rule 35 (assignment -> VARIABLE ASSIGN expression .)
    TYPE            reduce using rule 35 (assignment -> VARIABLE ASSIGN expression .)
    SWITCH          reduce using rule 35 (assignment -> VARIABLE ASSIGN expression .)
    LBRACKET        reduce using rule 35 (assignment -> VARIABLE ASSIGN expression .)
    BREAK           reduce using rule 35 (assignment -> VARIABLE ASSIGN expression .)
    RETURN          reduce using rule 35 (assignment -> VARIABLE ASSIGN expression .)
    $end            reduce using rule 35 (assignment -> VARIABLE ASSIGN expression .)
    RBRACE          reduce using rule 35 (assignment -> VARIABLE ASSIGN expression .)
    CASE            reduce using rule 35 (assignment -> VARIABLE ASSIGN expression .)
    DEFAULT         reduce using rule 35 (assignment -> VARIABLE ASSIGN expression .)
    SEMICOLON       reduce using rule 35 (assignment -> VARIABLE ASSIGN expression .)
    LBRACE          reduce using rule 35 (assignment -> VARIABLE ASSIGN expression .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114


state 82

    (36) assignment -> VARIABLE ASIG expression .
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    VAR             reduce using rule 36 (assignment -> VARIABLE ASIG expression .)
    VARIABLE        reduce using rule 36 (assignment -> VARIABLE ASIG expression .)
    FMT             reduce using rule 36 (assignment -> VARIABLE ASIG expression .)
    CONTINUE        reduce using rule 36 (assignment -> VARIABLE ASIG expression .)
    FUNC            reduce using rule 36 (assignment -> VARIABLE ASIG expression .)
    IF              reduce using rule 36 (assignment -> VARIABLE ASIG expression .)
    FOR             reduce using rule 36 (assignment -> VARIABLE ASIG expression .)
    TYPE            reduce using rule 36 (assignment -> VARIABLE ASIG expression .)
    SWITCH          reduce using rule 36 (assignment -> VARIABLE ASIG expression .)
    LBRACKET        reduce using rule 36 (assignment -> VARIABLE ASIG expression .)
    BREAK           reduce using rule 36 (assignment -> VARIABLE ASIG expression .)
    RETURN          reduce using rule 36 (assignment -> VARIABLE ASIG expression .)
    $end            reduce using rule 36 (assignment -> VARIABLE ASIG expression .)
    RBRACE          reduce using rule 36 (assignment -> VARIABLE ASIG expression .)
    CASE            reduce using rule 36 (assignment -> VARIABLE ASIG expression .)
    DEFAULT         reduce using rule 36 (assignment -> VARIABLE ASIG expression .)
    SEMICOLON       reduce using rule 36 (assignment -> VARIABLE ASIG expression .)
    LBRACE          reduce using rule 36 (assignment -> VARIABLE ASIG expression .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114


state 83

    (109) map_declaration -> VARIABLE ASIG MAP . LBRACKET type RBRACKET type
    (110) map_declaration -> VARIABLE ASIG MAP . LBRACKET type RBRACKET type LBRACE map_params RBRACE
    (118) map_declaration_values -> VARIABLE ASIG MAP . LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE

    LBRACKET        shift and go to state 132


state 84

    (128) slice_declaration -> VARIABLE ASIG LBRACKET . RBRACKET type LBRACE slice_values RBRACE

    RBRACKET        shift and go to state 133


state 85

    (114) make_stmt -> VARIABLE ASIG MAKE . LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (115) make_stmt -> VARIABLE ASIG MAKE . LPAREN LBRACKET RBRACKET type RPAREN
    (116) make_expr -> MAKE . LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> MAKE . LPAREN LBRACKET RBRACKET type RPAREN

    LPAREN          shift and go to state 134


state 86

    (131) new_stmt -> VARIABLE ASIG NEW . LPAREN VARIABLE RPAREN

    LPAREN          shift and go to state 135


state 87

    (47) func_call -> VARIABLE LPAREN arg_list . RPAREN

    RPAREN          shift and go to state 136


state 88

    (48) func_call -> VARIABLE LPAREN RPAREN .

    VAR             reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    VARIABLE        reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    FMT             reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    CONTINUE        reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    FUNC            reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    IF              reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    FOR             reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    TYPE            reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    SWITCH          reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    LBRACKET        reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    BREAK           reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    RETURN          reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    $end            reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    RBRACE          reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    CASE            reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    DEFAULT         reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    TIMES           reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    DIVIDE          reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    PLUS            reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    MINUS           reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    AND             reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    OR              reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    EQ              reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    NE              reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    LT              reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    GT              reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    LE              reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    GE              reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    LBRACE          reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    SEMICOLON       reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    COMMA           reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    RPAREN          reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)
    COLON           reduce using rule 48 (func_call -> VARIABLE LPAREN RPAREN .)


state 89

    (52) arg_list -> expression .
    (53) arg_list -> expression . COMMA arg_list
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    RPAREN          reduce using rule 52 (arg_list -> expression .)
    COMMA           shift and go to state 137
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114


state 90

    (29) declaration -> VAR VARIABLE type .
    (30) declaration -> VAR VARIABLE type . ASIG expression
    (31) declaration -> VAR VARIABLE type . ASSIGN expression

    VAR             reduce using rule 29 (declaration -> VAR VARIABLE type .)
    VARIABLE        reduce using rule 29 (declaration -> VAR VARIABLE type .)
    FMT             reduce using rule 29 (declaration -> VAR VARIABLE type .)
    CONTINUE        reduce using rule 29 (declaration -> VAR VARIABLE type .)
    FUNC            reduce using rule 29 (declaration -> VAR VARIABLE type .)
    IF              reduce using rule 29 (declaration -> VAR VARIABLE type .)
    FOR             reduce using rule 29 (declaration -> VAR VARIABLE type .)
    TYPE            reduce using rule 29 (declaration -> VAR VARIABLE type .)
    SWITCH          reduce using rule 29 (declaration -> VAR VARIABLE type .)
    LBRACKET        reduce using rule 29 (declaration -> VAR VARIABLE type .)
    BREAK           reduce using rule 29 (declaration -> VAR VARIABLE type .)
    RETURN          reduce using rule 29 (declaration -> VAR VARIABLE type .)
    $end            reduce using rule 29 (declaration -> VAR VARIABLE type .)
    RBRACE          reduce using rule 29 (declaration -> VAR VARIABLE type .)
    CASE            reduce using rule 29 (declaration -> VAR VARIABLE type .)
    DEFAULT         reduce using rule 29 (declaration -> VAR VARIABLE type .)
    ASIG            shift and go to state 138
    ASSIGN          shift and go to state 139


state 91

    (123) array_declaration -> VAR VARIABLE ASSIGN . array_literal
    (124) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE

    LBRACKET        shift and go to state 41

    array_literal                  shift and go to state 140

state 92

    (108) map_declaration -> VAR VARIABLE MAP . LBRACKET type RBRACKET type

    LBRACKET        shift and go to state 141


state 93

    (122) array_declaration -> VAR VARIABLE LBRACKET . NUMBER RBRACKET type
    (127) slice_declaration -> VAR VARIABLE LBRACKET . RBRACKET type

    NUMBER          shift and go to state 142
    RBRACKET        shift and go to state 143


state 94

    (79) type -> INT_TYPE .

    ASIG            reduce using rule 79 (type -> INT_TYPE .)
    ASSIGN          reduce using rule 79 (type -> INT_TYPE .)
    VAR             reduce using rule 79 (type -> INT_TYPE .)
    VARIABLE        reduce using rule 79 (type -> INT_TYPE .)
    FMT             reduce using rule 79 (type -> INT_TYPE .)
    CONTINUE        reduce using rule 79 (type -> INT_TYPE .)
    FUNC            reduce using rule 79 (type -> INT_TYPE .)
    IF              reduce using rule 79 (type -> INT_TYPE .)
    FOR             reduce using rule 79 (type -> INT_TYPE .)
    TYPE            reduce using rule 79 (type -> INT_TYPE .)
    SWITCH          reduce using rule 79 (type -> INT_TYPE .)
    LBRACKET        reduce using rule 79 (type -> INT_TYPE .)
    BREAK           reduce using rule 79 (type -> INT_TYPE .)
    RETURN          reduce using rule 79 (type -> INT_TYPE .)
    $end            reduce using rule 79 (type -> INT_TYPE .)
    RBRACE          reduce using rule 79 (type -> INT_TYPE .)
    CASE            reduce using rule 79 (type -> INT_TYPE .)
    DEFAULT         reduce using rule 79 (type -> INT_TYPE .)
    LBRACE          reduce using rule 79 (type -> INT_TYPE .)
    RBRACKET        reduce using rule 79 (type -> INT_TYPE .)
    COMMA           reduce using rule 79 (type -> INT_TYPE .)
    RPAREN          reduce using rule 79 (type -> INT_TYPE .)
    INT_TYPE        reduce using rule 79 (type -> INT_TYPE .)
    FLOAT64_TYPE    reduce using rule 79 (type -> INT_TYPE .)
    STRING_TYPE     reduce using rule 79 (type -> INT_TYPE .)
    BOOL_TYPE       reduce using rule 79 (type -> INT_TYPE .)


state 95

    (80) type -> FLOAT64_TYPE .

    ASIG            reduce using rule 80 (type -> FLOAT64_TYPE .)
    ASSIGN          reduce using rule 80 (type -> FLOAT64_TYPE .)
    VAR             reduce using rule 80 (type -> FLOAT64_TYPE .)
    VARIABLE        reduce using rule 80 (type -> FLOAT64_TYPE .)
    FMT             reduce using rule 80 (type -> FLOAT64_TYPE .)
    CONTINUE        reduce using rule 80 (type -> FLOAT64_TYPE .)
    FUNC            reduce using rule 80 (type -> FLOAT64_TYPE .)
    IF              reduce using rule 80 (type -> FLOAT64_TYPE .)
    FOR             reduce using rule 80 (type -> FLOAT64_TYPE .)
    TYPE            reduce using rule 80 (type -> FLOAT64_TYPE .)
    SWITCH          reduce using rule 80 (type -> FLOAT64_TYPE .)
    LBRACKET        reduce using rule 80 (type -> FLOAT64_TYPE .)
    BREAK           reduce using rule 80 (type -> FLOAT64_TYPE .)
    RETURN          reduce using rule 80 (type -> FLOAT64_TYPE .)
    $end            reduce using rule 80 (type -> FLOAT64_TYPE .)
    RBRACE          reduce using rule 80 (type -> FLOAT64_TYPE .)
    CASE            reduce using rule 80 (type -> FLOAT64_TYPE .)
    DEFAULT         reduce using rule 80 (type -> FLOAT64_TYPE .)
    LBRACE          reduce using rule 80 (type -> FLOAT64_TYPE .)
    RBRACKET        reduce using rule 80 (type -> FLOAT64_TYPE .)
    COMMA           reduce using rule 80 (type -> FLOAT64_TYPE .)
    RPAREN          reduce using rule 80 (type -> FLOAT64_TYPE .)
    INT_TYPE        reduce using rule 80 (type -> FLOAT64_TYPE .)
    FLOAT64_TYPE    reduce using rule 80 (type -> FLOAT64_TYPE .)
    STRING_TYPE     reduce using rule 80 (type -> FLOAT64_TYPE .)
    BOOL_TYPE       reduce using rule 80 (type -> FLOAT64_TYPE .)


state 96

    (81) type -> STRING_TYPE .

    ASIG            reduce using rule 81 (type -> STRING_TYPE .)
    ASSIGN          reduce using rule 81 (type -> STRING_TYPE .)
    VAR             reduce using rule 81 (type -> STRING_TYPE .)
    VARIABLE        reduce using rule 81 (type -> STRING_TYPE .)
    FMT             reduce using rule 81 (type -> STRING_TYPE .)
    CONTINUE        reduce using rule 81 (type -> STRING_TYPE .)
    FUNC            reduce using rule 81 (type -> STRING_TYPE .)
    IF              reduce using rule 81 (type -> STRING_TYPE .)
    FOR             reduce using rule 81 (type -> STRING_TYPE .)
    TYPE            reduce using rule 81 (type -> STRING_TYPE .)
    SWITCH          reduce using rule 81 (type -> STRING_TYPE .)
    LBRACKET        reduce using rule 81 (type -> STRING_TYPE .)
    BREAK           reduce using rule 81 (type -> STRING_TYPE .)
    RETURN          reduce using rule 81 (type -> STRING_TYPE .)
    $end            reduce using rule 81 (type -> STRING_TYPE .)
    RBRACE          reduce using rule 81 (type -> STRING_TYPE .)
    CASE            reduce using rule 81 (type -> STRING_TYPE .)
    DEFAULT         reduce using rule 81 (type -> STRING_TYPE .)
    LBRACE          reduce using rule 81 (type -> STRING_TYPE .)
    RBRACKET        reduce using rule 81 (type -> STRING_TYPE .)
    COMMA           reduce using rule 81 (type -> STRING_TYPE .)
    RPAREN          reduce using rule 81 (type -> STRING_TYPE .)
    INT_TYPE        reduce using rule 81 (type -> STRING_TYPE .)
    FLOAT64_TYPE    reduce using rule 81 (type -> STRING_TYPE .)
    STRING_TYPE     reduce using rule 81 (type -> STRING_TYPE .)
    BOOL_TYPE       reduce using rule 81 (type -> STRING_TYPE .)


state 97

    (82) type -> BOOL_TYPE .

    ASIG            reduce using rule 82 (type -> BOOL_TYPE .)
    ASSIGN          reduce using rule 82 (type -> BOOL_TYPE .)
    VAR             reduce using rule 82 (type -> BOOL_TYPE .)
    VARIABLE        reduce using rule 82 (type -> BOOL_TYPE .)
    FMT             reduce using rule 82 (type -> BOOL_TYPE .)
    CONTINUE        reduce using rule 82 (type -> BOOL_TYPE .)
    FUNC            reduce using rule 82 (type -> BOOL_TYPE .)
    IF              reduce using rule 82 (type -> BOOL_TYPE .)
    FOR             reduce using rule 82 (type -> BOOL_TYPE .)
    TYPE            reduce using rule 82 (type -> BOOL_TYPE .)
    SWITCH          reduce using rule 82 (type -> BOOL_TYPE .)
    LBRACKET        reduce using rule 82 (type -> BOOL_TYPE .)
    BREAK           reduce using rule 82 (type -> BOOL_TYPE .)
    RETURN          reduce using rule 82 (type -> BOOL_TYPE .)
    $end            reduce using rule 82 (type -> BOOL_TYPE .)
    RBRACE          reduce using rule 82 (type -> BOOL_TYPE .)
    CASE            reduce using rule 82 (type -> BOOL_TYPE .)
    DEFAULT         reduce using rule 82 (type -> BOOL_TYPE .)
    LBRACE          reduce using rule 82 (type -> BOOL_TYPE .)
    RBRACKET        reduce using rule 82 (type -> BOOL_TYPE .)
    COMMA           reduce using rule 82 (type -> BOOL_TYPE .)
    RPAREN          reduce using rule 82 (type -> BOOL_TYPE .)
    INT_TYPE        reduce using rule 82 (type -> BOOL_TYPE .)
    FLOAT64_TYPE    reduce using rule 82 (type -> BOOL_TYPE .)
    STRING_TYPE     reduce using rule 82 (type -> BOOL_TYPE .)
    BOOL_TYPE       reduce using rule 82 (type -> BOOL_TYPE .)


state 98

    (37) print_stmt -> FMT DOT PRINTF . LPAREN STRING COMMA expression RPAREN

    LPAREN          shift and go to state 144


state 99

    (38) print_stmt -> FMT DOT PRINTLN . LPAREN expression RPAREN
    (39) print_stmt -> FMT DOT PRINTLN . LPAREN STRING COMMA VARIABLE RPAREN

    LPAREN          shift and go to state 145


state 100

    (40) input_stmt -> FMT DOT SCANLN . LPAREN AMPER VARIABLE RPAREN

    LPAREN          shift and go to state 146


state 101

    (91) struct_method -> FUNC LPAREN VARIABLE . VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (92) struct_method -> FUNC LPAREN VARIABLE . VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE

    VARIABLE        shift and go to state 147


state 102

    (45) func_no_params -> FUNC VARIABLE LPAREN . RPAREN type LBRACE program RBRACE
    (46) func_no_params -> FUNC VARIABLE LPAREN . RPAREN LBRACE program RBRACE
    (42) func_header -> FUNC VARIABLE LPAREN . param_list RPAREN type
    (49) param_list -> . param
    (50) param_list -> . param COMMA param_list
    (51) param -> . VARIABLE type

    RPAREN          shift and go to state 149
    VARIABLE        shift and go to state 148

    param_list                     shift and go to state 150
    param                          shift and go to state 151

state 103

    (43) func_body -> LBRACE program . RBRACE

    RBRACE          shift and go to state 152


state 104

    (83) if_stmt -> IF expression block .
    (84) if_stmt -> IF expression block . ELSE block

    VAR             reduce using rule 83 (if_stmt -> IF expression block .)
    VARIABLE        reduce using rule 83 (if_stmt -> IF expression block .)
    FMT             reduce using rule 83 (if_stmt -> IF expression block .)
    CONTINUE        reduce using rule 83 (if_stmt -> IF expression block .)
    FUNC            reduce using rule 83 (if_stmt -> IF expression block .)
    IF              reduce using rule 83 (if_stmt -> IF expression block .)
    FOR             reduce using rule 83 (if_stmt -> IF expression block .)
    TYPE            reduce using rule 83 (if_stmt -> IF expression block .)
    SWITCH          reduce using rule 83 (if_stmt -> IF expression block .)
    LBRACKET        reduce using rule 83 (if_stmt -> IF expression block .)
    BREAK           reduce using rule 83 (if_stmt -> IF expression block .)
    RETURN          reduce using rule 83 (if_stmt -> IF expression block .)
    $end            reduce using rule 83 (if_stmt -> IF expression block .)
    RBRACE          reduce using rule 83 (if_stmt -> IF expression block .)
    CASE            reduce using rule 83 (if_stmt -> IF expression block .)
    DEFAULT         reduce using rule 83 (if_stmt -> IF expression block .)
    ELSE            shift and go to state 153


state 105

    (55) expression -> expression PLUS . term
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    VARIABLE        shift and go to state 155
    NUMBER          shift and go to state 156
    FLOAT           shift and go to state 157
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    term                           shift and go to state 154
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 106

    (56) expression -> expression MINUS . term
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    VARIABLE        shift and go to state 155
    NUMBER          shift and go to state 156
    FLOAT           shift and go to state 157
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    term                           shift and go to state 158
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 107

    (57) expression -> expression AND . expression
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 159
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 108

    (58) expression -> expression OR . expression
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 160
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 109

    (59) expression -> expression EQ . expression
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 161
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 110

    (60) expression -> expression NE . expression
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 162
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 111

    (61) expression -> expression LT . expression
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 163
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 112

    (62) expression -> expression GT . expression
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 164
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 113

    (63) expression -> expression LE . expression
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 165
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 114

    (64) expression -> expression GE . expression
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 166
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 115

    (90) block -> LBRACE . program RBRACE
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_call
    (15) statement -> . if_stmt
    (16) statement -> . for_stmt
    (17) statement -> . struct_def
    (18) statement -> . switch_stmt
    (19) statement -> . map_declaration
    (20) statement -> . map_declaration_values
    (21) statement -> . array_declaration
    (22) statement -> . array_literal
    (23) statement -> . slice_declaration
    (24) statement -> . make_stmt
    (25) statement -> . new_stmt
    (26) statement -> . break_stmt
    (27) statement -> . increment_stmt
    (28) statement -> . return_stmt
    (29) declaration -> . VAR VARIABLE type
    (30) declaration -> . VAR VARIABLE type ASIG expression
    (31) declaration -> . VAR VARIABLE type ASSIGN expression
    (35) assignment -> . VARIABLE ASSIGN expression
    (36) assignment -> . VARIABLE ASIG expression
    (37) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (38) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (39) print_stmt -> . FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN
    (40) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (87) continue_stmt -> . CONTINUE
    (91) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (92) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (41) func_def -> . func_header func_body
    (45) func_no_params -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (46) func_no_params -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN
    (83) if_stmt -> . IF expression block
    (84) if_stmt -> . IF expression block ELSE block
    (85) for_stmt -> . FOR expression block
    (86) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (93) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (102) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (103) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (108) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (109) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (110) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE
    (118) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (122) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (123) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (124) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (127) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (128) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (114) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (115) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (131) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (132) break_stmt -> . BREAK
    (133) increment_stmt -> . VARIABLE INCREMENT
    (134) increment_stmt -> . VARIABLE DECREMENT
    (44) return_stmt -> . RETURN expression
    (42) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type

    VAR             shift and go to state 32
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 33
    CONTINUE        shift and go to state 34
    FUNC            shift and go to state 35
    IF              shift and go to state 37
    FOR             shift and go to state 38
    TYPE            shift and go to state 39
    SWITCH          shift and go to state 40
    LBRACKET        shift and go to state 41
    BREAK           shift and go to state 42
    RETURN          shift and go to state 43

    program                        shift and go to state 167
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_call                      shift and go to state 17
    if_stmt                        shift and go to state 18
    for_stmt                       shift and go to state 19
    struct_def                     shift and go to state 20
    switch_stmt                    shift and go to state 21
    map_declaration                shift and go to state 22
    map_declaration_values         shift and go to state 23
    array_declaration              shift and go to state 24
    array_literal                  shift and go to state 25
    slice_declaration              shift and go to state 26
    make_stmt                      shift and go to state 27
    new_stmt                       shift and go to state 28
    break_stmt                     shift and go to state 29
    increment_stmt                 shift and go to state 30
    return_stmt                    shift and go to state 31
    func_header                    shift and go to state 36

state 116

    (98) struct_instance -> VARIABLE LBRACE . struct_fields_values RBRACE
    (99) struct_fields_values -> . field_value
    (100) struct_fields_values -> . field_value COMMA struct_fields_values
    (101) field_value -> . VARIABLE COLON expression

    VARIABLE        shift and go to state 168

    struct_fields_values           shift and go to state 169
    field_value                    shift and go to state 170

state 117

    (66) term -> term TIMES . factor
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 156
    FLOAT           shift and go to state 157
    STRING          shift and go to state 64
    VARIABLE        shift and go to state 172
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    factor                         shift and go to state 171
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 118

    (67) term -> term DIVIDE . factor
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 156
    FLOAT           shift and go to state 157
    STRING          shift and go to state 64
    VARIABLE        shift and go to state 172
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    factor                         shift and go to state 173
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 119

    (75) factor -> LPAREN expression . RPAREN
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    RPAREN          shift and go to state 174
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114


state 120

    (116) make_expr -> MAKE LPAREN . MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> MAKE LPAREN . LBRACKET RBRACKET type RPAREN

    MAP             shift and go to state 175
    LBRACKET        shift and go to state 176


state 121

    (85) for_stmt -> FOR expression block .

    VAR             reduce using rule 85 (for_stmt -> FOR expression block .)
    VARIABLE        reduce using rule 85 (for_stmt -> FOR expression block .)
    FMT             reduce using rule 85 (for_stmt -> FOR expression block .)
    CONTINUE        reduce using rule 85 (for_stmt -> FOR expression block .)
    FUNC            reduce using rule 85 (for_stmt -> FOR expression block .)
    IF              reduce using rule 85 (for_stmt -> FOR expression block .)
    FOR             reduce using rule 85 (for_stmt -> FOR expression block .)
    TYPE            reduce using rule 85 (for_stmt -> FOR expression block .)
    SWITCH          reduce using rule 85 (for_stmt -> FOR expression block .)
    LBRACKET        reduce using rule 85 (for_stmt -> FOR expression block .)
    BREAK           reduce using rule 85 (for_stmt -> FOR expression block .)
    RETURN          reduce using rule 85 (for_stmt -> FOR expression block .)
    $end            reduce using rule 85 (for_stmt -> FOR expression block .)
    RBRACE          reduce using rule 85 (for_stmt -> FOR expression block .)
    CASE            reduce using rule 85 (for_stmt -> FOR expression block .)
    DEFAULT         reduce using rule 85 (for_stmt -> FOR expression block .)


state 122

    (86) for_stmt -> FOR assignment SEMICOLON . expression SEMICOLON for_update block
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 177
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 123

    (36) assignment -> VARIABLE ASIG . expression
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 82
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 124

    (93) struct_def -> TYPE VARIABLE STRUCT . LBRACE struct_fields RBRACE

    LBRACE          shift and go to state 178


state 125

    (102) switch_stmt -> SWITCH expression LBRACE . case_list RBRACE
    (104) case_list -> . case_clause
    (105) case_list -> . case_clause case_list
    (106) case_clause -> . CASE expression COLON program
    (107) case_clause -> . DEFAULT COLON program

    CASE            shift and go to state 128
    DEFAULT         shift and go to state 129

    case_list                      shift and go to state 179
    case_clause                    shift and go to state 127

state 126

    (103) switch_stmt -> SWITCH LBRACE case_list . RBRACE

    RBRACE          shift and go to state 180


state 127

    (104) case_list -> case_clause .
    (105) case_list -> case_clause . case_list
    (104) case_list -> . case_clause
    (105) case_list -> . case_clause case_list
    (106) case_clause -> . CASE expression COLON program
    (107) case_clause -> . DEFAULT COLON program

    RBRACE          reduce using rule 104 (case_list -> case_clause .)
    CASE            shift and go to state 128
    DEFAULT         shift and go to state 129

    case_clause                    shift and go to state 127
    case_list                      shift and go to state 181

state 128

    (106) case_clause -> CASE . expression COLON program
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 182
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 129

    (107) case_clause -> DEFAULT . COLON program

    COLON           shift and go to state 183


state 130

    (124) array_literal -> LBRACKET NUMBER RBRACKET . type LBRACE array_values RBRACE
    (79) type -> . INT_TYPE
    (80) type -> . FLOAT64_TYPE
    (81) type -> . STRING_TYPE
    (82) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 94
    FLOAT64_TYPE    shift and go to state 95
    STRING_TYPE     shift and go to state 96
    BOOL_TYPE       shift and go to state 97

    type                           shift and go to state 184

state 131

    (2) import_stmt -> IMPORT LPAREN STRING RPAREN .

    VAR             reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    VARIABLE        reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    FMT             reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    CONTINUE        reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    FUNC            reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    IF              reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    FOR             reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    TYPE            reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    SWITCH          reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    LBRACKET        reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    BREAK           reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)
    RETURN          reduce using rule 2 (import_stmt -> IMPORT LPAREN STRING RPAREN .)


state 132

    (109) map_declaration -> VARIABLE ASIG MAP LBRACKET . type RBRACKET type
    (110) map_declaration -> VARIABLE ASIG MAP LBRACKET . type RBRACKET type LBRACE map_params RBRACE
    (118) map_declaration_values -> VARIABLE ASIG MAP LBRACKET . type RBRACKET type LBRACE map_kv_pairs RBRACE
    (79) type -> . INT_TYPE
    (80) type -> . FLOAT64_TYPE
    (81) type -> . STRING_TYPE
    (82) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 94
    FLOAT64_TYPE    shift and go to state 95
    STRING_TYPE     shift and go to state 96
    BOOL_TYPE       shift and go to state 97

    type                           shift and go to state 185

state 133

    (128) slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET . type LBRACE slice_values RBRACE
    (79) type -> . INT_TYPE
    (80) type -> . FLOAT64_TYPE
    (81) type -> . STRING_TYPE
    (82) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 94
    FLOAT64_TYPE    shift and go to state 95
    STRING_TYPE     shift and go to state 96
    BOOL_TYPE       shift and go to state 97

    type                           shift and go to state 186

state 134

    (114) make_stmt -> VARIABLE ASIG MAKE LPAREN . MAP LBRACKET type RBRACKET type RPAREN
    (115) make_stmt -> VARIABLE ASIG MAKE LPAREN . LBRACKET RBRACKET type RPAREN
    (116) make_expr -> MAKE LPAREN . MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> MAKE LPAREN . LBRACKET RBRACKET type RPAREN

    MAP             shift and go to state 187
    LBRACKET        shift and go to state 188


state 135

    (131) new_stmt -> VARIABLE ASIG NEW LPAREN . VARIABLE RPAREN

    VARIABLE        shift and go to state 189


state 136

    (47) func_call -> VARIABLE LPAREN arg_list RPAREN .

    VAR             reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    VARIABLE        reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    FMT             reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    CONTINUE        reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    FUNC            reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    IF              reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    FOR             reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    TYPE            reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    SWITCH          reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    LBRACKET        reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    BREAK           reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    RETURN          reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    $end            reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    RBRACE          reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    CASE            reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    DEFAULT         reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    TIMES           reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    DIVIDE          reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    PLUS            reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    AND             reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    OR              reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    EQ              reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    NE              reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    LT              reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    GT              reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    LE              reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    GE              reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    LBRACE          reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    SEMICOLON       reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    COMMA           reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    RPAREN          reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)
    COLON           reduce using rule 47 (func_call -> VARIABLE LPAREN arg_list RPAREN .)


state 137

    (53) arg_list -> expression COMMA . arg_list
    (52) arg_list -> . expression
    (53) arg_list -> . expression COMMA arg_list
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 89
    arg_list                       shift and go to state 190
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 138

    (30) declaration -> VAR VARIABLE type ASIG . expression
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 191
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 139

    (31) declaration -> VAR VARIABLE type ASSIGN . expression
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 192
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 140

    (123) array_declaration -> VAR VARIABLE ASSIGN array_literal .

    VAR             reduce using rule 123 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    VARIABLE        reduce using rule 123 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    FMT             reduce using rule 123 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    CONTINUE        reduce using rule 123 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    FUNC            reduce using rule 123 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    IF              reduce using rule 123 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    FOR             reduce using rule 123 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    TYPE            reduce using rule 123 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    SWITCH          reduce using rule 123 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    LBRACKET        reduce using rule 123 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    BREAK           reduce using rule 123 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    RETURN          reduce using rule 123 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    $end            reduce using rule 123 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    RBRACE          reduce using rule 123 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    CASE            reduce using rule 123 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)
    DEFAULT         reduce using rule 123 (array_declaration -> VAR VARIABLE ASSIGN array_literal .)


state 141

    (108) map_declaration -> VAR VARIABLE MAP LBRACKET . type RBRACKET type
    (79) type -> . INT_TYPE
    (80) type -> . FLOAT64_TYPE
    (81) type -> . STRING_TYPE
    (82) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 94
    FLOAT64_TYPE    shift and go to state 95
    STRING_TYPE     shift and go to state 96
    BOOL_TYPE       shift and go to state 97

    type                           shift and go to state 193

state 142

    (122) array_declaration -> VAR VARIABLE LBRACKET NUMBER . RBRACKET type

    RBRACKET        shift and go to state 194


state 143

    (127) slice_declaration -> VAR VARIABLE LBRACKET RBRACKET . type
    (79) type -> . INT_TYPE
    (80) type -> . FLOAT64_TYPE
    (81) type -> . STRING_TYPE
    (82) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 94
    FLOAT64_TYPE    shift and go to state 95
    STRING_TYPE     shift and go to state 96
    BOOL_TYPE       shift and go to state 97

    type                           shift and go to state 195

state 144

    (37) print_stmt -> FMT DOT PRINTF LPAREN . STRING COMMA expression RPAREN

    STRING          shift and go to state 196


state 145

    (38) print_stmt -> FMT DOT PRINTLN LPAREN . expression RPAREN
    (39) print_stmt -> FMT DOT PRINTLN LPAREN . STRING COMMA VARIABLE RPAREN
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    STRING          shift and go to state 198
    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 197
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 146

    (40) input_stmt -> FMT DOT SCANLN LPAREN . AMPER VARIABLE RPAREN

    AMPER           shift and go to state 199


state 147

    (91) struct_method -> FUNC LPAREN VARIABLE VARIABLE . RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (92) struct_method -> FUNC LPAREN VARIABLE VARIABLE . RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE

    RPAREN          shift and go to state 200


state 148

    (51) param -> VARIABLE . type
    (79) type -> . INT_TYPE
    (80) type -> . FLOAT64_TYPE
    (81) type -> . STRING_TYPE
    (82) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 94
    FLOAT64_TYPE    shift and go to state 95
    STRING_TYPE     shift and go to state 96
    BOOL_TYPE       shift and go to state 97

    type                           shift and go to state 201

state 149

    (45) func_no_params -> FUNC VARIABLE LPAREN RPAREN . type LBRACE program RBRACE
    (46) func_no_params -> FUNC VARIABLE LPAREN RPAREN . LBRACE program RBRACE
    (79) type -> . INT_TYPE
    (80) type -> . FLOAT64_TYPE
    (81) type -> . STRING_TYPE
    (82) type -> . BOOL_TYPE

    LBRACE          shift and go to state 203
    INT_TYPE        shift and go to state 94
    FLOAT64_TYPE    shift and go to state 95
    STRING_TYPE     shift and go to state 96
    BOOL_TYPE       shift and go to state 97

    type                           shift and go to state 202

state 150

    (42) func_header -> FUNC VARIABLE LPAREN param_list . RPAREN type

    RPAREN          shift and go to state 204


state 151

    (49) param_list -> param .
    (50) param_list -> param . COMMA param_list

    RPAREN          reduce using rule 49 (param_list -> param .)
    COMMA           shift and go to state 205


state 152

    (43) func_body -> LBRACE program RBRACE .

    VAR             reduce using rule 43 (func_body -> LBRACE program RBRACE .)
    VARIABLE        reduce using rule 43 (func_body -> LBRACE program RBRACE .)
    FMT             reduce using rule 43 (func_body -> LBRACE program RBRACE .)
    CONTINUE        reduce using rule 43 (func_body -> LBRACE program RBRACE .)
    FUNC            reduce using rule 43 (func_body -> LBRACE program RBRACE .)
    IF              reduce using rule 43 (func_body -> LBRACE program RBRACE .)
    FOR             reduce using rule 43 (func_body -> LBRACE program RBRACE .)
    TYPE            reduce using rule 43 (func_body -> LBRACE program RBRACE .)
    SWITCH          reduce using rule 43 (func_body -> LBRACE program RBRACE .)
    LBRACKET        reduce using rule 43 (func_body -> LBRACE program RBRACE .)
    BREAK           reduce using rule 43 (func_body -> LBRACE program RBRACE .)
    RETURN          reduce using rule 43 (func_body -> LBRACE program RBRACE .)
    $end            reduce using rule 43 (func_body -> LBRACE program RBRACE .)
    RBRACE          reduce using rule 43 (func_body -> LBRACE program RBRACE .)
    CASE            reduce using rule 43 (func_body -> LBRACE program RBRACE .)
    DEFAULT         reduce using rule 43 (func_body -> LBRACE program RBRACE .)


state 153

    (84) if_stmt -> IF expression block ELSE . block
    (90) block -> . LBRACE program RBRACE

    LBRACE          shift and go to state 115

    block                          shift and go to state 206

state 154

    (55) expression -> expression PLUS term .
    (66) term -> term . TIMES factor
    (67) term -> term . DIVIDE factor

    PLUS            reduce using rule 55 (expression -> expression PLUS term .)
    MINUS           reduce using rule 55 (expression -> expression PLUS term .)
    AND             reduce using rule 55 (expression -> expression PLUS term .)
    OR              reduce using rule 55 (expression -> expression PLUS term .)
    EQ              reduce using rule 55 (expression -> expression PLUS term .)
    NE              reduce using rule 55 (expression -> expression PLUS term .)
    LT              reduce using rule 55 (expression -> expression PLUS term .)
    GT              reduce using rule 55 (expression -> expression PLUS term .)
    LE              reduce using rule 55 (expression -> expression PLUS term .)
    GE              reduce using rule 55 (expression -> expression PLUS term .)
    LBRACE          reduce using rule 55 (expression -> expression PLUS term .)
    VAR             reduce using rule 55 (expression -> expression PLUS term .)
    VARIABLE        reduce using rule 55 (expression -> expression PLUS term .)
    FMT             reduce using rule 55 (expression -> expression PLUS term .)
    CONTINUE        reduce using rule 55 (expression -> expression PLUS term .)
    FUNC            reduce using rule 55 (expression -> expression PLUS term .)
    IF              reduce using rule 55 (expression -> expression PLUS term .)
    FOR             reduce using rule 55 (expression -> expression PLUS term .)
    TYPE            reduce using rule 55 (expression -> expression PLUS term .)
    SWITCH          reduce using rule 55 (expression -> expression PLUS term .)
    LBRACKET        reduce using rule 55 (expression -> expression PLUS term .)
    BREAK           reduce using rule 55 (expression -> expression PLUS term .)
    RETURN          reduce using rule 55 (expression -> expression PLUS term .)
    $end            reduce using rule 55 (expression -> expression PLUS term .)
    RBRACE          reduce using rule 55 (expression -> expression PLUS term .)
    CASE            reduce using rule 55 (expression -> expression PLUS term .)
    DEFAULT         reduce using rule 55 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 55 (expression -> expression PLUS term .)
    COMMA           reduce using rule 55 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 55 (expression -> expression PLUS term .)
    COLON           reduce using rule 55 (expression -> expression PLUS term .)
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 118


state 155

    (68) term -> VARIABLE .
    (72) factor -> VARIABLE .
    (98) struct_instance -> VARIABLE . LBRACE struct_fields_values RBRACE
    (47) func_call -> VARIABLE . LPAREN arg_list RPAREN
    (48) func_call -> VARIABLE . LPAREN RPAREN

  ! reduce/reduce conflict for TIMES resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for PLUS resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for MINUS resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for AND resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for OR resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for EQ resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for NE resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for LT resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for GT resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for LE resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for GE resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for LBRACE resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for VAR resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for FMT resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for FUNC resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for IF resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for FOR resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for TYPE resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for SWITCH resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for BREAK resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for RETURN resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for $end resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for CASE resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for COLON resolved using rule 68 (term -> VARIABLE .)
  ! shift/reduce conflict for LBRACE resolved as shift
    TIMES           reduce using rule 68 (term -> VARIABLE .)
    DIVIDE          reduce using rule 68 (term -> VARIABLE .)
    PLUS            reduce using rule 68 (term -> VARIABLE .)
    MINUS           reduce using rule 68 (term -> VARIABLE .)
    AND             reduce using rule 68 (term -> VARIABLE .)
    OR              reduce using rule 68 (term -> VARIABLE .)
    EQ              reduce using rule 68 (term -> VARIABLE .)
    NE              reduce using rule 68 (term -> VARIABLE .)
    LT              reduce using rule 68 (term -> VARIABLE .)
    GT              reduce using rule 68 (term -> VARIABLE .)
    LE              reduce using rule 68 (term -> VARIABLE .)
    GE              reduce using rule 68 (term -> VARIABLE .)
    VAR             reduce using rule 68 (term -> VARIABLE .)
    VARIABLE        reduce using rule 68 (term -> VARIABLE .)
    FMT             reduce using rule 68 (term -> VARIABLE .)
    CONTINUE        reduce using rule 68 (term -> VARIABLE .)
    FUNC            reduce using rule 68 (term -> VARIABLE .)
    IF              reduce using rule 68 (term -> VARIABLE .)
    FOR             reduce using rule 68 (term -> VARIABLE .)
    TYPE            reduce using rule 68 (term -> VARIABLE .)
    SWITCH          reduce using rule 68 (term -> VARIABLE .)
    LBRACKET        reduce using rule 68 (term -> VARIABLE .)
    BREAK           reduce using rule 68 (term -> VARIABLE .)
    RETURN          reduce using rule 68 (term -> VARIABLE .)
    $end            reduce using rule 68 (term -> VARIABLE .)
    RBRACE          reduce using rule 68 (term -> VARIABLE .)
    CASE            reduce using rule 68 (term -> VARIABLE .)
    DEFAULT         reduce using rule 68 (term -> VARIABLE .)
    SEMICOLON       reduce using rule 68 (term -> VARIABLE .)
    COMMA           reduce using rule 68 (term -> VARIABLE .)
    RPAREN          reduce using rule 68 (term -> VARIABLE .)
    COLON           reduce using rule 68 (term -> VARIABLE .)
    LBRACE          shift and go to state 116
    LPAREN          shift and go to state 48

  ! LBRACE          [ reduce using rule 68 (term -> VARIABLE .) ]
  ! TIMES           [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! PLUS            [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! AND             [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! OR              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! EQ              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! NE              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! LT              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! GT              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! LE              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! GE              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! LBRACE          [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! VAR             [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! VARIABLE        [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! FMT             [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! CONTINUE        [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! FUNC            [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! IF              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! FOR             [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! TYPE            [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! SWITCH          [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! LBRACKET        [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! BREAK           [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! RETURN          [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! $end            [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! RBRACE          [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! CASE            [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! DEFAULT         [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! SEMICOLON       [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! RPAREN          [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! COLON           [ reduce using rule 72 (factor -> VARIABLE .) ]


state 156

    (69) factor -> NUMBER .

    TIMES           reduce using rule 69 (factor -> NUMBER .)
    DIVIDE          reduce using rule 69 (factor -> NUMBER .)
    PLUS            reduce using rule 69 (factor -> NUMBER .)
    MINUS           reduce using rule 69 (factor -> NUMBER .)
    AND             reduce using rule 69 (factor -> NUMBER .)
    OR              reduce using rule 69 (factor -> NUMBER .)
    EQ              reduce using rule 69 (factor -> NUMBER .)
    NE              reduce using rule 69 (factor -> NUMBER .)
    LT              reduce using rule 69 (factor -> NUMBER .)
    GT              reduce using rule 69 (factor -> NUMBER .)
    LE              reduce using rule 69 (factor -> NUMBER .)
    GE              reduce using rule 69 (factor -> NUMBER .)
    LBRACE          reduce using rule 69 (factor -> NUMBER .)
    VAR             reduce using rule 69 (factor -> NUMBER .)
    VARIABLE        reduce using rule 69 (factor -> NUMBER .)
    FMT             reduce using rule 69 (factor -> NUMBER .)
    CONTINUE        reduce using rule 69 (factor -> NUMBER .)
    FUNC            reduce using rule 69 (factor -> NUMBER .)
    IF              reduce using rule 69 (factor -> NUMBER .)
    FOR             reduce using rule 69 (factor -> NUMBER .)
    TYPE            reduce using rule 69 (factor -> NUMBER .)
    SWITCH          reduce using rule 69 (factor -> NUMBER .)
    LBRACKET        reduce using rule 69 (factor -> NUMBER .)
    BREAK           reduce using rule 69 (factor -> NUMBER .)
    RETURN          reduce using rule 69 (factor -> NUMBER .)
    $end            reduce using rule 69 (factor -> NUMBER .)
    RBRACE          reduce using rule 69 (factor -> NUMBER .)
    CASE            reduce using rule 69 (factor -> NUMBER .)
    DEFAULT         reduce using rule 69 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 69 (factor -> NUMBER .)
    COMMA           reduce using rule 69 (factor -> NUMBER .)
    RPAREN          reduce using rule 69 (factor -> NUMBER .)
    COLON           reduce using rule 69 (factor -> NUMBER .)


state 157

    (70) factor -> FLOAT .

    TIMES           reduce using rule 70 (factor -> FLOAT .)
    DIVIDE          reduce using rule 70 (factor -> FLOAT .)
    PLUS            reduce using rule 70 (factor -> FLOAT .)
    MINUS           reduce using rule 70 (factor -> FLOAT .)
    AND             reduce using rule 70 (factor -> FLOAT .)
    OR              reduce using rule 70 (factor -> FLOAT .)
    EQ              reduce using rule 70 (factor -> FLOAT .)
    NE              reduce using rule 70 (factor -> FLOAT .)
    LT              reduce using rule 70 (factor -> FLOAT .)
    GT              reduce using rule 70 (factor -> FLOAT .)
    LE              reduce using rule 70 (factor -> FLOAT .)
    GE              reduce using rule 70 (factor -> FLOAT .)
    LBRACE          reduce using rule 70 (factor -> FLOAT .)
    VAR             reduce using rule 70 (factor -> FLOAT .)
    VARIABLE        reduce using rule 70 (factor -> FLOAT .)
    FMT             reduce using rule 70 (factor -> FLOAT .)
    CONTINUE        reduce using rule 70 (factor -> FLOAT .)
    FUNC            reduce using rule 70 (factor -> FLOAT .)
    IF              reduce using rule 70 (factor -> FLOAT .)
    FOR             reduce using rule 70 (factor -> FLOAT .)
    TYPE            reduce using rule 70 (factor -> FLOAT .)
    SWITCH          reduce using rule 70 (factor -> FLOAT .)
    LBRACKET        reduce using rule 70 (factor -> FLOAT .)
    BREAK           reduce using rule 70 (factor -> FLOAT .)
    RETURN          reduce using rule 70 (factor -> FLOAT .)
    $end            reduce using rule 70 (factor -> FLOAT .)
    RBRACE          reduce using rule 70 (factor -> FLOAT .)
    CASE            reduce using rule 70 (factor -> FLOAT .)
    DEFAULT         reduce using rule 70 (factor -> FLOAT .)
    SEMICOLON       reduce using rule 70 (factor -> FLOAT .)
    COMMA           reduce using rule 70 (factor -> FLOAT .)
    RPAREN          reduce using rule 70 (factor -> FLOAT .)
    COLON           reduce using rule 70 (factor -> FLOAT .)


state 158

    (56) expression -> expression MINUS term .
    (66) term -> term . TIMES factor
    (67) term -> term . DIVIDE factor

    PLUS            reduce using rule 56 (expression -> expression MINUS term .)
    MINUS           reduce using rule 56 (expression -> expression MINUS term .)
    AND             reduce using rule 56 (expression -> expression MINUS term .)
    OR              reduce using rule 56 (expression -> expression MINUS term .)
    EQ              reduce using rule 56 (expression -> expression MINUS term .)
    NE              reduce using rule 56 (expression -> expression MINUS term .)
    LT              reduce using rule 56 (expression -> expression MINUS term .)
    GT              reduce using rule 56 (expression -> expression MINUS term .)
    LE              reduce using rule 56 (expression -> expression MINUS term .)
    GE              reduce using rule 56 (expression -> expression MINUS term .)
    LBRACE          reduce using rule 56 (expression -> expression MINUS term .)
    VAR             reduce using rule 56 (expression -> expression MINUS term .)
    VARIABLE        reduce using rule 56 (expression -> expression MINUS term .)
    FMT             reduce using rule 56 (expression -> expression MINUS term .)
    CONTINUE        reduce using rule 56 (expression -> expression MINUS term .)
    FUNC            reduce using rule 56 (expression -> expression MINUS term .)
    IF              reduce using rule 56 (expression -> expression MINUS term .)
    FOR             reduce using rule 56 (expression -> expression MINUS term .)
    TYPE            reduce using rule 56 (expression -> expression MINUS term .)
    SWITCH          reduce using rule 56 (expression -> expression MINUS term .)
    LBRACKET        reduce using rule 56 (expression -> expression MINUS term .)
    BREAK           reduce using rule 56 (expression -> expression MINUS term .)
    RETURN          reduce using rule 56 (expression -> expression MINUS term .)
    $end            reduce using rule 56 (expression -> expression MINUS term .)
    RBRACE          reduce using rule 56 (expression -> expression MINUS term .)
    CASE            reduce using rule 56 (expression -> expression MINUS term .)
    DEFAULT         reduce using rule 56 (expression -> expression MINUS term .)
    SEMICOLON       reduce using rule 56 (expression -> expression MINUS term .)
    COMMA           reduce using rule 56 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 56 (expression -> expression MINUS term .)
    COLON           reduce using rule 56 (expression -> expression MINUS term .)
    TIMES           shift and go to state 117
    DIVIDE          shift and go to state 118


state 159

    (57) expression -> expression AND expression .
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 57 (expression -> expression AND expression .)
    VAR             reduce using rule 57 (expression -> expression AND expression .)
    VARIABLE        reduce using rule 57 (expression -> expression AND expression .)
    FMT             reduce using rule 57 (expression -> expression AND expression .)
    CONTINUE        reduce using rule 57 (expression -> expression AND expression .)
    FUNC            reduce using rule 57 (expression -> expression AND expression .)
    IF              reduce using rule 57 (expression -> expression AND expression .)
    FOR             reduce using rule 57 (expression -> expression AND expression .)
    TYPE            reduce using rule 57 (expression -> expression AND expression .)
    SWITCH          reduce using rule 57 (expression -> expression AND expression .)
    LBRACKET        reduce using rule 57 (expression -> expression AND expression .)
    BREAK           reduce using rule 57 (expression -> expression AND expression .)
    RETURN          reduce using rule 57 (expression -> expression AND expression .)
    $end            reduce using rule 57 (expression -> expression AND expression .)
    RBRACE          reduce using rule 57 (expression -> expression AND expression .)
    CASE            reduce using rule 57 (expression -> expression AND expression .)
    DEFAULT         reduce using rule 57 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 57 (expression -> expression AND expression .)
    COMMA           reduce using rule 57 (expression -> expression AND expression .)
    RPAREN          reduce using rule 57 (expression -> expression AND expression .)
    COLON           reduce using rule 57 (expression -> expression AND expression .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114

  ! PLUS            [ reduce using rule 57 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 57 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 57 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 57 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 57 (expression -> expression AND expression .) ]
  ! NE              [ reduce using rule 57 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 57 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 57 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 57 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 57 (expression -> expression AND expression .) ]


state 160

    (58) expression -> expression OR expression .
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 58 (expression -> expression OR expression .)
    VAR             reduce using rule 58 (expression -> expression OR expression .)
    VARIABLE        reduce using rule 58 (expression -> expression OR expression .)
    FMT             reduce using rule 58 (expression -> expression OR expression .)
    CONTINUE        reduce using rule 58 (expression -> expression OR expression .)
    FUNC            reduce using rule 58 (expression -> expression OR expression .)
    IF              reduce using rule 58 (expression -> expression OR expression .)
    FOR             reduce using rule 58 (expression -> expression OR expression .)
    TYPE            reduce using rule 58 (expression -> expression OR expression .)
    SWITCH          reduce using rule 58 (expression -> expression OR expression .)
    LBRACKET        reduce using rule 58 (expression -> expression OR expression .)
    BREAK           reduce using rule 58 (expression -> expression OR expression .)
    RETURN          reduce using rule 58 (expression -> expression OR expression .)
    $end            reduce using rule 58 (expression -> expression OR expression .)
    RBRACE          reduce using rule 58 (expression -> expression OR expression .)
    CASE            reduce using rule 58 (expression -> expression OR expression .)
    DEFAULT         reduce using rule 58 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 58 (expression -> expression OR expression .)
    COMMA           reduce using rule 58 (expression -> expression OR expression .)
    RPAREN          reduce using rule 58 (expression -> expression OR expression .)
    COLON           reduce using rule 58 (expression -> expression OR expression .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114

  ! PLUS            [ reduce using rule 58 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 58 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 58 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 58 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 58 (expression -> expression OR expression .) ]
  ! NE              [ reduce using rule 58 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 58 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 58 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 58 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 58 (expression -> expression OR expression .) ]


state 161

    (59) expression -> expression EQ expression .
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 59 (expression -> expression EQ expression .)
    VAR             reduce using rule 59 (expression -> expression EQ expression .)
    VARIABLE        reduce using rule 59 (expression -> expression EQ expression .)
    FMT             reduce using rule 59 (expression -> expression EQ expression .)
    CONTINUE        reduce using rule 59 (expression -> expression EQ expression .)
    FUNC            reduce using rule 59 (expression -> expression EQ expression .)
    IF              reduce using rule 59 (expression -> expression EQ expression .)
    FOR             reduce using rule 59 (expression -> expression EQ expression .)
    TYPE            reduce using rule 59 (expression -> expression EQ expression .)
    SWITCH          reduce using rule 59 (expression -> expression EQ expression .)
    LBRACKET        reduce using rule 59 (expression -> expression EQ expression .)
    BREAK           reduce using rule 59 (expression -> expression EQ expression .)
    RETURN          reduce using rule 59 (expression -> expression EQ expression .)
    $end            reduce using rule 59 (expression -> expression EQ expression .)
    RBRACE          reduce using rule 59 (expression -> expression EQ expression .)
    CASE            reduce using rule 59 (expression -> expression EQ expression .)
    DEFAULT         reduce using rule 59 (expression -> expression EQ expression .)
    SEMICOLON       reduce using rule 59 (expression -> expression EQ expression .)
    COMMA           reduce using rule 59 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 59 (expression -> expression EQ expression .)
    COLON           reduce using rule 59 (expression -> expression EQ expression .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114

  ! PLUS            [ reduce using rule 59 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 59 (expression -> expression EQ expression .) ]
  ! AND             [ reduce using rule 59 (expression -> expression EQ expression .) ]
  ! OR              [ reduce using rule 59 (expression -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 59 (expression -> expression EQ expression .) ]
  ! NE              [ reduce using rule 59 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 59 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 59 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 59 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 59 (expression -> expression EQ expression .) ]


state 162

    (60) expression -> expression NE expression .
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 60 (expression -> expression NE expression .)
    VAR             reduce using rule 60 (expression -> expression NE expression .)
    VARIABLE        reduce using rule 60 (expression -> expression NE expression .)
    FMT             reduce using rule 60 (expression -> expression NE expression .)
    CONTINUE        reduce using rule 60 (expression -> expression NE expression .)
    FUNC            reduce using rule 60 (expression -> expression NE expression .)
    IF              reduce using rule 60 (expression -> expression NE expression .)
    FOR             reduce using rule 60 (expression -> expression NE expression .)
    TYPE            reduce using rule 60 (expression -> expression NE expression .)
    SWITCH          reduce using rule 60 (expression -> expression NE expression .)
    LBRACKET        reduce using rule 60 (expression -> expression NE expression .)
    BREAK           reduce using rule 60 (expression -> expression NE expression .)
    RETURN          reduce using rule 60 (expression -> expression NE expression .)
    $end            reduce using rule 60 (expression -> expression NE expression .)
    RBRACE          reduce using rule 60 (expression -> expression NE expression .)
    CASE            reduce using rule 60 (expression -> expression NE expression .)
    DEFAULT         reduce using rule 60 (expression -> expression NE expression .)
    SEMICOLON       reduce using rule 60 (expression -> expression NE expression .)
    COMMA           reduce using rule 60 (expression -> expression NE expression .)
    RPAREN          reduce using rule 60 (expression -> expression NE expression .)
    COLON           reduce using rule 60 (expression -> expression NE expression .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114

  ! PLUS            [ reduce using rule 60 (expression -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 60 (expression -> expression NE expression .) ]
  ! AND             [ reduce using rule 60 (expression -> expression NE expression .) ]
  ! OR              [ reduce using rule 60 (expression -> expression NE expression .) ]
  ! EQ              [ reduce using rule 60 (expression -> expression NE expression .) ]
  ! NE              [ reduce using rule 60 (expression -> expression NE expression .) ]
  ! LT              [ reduce using rule 60 (expression -> expression NE expression .) ]
  ! GT              [ reduce using rule 60 (expression -> expression NE expression .) ]
  ! LE              [ reduce using rule 60 (expression -> expression NE expression .) ]
  ! GE              [ reduce using rule 60 (expression -> expression NE expression .) ]


state 163

    (61) expression -> expression LT expression .
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 61 (expression -> expression LT expression .)
    VAR             reduce using rule 61 (expression -> expression LT expression .)
    VARIABLE        reduce using rule 61 (expression -> expression LT expression .)
    FMT             reduce using rule 61 (expression -> expression LT expression .)
    CONTINUE        reduce using rule 61 (expression -> expression LT expression .)
    FUNC            reduce using rule 61 (expression -> expression LT expression .)
    IF              reduce using rule 61 (expression -> expression LT expression .)
    FOR             reduce using rule 61 (expression -> expression LT expression .)
    TYPE            reduce using rule 61 (expression -> expression LT expression .)
    SWITCH          reduce using rule 61 (expression -> expression LT expression .)
    LBRACKET        reduce using rule 61 (expression -> expression LT expression .)
    BREAK           reduce using rule 61 (expression -> expression LT expression .)
    RETURN          reduce using rule 61 (expression -> expression LT expression .)
    $end            reduce using rule 61 (expression -> expression LT expression .)
    RBRACE          reduce using rule 61 (expression -> expression LT expression .)
    CASE            reduce using rule 61 (expression -> expression LT expression .)
    DEFAULT         reduce using rule 61 (expression -> expression LT expression .)
    SEMICOLON       reduce using rule 61 (expression -> expression LT expression .)
    COMMA           reduce using rule 61 (expression -> expression LT expression .)
    RPAREN          reduce using rule 61 (expression -> expression LT expression .)
    COLON           reduce using rule 61 (expression -> expression LT expression .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114

  ! PLUS            [ reduce using rule 61 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 61 (expression -> expression LT expression .) ]
  ! AND             [ reduce using rule 61 (expression -> expression LT expression .) ]
  ! OR              [ reduce using rule 61 (expression -> expression LT expression .) ]
  ! EQ              [ reduce using rule 61 (expression -> expression LT expression .) ]
  ! NE              [ reduce using rule 61 (expression -> expression LT expression .) ]
  ! LT              [ reduce using rule 61 (expression -> expression LT expression .) ]
  ! GT              [ reduce using rule 61 (expression -> expression LT expression .) ]
  ! LE              [ reduce using rule 61 (expression -> expression LT expression .) ]
  ! GE              [ reduce using rule 61 (expression -> expression LT expression .) ]


state 164

    (62) expression -> expression GT expression .
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 62 (expression -> expression GT expression .)
    VAR             reduce using rule 62 (expression -> expression GT expression .)
    VARIABLE        reduce using rule 62 (expression -> expression GT expression .)
    FMT             reduce using rule 62 (expression -> expression GT expression .)
    CONTINUE        reduce using rule 62 (expression -> expression GT expression .)
    FUNC            reduce using rule 62 (expression -> expression GT expression .)
    IF              reduce using rule 62 (expression -> expression GT expression .)
    FOR             reduce using rule 62 (expression -> expression GT expression .)
    TYPE            reduce using rule 62 (expression -> expression GT expression .)
    SWITCH          reduce using rule 62 (expression -> expression GT expression .)
    LBRACKET        reduce using rule 62 (expression -> expression GT expression .)
    BREAK           reduce using rule 62 (expression -> expression GT expression .)
    RETURN          reduce using rule 62 (expression -> expression GT expression .)
    $end            reduce using rule 62 (expression -> expression GT expression .)
    RBRACE          reduce using rule 62 (expression -> expression GT expression .)
    CASE            reduce using rule 62 (expression -> expression GT expression .)
    DEFAULT         reduce using rule 62 (expression -> expression GT expression .)
    SEMICOLON       reduce using rule 62 (expression -> expression GT expression .)
    COMMA           reduce using rule 62 (expression -> expression GT expression .)
    RPAREN          reduce using rule 62 (expression -> expression GT expression .)
    COLON           reduce using rule 62 (expression -> expression GT expression .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114

  ! PLUS            [ reduce using rule 62 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 62 (expression -> expression GT expression .) ]
  ! AND             [ reduce using rule 62 (expression -> expression GT expression .) ]
  ! OR              [ reduce using rule 62 (expression -> expression GT expression .) ]
  ! EQ              [ reduce using rule 62 (expression -> expression GT expression .) ]
  ! NE              [ reduce using rule 62 (expression -> expression GT expression .) ]
  ! LT              [ reduce using rule 62 (expression -> expression GT expression .) ]
  ! GT              [ reduce using rule 62 (expression -> expression GT expression .) ]
  ! LE              [ reduce using rule 62 (expression -> expression GT expression .) ]
  ! GE              [ reduce using rule 62 (expression -> expression GT expression .) ]


state 165

    (63) expression -> expression LE expression .
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 63 (expression -> expression LE expression .)
    VAR             reduce using rule 63 (expression -> expression LE expression .)
    VARIABLE        reduce using rule 63 (expression -> expression LE expression .)
    FMT             reduce using rule 63 (expression -> expression LE expression .)
    CONTINUE        reduce using rule 63 (expression -> expression LE expression .)
    FUNC            reduce using rule 63 (expression -> expression LE expression .)
    IF              reduce using rule 63 (expression -> expression LE expression .)
    FOR             reduce using rule 63 (expression -> expression LE expression .)
    TYPE            reduce using rule 63 (expression -> expression LE expression .)
    SWITCH          reduce using rule 63 (expression -> expression LE expression .)
    LBRACKET        reduce using rule 63 (expression -> expression LE expression .)
    BREAK           reduce using rule 63 (expression -> expression LE expression .)
    RETURN          reduce using rule 63 (expression -> expression LE expression .)
    $end            reduce using rule 63 (expression -> expression LE expression .)
    RBRACE          reduce using rule 63 (expression -> expression LE expression .)
    CASE            reduce using rule 63 (expression -> expression LE expression .)
    DEFAULT         reduce using rule 63 (expression -> expression LE expression .)
    SEMICOLON       reduce using rule 63 (expression -> expression LE expression .)
    COMMA           reduce using rule 63 (expression -> expression LE expression .)
    RPAREN          reduce using rule 63 (expression -> expression LE expression .)
    COLON           reduce using rule 63 (expression -> expression LE expression .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114

  ! PLUS            [ reduce using rule 63 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 63 (expression -> expression LE expression .) ]
  ! AND             [ reduce using rule 63 (expression -> expression LE expression .) ]
  ! OR              [ reduce using rule 63 (expression -> expression LE expression .) ]
  ! EQ              [ reduce using rule 63 (expression -> expression LE expression .) ]
  ! NE              [ reduce using rule 63 (expression -> expression LE expression .) ]
  ! LT              [ reduce using rule 63 (expression -> expression LE expression .) ]
  ! GT              [ reduce using rule 63 (expression -> expression LE expression .) ]
  ! LE              [ reduce using rule 63 (expression -> expression LE expression .) ]
  ! GE              [ reduce using rule 63 (expression -> expression LE expression .) ]


state 166

    (64) expression -> expression GE expression .
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    LBRACE          reduce using rule 64 (expression -> expression GE expression .)
    VAR             reduce using rule 64 (expression -> expression GE expression .)
    VARIABLE        reduce using rule 64 (expression -> expression GE expression .)
    FMT             reduce using rule 64 (expression -> expression GE expression .)
    CONTINUE        reduce using rule 64 (expression -> expression GE expression .)
    FUNC            reduce using rule 64 (expression -> expression GE expression .)
    IF              reduce using rule 64 (expression -> expression GE expression .)
    FOR             reduce using rule 64 (expression -> expression GE expression .)
    TYPE            reduce using rule 64 (expression -> expression GE expression .)
    SWITCH          reduce using rule 64 (expression -> expression GE expression .)
    LBRACKET        reduce using rule 64 (expression -> expression GE expression .)
    BREAK           reduce using rule 64 (expression -> expression GE expression .)
    RETURN          reduce using rule 64 (expression -> expression GE expression .)
    $end            reduce using rule 64 (expression -> expression GE expression .)
    RBRACE          reduce using rule 64 (expression -> expression GE expression .)
    CASE            reduce using rule 64 (expression -> expression GE expression .)
    DEFAULT         reduce using rule 64 (expression -> expression GE expression .)
    SEMICOLON       reduce using rule 64 (expression -> expression GE expression .)
    COMMA           reduce using rule 64 (expression -> expression GE expression .)
    RPAREN          reduce using rule 64 (expression -> expression GE expression .)
    COLON           reduce using rule 64 (expression -> expression GE expression .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114

  ! PLUS            [ reduce using rule 64 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 64 (expression -> expression GE expression .) ]
  ! AND             [ reduce using rule 64 (expression -> expression GE expression .) ]
  ! OR              [ reduce using rule 64 (expression -> expression GE expression .) ]
  ! EQ              [ reduce using rule 64 (expression -> expression GE expression .) ]
  ! NE              [ reduce using rule 64 (expression -> expression GE expression .) ]
  ! LT              [ reduce using rule 64 (expression -> expression GE expression .) ]
  ! GT              [ reduce using rule 64 (expression -> expression GE expression .) ]
  ! LE              [ reduce using rule 64 (expression -> expression GE expression .) ]
  ! GE              [ reduce using rule 64 (expression -> expression GE expression .) ]


state 167

    (90) block -> LBRACE program . RBRACE

    RBRACE          shift and go to state 207


state 168

    (101) field_value -> VARIABLE . COLON expression

    COLON           shift and go to state 208


state 169

    (98) struct_instance -> VARIABLE LBRACE struct_fields_values . RBRACE

    RBRACE          shift and go to state 209


state 170

    (99) struct_fields_values -> field_value .
    (100) struct_fields_values -> field_value . COMMA struct_fields_values

    RBRACE          reduce using rule 99 (struct_fields_values -> field_value .)
    COMMA           shift and go to state 210


state 171

    (66) term -> term TIMES factor .

    TIMES           reduce using rule 66 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 66 (term -> term TIMES factor .)
    PLUS            reduce using rule 66 (term -> term TIMES factor .)
    MINUS           reduce using rule 66 (term -> term TIMES factor .)
    AND             reduce using rule 66 (term -> term TIMES factor .)
    OR              reduce using rule 66 (term -> term TIMES factor .)
    EQ              reduce using rule 66 (term -> term TIMES factor .)
    NE              reduce using rule 66 (term -> term TIMES factor .)
    LT              reduce using rule 66 (term -> term TIMES factor .)
    GT              reduce using rule 66 (term -> term TIMES factor .)
    LE              reduce using rule 66 (term -> term TIMES factor .)
    GE              reduce using rule 66 (term -> term TIMES factor .)
    LBRACE          reduce using rule 66 (term -> term TIMES factor .)
    VAR             reduce using rule 66 (term -> term TIMES factor .)
    VARIABLE        reduce using rule 66 (term -> term TIMES factor .)
    FMT             reduce using rule 66 (term -> term TIMES factor .)
    CONTINUE        reduce using rule 66 (term -> term TIMES factor .)
    FUNC            reduce using rule 66 (term -> term TIMES factor .)
    IF              reduce using rule 66 (term -> term TIMES factor .)
    FOR             reduce using rule 66 (term -> term TIMES factor .)
    TYPE            reduce using rule 66 (term -> term TIMES factor .)
    SWITCH          reduce using rule 66 (term -> term TIMES factor .)
    LBRACKET        reduce using rule 66 (term -> term TIMES factor .)
    BREAK           reduce using rule 66 (term -> term TIMES factor .)
    RETURN          reduce using rule 66 (term -> term TIMES factor .)
    $end            reduce using rule 66 (term -> term TIMES factor .)
    RBRACE          reduce using rule 66 (term -> term TIMES factor .)
    CASE            reduce using rule 66 (term -> term TIMES factor .)
    DEFAULT         reduce using rule 66 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 66 (term -> term TIMES factor .)
    COMMA           reduce using rule 66 (term -> term TIMES factor .)
    RPAREN          reduce using rule 66 (term -> term TIMES factor .)
    COLON           reduce using rule 66 (term -> term TIMES factor .)


state 172

    (72) factor -> VARIABLE .
    (98) struct_instance -> VARIABLE . LBRACE struct_fields_values RBRACE
    (47) func_call -> VARIABLE . LPAREN arg_list RPAREN
    (48) func_call -> VARIABLE . LPAREN RPAREN

  ! shift/reduce conflict for LBRACE resolved as shift
    TIMES           reduce using rule 72 (factor -> VARIABLE .)
    DIVIDE          reduce using rule 72 (factor -> VARIABLE .)
    PLUS            reduce using rule 72 (factor -> VARIABLE .)
    MINUS           reduce using rule 72 (factor -> VARIABLE .)
    AND             reduce using rule 72 (factor -> VARIABLE .)
    OR              reduce using rule 72 (factor -> VARIABLE .)
    EQ              reduce using rule 72 (factor -> VARIABLE .)
    NE              reduce using rule 72 (factor -> VARIABLE .)
    LT              reduce using rule 72 (factor -> VARIABLE .)
    GT              reduce using rule 72 (factor -> VARIABLE .)
    LE              reduce using rule 72 (factor -> VARIABLE .)
    GE              reduce using rule 72 (factor -> VARIABLE .)
    VAR             reduce using rule 72 (factor -> VARIABLE .)
    VARIABLE        reduce using rule 72 (factor -> VARIABLE .)
    FMT             reduce using rule 72 (factor -> VARIABLE .)
    CONTINUE        reduce using rule 72 (factor -> VARIABLE .)
    FUNC            reduce using rule 72 (factor -> VARIABLE .)
    IF              reduce using rule 72 (factor -> VARIABLE .)
    FOR             reduce using rule 72 (factor -> VARIABLE .)
    TYPE            reduce using rule 72 (factor -> VARIABLE .)
    SWITCH          reduce using rule 72 (factor -> VARIABLE .)
    LBRACKET        reduce using rule 72 (factor -> VARIABLE .)
    BREAK           reduce using rule 72 (factor -> VARIABLE .)
    RETURN          reduce using rule 72 (factor -> VARIABLE .)
    $end            reduce using rule 72 (factor -> VARIABLE .)
    RBRACE          reduce using rule 72 (factor -> VARIABLE .)
    CASE            reduce using rule 72 (factor -> VARIABLE .)
    DEFAULT         reduce using rule 72 (factor -> VARIABLE .)
    SEMICOLON       reduce using rule 72 (factor -> VARIABLE .)
    COMMA           reduce using rule 72 (factor -> VARIABLE .)
    RPAREN          reduce using rule 72 (factor -> VARIABLE .)
    COLON           reduce using rule 72 (factor -> VARIABLE .)
    LBRACE          shift and go to state 116
    LPAREN          shift and go to state 48

  ! LBRACE          [ reduce using rule 72 (factor -> VARIABLE .) ]


state 173

    (67) term -> term DIVIDE factor .

    TIMES           reduce using rule 67 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 67 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 67 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 67 (term -> term DIVIDE factor .)
    AND             reduce using rule 67 (term -> term DIVIDE factor .)
    OR              reduce using rule 67 (term -> term DIVIDE factor .)
    EQ              reduce using rule 67 (term -> term DIVIDE factor .)
    NE              reduce using rule 67 (term -> term DIVIDE factor .)
    LT              reduce using rule 67 (term -> term DIVIDE factor .)
    GT              reduce using rule 67 (term -> term DIVIDE factor .)
    LE              reduce using rule 67 (term -> term DIVIDE factor .)
    GE              reduce using rule 67 (term -> term DIVIDE factor .)
    LBRACE          reduce using rule 67 (term -> term DIVIDE factor .)
    VAR             reduce using rule 67 (term -> term DIVIDE factor .)
    VARIABLE        reduce using rule 67 (term -> term DIVIDE factor .)
    FMT             reduce using rule 67 (term -> term DIVIDE factor .)
    CONTINUE        reduce using rule 67 (term -> term DIVIDE factor .)
    FUNC            reduce using rule 67 (term -> term DIVIDE factor .)
    IF              reduce using rule 67 (term -> term DIVIDE factor .)
    FOR             reduce using rule 67 (term -> term DIVIDE factor .)
    TYPE            reduce using rule 67 (term -> term DIVIDE factor .)
    SWITCH          reduce using rule 67 (term -> term DIVIDE factor .)
    LBRACKET        reduce using rule 67 (term -> term DIVIDE factor .)
    BREAK           reduce using rule 67 (term -> term DIVIDE factor .)
    RETURN          reduce using rule 67 (term -> term DIVIDE factor .)
    $end            reduce using rule 67 (term -> term DIVIDE factor .)
    RBRACE          reduce using rule 67 (term -> term DIVIDE factor .)
    CASE            reduce using rule 67 (term -> term DIVIDE factor .)
    DEFAULT         reduce using rule 67 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 67 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 67 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 67 (term -> term DIVIDE factor .)
    COLON           reduce using rule 67 (term -> term DIVIDE factor .)


state 174

    (75) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    EQ              reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    VAR             reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    FMT             reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    FUNC            reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    FOR             reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    TYPE            reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    CASE            reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 75 (factor -> LPAREN expression RPAREN .)
    COLON           reduce using rule 75 (factor -> LPAREN expression RPAREN .)


state 175

    (116) make_expr -> MAKE LPAREN MAP . LBRACKET type RBRACKET type RPAREN

    LBRACKET        shift and go to state 211


state 176

    (117) make_expr -> MAKE LPAREN LBRACKET . RBRACKET type RPAREN

    RBRACKET        shift and go to state 212


state 177

    (86) for_stmt -> FOR assignment SEMICOLON expression . SEMICOLON for_update block
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    SEMICOLON       shift and go to state 213
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114


state 178

    (93) struct_def -> TYPE VARIABLE STRUCT LBRACE . struct_fields RBRACE
    (94) struct_fields -> . struct_field
    (95) struct_fields -> . struct_field struct_fields
    (96) struct_field -> . VARIABLE type
    (97) struct_field -> . type
    (79) type -> . INT_TYPE
    (80) type -> . FLOAT64_TYPE
    (81) type -> . STRING_TYPE
    (82) type -> . BOOL_TYPE

    VARIABLE        shift and go to state 214
    INT_TYPE        shift and go to state 94
    FLOAT64_TYPE    shift and go to state 95
    STRING_TYPE     shift and go to state 96
    BOOL_TYPE       shift and go to state 97

    struct_fields                  shift and go to state 215
    struct_field                   shift and go to state 216
    type                           shift and go to state 217

state 179

    (102) switch_stmt -> SWITCH expression LBRACE case_list . RBRACE

    RBRACE          shift and go to state 218


state 180

    (103) switch_stmt -> SWITCH LBRACE case_list RBRACE .

    VAR             reduce using rule 103 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    VARIABLE        reduce using rule 103 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    FMT             reduce using rule 103 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    CONTINUE        reduce using rule 103 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    FUNC            reduce using rule 103 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    IF              reduce using rule 103 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    FOR             reduce using rule 103 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    TYPE            reduce using rule 103 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    SWITCH          reduce using rule 103 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    LBRACKET        reduce using rule 103 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    BREAK           reduce using rule 103 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    RETURN          reduce using rule 103 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    $end            reduce using rule 103 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    RBRACE          reduce using rule 103 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    CASE            reduce using rule 103 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)
    DEFAULT         reduce using rule 103 (switch_stmt -> SWITCH LBRACE case_list RBRACE .)


state 181

    (105) case_list -> case_clause case_list .

    RBRACE          reduce using rule 105 (case_list -> case_clause case_list .)


state 182

    (106) case_clause -> CASE expression . COLON program
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    COLON           shift and go to state 219
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114


state 183

    (107) case_clause -> DEFAULT COLON . program
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_call
    (15) statement -> . if_stmt
    (16) statement -> . for_stmt
    (17) statement -> . struct_def
    (18) statement -> . switch_stmt
    (19) statement -> . map_declaration
    (20) statement -> . map_declaration_values
    (21) statement -> . array_declaration
    (22) statement -> . array_literal
    (23) statement -> . slice_declaration
    (24) statement -> . make_stmt
    (25) statement -> . new_stmt
    (26) statement -> . break_stmt
    (27) statement -> . increment_stmt
    (28) statement -> . return_stmt
    (29) declaration -> . VAR VARIABLE type
    (30) declaration -> . VAR VARIABLE type ASIG expression
    (31) declaration -> . VAR VARIABLE type ASSIGN expression
    (35) assignment -> . VARIABLE ASSIGN expression
    (36) assignment -> . VARIABLE ASIG expression
    (37) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (38) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (39) print_stmt -> . FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN
    (40) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (87) continue_stmt -> . CONTINUE
    (91) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (92) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (41) func_def -> . func_header func_body
    (45) func_no_params -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (46) func_no_params -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN
    (83) if_stmt -> . IF expression block
    (84) if_stmt -> . IF expression block ELSE block
    (85) for_stmt -> . FOR expression block
    (86) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (93) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (102) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (103) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (108) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (109) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (110) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE
    (118) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (122) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (123) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (124) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (127) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (128) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (114) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (115) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (131) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (132) break_stmt -> . BREAK
    (133) increment_stmt -> . VARIABLE INCREMENT
    (134) increment_stmt -> . VARIABLE DECREMENT
    (44) return_stmt -> . RETURN expression
    (42) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type

    VAR             shift and go to state 32
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 33
    CONTINUE        shift and go to state 34
    FUNC            shift and go to state 35
    IF              shift and go to state 37
    FOR             shift and go to state 38
    TYPE            shift and go to state 39
    SWITCH          shift and go to state 40
    LBRACKET        shift and go to state 41
    BREAK           shift and go to state 42
    RETURN          shift and go to state 43

    program                        shift and go to state 220
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_call                      shift and go to state 17
    if_stmt                        shift and go to state 18
    for_stmt                       shift and go to state 19
    struct_def                     shift and go to state 20
    switch_stmt                    shift and go to state 21
    map_declaration                shift and go to state 22
    map_declaration_values         shift and go to state 23
    array_declaration              shift and go to state 24
    array_literal                  shift and go to state 25
    slice_declaration              shift and go to state 26
    make_stmt                      shift and go to state 27
    new_stmt                       shift and go to state 28
    break_stmt                     shift and go to state 29
    increment_stmt                 shift and go to state 30
    return_stmt                    shift and go to state 31
    func_header                    shift and go to state 36

state 184

    (124) array_literal -> LBRACKET NUMBER RBRACKET type . LBRACE array_values RBRACE

    LBRACE          shift and go to state 221


state 185

    (109) map_declaration -> VARIABLE ASIG MAP LBRACKET type . RBRACKET type
    (110) map_declaration -> VARIABLE ASIG MAP LBRACKET type . RBRACKET type LBRACE map_params RBRACE
    (118) map_declaration_values -> VARIABLE ASIG MAP LBRACKET type . RBRACKET type LBRACE map_kv_pairs RBRACE

    RBRACKET        shift and go to state 222


state 186

    (128) slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type . LBRACE slice_values RBRACE

    LBRACE          shift and go to state 223


state 187

    (114) make_stmt -> VARIABLE ASIG MAKE LPAREN MAP . LBRACKET type RBRACKET type RPAREN
    (116) make_expr -> MAKE LPAREN MAP . LBRACKET type RBRACKET type RPAREN

    LBRACKET        shift and go to state 224


state 188

    (115) make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET . RBRACKET type RPAREN
    (117) make_expr -> MAKE LPAREN LBRACKET . RBRACKET type RPAREN

    RBRACKET        shift and go to state 225


state 189

    (131) new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE . RPAREN

    RPAREN          shift and go to state 226


state 190

    (53) arg_list -> expression COMMA arg_list .

    RPAREN          reduce using rule 53 (arg_list -> expression COMMA arg_list .)


state 191

    (30) declaration -> VAR VARIABLE type ASIG expression .
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    VAR             reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    VARIABLE        reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    FMT             reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    CONTINUE        reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    FUNC            reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    IF              reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    FOR             reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    TYPE            reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    SWITCH          reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    LBRACKET        reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    BREAK           reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    RETURN          reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    $end            reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    RBRACE          reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    CASE            reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    DEFAULT         reduce using rule 30 (declaration -> VAR VARIABLE type ASIG expression .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114


state 192

    (31) declaration -> VAR VARIABLE type ASSIGN expression .
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    VAR             reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    VARIABLE        reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    FMT             reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    CONTINUE        reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    FUNC            reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    IF              reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    FOR             reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    TYPE            reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    SWITCH          reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    LBRACKET        reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    BREAK           reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    RETURN          reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    $end            reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    RBRACE          reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    CASE            reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    DEFAULT         reduce using rule 31 (declaration -> VAR VARIABLE type ASSIGN expression .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114


state 193

    (108) map_declaration -> VAR VARIABLE MAP LBRACKET type . RBRACKET type

    RBRACKET        shift and go to state 227


state 194

    (122) array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET . type
    (79) type -> . INT_TYPE
    (80) type -> . FLOAT64_TYPE
    (81) type -> . STRING_TYPE
    (82) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 94
    FLOAT64_TYPE    shift and go to state 95
    STRING_TYPE     shift and go to state 96
    BOOL_TYPE       shift and go to state 97

    type                           shift and go to state 228

state 195

    (127) slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .

    VAR             reduce using rule 127 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    VARIABLE        reduce using rule 127 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    FMT             reduce using rule 127 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    CONTINUE        reduce using rule 127 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    FUNC            reduce using rule 127 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    IF              reduce using rule 127 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    FOR             reduce using rule 127 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    TYPE            reduce using rule 127 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    SWITCH          reduce using rule 127 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    LBRACKET        reduce using rule 127 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    BREAK           reduce using rule 127 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    RETURN          reduce using rule 127 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    $end            reduce using rule 127 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    RBRACE          reduce using rule 127 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    CASE            reduce using rule 127 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)
    DEFAULT         reduce using rule 127 (slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type .)


state 196

    (37) print_stmt -> FMT DOT PRINTF LPAREN STRING . COMMA expression RPAREN

    COMMA           shift and go to state 229


state 197

    (38) print_stmt -> FMT DOT PRINTLN LPAREN expression . RPAREN
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    RPAREN          shift and go to state 230
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114


state 198

    (39) print_stmt -> FMT DOT PRINTLN LPAREN STRING . COMMA VARIABLE RPAREN
    (71) factor -> STRING .

    COMMA           shift and go to state 231
    TIMES           reduce using rule 71 (factor -> STRING .)
    DIVIDE          reduce using rule 71 (factor -> STRING .)
    RPAREN          reduce using rule 71 (factor -> STRING .)
    PLUS            reduce using rule 71 (factor -> STRING .)
    MINUS           reduce using rule 71 (factor -> STRING .)
    AND             reduce using rule 71 (factor -> STRING .)
    OR              reduce using rule 71 (factor -> STRING .)
    EQ              reduce using rule 71 (factor -> STRING .)
    NE              reduce using rule 71 (factor -> STRING .)
    LT              reduce using rule 71 (factor -> STRING .)
    GT              reduce using rule 71 (factor -> STRING .)
    LE              reduce using rule 71 (factor -> STRING .)
    GE              reduce using rule 71 (factor -> STRING .)


state 199

    (40) input_stmt -> FMT DOT SCANLN LPAREN AMPER . VARIABLE RPAREN

    VARIABLE        shift and go to state 232


state 200

    (91) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN . VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (92) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN . VARIABLE LPAREN RPAREN type LBRACE program RBRACE

    VARIABLE        shift and go to state 233


state 201

    (51) param -> VARIABLE type .

    COMMA           reduce using rule 51 (param -> VARIABLE type .)
    RPAREN          reduce using rule 51 (param -> VARIABLE type .)


state 202

    (45) func_no_params -> FUNC VARIABLE LPAREN RPAREN type . LBRACE program RBRACE

    LBRACE          shift and go to state 234


state 203

    (46) func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE . program RBRACE
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_call
    (15) statement -> . if_stmt
    (16) statement -> . for_stmt
    (17) statement -> . struct_def
    (18) statement -> . switch_stmt
    (19) statement -> . map_declaration
    (20) statement -> . map_declaration_values
    (21) statement -> . array_declaration
    (22) statement -> . array_literal
    (23) statement -> . slice_declaration
    (24) statement -> . make_stmt
    (25) statement -> . new_stmt
    (26) statement -> . break_stmt
    (27) statement -> . increment_stmt
    (28) statement -> . return_stmt
    (29) declaration -> . VAR VARIABLE type
    (30) declaration -> . VAR VARIABLE type ASIG expression
    (31) declaration -> . VAR VARIABLE type ASSIGN expression
    (35) assignment -> . VARIABLE ASSIGN expression
    (36) assignment -> . VARIABLE ASIG expression
    (37) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (38) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (39) print_stmt -> . FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN
    (40) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (87) continue_stmt -> . CONTINUE
    (91) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (92) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (41) func_def -> . func_header func_body
    (45) func_no_params -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (46) func_no_params -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN
    (83) if_stmt -> . IF expression block
    (84) if_stmt -> . IF expression block ELSE block
    (85) for_stmt -> . FOR expression block
    (86) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (93) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (102) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (103) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (108) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (109) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (110) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE
    (118) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (122) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (123) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (124) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (127) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (128) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (114) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (115) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (131) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (132) break_stmt -> . BREAK
    (133) increment_stmt -> . VARIABLE INCREMENT
    (134) increment_stmt -> . VARIABLE DECREMENT
    (44) return_stmt -> . RETURN expression
    (42) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type

    VAR             shift and go to state 32
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 33
    CONTINUE        shift and go to state 34
    FUNC            shift and go to state 35
    IF              shift and go to state 37
    FOR             shift and go to state 38
    TYPE            shift and go to state 39
    SWITCH          shift and go to state 40
    LBRACKET        shift and go to state 41
    BREAK           shift and go to state 42
    RETURN          shift and go to state 43

    program                        shift and go to state 235
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_call                      shift and go to state 17
    if_stmt                        shift and go to state 18
    for_stmt                       shift and go to state 19
    struct_def                     shift and go to state 20
    switch_stmt                    shift and go to state 21
    map_declaration                shift and go to state 22
    map_declaration_values         shift and go to state 23
    array_declaration              shift and go to state 24
    array_literal                  shift and go to state 25
    slice_declaration              shift and go to state 26
    make_stmt                      shift and go to state 27
    new_stmt                       shift and go to state 28
    break_stmt                     shift and go to state 29
    increment_stmt                 shift and go to state 30
    return_stmt                    shift and go to state 31
    func_header                    shift and go to state 36

state 204

    (42) func_header -> FUNC VARIABLE LPAREN param_list RPAREN . type
    (79) type -> . INT_TYPE
    (80) type -> . FLOAT64_TYPE
    (81) type -> . STRING_TYPE
    (82) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 94
    FLOAT64_TYPE    shift and go to state 95
    STRING_TYPE     shift and go to state 96
    BOOL_TYPE       shift and go to state 97

    type                           shift and go to state 236

state 205

    (50) param_list -> param COMMA . param_list
    (49) param_list -> . param
    (50) param_list -> . param COMMA param_list
    (51) param -> . VARIABLE type

    VARIABLE        shift and go to state 148

    param                          shift and go to state 151
    param_list                     shift and go to state 237

state 206

    (84) if_stmt -> IF expression block ELSE block .

    VAR             reduce using rule 84 (if_stmt -> IF expression block ELSE block .)
    VARIABLE        reduce using rule 84 (if_stmt -> IF expression block ELSE block .)
    FMT             reduce using rule 84 (if_stmt -> IF expression block ELSE block .)
    CONTINUE        reduce using rule 84 (if_stmt -> IF expression block ELSE block .)
    FUNC            reduce using rule 84 (if_stmt -> IF expression block ELSE block .)
    IF              reduce using rule 84 (if_stmt -> IF expression block ELSE block .)
    FOR             reduce using rule 84 (if_stmt -> IF expression block ELSE block .)
    TYPE            reduce using rule 84 (if_stmt -> IF expression block ELSE block .)
    SWITCH          reduce using rule 84 (if_stmt -> IF expression block ELSE block .)
    LBRACKET        reduce using rule 84 (if_stmt -> IF expression block ELSE block .)
    BREAK           reduce using rule 84 (if_stmt -> IF expression block ELSE block .)
    RETURN          reduce using rule 84 (if_stmt -> IF expression block ELSE block .)
    $end            reduce using rule 84 (if_stmt -> IF expression block ELSE block .)
    RBRACE          reduce using rule 84 (if_stmt -> IF expression block ELSE block .)
    CASE            reduce using rule 84 (if_stmt -> IF expression block ELSE block .)
    DEFAULT         reduce using rule 84 (if_stmt -> IF expression block ELSE block .)


state 207

    (90) block -> LBRACE program RBRACE .

    ELSE            reduce using rule 90 (block -> LBRACE program RBRACE .)
    VAR             reduce using rule 90 (block -> LBRACE program RBRACE .)
    VARIABLE        reduce using rule 90 (block -> LBRACE program RBRACE .)
    FMT             reduce using rule 90 (block -> LBRACE program RBRACE .)
    CONTINUE        reduce using rule 90 (block -> LBRACE program RBRACE .)
    FUNC            reduce using rule 90 (block -> LBRACE program RBRACE .)
    IF              reduce using rule 90 (block -> LBRACE program RBRACE .)
    FOR             reduce using rule 90 (block -> LBRACE program RBRACE .)
    TYPE            reduce using rule 90 (block -> LBRACE program RBRACE .)
    SWITCH          reduce using rule 90 (block -> LBRACE program RBRACE .)
    LBRACKET        reduce using rule 90 (block -> LBRACE program RBRACE .)
    BREAK           reduce using rule 90 (block -> LBRACE program RBRACE .)
    RETURN          reduce using rule 90 (block -> LBRACE program RBRACE .)
    $end            reduce using rule 90 (block -> LBRACE program RBRACE .)
    RBRACE          reduce using rule 90 (block -> LBRACE program RBRACE .)
    CASE            reduce using rule 90 (block -> LBRACE program RBRACE .)
    DEFAULT         reduce using rule 90 (block -> LBRACE program RBRACE .)


state 208

    (101) field_value -> VARIABLE COLON . expression
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 238
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 209

    (98) struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .

    TIMES           reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    DIVIDE          reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    PLUS            reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    MINUS           reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    AND             reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    OR              reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    EQ              reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    NE              reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    LT              reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    GT              reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    LE              reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    GE              reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    LBRACE          reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    VAR             reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    VARIABLE        reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    FMT             reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    CONTINUE        reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    FUNC            reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    IF              reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    FOR             reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    TYPE            reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    SWITCH          reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    LBRACKET        reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    BREAK           reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    RETURN          reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    $end            reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    RBRACE          reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    CASE            reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    DEFAULT         reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    SEMICOLON       reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    COMMA           reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    RPAREN          reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)
    COLON           reduce using rule 98 (struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE .)


state 210

    (100) struct_fields_values -> field_value COMMA . struct_fields_values
    (99) struct_fields_values -> . field_value
    (100) struct_fields_values -> . field_value COMMA struct_fields_values
    (101) field_value -> . VARIABLE COLON expression

    VARIABLE        shift and go to state 168

    field_value                    shift and go to state 170
    struct_fields_values           shift and go to state 239

state 211

    (116) make_expr -> MAKE LPAREN MAP LBRACKET . type RBRACKET type RPAREN
    (79) type -> . INT_TYPE
    (80) type -> . FLOAT64_TYPE
    (81) type -> . STRING_TYPE
    (82) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 94
    FLOAT64_TYPE    shift and go to state 95
    STRING_TYPE     shift and go to state 96
    BOOL_TYPE       shift and go to state 97

    type                           shift and go to state 240

state 212

    (117) make_expr -> MAKE LPAREN LBRACKET RBRACKET . type RPAREN
    (79) type -> . INT_TYPE
    (80) type -> . FLOAT64_TYPE
    (81) type -> . STRING_TYPE
    (82) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 94
    FLOAT64_TYPE    shift and go to state 95
    STRING_TYPE     shift and go to state 96
    BOOL_TYPE       shift and go to state 97

    type                           shift and go to state 241

state 213

    (86) for_stmt -> FOR assignment SEMICOLON expression SEMICOLON . for_update block
    (88) for_update -> . assignment
    (89) for_update -> . increment_stmt
    (35) assignment -> . VARIABLE ASSIGN expression
    (36) assignment -> . VARIABLE ASIG expression
    (133) increment_stmt -> . VARIABLE INCREMENT
    (134) increment_stmt -> . VARIABLE DECREMENT

    VARIABLE        shift and go to state 245

    assignment                     shift and go to state 242
    for_update                     shift and go to state 243
    increment_stmt                 shift and go to state 244

state 214

    (96) struct_field -> VARIABLE . type
    (79) type -> . INT_TYPE
    (80) type -> . FLOAT64_TYPE
    (81) type -> . STRING_TYPE
    (82) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 94
    FLOAT64_TYPE    shift and go to state 95
    STRING_TYPE     shift and go to state 96
    BOOL_TYPE       shift and go to state 97

    type                           shift and go to state 246

state 215

    (93) struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields . RBRACE

    RBRACE          shift and go to state 247


state 216

    (94) struct_fields -> struct_field .
    (95) struct_fields -> struct_field . struct_fields
    (94) struct_fields -> . struct_field
    (95) struct_fields -> . struct_field struct_fields
    (96) struct_field -> . VARIABLE type
    (97) struct_field -> . type
    (79) type -> . INT_TYPE
    (80) type -> . FLOAT64_TYPE
    (81) type -> . STRING_TYPE
    (82) type -> . BOOL_TYPE

    RBRACE          reduce using rule 94 (struct_fields -> struct_field .)
    VARIABLE        shift and go to state 214
    INT_TYPE        shift and go to state 94
    FLOAT64_TYPE    shift and go to state 95
    STRING_TYPE     shift and go to state 96
    BOOL_TYPE       shift and go to state 97

    struct_field                   shift and go to state 216
    struct_fields                  shift and go to state 248
    type                           shift and go to state 217

state 217

    (97) struct_field -> type .

    VARIABLE        reduce using rule 97 (struct_field -> type .)
    INT_TYPE        reduce using rule 97 (struct_field -> type .)
    FLOAT64_TYPE    reduce using rule 97 (struct_field -> type .)
    STRING_TYPE     reduce using rule 97 (struct_field -> type .)
    BOOL_TYPE       reduce using rule 97 (struct_field -> type .)
    RBRACE          reduce using rule 97 (struct_field -> type .)


state 218

    (102) switch_stmt -> SWITCH expression LBRACE case_list RBRACE .

    VAR             reduce using rule 102 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    VARIABLE        reduce using rule 102 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    FMT             reduce using rule 102 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    CONTINUE        reduce using rule 102 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    FUNC            reduce using rule 102 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    IF              reduce using rule 102 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    FOR             reduce using rule 102 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    TYPE            reduce using rule 102 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    SWITCH          reduce using rule 102 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    LBRACKET        reduce using rule 102 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    BREAK           reduce using rule 102 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    RETURN          reduce using rule 102 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    $end            reduce using rule 102 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    RBRACE          reduce using rule 102 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    CASE            reduce using rule 102 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)
    DEFAULT         reduce using rule 102 (switch_stmt -> SWITCH expression LBRACE case_list RBRACE .)


state 219

    (106) case_clause -> CASE expression COLON . program
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_call
    (15) statement -> . if_stmt
    (16) statement -> . for_stmt
    (17) statement -> . struct_def
    (18) statement -> . switch_stmt
    (19) statement -> . map_declaration
    (20) statement -> . map_declaration_values
    (21) statement -> . array_declaration
    (22) statement -> . array_literal
    (23) statement -> . slice_declaration
    (24) statement -> . make_stmt
    (25) statement -> . new_stmt
    (26) statement -> . break_stmt
    (27) statement -> . increment_stmt
    (28) statement -> . return_stmt
    (29) declaration -> . VAR VARIABLE type
    (30) declaration -> . VAR VARIABLE type ASIG expression
    (31) declaration -> . VAR VARIABLE type ASSIGN expression
    (35) assignment -> . VARIABLE ASSIGN expression
    (36) assignment -> . VARIABLE ASIG expression
    (37) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (38) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (39) print_stmt -> . FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN
    (40) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (87) continue_stmt -> . CONTINUE
    (91) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (92) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (41) func_def -> . func_header func_body
    (45) func_no_params -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (46) func_no_params -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN
    (83) if_stmt -> . IF expression block
    (84) if_stmt -> . IF expression block ELSE block
    (85) for_stmt -> . FOR expression block
    (86) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (93) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (102) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (103) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (108) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (109) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (110) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE
    (118) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (122) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (123) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (124) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (127) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (128) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (114) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (115) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (131) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (132) break_stmt -> . BREAK
    (133) increment_stmt -> . VARIABLE INCREMENT
    (134) increment_stmt -> . VARIABLE DECREMENT
    (44) return_stmt -> . RETURN expression
    (42) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type

    VAR             shift and go to state 32
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 33
    CONTINUE        shift and go to state 34
    FUNC            shift and go to state 35
    IF              shift and go to state 37
    FOR             shift and go to state 38
    TYPE            shift and go to state 39
    SWITCH          shift and go to state 40
    LBRACKET        shift and go to state 41
    BREAK           shift and go to state 42
    RETURN          shift and go to state 43

    program                        shift and go to state 249
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_call                      shift and go to state 17
    if_stmt                        shift and go to state 18
    for_stmt                       shift and go to state 19
    struct_def                     shift and go to state 20
    switch_stmt                    shift and go to state 21
    map_declaration                shift and go to state 22
    map_declaration_values         shift and go to state 23
    array_declaration              shift and go to state 24
    array_literal                  shift and go to state 25
    slice_declaration              shift and go to state 26
    make_stmt                      shift and go to state 27
    new_stmt                       shift and go to state 28
    break_stmt                     shift and go to state 29
    increment_stmt                 shift and go to state 30
    return_stmt                    shift and go to state 31
    func_header                    shift and go to state 36

state 220

    (107) case_clause -> DEFAULT COLON program .

    CASE            reduce using rule 107 (case_clause -> DEFAULT COLON program .)
    DEFAULT         reduce using rule 107 (case_clause -> DEFAULT COLON program .)
    RBRACE          reduce using rule 107 (case_clause -> DEFAULT COLON program .)


state 221

    (124) array_literal -> LBRACKET NUMBER RBRACKET type LBRACE . array_values RBRACE
    (125) array_values -> . expression
    (126) array_values -> . expression COMMA array_values
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    array_values                   shift and go to state 250
    expression                     shift and go to state 251
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 222

    (109) map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET . type
    (110) map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET . type LBRACE map_params RBRACE
    (118) map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET . type LBRACE map_kv_pairs RBRACE
    (79) type -> . INT_TYPE
    (80) type -> . FLOAT64_TYPE
    (81) type -> . STRING_TYPE
    (82) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 94
    FLOAT64_TYPE    shift and go to state 95
    STRING_TYPE     shift and go to state 96
    BOOL_TYPE       shift and go to state 97

    type                           shift and go to state 252

state 223

    (128) slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE . slice_values RBRACE
    (129) slice_values -> . expression
    (130) slice_values -> . expression COMMA slice_values
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    slice_values                   shift and go to state 253
    expression                     shift and go to state 254
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 224

    (114) make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET . type RBRACKET type RPAREN
    (116) make_expr -> MAKE LPAREN MAP LBRACKET . type RBRACKET type RPAREN
    (79) type -> . INT_TYPE
    (80) type -> . FLOAT64_TYPE
    (81) type -> . STRING_TYPE
    (82) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 94
    FLOAT64_TYPE    shift and go to state 95
    STRING_TYPE     shift and go to state 96
    BOOL_TYPE       shift and go to state 97

    type                           shift and go to state 255

state 225

    (115) make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET . type RPAREN
    (117) make_expr -> MAKE LPAREN LBRACKET RBRACKET . type RPAREN
    (79) type -> . INT_TYPE
    (80) type -> . FLOAT64_TYPE
    (81) type -> . STRING_TYPE
    (82) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 94
    FLOAT64_TYPE    shift and go to state 95
    STRING_TYPE     shift and go to state 96
    BOOL_TYPE       shift and go to state 97

    type                           shift and go to state 256

state 226

    (131) new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .

    VAR             reduce using rule 131 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    VARIABLE        reduce using rule 131 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    FMT             reduce using rule 131 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    CONTINUE        reduce using rule 131 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    FUNC            reduce using rule 131 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    IF              reduce using rule 131 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    FOR             reduce using rule 131 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    TYPE            reduce using rule 131 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    SWITCH          reduce using rule 131 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    LBRACKET        reduce using rule 131 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    BREAK           reduce using rule 131 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    RETURN          reduce using rule 131 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    $end            reduce using rule 131 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    RBRACE          reduce using rule 131 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    CASE            reduce using rule 131 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)
    DEFAULT         reduce using rule 131 (new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN .)


state 227

    (108) map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET . type
    (79) type -> . INT_TYPE
    (80) type -> . FLOAT64_TYPE
    (81) type -> . STRING_TYPE
    (82) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 94
    FLOAT64_TYPE    shift and go to state 95
    STRING_TYPE     shift and go to state 96
    BOOL_TYPE       shift and go to state 97

    type                           shift and go to state 257

state 228

    (122) array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .

    VAR             reduce using rule 122 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    VARIABLE        reduce using rule 122 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    FMT             reduce using rule 122 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    CONTINUE        reduce using rule 122 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    FUNC            reduce using rule 122 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    IF              reduce using rule 122 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    FOR             reduce using rule 122 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    TYPE            reduce using rule 122 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    SWITCH          reduce using rule 122 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    LBRACKET        reduce using rule 122 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    BREAK           reduce using rule 122 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    RETURN          reduce using rule 122 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    $end            reduce using rule 122 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    RBRACE          reduce using rule 122 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    CASE            reduce using rule 122 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)
    DEFAULT         reduce using rule 122 (array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type .)


state 229

    (37) print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA . expression RPAREN
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 258
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 230

    (38) print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .

    VAR             reduce using rule 38 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 38 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    FMT             reduce using rule 38 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 38 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    FUNC            reduce using rule 38 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    IF              reduce using rule 38 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    FOR             reduce using rule 38 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    TYPE            reduce using rule 38 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    SWITCH          reduce using rule 38 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 38 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    BREAK           reduce using rule 38 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    RETURN          reduce using rule 38 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    $end            reduce using rule 38 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    RBRACE          reduce using rule 38 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    CASE            reduce using rule 38 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 38 (print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN .)


state 231

    (39) print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA . VARIABLE RPAREN

    VARIABLE        shift and go to state 259


state 232

    (40) input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE . RPAREN

    RPAREN          shift and go to state 260


state 233

    (91) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE . LPAREN param_list RPAREN type LBRACE program RBRACE
    (92) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE . LPAREN RPAREN type LBRACE program RBRACE

    LPAREN          shift and go to state 261


state 234

    (45) func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE . program RBRACE
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_call
    (15) statement -> . if_stmt
    (16) statement -> . for_stmt
    (17) statement -> . struct_def
    (18) statement -> . switch_stmt
    (19) statement -> . map_declaration
    (20) statement -> . map_declaration_values
    (21) statement -> . array_declaration
    (22) statement -> . array_literal
    (23) statement -> . slice_declaration
    (24) statement -> . make_stmt
    (25) statement -> . new_stmt
    (26) statement -> . break_stmt
    (27) statement -> . increment_stmt
    (28) statement -> . return_stmt
    (29) declaration -> . VAR VARIABLE type
    (30) declaration -> . VAR VARIABLE type ASIG expression
    (31) declaration -> . VAR VARIABLE type ASSIGN expression
    (35) assignment -> . VARIABLE ASSIGN expression
    (36) assignment -> . VARIABLE ASIG expression
    (37) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (38) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (39) print_stmt -> . FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN
    (40) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (87) continue_stmt -> . CONTINUE
    (91) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (92) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (41) func_def -> . func_header func_body
    (45) func_no_params -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (46) func_no_params -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN
    (83) if_stmt -> . IF expression block
    (84) if_stmt -> . IF expression block ELSE block
    (85) for_stmt -> . FOR expression block
    (86) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (93) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (102) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (103) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (108) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (109) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (110) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE
    (118) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (122) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (123) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (124) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (127) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (128) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (114) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (115) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (131) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (132) break_stmt -> . BREAK
    (133) increment_stmt -> . VARIABLE INCREMENT
    (134) increment_stmt -> . VARIABLE DECREMENT
    (44) return_stmt -> . RETURN expression
    (42) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type

    VAR             shift and go to state 32
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 33
    CONTINUE        shift and go to state 34
    FUNC            shift and go to state 35
    IF              shift and go to state 37
    FOR             shift and go to state 38
    TYPE            shift and go to state 39
    SWITCH          shift and go to state 40
    LBRACKET        shift and go to state 41
    BREAK           shift and go to state 42
    RETURN          shift and go to state 43

    program                        shift and go to state 262
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_call                      shift and go to state 17
    if_stmt                        shift and go to state 18
    for_stmt                       shift and go to state 19
    struct_def                     shift and go to state 20
    switch_stmt                    shift and go to state 21
    map_declaration                shift and go to state 22
    map_declaration_values         shift and go to state 23
    array_declaration              shift and go to state 24
    array_literal                  shift and go to state 25
    slice_declaration              shift and go to state 26
    make_stmt                      shift and go to state 27
    new_stmt                       shift and go to state 28
    break_stmt                     shift and go to state 29
    increment_stmt                 shift and go to state 30
    return_stmt                    shift and go to state 31
    func_header                    shift and go to state 36

state 235

    (46) func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program . RBRACE

    RBRACE          shift and go to state 263


state 236

    (42) func_header -> FUNC VARIABLE LPAREN param_list RPAREN type .

    LBRACE          reduce using rule 42 (func_header -> FUNC VARIABLE LPAREN param_list RPAREN type .)


state 237

    (50) param_list -> param COMMA param_list .

    RPAREN          reduce using rule 50 (param_list -> param COMMA param_list .)


state 238

    (101) field_value -> VARIABLE COLON expression .
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    COMMA           reduce using rule 101 (field_value -> VARIABLE COLON expression .)
    RBRACE          reduce using rule 101 (field_value -> VARIABLE COLON expression .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114


state 239

    (100) struct_fields_values -> field_value COMMA struct_fields_values .

    RBRACE          reduce using rule 100 (struct_fields_values -> field_value COMMA struct_fields_values .)


state 240

    (116) make_expr -> MAKE LPAREN MAP LBRACKET type . RBRACKET type RPAREN

    RBRACKET        shift and go to state 264


state 241

    (117) make_expr -> MAKE LPAREN LBRACKET RBRACKET type . RPAREN

    RPAREN          shift and go to state 265


state 242

    (88) for_update -> assignment .

    LBRACE          reduce using rule 88 (for_update -> assignment .)


state 243

    (86) for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update . block
    (90) block -> . LBRACE program RBRACE

    LBRACE          shift and go to state 115

    block                          shift and go to state 266

state 244

    (89) for_update -> increment_stmt .

    LBRACE          reduce using rule 89 (for_update -> increment_stmt .)


state 245

    (35) assignment -> VARIABLE . ASSIGN expression
    (36) assignment -> VARIABLE . ASIG expression
    (133) increment_stmt -> VARIABLE . INCREMENT
    (134) increment_stmt -> VARIABLE . DECREMENT

    ASSIGN          shift and go to state 46
    ASIG            shift and go to state 123
    INCREMENT       shift and go to state 49
    DECREMENT       shift and go to state 50


state 246

    (96) struct_field -> VARIABLE type .

    VARIABLE        reduce using rule 96 (struct_field -> VARIABLE type .)
    INT_TYPE        reduce using rule 96 (struct_field -> VARIABLE type .)
    FLOAT64_TYPE    reduce using rule 96 (struct_field -> VARIABLE type .)
    STRING_TYPE     reduce using rule 96 (struct_field -> VARIABLE type .)
    BOOL_TYPE       reduce using rule 96 (struct_field -> VARIABLE type .)
    RBRACE          reduce using rule 96 (struct_field -> VARIABLE type .)


state 247

    (93) struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .

    VAR             reduce using rule 93 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    VARIABLE        reduce using rule 93 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    FMT             reduce using rule 93 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    CONTINUE        reduce using rule 93 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    FUNC            reduce using rule 93 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    IF              reduce using rule 93 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    FOR             reduce using rule 93 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    TYPE            reduce using rule 93 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    SWITCH          reduce using rule 93 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    LBRACKET        reduce using rule 93 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    BREAK           reduce using rule 93 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    RETURN          reduce using rule 93 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    $end            reduce using rule 93 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    RBRACE          reduce using rule 93 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    CASE            reduce using rule 93 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    DEFAULT         reduce using rule 93 (struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)


state 248

    (95) struct_fields -> struct_field struct_fields .

    RBRACE          reduce using rule 95 (struct_fields -> struct_field struct_fields .)


state 249

    (106) case_clause -> CASE expression COLON program .

    CASE            reduce using rule 106 (case_clause -> CASE expression COLON program .)
    DEFAULT         reduce using rule 106 (case_clause -> CASE expression COLON program .)
    RBRACE          reduce using rule 106 (case_clause -> CASE expression COLON program .)


state 250

    (124) array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values . RBRACE

    RBRACE          shift and go to state 267


state 251

    (125) array_values -> expression .
    (126) array_values -> expression . COMMA array_values
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    RBRACE          reduce using rule 125 (array_values -> expression .)
    COMMA           shift and go to state 268
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114


state 252

    (109) map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .
    (110) map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type . LBRACE map_params RBRACE
    (118) map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type . LBRACE map_kv_pairs RBRACE

    VAR             reduce using rule 109 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    VARIABLE        reduce using rule 109 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    FMT             reduce using rule 109 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    CONTINUE        reduce using rule 109 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    FUNC            reduce using rule 109 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    IF              reduce using rule 109 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    FOR             reduce using rule 109 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    TYPE            reduce using rule 109 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    SWITCH          reduce using rule 109 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    LBRACKET        reduce using rule 109 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    BREAK           reduce using rule 109 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    RETURN          reduce using rule 109 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    $end            reduce using rule 109 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    RBRACE          reduce using rule 109 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    CASE            reduce using rule 109 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    DEFAULT         reduce using rule 109 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type .)
    LBRACE          shift and go to state 269


state 253

    (128) slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values . RBRACE

    RBRACE          shift and go to state 270


state 254

    (129) slice_values -> expression .
    (130) slice_values -> expression . COMMA slice_values
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    RBRACE          reduce using rule 129 (slice_values -> expression .)
    COMMA           shift and go to state 271
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114


state 255

    (114) make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type . RBRACKET type RPAREN
    (116) make_expr -> MAKE LPAREN MAP LBRACKET type . RBRACKET type RPAREN

    RBRACKET        shift and go to state 272


state 256

    (115) make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type . RPAREN
    (117) make_expr -> MAKE LPAREN LBRACKET RBRACKET type . RPAREN

    RPAREN          shift and go to state 273


state 257

    (108) map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .

    VAR             reduce using rule 108 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    VARIABLE        reduce using rule 108 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    FMT             reduce using rule 108 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    CONTINUE        reduce using rule 108 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    FUNC            reduce using rule 108 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    IF              reduce using rule 108 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    FOR             reduce using rule 108 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    TYPE            reduce using rule 108 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    SWITCH          reduce using rule 108 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    LBRACKET        reduce using rule 108 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    BREAK           reduce using rule 108 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    RETURN          reduce using rule 108 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    $end            reduce using rule 108 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    RBRACE          reduce using rule 108 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    CASE            reduce using rule 108 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)
    DEFAULT         reduce using rule 108 (map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type .)


state 258

    (37) print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression . RPAREN
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    RPAREN          shift and go to state 274
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114


state 259

    (39) print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE . RPAREN

    RPAREN          shift and go to state 275


state 260

    (40) input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .

    VAR             reduce using rule 40 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    VARIABLE        reduce using rule 40 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    FMT             reduce using rule 40 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    CONTINUE        reduce using rule 40 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    FUNC            reduce using rule 40 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    IF              reduce using rule 40 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    FOR             reduce using rule 40 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    TYPE            reduce using rule 40 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    SWITCH          reduce using rule 40 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    LBRACKET        reduce using rule 40 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    BREAK           reduce using rule 40 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    RETURN          reduce using rule 40 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    $end            reduce using rule 40 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    RBRACE          reduce using rule 40 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    CASE            reduce using rule 40 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)
    DEFAULT         reduce using rule 40 (input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN .)


state 261

    (91) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN . param_list RPAREN type LBRACE program RBRACE
    (92) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN . RPAREN type LBRACE program RBRACE
    (49) param_list -> . param
    (50) param_list -> . param COMMA param_list
    (51) param -> . VARIABLE type

    RPAREN          shift and go to state 276
    VARIABLE        shift and go to state 148

    param_list                     shift and go to state 277
    param                          shift and go to state 151

state 262

    (45) func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program . RBRACE

    RBRACE          shift and go to state 278


state 263

    (46) func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .

    VAR             reduce using rule 46 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    VARIABLE        reduce using rule 46 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    FMT             reduce using rule 46 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    CONTINUE        reduce using rule 46 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    FUNC            reduce using rule 46 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    IF              reduce using rule 46 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    FOR             reduce using rule 46 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    TYPE            reduce using rule 46 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    SWITCH          reduce using rule 46 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    LBRACKET        reduce using rule 46 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    BREAK           reduce using rule 46 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    RETURN          reduce using rule 46 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    $end            reduce using rule 46 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    RBRACE          reduce using rule 46 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    CASE            reduce using rule 46 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)
    DEFAULT         reduce using rule 46 (func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE .)


state 264

    (116) make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET . type RPAREN
    (79) type -> . INT_TYPE
    (80) type -> . FLOAT64_TYPE
    (81) type -> . STRING_TYPE
    (82) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 94
    FLOAT64_TYPE    shift and go to state 95
    STRING_TYPE     shift and go to state 96
    BOOL_TYPE       shift and go to state 97

    type                           shift and go to state 279

state 265

    (117) make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .

    TIMES           reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    DIVIDE          reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    PLUS            reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    MINUS           reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    AND             reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    OR              reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    EQ              reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    NE              reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LT              reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    GT              reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LE              reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    GE              reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LBRACE          reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    VAR             reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    VARIABLE        reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    FMT             reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    CONTINUE        reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    FUNC            reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    IF              reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    FOR             reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    TYPE            reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    SWITCH          reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LBRACKET        reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    BREAK           reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    RETURN          reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    $end            reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    RBRACE          reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    CASE            reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    DEFAULT         reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    SEMICOLON       reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    COMMA           reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    RPAREN          reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    COLON           reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)


state 266

    (86) for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .

    VAR             reduce using rule 86 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    VARIABLE        reduce using rule 86 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    FMT             reduce using rule 86 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    CONTINUE        reduce using rule 86 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    FUNC            reduce using rule 86 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    IF              reduce using rule 86 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    FOR             reduce using rule 86 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    TYPE            reduce using rule 86 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    SWITCH          reduce using rule 86 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    LBRACKET        reduce using rule 86 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    BREAK           reduce using rule 86 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    RETURN          reduce using rule 86 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    $end            reduce using rule 86 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    RBRACE          reduce using rule 86 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    CASE            reduce using rule 86 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)
    DEFAULT         reduce using rule 86 (for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block .)


state 267

    (124) array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .

    VAR             reduce using rule 124 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    VARIABLE        reduce using rule 124 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    FMT             reduce using rule 124 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    CONTINUE        reduce using rule 124 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    FUNC            reduce using rule 124 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    IF              reduce using rule 124 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    FOR             reduce using rule 124 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    TYPE            reduce using rule 124 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    SWITCH          reduce using rule 124 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    LBRACKET        reduce using rule 124 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    BREAK           reduce using rule 124 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    RETURN          reduce using rule 124 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    $end            reduce using rule 124 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    RBRACE          reduce using rule 124 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    CASE            reduce using rule 124 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)
    DEFAULT         reduce using rule 124 (array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE .)


state 268

    (126) array_values -> expression COMMA . array_values
    (125) array_values -> . expression
    (126) array_values -> . expression COMMA array_values
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 251
    array_values                   shift and go to state 280
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 269

    (110) map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE . map_params RBRACE
    (118) map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE . map_kv_pairs RBRACE
    (111) map_params -> . map_param
    (112) map_params -> . map_param COMMA map_params
    (119) map_kv_pairs -> . map_kv_pair
    (120) map_kv_pairs -> . map_kv_pair COMMA map_kv_pairs
    (113) map_param -> . STRING COLON factor
    (121) map_kv_pair -> . STRING COLON expression

    STRING          shift and go to state 285

    map_params                     shift and go to state 281
    map_kv_pairs                   shift and go to state 282
    map_param                      shift and go to state 283
    map_kv_pair                    shift and go to state 284

state 270

    (128) slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .

    VAR             reduce using rule 128 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    VARIABLE        reduce using rule 128 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    FMT             reduce using rule 128 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    CONTINUE        reduce using rule 128 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    FUNC            reduce using rule 128 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    IF              reduce using rule 128 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    FOR             reduce using rule 128 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    TYPE            reduce using rule 128 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    SWITCH          reduce using rule 128 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    LBRACKET        reduce using rule 128 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    BREAK           reduce using rule 128 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    RETURN          reduce using rule 128 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    $end            reduce using rule 128 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    RBRACE          reduce using rule 128 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    CASE            reduce using rule 128 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)
    DEFAULT         reduce using rule 128 (slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE .)


state 271

    (130) slice_values -> expression COMMA . slice_values
    (129) slice_values -> . expression
    (130) slice_values -> . expression COMMA slice_values
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 254
    slice_values                   shift and go to state 286
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 272

    (114) make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET . type RPAREN
    (116) make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET . type RPAREN
    (79) type -> . INT_TYPE
    (80) type -> . FLOAT64_TYPE
    (81) type -> . STRING_TYPE
    (82) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 94
    FLOAT64_TYPE    shift and go to state 95
    STRING_TYPE     shift and go to state 96
    BOOL_TYPE       shift and go to state 97

    type                           shift and go to state 287

state 273

    (115) make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .
    (117) make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .

  ! reduce/reduce conflict for VAR resolved using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for FMT resolved using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for FUNC resolved using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for IF resolved using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for FOR resolved using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for TYPE resolved using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for SWITCH resolved using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for BREAK resolved using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for RETURN resolved using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for RBRACE resolved using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for CASE resolved using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    VAR             reduce using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    VARIABLE        reduce using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    FMT             reduce using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    CONTINUE        reduce using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    FUNC            reduce using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    IF              reduce using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    FOR             reduce using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    TYPE            reduce using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    SWITCH          reduce using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LBRACKET        reduce using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    BREAK           reduce using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    RETURN          reduce using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    $end            reduce using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    RBRACE          reduce using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    CASE            reduce using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    DEFAULT         reduce using rule 115 (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    TIMES           reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    DIVIDE          reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    PLUS            reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    MINUS           reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    AND             reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    OR              reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    EQ              reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    NE              reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LT              reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    GT              reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    LE              reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)
    GE              reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .)

  ! VAR             [ reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! VARIABLE        [ reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! FMT             [ reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! CONTINUE        [ reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! FUNC            [ reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! IF              [ reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! FOR             [ reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! TYPE            [ reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! SWITCH          [ reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! LBRACKET        [ reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! BREAK           [ reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! RETURN          [ reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! $end            [ reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! RBRACE          [ reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! CASE            [ reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]
  ! DEFAULT         [ reduce using rule 117 (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN .) ]


state 274

    (37) print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .

    VAR             reduce using rule 37 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    VARIABLE        reduce using rule 37 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    FMT             reduce using rule 37 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    CONTINUE        reduce using rule 37 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    FUNC            reduce using rule 37 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    IF              reduce using rule 37 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    FOR             reduce using rule 37 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    TYPE            reduce using rule 37 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    SWITCH          reduce using rule 37 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    LBRACKET        reduce using rule 37 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    BREAK           reduce using rule 37 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    RETURN          reduce using rule 37 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    $end            reduce using rule 37 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    RBRACE          reduce using rule 37 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    CASE            reduce using rule 37 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)
    DEFAULT         reduce using rule 37 (print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN .)


state 275

    (39) print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .

    VAR             reduce using rule 39 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    VARIABLE        reduce using rule 39 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    FMT             reduce using rule 39 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    CONTINUE        reduce using rule 39 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    FUNC            reduce using rule 39 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    IF              reduce using rule 39 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    FOR             reduce using rule 39 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    TYPE            reduce using rule 39 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    SWITCH          reduce using rule 39 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    LBRACKET        reduce using rule 39 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    BREAK           reduce using rule 39 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    RETURN          reduce using rule 39 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    $end            reduce using rule 39 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    RBRACE          reduce using rule 39 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    CASE            reduce using rule 39 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)
    DEFAULT         reduce using rule 39 (print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN .)


state 276

    (92) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN . type LBRACE program RBRACE
    (79) type -> . INT_TYPE
    (80) type -> . FLOAT64_TYPE
    (81) type -> . STRING_TYPE
    (82) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 94
    FLOAT64_TYPE    shift and go to state 95
    STRING_TYPE     shift and go to state 96
    BOOL_TYPE       shift and go to state 97

    type                           shift and go to state 288

state 277

    (91) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list . RPAREN type LBRACE program RBRACE

    RPAREN          shift and go to state 289


state 278

    (45) func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .

    VAR             reduce using rule 45 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    VARIABLE        reduce using rule 45 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    FMT             reduce using rule 45 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    CONTINUE        reduce using rule 45 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    FUNC            reduce using rule 45 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    IF              reduce using rule 45 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    FOR             reduce using rule 45 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    TYPE            reduce using rule 45 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    SWITCH          reduce using rule 45 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    LBRACKET        reduce using rule 45 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    BREAK           reduce using rule 45 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    RETURN          reduce using rule 45 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    $end            reduce using rule 45 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    RBRACE          reduce using rule 45 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    CASE            reduce using rule 45 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    DEFAULT         reduce using rule 45 (func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)


state 279

    (116) make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type . RPAREN

    RPAREN          shift and go to state 290


state 280

    (126) array_values -> expression COMMA array_values .

    RBRACE          reduce using rule 126 (array_values -> expression COMMA array_values .)


state 281

    (110) map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params . RBRACE

    RBRACE          shift and go to state 291


state 282

    (118) map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs . RBRACE

    RBRACE          shift and go to state 292


state 283

    (111) map_params -> map_param .
    (112) map_params -> map_param . COMMA map_params

    RBRACE          reduce using rule 111 (map_params -> map_param .)
    COMMA           shift and go to state 293


state 284

    (119) map_kv_pairs -> map_kv_pair .
    (120) map_kv_pairs -> map_kv_pair . COMMA map_kv_pairs

    RBRACE          reduce using rule 119 (map_kv_pairs -> map_kv_pair .)
    COMMA           shift and go to state 294


state 285

    (113) map_param -> STRING . COLON factor
    (121) map_kv_pair -> STRING . COLON expression

    COLON           shift and go to state 295


state 286

    (130) slice_values -> expression COMMA slice_values .

    RBRACE          reduce using rule 130 (slice_values -> expression COMMA slice_values .)


state 287

    (114) make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type . RPAREN
    (116) make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type . RPAREN

    RPAREN          shift and go to state 296


state 288

    (92) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type . LBRACE program RBRACE

    LBRACE          shift and go to state 297


state 289

    (91) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN . type LBRACE program RBRACE
    (79) type -> . INT_TYPE
    (80) type -> . FLOAT64_TYPE
    (81) type -> . STRING_TYPE
    (82) type -> . BOOL_TYPE

    INT_TYPE        shift and go to state 94
    FLOAT64_TYPE    shift and go to state 95
    STRING_TYPE     shift and go to state 96
    BOOL_TYPE       shift and go to state 97

    type                           shift and go to state 298

state 290

    (116) make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .

    TIMES           reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    DIVIDE          reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    PLUS            reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    MINUS           reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    AND             reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    OR              reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    EQ              reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    NE              reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LT              reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    GT              reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LE              reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    GE              reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LBRACE          reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    VAR             reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    VARIABLE        reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FMT             reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    CONTINUE        reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FUNC            reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    IF              reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FOR             reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    TYPE            reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    SWITCH          reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LBRACKET        reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    BREAK           reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    RETURN          reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    $end            reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    RBRACE          reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    CASE            reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    DEFAULT         reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    SEMICOLON       reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    COMMA           reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    RPAREN          reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    COLON           reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)


state 291

    (110) map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .

    VAR             reduce using rule 110 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    VARIABLE        reduce using rule 110 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    FMT             reduce using rule 110 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    CONTINUE        reduce using rule 110 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    FUNC            reduce using rule 110 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    IF              reduce using rule 110 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    FOR             reduce using rule 110 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    TYPE            reduce using rule 110 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    SWITCH          reduce using rule 110 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    LBRACKET        reduce using rule 110 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    BREAK           reduce using rule 110 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    RETURN          reduce using rule 110 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    $end            reduce using rule 110 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    RBRACE          reduce using rule 110 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    CASE            reduce using rule 110 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)
    DEFAULT         reduce using rule 110 (map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE .)


state 292

    (118) map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .

    VAR             reduce using rule 118 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    VARIABLE        reduce using rule 118 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    FMT             reduce using rule 118 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    CONTINUE        reduce using rule 118 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    FUNC            reduce using rule 118 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    IF              reduce using rule 118 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    FOR             reduce using rule 118 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    TYPE            reduce using rule 118 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    SWITCH          reduce using rule 118 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    LBRACKET        reduce using rule 118 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    BREAK           reduce using rule 118 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    RETURN          reduce using rule 118 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    $end            reduce using rule 118 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    RBRACE          reduce using rule 118 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    CASE            reduce using rule 118 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)
    DEFAULT         reduce using rule 118 (map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE .)


state 293

    (112) map_params -> map_param COMMA . map_params
    (111) map_params -> . map_param
    (112) map_params -> . map_param COMMA map_params
    (113) map_param -> . STRING COLON factor

    STRING          shift and go to state 300

    map_param                      shift and go to state 283
    map_params                     shift and go to state 299

state 294

    (120) map_kv_pairs -> map_kv_pair COMMA . map_kv_pairs
    (119) map_kv_pairs -> . map_kv_pair
    (120) map_kv_pairs -> . map_kv_pair COMMA map_kv_pairs
    (121) map_kv_pair -> . STRING COLON expression

    STRING          shift and go to state 302

    map_kv_pair                    shift and go to state 284
    map_kv_pairs                   shift and go to state 301

state 295

    (113) map_param -> STRING COLON . factor
    (121) map_kv_pair -> STRING COLON . expression
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE

    NUMBER          shift and go to state 305
    FLOAT           shift and go to state 306
    STRING          shift and go to state 64
    VARIABLE        shift and go to state 307
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    factor                         shift and go to state 303
    expression                     shift and go to state 304
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70
    term                           shift and go to state 62

state 296

    (114) make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .
    (116) make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .

  ! reduce/reduce conflict for VAR resolved using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for FMT resolved using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for FUNC resolved using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for IF resolved using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for FOR resolved using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for TYPE resolved using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for SWITCH resolved using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for BREAK resolved using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for RETURN resolved using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for RBRACE resolved using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for CASE resolved using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    VAR             reduce using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    VARIABLE        reduce using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FMT             reduce using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    CONTINUE        reduce using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FUNC            reduce using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    IF              reduce using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    FOR             reduce using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    TYPE            reduce using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    SWITCH          reduce using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LBRACKET        reduce using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    BREAK           reduce using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    RETURN          reduce using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    $end            reduce using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    RBRACE          reduce using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    CASE            reduce using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    DEFAULT         reduce using rule 114 (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    TIMES           reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    DIVIDE          reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    PLUS            reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    MINUS           reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    AND             reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    OR              reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    EQ              reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    NE              reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LT              reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    GT              reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    LE              reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)
    GE              reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .)

  ! VAR             [ reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! VARIABLE        [ reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! FMT             [ reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! CONTINUE        [ reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! FUNC            [ reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! IF              [ reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! FOR             [ reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! TYPE            [ reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! SWITCH          [ reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! LBRACKET        [ reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! BREAK           [ reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! RETURN          [ reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! $end            [ reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! RBRACE          [ reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! CASE            [ reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]
  ! DEFAULT         [ reduce using rule 116 (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN .) ]


state 297

    (92) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE . program RBRACE
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_call
    (15) statement -> . if_stmt
    (16) statement -> . for_stmt
    (17) statement -> . struct_def
    (18) statement -> . switch_stmt
    (19) statement -> . map_declaration
    (20) statement -> . map_declaration_values
    (21) statement -> . array_declaration
    (22) statement -> . array_literal
    (23) statement -> . slice_declaration
    (24) statement -> . make_stmt
    (25) statement -> . new_stmt
    (26) statement -> . break_stmt
    (27) statement -> . increment_stmt
    (28) statement -> . return_stmt
    (29) declaration -> . VAR VARIABLE type
    (30) declaration -> . VAR VARIABLE type ASIG expression
    (31) declaration -> . VAR VARIABLE type ASSIGN expression
    (35) assignment -> . VARIABLE ASSIGN expression
    (36) assignment -> . VARIABLE ASIG expression
    (37) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (38) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (39) print_stmt -> . FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN
    (40) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (87) continue_stmt -> . CONTINUE
    (91) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (92) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (41) func_def -> . func_header func_body
    (45) func_no_params -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (46) func_no_params -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN
    (83) if_stmt -> . IF expression block
    (84) if_stmt -> . IF expression block ELSE block
    (85) for_stmt -> . FOR expression block
    (86) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (93) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (102) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (103) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (108) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (109) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (110) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE
    (118) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (122) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (123) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (124) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (127) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (128) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (114) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (115) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (131) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (132) break_stmt -> . BREAK
    (133) increment_stmt -> . VARIABLE INCREMENT
    (134) increment_stmt -> . VARIABLE DECREMENT
    (44) return_stmt -> . RETURN expression
    (42) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type

    VAR             shift and go to state 32
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 33
    CONTINUE        shift and go to state 34
    FUNC            shift and go to state 35
    IF              shift and go to state 37
    FOR             shift and go to state 38
    TYPE            shift and go to state 39
    SWITCH          shift and go to state 40
    LBRACKET        shift and go to state 41
    BREAK           shift and go to state 42
    RETURN          shift and go to state 43

    program                        shift and go to state 308
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_call                      shift and go to state 17
    if_stmt                        shift and go to state 18
    for_stmt                       shift and go to state 19
    struct_def                     shift and go to state 20
    switch_stmt                    shift and go to state 21
    map_declaration                shift and go to state 22
    map_declaration_values         shift and go to state 23
    array_declaration              shift and go to state 24
    array_literal                  shift and go to state 25
    slice_declaration              shift and go to state 26
    make_stmt                      shift and go to state 27
    new_stmt                       shift and go to state 28
    break_stmt                     shift and go to state 29
    increment_stmt                 shift and go to state 30
    return_stmt                    shift and go to state 31
    func_header                    shift and go to state 36

state 298

    (91) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type . LBRACE program RBRACE

    LBRACE          shift and go to state 309


state 299

    (112) map_params -> map_param COMMA map_params .

    RBRACE          reduce using rule 112 (map_params -> map_param COMMA map_params .)


state 300

    (113) map_param -> STRING . COLON factor

    COLON           shift and go to state 310


state 301

    (120) map_kv_pairs -> map_kv_pair COMMA map_kv_pairs .

    RBRACE          reduce using rule 120 (map_kv_pairs -> map_kv_pair COMMA map_kv_pairs .)


state 302

    (121) map_kv_pair -> STRING . COLON expression

    COLON           shift and go to state 311


state 303

    (113) map_param -> STRING COLON factor .
    (65) term -> factor .

  ! reduce/reduce conflict for COMMA resolved using rule 65 (term -> factor .)
  ! reduce/reduce conflict for RBRACE resolved using rule 65 (term -> factor .)
    TIMES           reduce using rule 65 (term -> factor .)
    DIVIDE          reduce using rule 65 (term -> factor .)
    PLUS            reduce using rule 65 (term -> factor .)
    MINUS           reduce using rule 65 (term -> factor .)
    AND             reduce using rule 65 (term -> factor .)
    OR              reduce using rule 65 (term -> factor .)
    EQ              reduce using rule 65 (term -> factor .)
    NE              reduce using rule 65 (term -> factor .)
    LT              reduce using rule 65 (term -> factor .)
    GT              reduce using rule 65 (term -> factor .)
    LE              reduce using rule 65 (term -> factor .)
    GE              reduce using rule 65 (term -> factor .)
    COMMA           reduce using rule 65 (term -> factor .)
    RBRACE          reduce using rule 65 (term -> factor .)

  ! COMMA           [ reduce using rule 113 (map_param -> STRING COLON factor .) ]
  ! RBRACE          [ reduce using rule 113 (map_param -> STRING COLON factor .) ]


state 304

    (121) map_kv_pair -> STRING COLON expression .
    (55) expression -> expression . PLUS term
    (56) expression -> expression . MINUS term
    (57) expression -> expression . AND expression
    (58) expression -> expression . OR expression
    (59) expression -> expression . EQ expression
    (60) expression -> expression . NE expression
    (61) expression -> expression . LT expression
    (62) expression -> expression . GT expression
    (63) expression -> expression . LE expression
    (64) expression -> expression . GE expression

    COMMA           reduce using rule 121 (map_kv_pair -> STRING COLON expression .)
    RBRACE          reduce using rule 121 (map_kv_pair -> STRING COLON expression .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106
    AND             shift and go to state 107
    OR              shift and go to state 108
    EQ              shift and go to state 109
    NE              shift and go to state 110
    LT              shift and go to state 111
    GT              shift and go to state 112
    LE              shift and go to state 113
    GE              shift and go to state 114


state 305

    (69) factor -> NUMBER .
    (32) expression -> NUMBER .

  ! reduce/reduce conflict for PLUS resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for MINUS resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for AND resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for OR resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for EQ resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for NE resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for LT resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for GT resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for LE resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for GE resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for COMMA resolved using rule 32 (expression -> NUMBER .)
  ! reduce/reduce conflict for RBRACE resolved using rule 32 (expression -> NUMBER .)
    TIMES           reduce using rule 69 (factor -> NUMBER .)
    DIVIDE          reduce using rule 69 (factor -> NUMBER .)
    PLUS            reduce using rule 32 (expression -> NUMBER .)
    MINUS           reduce using rule 32 (expression -> NUMBER .)
    AND             reduce using rule 32 (expression -> NUMBER .)
    OR              reduce using rule 32 (expression -> NUMBER .)
    EQ              reduce using rule 32 (expression -> NUMBER .)
    NE              reduce using rule 32 (expression -> NUMBER .)
    LT              reduce using rule 32 (expression -> NUMBER .)
    GT              reduce using rule 32 (expression -> NUMBER .)
    LE              reduce using rule 32 (expression -> NUMBER .)
    GE              reduce using rule 32 (expression -> NUMBER .)
    COMMA           reduce using rule 32 (expression -> NUMBER .)
    RBRACE          reduce using rule 32 (expression -> NUMBER .)

  ! COMMA           [ reduce using rule 69 (factor -> NUMBER .) ]
  ! RBRACE          [ reduce using rule 69 (factor -> NUMBER .) ]
  ! PLUS            [ reduce using rule 69 (factor -> NUMBER .) ]
  ! MINUS           [ reduce using rule 69 (factor -> NUMBER .) ]
  ! AND             [ reduce using rule 69 (factor -> NUMBER .) ]
  ! OR              [ reduce using rule 69 (factor -> NUMBER .) ]
  ! EQ              [ reduce using rule 69 (factor -> NUMBER .) ]
  ! NE              [ reduce using rule 69 (factor -> NUMBER .) ]
  ! LT              [ reduce using rule 69 (factor -> NUMBER .) ]
  ! GT              [ reduce using rule 69 (factor -> NUMBER .) ]
  ! LE              [ reduce using rule 69 (factor -> NUMBER .) ]
  ! GE              [ reduce using rule 69 (factor -> NUMBER .) ]


state 306

    (70) factor -> FLOAT .
    (33) expression -> FLOAT .

  ! reduce/reduce conflict for PLUS resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for MINUS resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for AND resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for OR resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for EQ resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for NE resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for LT resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for GT resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for LE resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for GE resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for COMMA resolved using rule 33 (expression -> FLOAT .)
  ! reduce/reduce conflict for RBRACE resolved using rule 33 (expression -> FLOAT .)
    TIMES           reduce using rule 70 (factor -> FLOAT .)
    DIVIDE          reduce using rule 70 (factor -> FLOAT .)
    PLUS            reduce using rule 33 (expression -> FLOAT .)
    MINUS           reduce using rule 33 (expression -> FLOAT .)
    AND             reduce using rule 33 (expression -> FLOAT .)
    OR              reduce using rule 33 (expression -> FLOAT .)
    EQ              reduce using rule 33 (expression -> FLOAT .)
    NE              reduce using rule 33 (expression -> FLOAT .)
    LT              reduce using rule 33 (expression -> FLOAT .)
    GT              reduce using rule 33 (expression -> FLOAT .)
    LE              reduce using rule 33 (expression -> FLOAT .)
    GE              reduce using rule 33 (expression -> FLOAT .)
    COMMA           reduce using rule 33 (expression -> FLOAT .)
    RBRACE          reduce using rule 33 (expression -> FLOAT .)

  ! COMMA           [ reduce using rule 70 (factor -> FLOAT .) ]
  ! RBRACE          [ reduce using rule 70 (factor -> FLOAT .) ]
  ! PLUS            [ reduce using rule 70 (factor -> FLOAT .) ]
  ! MINUS           [ reduce using rule 70 (factor -> FLOAT .) ]
  ! AND             [ reduce using rule 70 (factor -> FLOAT .) ]
  ! OR              [ reduce using rule 70 (factor -> FLOAT .) ]
  ! EQ              [ reduce using rule 70 (factor -> FLOAT .) ]
  ! NE              [ reduce using rule 70 (factor -> FLOAT .) ]
  ! LT              [ reduce using rule 70 (factor -> FLOAT .) ]
  ! GT              [ reduce using rule 70 (factor -> FLOAT .) ]
  ! LE              [ reduce using rule 70 (factor -> FLOAT .) ]
  ! GE              [ reduce using rule 70 (factor -> FLOAT .) ]


state 307

    (72) factor -> VARIABLE .
    (34) expression -> VARIABLE .
    (98) struct_instance -> VARIABLE . LBRACE struct_fields_values RBRACE
    (47) func_call -> VARIABLE . LPAREN arg_list RPAREN
    (48) func_call -> VARIABLE . LPAREN RPAREN
    (68) term -> VARIABLE .

  ! reduce/reduce conflict for PLUS resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for MINUS resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for AND resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for OR resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for EQ resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for NE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LT resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GT resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for TIMES resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 68 (term -> VARIABLE .)
  ! reduce/reduce conflict for PLUS resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for MINUS resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for AND resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for OR resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for EQ resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for NE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LT resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GT resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for LE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for GE resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for COMMA resolved using rule 34 (expression -> VARIABLE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 34 (expression -> VARIABLE .)
    PLUS            reduce using rule 34 (expression -> VARIABLE .)
    MINUS           reduce using rule 34 (expression -> VARIABLE .)
    AND             reduce using rule 34 (expression -> VARIABLE .)
    OR              reduce using rule 34 (expression -> VARIABLE .)
    EQ              reduce using rule 34 (expression -> VARIABLE .)
    NE              reduce using rule 34 (expression -> VARIABLE .)
    LT              reduce using rule 34 (expression -> VARIABLE .)
    GT              reduce using rule 34 (expression -> VARIABLE .)
    LE              reduce using rule 34 (expression -> VARIABLE .)
    GE              reduce using rule 34 (expression -> VARIABLE .)
    COMMA           reduce using rule 34 (expression -> VARIABLE .)
    RBRACE          reduce using rule 34 (expression -> VARIABLE .)
    LBRACE          shift and go to state 116
    LPAREN          shift and go to state 48
    TIMES           reduce using rule 68 (term -> VARIABLE .)
    DIVIDE          reduce using rule 68 (term -> VARIABLE .)

  ! COMMA           [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! RBRACE          [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! TIMES           [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! DIVIDE          [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! PLUS            [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! AND             [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! OR              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! EQ              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! NE              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! LT              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! GT              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! LE              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! GE              [ reduce using rule 72 (factor -> VARIABLE .) ]
  ! PLUS            [ reduce using rule 68 (term -> VARIABLE .) ]
  ! MINUS           [ reduce using rule 68 (term -> VARIABLE .) ]
  ! AND             [ reduce using rule 68 (term -> VARIABLE .) ]
  ! OR              [ reduce using rule 68 (term -> VARIABLE .) ]
  ! EQ              [ reduce using rule 68 (term -> VARIABLE .) ]
  ! NE              [ reduce using rule 68 (term -> VARIABLE .) ]
  ! LT              [ reduce using rule 68 (term -> VARIABLE .) ]
  ! GT              [ reduce using rule 68 (term -> VARIABLE .) ]
  ! LE              [ reduce using rule 68 (term -> VARIABLE .) ]
  ! GE              [ reduce using rule 68 (term -> VARIABLE .) ]
  ! COMMA           [ reduce using rule 68 (term -> VARIABLE .) ]
  ! RBRACE          [ reduce using rule 68 (term -> VARIABLE .) ]


state 308

    (92) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program . RBRACE

    RBRACE          shift and go to state 312


state 309

    (91) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE . program RBRACE
    (4) program -> . statement
    (5) program -> . statement program
    (6) statement -> . declaration
    (7) statement -> . assignment
    (8) statement -> . print_stmt
    (9) statement -> . input_stmt
    (10) statement -> . continue_stmt
    (11) statement -> . struct_method
    (12) statement -> . func_def
    (13) statement -> . func_no_params
    (14) statement -> . func_call
    (15) statement -> . if_stmt
    (16) statement -> . for_stmt
    (17) statement -> . struct_def
    (18) statement -> . switch_stmt
    (19) statement -> . map_declaration
    (20) statement -> . map_declaration_values
    (21) statement -> . array_declaration
    (22) statement -> . array_literal
    (23) statement -> . slice_declaration
    (24) statement -> . make_stmt
    (25) statement -> . new_stmt
    (26) statement -> . break_stmt
    (27) statement -> . increment_stmt
    (28) statement -> . return_stmt
    (29) declaration -> . VAR VARIABLE type
    (30) declaration -> . VAR VARIABLE type ASIG expression
    (31) declaration -> . VAR VARIABLE type ASSIGN expression
    (35) assignment -> . VARIABLE ASSIGN expression
    (36) assignment -> . VARIABLE ASIG expression
    (37) print_stmt -> . FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN
    (38) print_stmt -> . FMT DOT PRINTLN LPAREN expression RPAREN
    (39) print_stmt -> . FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN
    (40) input_stmt -> . FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN
    (87) continue_stmt -> . CONTINUE
    (91) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE
    (92) struct_method -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (41) func_def -> . func_header func_body
    (45) func_no_params -> . FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE
    (46) func_no_params -> . FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN
    (83) if_stmt -> . IF expression block
    (84) if_stmt -> . IF expression block ELSE block
    (85) for_stmt -> . FOR expression block
    (86) for_stmt -> . FOR assignment SEMICOLON expression SEMICOLON for_update block
    (93) struct_def -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (102) switch_stmt -> . SWITCH expression LBRACE case_list RBRACE
    (103) switch_stmt -> . SWITCH LBRACE case_list RBRACE
    (108) map_declaration -> . VAR VARIABLE MAP LBRACKET type RBRACKET type
    (109) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type
    (110) map_declaration -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE
    (118) map_declaration_values -> . VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE
    (122) array_declaration -> . VAR VARIABLE LBRACKET NUMBER RBRACKET type
    (123) array_declaration -> . VAR VARIABLE ASSIGN array_literal
    (124) array_literal -> . LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE
    (127) slice_declaration -> . VAR VARIABLE LBRACKET RBRACKET type
    (128) slice_declaration -> . VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE
    (114) make_stmt -> . VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (115) make_stmt -> . VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (131) new_stmt -> . VARIABLE ASIG NEW LPAREN VARIABLE RPAREN
    (132) break_stmt -> . BREAK
    (133) increment_stmt -> . VARIABLE INCREMENT
    (134) increment_stmt -> . VARIABLE DECREMENT
    (44) return_stmt -> . RETURN expression
    (42) func_header -> . FUNC VARIABLE LPAREN param_list RPAREN type

    VAR             shift and go to state 32
    VARIABLE        shift and go to state 6
    FMT             shift and go to state 33
    CONTINUE        shift and go to state 34
    FUNC            shift and go to state 35
    IF              shift and go to state 37
    FOR             shift and go to state 38
    TYPE            shift and go to state 39
    SWITCH          shift and go to state 40
    LBRACKET        shift and go to state 41
    BREAK           shift and go to state 42
    RETURN          shift and go to state 43

    program                        shift and go to state 313
    statement                      shift and go to state 8
    declaration                    shift and go to state 9
    assignment                     shift and go to state 10
    print_stmt                     shift and go to state 11
    input_stmt                     shift and go to state 12
    continue_stmt                  shift and go to state 13
    struct_method                  shift and go to state 14
    func_def                       shift and go to state 15
    func_no_params                 shift and go to state 16
    func_call                      shift and go to state 17
    if_stmt                        shift and go to state 18
    for_stmt                       shift and go to state 19
    struct_def                     shift and go to state 20
    switch_stmt                    shift and go to state 21
    map_declaration                shift and go to state 22
    map_declaration_values         shift and go to state 23
    array_declaration              shift and go to state 24
    array_literal                  shift and go to state 25
    slice_declaration              shift and go to state 26
    make_stmt                      shift and go to state 27
    new_stmt                       shift and go to state 28
    break_stmt                     shift and go to state 29
    increment_stmt                 shift and go to state 30
    return_stmt                    shift and go to state 31
    func_header                    shift and go to state 36

state 310

    (113) map_param -> STRING COLON . factor
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 156
    FLOAT           shift and go to state 157
    STRING          shift and go to state 64
    VARIABLE        shift and go to state 172
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    factor                         shift and go to state 314
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 311

    (121) map_kv_pair -> STRING COLON . expression
    (32) expression -> . NUMBER
    (33) expression -> . FLOAT
    (34) expression -> . VARIABLE
    (54) expression -> . term
    (55) expression -> . expression PLUS term
    (56) expression -> . expression MINUS term
    (57) expression -> . expression AND expression
    (58) expression -> . expression OR expression
    (59) expression -> . expression EQ expression
    (60) expression -> . expression NE expression
    (61) expression -> . expression LT expression
    (62) expression -> . expression GT expression
    (63) expression -> . expression LE expression
    (64) expression -> . expression GE expression
    (65) term -> . factor
    (66) term -> . term TIMES factor
    (67) term -> . term DIVIDE factor
    (68) term -> . VARIABLE
    (69) factor -> . NUMBER
    (70) factor -> . FLOAT
    (71) factor -> . STRING
    (72) factor -> . VARIABLE
    (73) factor -> . TRUE
    (74) factor -> . FALSE
    (75) factor -> . LPAREN expression RPAREN
    (76) factor -> . make_expr
    (77) factor -> . struct_instance
    (78) factor -> . func_call
    (116) make_expr -> . MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN
    (117) make_expr -> . MAKE LPAREN LBRACKET RBRACKET type RPAREN
    (98) struct_instance -> . VARIABLE LBRACE struct_fields_values RBRACE
    (47) func_call -> . VARIABLE LPAREN arg_list RPAREN
    (48) func_call -> . VARIABLE LPAREN RPAREN

    NUMBER          shift and go to state 59
    FLOAT           shift and go to state 60
    VARIABLE        shift and go to state 61
    STRING          shift and go to state 64
    TRUE            shift and go to state 65
    FALSE           shift and go to state 66
    LPAREN          shift and go to state 67
    MAKE            shift and go to state 71

    expression                     shift and go to state 304
    term                           shift and go to state 62
    factor                         shift and go to state 63
    make_expr                      shift and go to state 68
    struct_instance                shift and go to state 69
    func_call                      shift and go to state 70

state 312

    (92) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .

    VAR             reduce using rule 92 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    VARIABLE        reduce using rule 92 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    FMT             reduce using rule 92 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    CONTINUE        reduce using rule 92 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    FUNC            reduce using rule 92 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    IF              reduce using rule 92 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    FOR             reduce using rule 92 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    TYPE            reduce using rule 92 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    SWITCH          reduce using rule 92 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    LBRACKET        reduce using rule 92 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    BREAK           reduce using rule 92 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    RETURN          reduce using rule 92 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    $end            reduce using rule 92 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    RBRACE          reduce using rule 92 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    CASE            reduce using rule 92 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)
    DEFAULT         reduce using rule 92 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE .)


state 313

    (91) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program . RBRACE

    RBRACE          shift and go to state 315


state 314

    (113) map_param -> STRING COLON factor .

    COMMA           reduce using rule 113 (map_param -> STRING COLON factor .)
    RBRACE          reduce using rule 113 (map_param -> STRING COLON factor .)


state 315

    (91) struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .

    VAR             reduce using rule 91 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    VARIABLE        reduce using rule 91 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    FMT             reduce using rule 91 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    CONTINUE        reduce using rule 91 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    FUNC            reduce using rule 91 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    IF              reduce using rule 91 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    FOR             reduce using rule 91 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    TYPE            reduce using rule 91 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    SWITCH          reduce using rule 91 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    LBRACKET        reduce using rule 91 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    BREAK           reduce using rule 91 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    RETURN          reduce using rule 91 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    $end            reduce using rule 91 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    RBRACE          reduce using rule 91 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    CASE            reduce using rule 91 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)
    DEFAULT         reduce using rule 91 (struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACE in state 61 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 74 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 155 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 159 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 159 resolved as shift
WARNING: shift/reduce conflict for AND in state 159 resolved as shift
WARNING: shift/reduce conflict for OR in state 159 resolved as shift
WARNING: shift/reduce conflict for EQ in state 159 resolved as shift
WARNING: shift/reduce conflict for NE in state 159 resolved as shift
WARNING: shift/reduce conflict for LT in state 159 resolved as shift
WARNING: shift/reduce conflict for GT in state 159 resolved as shift
WARNING: shift/reduce conflict for LE in state 159 resolved as shift
WARNING: shift/reduce conflict for GE in state 159 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 160 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 160 resolved as shift
WARNING: shift/reduce conflict for AND in state 160 resolved as shift
WARNING: shift/reduce conflict for OR in state 160 resolved as shift
WARNING: shift/reduce conflict for EQ in state 160 resolved as shift
WARNING: shift/reduce conflict for NE in state 160 resolved as shift
WARNING: shift/reduce conflict for LT in state 160 resolved as shift
WARNING: shift/reduce conflict for GT in state 160 resolved as shift
WARNING: shift/reduce conflict for LE in state 160 resolved as shift
WARNING: shift/reduce conflict for GE in state 160 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 161 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 161 resolved as shift
WARNING: shift/reduce conflict for AND in state 161 resolved as shift
WARNING: shift/reduce conflict for OR in state 161 resolved as shift
WARNING: shift/reduce conflict for EQ in state 161 resolved as shift
WARNING: shift/reduce conflict for NE in state 161 resolved as shift
WARNING: shift/reduce conflict for LT in state 161 resolved as shift
WARNING: shift/reduce conflict for GT in state 161 resolved as shift
WARNING: shift/reduce conflict for LE in state 161 resolved as shift
WARNING: shift/reduce conflict for GE in state 161 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 162 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 162 resolved as shift
WARNING: shift/reduce conflict for AND in state 162 resolved as shift
WARNING: shift/reduce conflict for OR in state 162 resolved as shift
WARNING: shift/reduce conflict for EQ in state 162 resolved as shift
WARNING: shift/reduce conflict for NE in state 162 resolved as shift
WARNING: shift/reduce conflict for LT in state 162 resolved as shift
WARNING: shift/reduce conflict for GT in state 162 resolved as shift
WARNING: shift/reduce conflict for LE in state 162 resolved as shift
WARNING: shift/reduce conflict for GE in state 162 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 163 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 163 resolved as shift
WARNING: shift/reduce conflict for AND in state 163 resolved as shift
WARNING: shift/reduce conflict for OR in state 163 resolved as shift
WARNING: shift/reduce conflict for EQ in state 163 resolved as shift
WARNING: shift/reduce conflict for NE in state 163 resolved as shift
WARNING: shift/reduce conflict for LT in state 163 resolved as shift
WARNING: shift/reduce conflict for GT in state 163 resolved as shift
WARNING: shift/reduce conflict for LE in state 163 resolved as shift
WARNING: shift/reduce conflict for GE in state 163 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 164 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 164 resolved as shift
WARNING: shift/reduce conflict for AND in state 164 resolved as shift
WARNING: shift/reduce conflict for OR in state 164 resolved as shift
WARNING: shift/reduce conflict for EQ in state 164 resolved as shift
WARNING: shift/reduce conflict for NE in state 164 resolved as shift
WARNING: shift/reduce conflict for LT in state 164 resolved as shift
WARNING: shift/reduce conflict for GT in state 164 resolved as shift
WARNING: shift/reduce conflict for LE in state 164 resolved as shift
WARNING: shift/reduce conflict for GE in state 164 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 165 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 165 resolved as shift
WARNING: shift/reduce conflict for AND in state 165 resolved as shift
WARNING: shift/reduce conflict for OR in state 165 resolved as shift
WARNING: shift/reduce conflict for EQ in state 165 resolved as shift
WARNING: shift/reduce conflict for NE in state 165 resolved as shift
WARNING: shift/reduce conflict for LT in state 165 resolved as shift
WARNING: shift/reduce conflict for GT in state 165 resolved as shift
WARNING: shift/reduce conflict for LE in state 165 resolved as shift
WARNING: shift/reduce conflict for GE in state 165 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 166 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 166 resolved as shift
WARNING: shift/reduce conflict for AND in state 166 resolved as shift
WARNING: shift/reduce conflict for OR in state 166 resolved as shift
WARNING: shift/reduce conflict for EQ in state 166 resolved as shift
WARNING: shift/reduce conflict for NE in state 166 resolved as shift
WARNING: shift/reduce conflict for LT in state 166 resolved as shift
WARNING: shift/reduce conflict for GT in state 166 resolved as shift
WARNING: shift/reduce conflict for LE in state 166 resolved as shift
WARNING: shift/reduce conflict for GE in state 166 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 172 resolved as shift
WARNING: reduce/reduce conflict in state 59 resolved using rule (expression -> NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 59
WARNING: reduce/reduce conflict in state 60 resolved using rule (expression -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 60
WARNING: reduce/reduce conflict in state 61 resolved using rule (expression -> VARIABLE)
WARNING: rejected rule (term -> VARIABLE) in state 61
WARNING: reduce/reduce conflict in state 61 resolved using rule (term -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 61
WARNING: reduce/reduce conflict in state 61 resolved using rule (expression -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 61
WARNING: reduce/reduce conflict in state 74 resolved using rule (expression -> VARIABLE)
WARNING: rejected rule (term -> VARIABLE) in state 74
WARNING: reduce/reduce conflict in state 74 resolved using rule (term -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 74
WARNING: reduce/reduce conflict in state 74 resolved using rule (expression -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 74
WARNING: reduce/reduce conflict in state 155 resolved using rule (term -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 155
WARNING: reduce/reduce conflict in state 273 resolved using rule (make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN)
WARNING: rejected rule (make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN) in state 273
WARNING: reduce/reduce conflict in state 296 resolved using rule (make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN)
WARNING: rejected rule (make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN) in state 296
WARNING: reduce/reduce conflict in state 303 resolved using rule (term -> factor)
WARNING: rejected rule (map_param -> STRING COLON factor) in state 303
WARNING: reduce/reduce conflict in state 305 resolved using rule (expression -> NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 305
WARNING: reduce/reduce conflict in state 306 resolved using rule (expression -> FLOAT)
WARNING: rejected rule (factor -> FLOAT) in state 306
WARNING: reduce/reduce conflict in state 307 resolved using rule (expression -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 307
WARNING: reduce/reduce conflict in state 307 resolved using rule (term -> VARIABLE)
WARNING: rejected rule (factor -> VARIABLE) in state 307
WARNING: reduce/reduce conflict in state 307 resolved using rule (expression -> VARIABLE)
WARNING: rejected rule (term -> VARIABLE) in state 307
