Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPER
    BREAK
    CONTAINSRUNE
    CONTINUE
    ISDIGIT
    ISLETTER
    MAP
    TOLOWER

Grammar

Rule 0     S' -> program
Rule 1     program -> PACKAGE MAIN import_section function_list
Rule 2     program -> PACKAGE MAIN import_section empty
Rule 3     program -> PACKAGE VARIABLE import_section function_list
Rule 4     program -> PACKAGE VARIABLE import_section empty
Rule 5     import_section -> IMPORT import_list
Rule 6     import_section -> empty
Rule 7     import_list -> STRING
Rule 8     import_list -> LPAREN string_list RPAREN
Rule 9     string_list -> string_list STRING
Rule 10    string_list -> STRING
Rule 11    function_list -> function_list function
Rule 12    function_list -> function
Rule 13    function_list -> function_list type_declaration
Rule 14    function_list -> type_declaration
Rule 15    function_list -> empty
Rule 16    function -> FUNC VARIABLE LPAREN param_list RPAREN return_type block
Rule 17    function -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type block
Rule 18    function -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type block
Rule 19    function -> FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type block
Rule 20    function -> FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type block
Rule 21    param_list -> param_list COMMA param
Rule 22    param_list -> param
Rule 23    param_list -> empty
Rule 24    param -> VARIABLE type
Rule 25    return_type -> type
Rule 26    return_type -> LPAREN type_list RPAREN
Rule 27    return_type -> empty
Rule 28    type_list -> type_list COMMA type
Rule 29    type_list -> type
Rule 30    type -> STRING_TYPE
Rule 31    type -> INT_TYPE
Rule 32    type -> BOOL_TYPE
Rule 33    type -> FLOAT64_TYPE
Rule 34    type -> VARIABLE
Rule 35    type -> LBRACKET RBRACKET VARIABLE
Rule 36    block -> LBRACE statement_list RBRACE
Rule 37    statement_list -> statement_list statement
Rule 38    statement_list -> empty
Rule 39    statement -> declaration
Rule 40    statement -> assignment
Rule 41    statement -> short_declaration
Rule 42    statement -> if_statement
Rule 43    statement -> for_loop
Rule 44    statement -> function_call SEMICOLON
Rule 45    statement -> RETURN expression_list
Rule 46    statement -> RETURN expression_list SEMICOLON
Rule 47    statement -> FOR VARIABLE COMMA VARIABLE ASSIGN_SHORT RANGE variable block
Rule 48    statement -> variable INCREMENT
Rule 49    statement -> variable DECREMENT
Rule 50    statement -> SWITCH LBRACE case_list RBRACE
Rule 51    statement -> SWITCH expression LBRACE case_list RBRACE
Rule 52    statement -> type_declaration
Rule 53    declaration -> VAR VARIABLE ASSIGN expression
Rule 54    declaration -> VAR VARIABLE ASSIGN expression SEMICOLON
Rule 55    assignment -> variable ASSIGN expression
Rule 56    assignment -> variable ASSIGN expression SEMICOLON
Rule 57    assignment -> variable PLUS_ASSIGN expression
Rule 58    assignment -> variable MINUS_ASSIGN expression
Rule 59    assignment -> variable TIMES_ASSIGN expression
Rule 60    assignment -> variable DIVIDE_ASSIGN expression
Rule 61    if_statement -> IF expression block else_clause
Rule 62    else_clause -> ELSE block
Rule 63    else_clause -> empty
Rule 64    for_loop -> FOR VARIABLE ASSIGN expression SEMICOLON expression SEMICOLON assignment block
Rule 65    for_loop -> FOR VARIABLE ASSIGN_SHORT expression SEMICOLON expression SEMICOLON increment_statement block
Rule 66    for_loop -> FOR variable_list ASSIGN_SHORT RANGE variable block
Rule 67    increment_statement -> variable INCREMENT
Rule 68    increment_statement -> variable DECREMENT
Rule 69    function_call -> variable LPAREN argument_list RPAREN
Rule 70    function_call -> variable LPAREN RPAREN
Rule 71    function_call -> APPEND LPAREN argument_list RPAREN
Rule 72    function_call -> APPEND LPAREN RPAREN
Rule 73    function_call -> variable DOT APPEND LPAREN argument_list RPAREN
Rule 74    function_call -> variable DOT APPEND LPAREN RPAREN
Rule 75    function_call -> PRINTLN LPAREN argument_list RPAREN
Rule 76    function_call -> PRINTLN LPAREN RPAREN
Rule 77    function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN
Rule 78    function_call -> variable DOT PRINTLN LPAREN RPAREN
Rule 79    function_call -> PRINTF LPAREN argument_list RPAREN
Rule 80    function_call -> PRINTF LPAREN RPAREN
Rule 81    function_call -> variable DOT PRINTF LPAREN argument_list RPAREN
Rule 82    function_call -> variable DOT PRINTF LPAREN RPAREN
Rule 83    argument_list -> expression
Rule 84    argument_list -> argument_list COMMA expression
Rule 85    expression -> expression PLUS expression
Rule 86    expression -> expression MINUS expression
Rule 87    expression -> expression TIMES expression
Rule 88    expression -> expression DIVIDE expression
Rule 89    expression -> expression MOD expression
Rule 90    expression -> expression LT expression
Rule 91    expression -> expression LE expression
Rule 92    expression -> expression GT expression
Rule 93    expression -> expression GE expression
Rule 94    expression -> expression EQ expression
Rule 95    expression -> expression NE expression
Rule 96    expression -> expression AND expression
Rule 97    expression -> expression OR expression
Rule 98    expression -> LPAREN expression RPAREN
Rule 99    expression -> NUMBER
Rule 100   expression -> variable
Rule 101   expression -> function_call
Rule 102   expression -> STRING
Rule 103   expression -> TRUE
Rule 104   expression -> FALSE
Rule 105   empty -> <empty>
Rule 106   case_list -> case_list case
Rule 107   case_list -> case
Rule 108   case -> CASE expression COLON statement_list
Rule 109   case -> DEFAULT COLON statement_list
Rule 110   variable -> VARIABLE
Rule 111   variable -> variable DOT VARIABLE
Rule 112   variable -> variable LBRACKET expression RBRACKET
Rule 113   short_declaration -> variable_list ASSIGN_SHORT expression_list
Rule 114   short_declaration -> variable_list ASSIGN_SHORT expression_list SEMICOLON
Rule 115   variable_list -> variable
Rule 116   variable_list -> variable COMMA variable_list
Rule 117   expression_list -> expression
Rule 118   expression_list -> expression COMMA expression_list
Rule 119   expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN
Rule 120   expression -> FLOAT64_TYPE LPAREN expression RPAREN
Rule 121   expression -> INT_TYPE LPAREN expression RPAREN
Rule 122   expression -> STRING_TYPE LPAREN expression RPAREN
Rule 123   expression -> BOOL_TYPE LPAREN expression RPAREN
Rule 124   expression -> VARIABLE LPAREN expression RPAREN
Rule 125   type_declaration -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
Rule 126   struct_fields -> struct_fields struct_field
Rule 127   struct_fields -> struct_field
Rule 128   struct_fields -> empty
Rule 129   struct_field -> VARIABLE type
Rule 130   struct_field -> empty
Rule 131   expression -> VARIABLE LBRACE field_list RBRACE
Rule 132   field_list -> field_list COMMA field
Rule 133   field_list -> field
Rule 134   field_list -> empty
Rule 135   field -> VARIABLE COLON expression

Terminals, with rules where they appear

AMPER                : 
AND                  : 96
APPEND               : 71 72 73 74
ASSIGN               : 53 54 55 56 64
ASSIGN_SHORT         : 47 65 66 113 114
BOOL_TYPE            : 32 123
BREAK                : 
CASE                 : 108
COLON                : 108 109 135
COMMA                : 21 28 47 84 116 118 132
CONTAINSRUNE         : 
CONTINUE             : 
DECREMENT            : 49 68
DEFAULT              : 109
DIVIDE               : 88
DIVIDE_ASSIGN        : 60
DOT                  : 73 74 77 78 81 82 111
ELSE                 : 62
EQ                   : 94
FALSE                : 104
FLOAT64_TYPE         : 33 120
FOR                  : 47 64 65 66
FUNC                 : 16 17 18 19 20
GE                   : 93
GT                   : 92
IF                   : 61
IMPORT               : 5
INCREMENT            : 48 67
INT_TYPE             : 31 121
ISDIGIT              : 
ISLETTER             : 
LBRACE               : 36 50 51 125 131
LBRACKET             : 35 112 119
LE                   : 91
LPAREN               : 8 16 17 17 18 18 19 19 20 20 26 69 70 71 72 73 74 75 76 77 78 79 80 81 82 98 119 120 121 122 123 124
LT                   : 90
MAIN                 : 1 2
MAP                  : 
MINUS                : 86
MINUS_ASSIGN         : 58
MOD                  : 89
NE                   : 95
NUMBER               : 99
OR                   : 97
PACKAGE              : 1 2 3 4
PLUS                 : 85
PLUS_ASSIGN          : 57
PRINTF               : 79 80 81 82
PRINTLN              : 75 76 77 78
RANGE                : 47 66
RBRACE               : 36 50 51 125 131
RBRACKET             : 35 112 119
RETURN               : 45 46
RPAREN               : 8 16 17 17 18 18 19 19 20 20 26 69 70 71 72 73 74 75 76 77 78 79 80 81 82 98 119 120 121 122 123 124
SEMICOLON            : 44 46 54 56 64 64 65 65 114
STRING               : 7 9 10 102
STRING_TYPE          : 30 122
STRUCT               : 125
SWITCH               : 50 51
TIMES                : 19 20 87
TIMES_ASSIGN         : 59
TOLOWER              : 
TRUE                 : 103
TYPE                 : 125
VAR                  : 53 54
VARIABLE             : 3 4 16 17 17 17 18 18 18 19 19 19 20 20 20 24 34 35 47 47 53 54 64 65 110 111 124 125 129 131 135
error                : 

Nonterminals, with rules where they appear

argument_list        : 69 71 73 75 77 79 81 84
assignment           : 40 64
block                : 16 17 18 19 20 47 61 62 64 65 66
case                 : 106 107
case_list            : 50 51 106
declaration          : 39
else_clause          : 61
empty                : 2 4 6 15 23 27 38 63 128 130 134
expression           : 51 53 54 55 56 57 58 59 60 61 64 64 65 65 83 84 85 85 86 86 87 87 88 88 89 89 90 90 91 91 92 92 93 93 94 94 95 95 96 96 97 97 98 108 112 117 118 119 120 121 122 123 124 135
expression_list      : 45 46 113 114 118
field                : 132 133
field_list           : 131 132
for_loop             : 43
function             : 11 12
function_call        : 44 101
function_list        : 1 3 11 13
if_statement         : 42
import_list          : 5
import_section       : 1 2 3 4
increment_statement  : 65
param                : 21 22
param_list           : 16 17 19 21
program              : 0
return_type          : 16 17 18 19 20
short_declaration    : 41
statement            : 37
statement_list       : 36 37 108 109
string_list          : 8 9
struct_field         : 126 127
struct_fields        : 125 126
type                 : 24 25 28 29 129
type_declaration     : 13 14 52
type_list            : 26 28
variable             : 47 48 49 55 56 57 58 59 60 66 67 68 69 70 73 74 77 78 81 82 100 111 112 115 116 119
variable_list        : 66 113 114 116

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PACKAGE MAIN import_section function_list
    (2) program -> . PACKAGE MAIN import_section empty
    (3) program -> . PACKAGE VARIABLE import_section function_list
    (4) program -> . PACKAGE VARIABLE import_section empty

    PACKAGE         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PACKAGE . MAIN import_section function_list
    (2) program -> PACKAGE . MAIN import_section empty
    (3) program -> PACKAGE . VARIABLE import_section function_list
    (4) program -> PACKAGE . VARIABLE import_section empty

    MAIN            shift and go to state 3
    VARIABLE        shift and go to state 4


state 3

    (1) program -> PACKAGE MAIN . import_section function_list
    (2) program -> PACKAGE MAIN . import_section empty
    (5) import_section -> . IMPORT import_list
    (6) import_section -> . empty
    (105) empty -> .

    IMPORT          shift and go to state 7
    FUNC            reduce using rule 105 (empty -> .)
    TYPE            reduce using rule 105 (empty -> .)
    $end            reduce using rule 105 (empty -> .)

    import_section                 shift and go to state 5
    empty                          shift and go to state 6

state 4

    (3) program -> PACKAGE VARIABLE . import_section function_list
    (4) program -> PACKAGE VARIABLE . import_section empty
    (5) import_section -> . IMPORT import_list
    (6) import_section -> . empty
    (105) empty -> .

    IMPORT          shift and go to state 7
    FUNC            reduce using rule 105 (empty -> .)
    TYPE            reduce using rule 105 (empty -> .)
    $end            reduce using rule 105 (empty -> .)

    import_section                 shift and go to state 8
    empty                          shift and go to state 6

state 5

    (1) program -> PACKAGE MAIN import_section . function_list
    (2) program -> PACKAGE MAIN import_section . empty
    (11) function_list -> . function_list function
    (12) function_list -> . function
    (13) function_list -> . function_list type_declaration
    (14) function_list -> . type_declaration
    (15) function_list -> . empty
    (105) empty -> .
    (16) function -> . FUNC VARIABLE LPAREN param_list RPAREN return_type block
    (17) function -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type block
    (18) function -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type block
    (19) function -> . FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type block
    (20) function -> . FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type block
    (125) type_declaration -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE

  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
    $end            reduce using rule 105 (empty -> .)
    FUNC            shift and go to state 13
    TYPE            shift and go to state 14

  ! FUNC            [ reduce using rule 105 (empty -> .) ]
  ! TYPE            [ reduce using rule 105 (empty -> .) ]

    function_list                  shift and go to state 9
    empty                          shift and go to state 10
    function                       shift and go to state 11
    type_declaration               shift and go to state 12

state 6

    (6) import_section -> empty .

    FUNC            reduce using rule 6 (import_section -> empty .)
    TYPE            reduce using rule 6 (import_section -> empty .)
    $end            reduce using rule 6 (import_section -> empty .)


state 7

    (5) import_section -> IMPORT . import_list
    (7) import_list -> . STRING
    (8) import_list -> . LPAREN string_list RPAREN

    STRING          shift and go to state 16
    LPAREN          shift and go to state 17

    import_list                    shift and go to state 15

state 8

    (3) program -> PACKAGE VARIABLE import_section . function_list
    (4) program -> PACKAGE VARIABLE import_section . empty
    (11) function_list -> . function_list function
    (12) function_list -> . function
    (13) function_list -> . function_list type_declaration
    (14) function_list -> . type_declaration
    (15) function_list -> . empty
    (105) empty -> .
    (16) function -> . FUNC VARIABLE LPAREN param_list RPAREN return_type block
    (17) function -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type block
    (18) function -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type block
    (19) function -> . FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type block
    (20) function -> . FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type block
    (125) type_declaration -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE

  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for TYPE resolved as shift
    $end            reduce using rule 105 (empty -> .)
    FUNC            shift and go to state 13
    TYPE            shift and go to state 14

  ! FUNC            [ reduce using rule 105 (empty -> .) ]
  ! TYPE            [ reduce using rule 105 (empty -> .) ]

    function_list                  shift and go to state 18
    empty                          shift and go to state 19
    function                       shift and go to state 11
    type_declaration               shift and go to state 12

state 9

    (1) program -> PACKAGE MAIN import_section function_list .
    (11) function_list -> function_list . function
    (13) function_list -> function_list . type_declaration
    (16) function -> . FUNC VARIABLE LPAREN param_list RPAREN return_type block
    (17) function -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type block
    (18) function -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type block
    (19) function -> . FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type block
    (20) function -> . FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type block
    (125) type_declaration -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE

    $end            reduce using rule 1 (program -> PACKAGE MAIN import_section function_list .)
    FUNC            shift and go to state 13
    TYPE            shift and go to state 14

    function                       shift and go to state 20
    type_declaration               shift and go to state 21

state 10

    (2) program -> PACKAGE MAIN import_section empty .
    (15) function_list -> empty .

  ! reduce/reduce conflict for $end resolved using rule 2 (program -> PACKAGE MAIN import_section empty .)
    $end            reduce using rule 2 (program -> PACKAGE MAIN import_section empty .)
    FUNC            reduce using rule 15 (function_list -> empty .)
    TYPE            reduce using rule 15 (function_list -> empty .)

  ! $end            [ reduce using rule 15 (function_list -> empty .) ]


state 11

    (12) function_list -> function .

    FUNC            reduce using rule 12 (function_list -> function .)
    TYPE            reduce using rule 12 (function_list -> function .)
    $end            reduce using rule 12 (function_list -> function .)


state 12

    (14) function_list -> type_declaration .

    FUNC            reduce using rule 14 (function_list -> type_declaration .)
    TYPE            reduce using rule 14 (function_list -> type_declaration .)
    $end            reduce using rule 14 (function_list -> type_declaration .)


state 13

    (16) function -> FUNC . VARIABLE LPAREN param_list RPAREN return_type block
    (17) function -> FUNC . LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type block
    (18) function -> FUNC . LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type block
    (19) function -> FUNC . LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type block
    (20) function -> FUNC . LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type block

    VARIABLE        shift and go to state 22
    LPAREN          shift and go to state 23


state 14

    (125) type_declaration -> TYPE . VARIABLE STRUCT LBRACE struct_fields RBRACE

    VARIABLE        shift and go to state 24


state 15

    (5) import_section -> IMPORT import_list .

    FUNC            reduce using rule 5 (import_section -> IMPORT import_list .)
    TYPE            reduce using rule 5 (import_section -> IMPORT import_list .)
    $end            reduce using rule 5 (import_section -> IMPORT import_list .)


state 16

    (7) import_list -> STRING .

    FUNC            reduce using rule 7 (import_list -> STRING .)
    TYPE            reduce using rule 7 (import_list -> STRING .)
    $end            reduce using rule 7 (import_list -> STRING .)


state 17

    (8) import_list -> LPAREN . string_list RPAREN
    (9) string_list -> . string_list STRING
    (10) string_list -> . STRING

    STRING          shift and go to state 26

    string_list                    shift and go to state 25

state 18

    (3) program -> PACKAGE VARIABLE import_section function_list .
    (11) function_list -> function_list . function
    (13) function_list -> function_list . type_declaration
    (16) function -> . FUNC VARIABLE LPAREN param_list RPAREN return_type block
    (17) function -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type block
    (18) function -> . FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type block
    (19) function -> . FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type block
    (20) function -> . FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type block
    (125) type_declaration -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE

    $end            reduce using rule 3 (program -> PACKAGE VARIABLE import_section function_list .)
    FUNC            shift and go to state 13
    TYPE            shift and go to state 14

    function                       shift and go to state 20
    type_declaration               shift and go to state 21

state 19

    (4) program -> PACKAGE VARIABLE import_section empty .
    (15) function_list -> empty .

  ! reduce/reduce conflict for $end resolved using rule 4 (program -> PACKAGE VARIABLE import_section empty .)
    $end            reduce using rule 4 (program -> PACKAGE VARIABLE import_section empty .)
    FUNC            reduce using rule 15 (function_list -> empty .)
    TYPE            reduce using rule 15 (function_list -> empty .)

  ! $end            [ reduce using rule 15 (function_list -> empty .) ]


state 20

    (11) function_list -> function_list function .

    FUNC            reduce using rule 11 (function_list -> function_list function .)
    TYPE            reduce using rule 11 (function_list -> function_list function .)
    $end            reduce using rule 11 (function_list -> function_list function .)


state 21

    (13) function_list -> function_list type_declaration .

    FUNC            reduce using rule 13 (function_list -> function_list type_declaration .)
    TYPE            reduce using rule 13 (function_list -> function_list type_declaration .)
    $end            reduce using rule 13 (function_list -> function_list type_declaration .)


state 22

    (16) function -> FUNC VARIABLE . LPAREN param_list RPAREN return_type block

    LPAREN          shift and go to state 27


state 23

    (17) function -> FUNC LPAREN . VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type block
    (18) function -> FUNC LPAREN . VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type block
    (19) function -> FUNC LPAREN . VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type block
    (20) function -> FUNC LPAREN . VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type block

    VARIABLE        shift and go to state 28


state 24

    (125) type_declaration -> TYPE VARIABLE . STRUCT LBRACE struct_fields RBRACE

    STRUCT          shift and go to state 29


state 25

    (8) import_list -> LPAREN string_list . RPAREN
    (9) string_list -> string_list . STRING

    RPAREN          shift and go to state 30
    STRING          shift and go to state 31


state 26

    (10) string_list -> STRING .

    RPAREN          reduce using rule 10 (string_list -> STRING .)
    STRING          reduce using rule 10 (string_list -> STRING .)


state 27

    (16) function -> FUNC VARIABLE LPAREN . param_list RPAREN return_type block
    (21) param_list -> . param_list COMMA param
    (22) param_list -> . param
    (23) param_list -> . empty
    (24) param -> . VARIABLE type
    (105) empty -> .

    VARIABLE        shift and go to state 32
    RPAREN          reduce using rule 105 (empty -> .)
    COMMA           reduce using rule 105 (empty -> .)

    param_list                     shift and go to state 33
    param                          shift and go to state 34
    empty                          shift and go to state 35

state 28

    (17) function -> FUNC LPAREN VARIABLE . VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type block
    (18) function -> FUNC LPAREN VARIABLE . VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type block
    (19) function -> FUNC LPAREN VARIABLE . TIMES VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type block
    (20) function -> FUNC LPAREN VARIABLE . TIMES VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type block

    VARIABLE        shift and go to state 36
    TIMES           shift and go to state 37


state 29

    (125) type_declaration -> TYPE VARIABLE STRUCT . LBRACE struct_fields RBRACE

    LBRACE          shift and go to state 38


state 30

    (8) import_list -> LPAREN string_list RPAREN .

    FUNC            reduce using rule 8 (import_list -> LPAREN string_list RPAREN .)
    TYPE            reduce using rule 8 (import_list -> LPAREN string_list RPAREN .)
    $end            reduce using rule 8 (import_list -> LPAREN string_list RPAREN .)


state 31

    (9) string_list -> string_list STRING .

    RPAREN          reduce using rule 9 (string_list -> string_list STRING .)
    STRING          reduce using rule 9 (string_list -> string_list STRING .)


state 32

    (24) param -> VARIABLE . type
    (30) type -> . STRING_TYPE
    (31) type -> . INT_TYPE
    (32) type -> . BOOL_TYPE
    (33) type -> . FLOAT64_TYPE
    (34) type -> . VARIABLE
    (35) type -> . LBRACKET RBRACKET VARIABLE

    STRING_TYPE     shift and go to state 41
    INT_TYPE        shift and go to state 42
    BOOL_TYPE       shift and go to state 43
    FLOAT64_TYPE    shift and go to state 44
    VARIABLE        shift and go to state 39
    LBRACKET        shift and go to state 45

    type                           shift and go to state 40

state 33

    (16) function -> FUNC VARIABLE LPAREN param_list . RPAREN return_type block
    (21) param_list -> param_list . COMMA param

    RPAREN          shift and go to state 46
    COMMA           shift and go to state 47


state 34

    (22) param_list -> param .

    RPAREN          reduce using rule 22 (param_list -> param .)
    COMMA           reduce using rule 22 (param_list -> param .)


state 35

    (23) param_list -> empty .

    RPAREN          reduce using rule 23 (param_list -> empty .)
    COMMA           reduce using rule 23 (param_list -> empty .)


state 36

    (17) function -> FUNC LPAREN VARIABLE VARIABLE . RPAREN VARIABLE LPAREN param_list RPAREN return_type block
    (18) function -> FUNC LPAREN VARIABLE VARIABLE . RPAREN VARIABLE LPAREN RPAREN return_type block

    RPAREN          shift and go to state 48


state 37

    (19) function -> FUNC LPAREN VARIABLE TIMES . VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type block
    (20) function -> FUNC LPAREN VARIABLE TIMES . VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type block

    VARIABLE        shift and go to state 49


state 38

    (125) type_declaration -> TYPE VARIABLE STRUCT LBRACE . struct_fields RBRACE
    (126) struct_fields -> . struct_fields struct_field
    (127) struct_fields -> . struct_field
    (128) struct_fields -> . empty
    (129) struct_field -> . VARIABLE type
    (130) struct_field -> . empty
    (105) empty -> .

  ! shift/reduce conflict for VARIABLE resolved as shift
    VARIABLE        shift and go to state 50
    RBRACE          reduce using rule 105 (empty -> .)

  ! VARIABLE        [ reduce using rule 105 (empty -> .) ]

    struct_fields                  shift and go to state 51
    struct_field                   shift and go to state 52
    empty                          shift and go to state 53

state 39

    (34) type -> VARIABLE .

    RPAREN          reduce using rule 34 (type -> VARIABLE .)
    COMMA           reduce using rule 34 (type -> VARIABLE .)
    LBRACE          reduce using rule 34 (type -> VARIABLE .)
    RBRACE          reduce using rule 34 (type -> VARIABLE .)
    VARIABLE        reduce using rule 34 (type -> VARIABLE .)


state 40

    (24) param -> VARIABLE type .

    RPAREN          reduce using rule 24 (param -> VARIABLE type .)
    COMMA           reduce using rule 24 (param -> VARIABLE type .)


state 41

    (30) type -> STRING_TYPE .

    RPAREN          reduce using rule 30 (type -> STRING_TYPE .)
    COMMA           reduce using rule 30 (type -> STRING_TYPE .)
    LBRACE          reduce using rule 30 (type -> STRING_TYPE .)
    RBRACE          reduce using rule 30 (type -> STRING_TYPE .)
    VARIABLE        reduce using rule 30 (type -> STRING_TYPE .)


state 42

    (31) type -> INT_TYPE .

    RPAREN          reduce using rule 31 (type -> INT_TYPE .)
    COMMA           reduce using rule 31 (type -> INT_TYPE .)
    LBRACE          reduce using rule 31 (type -> INT_TYPE .)
    RBRACE          reduce using rule 31 (type -> INT_TYPE .)
    VARIABLE        reduce using rule 31 (type -> INT_TYPE .)


state 43

    (32) type -> BOOL_TYPE .

    RPAREN          reduce using rule 32 (type -> BOOL_TYPE .)
    COMMA           reduce using rule 32 (type -> BOOL_TYPE .)
    LBRACE          reduce using rule 32 (type -> BOOL_TYPE .)
    RBRACE          reduce using rule 32 (type -> BOOL_TYPE .)
    VARIABLE        reduce using rule 32 (type -> BOOL_TYPE .)


state 44

    (33) type -> FLOAT64_TYPE .

    RPAREN          reduce using rule 33 (type -> FLOAT64_TYPE .)
    COMMA           reduce using rule 33 (type -> FLOAT64_TYPE .)
    LBRACE          reduce using rule 33 (type -> FLOAT64_TYPE .)
    RBRACE          reduce using rule 33 (type -> FLOAT64_TYPE .)
    VARIABLE        reduce using rule 33 (type -> FLOAT64_TYPE .)


state 45

    (35) type -> LBRACKET . RBRACKET VARIABLE

    RBRACKET        shift and go to state 54


state 46

    (16) function -> FUNC VARIABLE LPAREN param_list RPAREN . return_type block
    (25) return_type -> . type
    (26) return_type -> . LPAREN type_list RPAREN
    (27) return_type -> . empty
    (30) type -> . STRING_TYPE
    (31) type -> . INT_TYPE
    (32) type -> . BOOL_TYPE
    (33) type -> . FLOAT64_TYPE
    (34) type -> . VARIABLE
    (35) type -> . LBRACKET RBRACKET VARIABLE
    (105) empty -> .

    LPAREN          shift and go to state 55
    STRING_TYPE     shift and go to state 41
    INT_TYPE        shift and go to state 42
    BOOL_TYPE       shift and go to state 43
    FLOAT64_TYPE    shift and go to state 44
    VARIABLE        shift and go to state 39
    LBRACKET        shift and go to state 45
    LBRACE          reduce using rule 105 (empty -> .)

    return_type                    shift and go to state 56
    type                           shift and go to state 57
    empty                          shift and go to state 58

state 47

    (21) param_list -> param_list COMMA . param
    (24) param -> . VARIABLE type

    VARIABLE        shift and go to state 32

    param                          shift and go to state 59

state 48

    (17) function -> FUNC LPAREN VARIABLE VARIABLE RPAREN . VARIABLE LPAREN param_list RPAREN return_type block
    (18) function -> FUNC LPAREN VARIABLE VARIABLE RPAREN . VARIABLE LPAREN RPAREN return_type block

    VARIABLE        shift and go to state 60


state 49

    (19) function -> FUNC LPAREN VARIABLE TIMES VARIABLE . RPAREN VARIABLE LPAREN param_list RPAREN return_type block
    (20) function -> FUNC LPAREN VARIABLE TIMES VARIABLE . RPAREN VARIABLE LPAREN RPAREN return_type block

    RPAREN          shift and go to state 61


state 50

    (129) struct_field -> VARIABLE . type
    (30) type -> . STRING_TYPE
    (31) type -> . INT_TYPE
    (32) type -> . BOOL_TYPE
    (33) type -> . FLOAT64_TYPE
    (34) type -> . VARIABLE
    (35) type -> . LBRACKET RBRACKET VARIABLE

    STRING_TYPE     shift and go to state 41
    INT_TYPE        shift and go to state 42
    BOOL_TYPE       shift and go to state 43
    FLOAT64_TYPE    shift and go to state 44
    VARIABLE        shift and go to state 39
    LBRACKET        shift and go to state 45

    type                           shift and go to state 62

state 51

    (125) type_declaration -> TYPE VARIABLE STRUCT LBRACE struct_fields . RBRACE
    (126) struct_fields -> struct_fields . struct_field
    (129) struct_field -> . VARIABLE type
    (130) struct_field -> . empty
    (105) empty -> .

  ! shift/reduce conflict for RBRACE resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
    RBRACE          shift and go to state 63
    VARIABLE        shift and go to state 50

  ! RBRACE          [ reduce using rule 105 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 105 (empty -> .) ]

    struct_field                   shift and go to state 64
    empty                          shift and go to state 65

state 52

    (127) struct_fields -> struct_field .

    RBRACE          reduce using rule 127 (struct_fields -> struct_field .)
    VARIABLE        reduce using rule 127 (struct_fields -> struct_field .)


state 53

    (128) struct_fields -> empty .
    (130) struct_field -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 128 (struct_fields -> empty .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 128 (struct_fields -> empty .)
    RBRACE          reduce using rule 128 (struct_fields -> empty .)
    VARIABLE        reduce using rule 128 (struct_fields -> empty .)

  ! RBRACE          [ reduce using rule 130 (struct_field -> empty .) ]
  ! VARIABLE        [ reduce using rule 130 (struct_field -> empty .) ]


state 54

    (35) type -> LBRACKET RBRACKET . VARIABLE

    VARIABLE        shift and go to state 66


state 55

    (26) return_type -> LPAREN . type_list RPAREN
    (28) type_list -> . type_list COMMA type
    (29) type_list -> . type
    (30) type -> . STRING_TYPE
    (31) type -> . INT_TYPE
    (32) type -> . BOOL_TYPE
    (33) type -> . FLOAT64_TYPE
    (34) type -> . VARIABLE
    (35) type -> . LBRACKET RBRACKET VARIABLE

    STRING_TYPE     shift and go to state 41
    INT_TYPE        shift and go to state 42
    BOOL_TYPE       shift and go to state 43
    FLOAT64_TYPE    shift and go to state 44
    VARIABLE        shift and go to state 39
    LBRACKET        shift and go to state 45

    type_list                      shift and go to state 67
    type                           shift and go to state 68

state 56

    (16) function -> FUNC VARIABLE LPAREN param_list RPAREN return_type . block
    (36) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 70

    block                          shift and go to state 69

state 57

    (25) return_type -> type .

    LBRACE          reduce using rule 25 (return_type -> type .)


state 58

    (27) return_type -> empty .

    LBRACE          reduce using rule 27 (return_type -> empty .)


state 59

    (21) param_list -> param_list COMMA param .

    RPAREN          reduce using rule 21 (param_list -> param_list COMMA param .)
    COMMA           reduce using rule 21 (param_list -> param_list COMMA param .)


state 60

    (17) function -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE . LPAREN param_list RPAREN return_type block
    (18) function -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE . LPAREN RPAREN return_type block

    LPAREN          shift and go to state 71


state 61

    (19) function -> FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN . VARIABLE LPAREN param_list RPAREN return_type block
    (20) function -> FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN . VARIABLE LPAREN RPAREN return_type block

    VARIABLE        shift and go to state 72


state 62

    (129) struct_field -> VARIABLE type .

    RBRACE          reduce using rule 129 (struct_field -> VARIABLE type .)
    VARIABLE        reduce using rule 129 (struct_field -> VARIABLE type .)


state 63

    (125) type_declaration -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .

    FUNC            reduce using rule 125 (type_declaration -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    TYPE            reduce using rule 125 (type_declaration -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    $end            reduce using rule 125 (type_declaration -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    RBRACE          reduce using rule 125 (type_declaration -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    RETURN          reduce using rule 125 (type_declaration -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    FOR             reduce using rule 125 (type_declaration -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    SWITCH          reduce using rule 125 (type_declaration -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    VAR             reduce using rule 125 (type_declaration -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    IF              reduce using rule 125 (type_declaration -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    APPEND          reduce using rule 125 (type_declaration -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    PRINTLN         reduce using rule 125 (type_declaration -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    PRINTF          reduce using rule 125 (type_declaration -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    VARIABLE        reduce using rule 125 (type_declaration -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    CASE            reduce using rule 125 (type_declaration -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)
    DEFAULT         reduce using rule 125 (type_declaration -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE .)


state 64

    (126) struct_fields -> struct_fields struct_field .

    RBRACE          reduce using rule 126 (struct_fields -> struct_fields struct_field .)
    VARIABLE        reduce using rule 126 (struct_fields -> struct_fields struct_field .)


state 65

    (130) struct_field -> empty .

    RBRACE          reduce using rule 130 (struct_field -> empty .)
    VARIABLE        reduce using rule 130 (struct_field -> empty .)


state 66

    (35) type -> LBRACKET RBRACKET VARIABLE .

    RPAREN          reduce using rule 35 (type -> LBRACKET RBRACKET VARIABLE .)
    COMMA           reduce using rule 35 (type -> LBRACKET RBRACKET VARIABLE .)
    LBRACE          reduce using rule 35 (type -> LBRACKET RBRACKET VARIABLE .)
    RBRACE          reduce using rule 35 (type -> LBRACKET RBRACKET VARIABLE .)
    VARIABLE        reduce using rule 35 (type -> LBRACKET RBRACKET VARIABLE .)


state 67

    (26) return_type -> LPAREN type_list . RPAREN
    (28) type_list -> type_list . COMMA type

    RPAREN          shift and go to state 73
    COMMA           shift and go to state 74


state 68

    (29) type_list -> type .

    RPAREN          reduce using rule 29 (type_list -> type .)
    COMMA           reduce using rule 29 (type_list -> type .)


state 69

    (16) function -> FUNC VARIABLE LPAREN param_list RPAREN return_type block .

    FUNC            reduce using rule 16 (function -> FUNC VARIABLE LPAREN param_list RPAREN return_type block .)
    TYPE            reduce using rule 16 (function -> FUNC VARIABLE LPAREN param_list RPAREN return_type block .)
    $end            reduce using rule 16 (function -> FUNC VARIABLE LPAREN param_list RPAREN return_type block .)


state 70

    (36) block -> LBRACE . statement_list RBRACE
    (37) statement_list -> . statement_list statement
    (38) statement_list -> . empty
    (105) empty -> .

    RBRACE          reduce using rule 105 (empty -> .)
    RETURN          reduce using rule 105 (empty -> .)
    FOR             reduce using rule 105 (empty -> .)
    SWITCH          reduce using rule 105 (empty -> .)
    VAR             reduce using rule 105 (empty -> .)
    IF              reduce using rule 105 (empty -> .)
    APPEND          reduce using rule 105 (empty -> .)
    PRINTLN         reduce using rule 105 (empty -> .)
    PRINTF          reduce using rule 105 (empty -> .)
    VARIABLE        reduce using rule 105 (empty -> .)
    TYPE            reduce using rule 105 (empty -> .)

    statement_list                 shift and go to state 75
    empty                          shift and go to state 76

state 71

    (17) function -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN . param_list RPAREN return_type block
    (18) function -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN . RPAREN return_type block
    (21) param_list -> . param_list COMMA param
    (22) param_list -> . param
    (23) param_list -> . empty
    (24) param -> . VARIABLE type
    (105) empty -> .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 77
    VARIABLE        shift and go to state 32
    COMMA           reduce using rule 105 (empty -> .)

  ! RPAREN          [ reduce using rule 105 (empty -> .) ]

    param_list                     shift and go to state 78
    param                          shift and go to state 34
    empty                          shift and go to state 35

state 72

    (19) function -> FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE . LPAREN param_list RPAREN return_type block
    (20) function -> FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE . LPAREN RPAREN return_type block

    LPAREN          shift and go to state 79


state 73

    (26) return_type -> LPAREN type_list RPAREN .

    LBRACE          reduce using rule 26 (return_type -> LPAREN type_list RPAREN .)


state 74

    (28) type_list -> type_list COMMA . type
    (30) type -> . STRING_TYPE
    (31) type -> . INT_TYPE
    (32) type -> . BOOL_TYPE
    (33) type -> . FLOAT64_TYPE
    (34) type -> . VARIABLE
    (35) type -> . LBRACKET RBRACKET VARIABLE

    STRING_TYPE     shift and go to state 41
    INT_TYPE        shift and go to state 42
    BOOL_TYPE       shift and go to state 43
    FLOAT64_TYPE    shift and go to state 44
    VARIABLE        shift and go to state 39
    LBRACKET        shift and go to state 45

    type                           shift and go to state 80

state 75

    (36) block -> LBRACE statement_list . RBRACE
    (37) statement_list -> statement_list . statement
    (39) statement -> . declaration
    (40) statement -> . assignment
    (41) statement -> . short_declaration
    (42) statement -> . if_statement
    (43) statement -> . for_loop
    (44) statement -> . function_call SEMICOLON
    (45) statement -> . RETURN expression_list
    (46) statement -> . RETURN expression_list SEMICOLON
    (47) statement -> . FOR VARIABLE COMMA VARIABLE ASSIGN_SHORT RANGE variable block
    (48) statement -> . variable INCREMENT
    (49) statement -> . variable DECREMENT
    (50) statement -> . SWITCH LBRACE case_list RBRACE
    (51) statement -> . SWITCH expression LBRACE case_list RBRACE
    (52) statement -> . type_declaration
    (53) declaration -> . VAR VARIABLE ASSIGN expression
    (54) declaration -> . VAR VARIABLE ASSIGN expression SEMICOLON
    (55) assignment -> . variable ASSIGN expression
    (56) assignment -> . variable ASSIGN expression SEMICOLON
    (57) assignment -> . variable PLUS_ASSIGN expression
    (58) assignment -> . variable MINUS_ASSIGN expression
    (59) assignment -> . variable TIMES_ASSIGN expression
    (60) assignment -> . variable DIVIDE_ASSIGN expression
    (113) short_declaration -> . variable_list ASSIGN_SHORT expression_list
    (114) short_declaration -> . variable_list ASSIGN_SHORT expression_list SEMICOLON
    (61) if_statement -> . IF expression block else_clause
    (64) for_loop -> . FOR VARIABLE ASSIGN expression SEMICOLON expression SEMICOLON assignment block
    (65) for_loop -> . FOR VARIABLE ASSIGN_SHORT expression SEMICOLON expression SEMICOLON increment_statement block
    (66) for_loop -> . FOR variable_list ASSIGN_SHORT RANGE variable block
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (125) type_declaration -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (115) variable_list -> . variable
    (116) variable_list -> . variable COMMA variable_list

    RBRACE          shift and go to state 81
    RETURN          shift and go to state 89
    FOR             shift and go to state 90
    SWITCH          shift and go to state 93
    VAR             shift and go to state 95
    IF              shift and go to state 97
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100
    VARIABLE        shift and go to state 91
    TYPE            shift and go to state 14

    statement                      shift and go to state 82
    declaration                    shift and go to state 83
    assignment                     shift and go to state 84
    short_declaration              shift and go to state 85
    if_statement                   shift and go to state 86
    for_loop                       shift and go to state 87
    function_call                  shift and go to state 88
    variable                       shift and go to state 92
    type_declaration               shift and go to state 94
    variable_list                  shift and go to state 96

state 76

    (38) statement_list -> empty .

    RBRACE          reduce using rule 38 (statement_list -> empty .)
    RETURN          reduce using rule 38 (statement_list -> empty .)
    FOR             reduce using rule 38 (statement_list -> empty .)
    SWITCH          reduce using rule 38 (statement_list -> empty .)
    VAR             reduce using rule 38 (statement_list -> empty .)
    IF              reduce using rule 38 (statement_list -> empty .)
    APPEND          reduce using rule 38 (statement_list -> empty .)
    PRINTLN         reduce using rule 38 (statement_list -> empty .)
    PRINTF          reduce using rule 38 (statement_list -> empty .)
    VARIABLE        reduce using rule 38 (statement_list -> empty .)
    TYPE            reduce using rule 38 (statement_list -> empty .)
    CASE            reduce using rule 38 (statement_list -> empty .)
    DEFAULT         reduce using rule 38 (statement_list -> empty .)


state 77

    (18) function -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN . return_type block
    (25) return_type -> . type
    (26) return_type -> . LPAREN type_list RPAREN
    (27) return_type -> . empty
    (30) type -> . STRING_TYPE
    (31) type -> . INT_TYPE
    (32) type -> . BOOL_TYPE
    (33) type -> . FLOAT64_TYPE
    (34) type -> . VARIABLE
    (35) type -> . LBRACKET RBRACKET VARIABLE
    (105) empty -> .

    LPAREN          shift and go to state 55
    STRING_TYPE     shift and go to state 41
    INT_TYPE        shift and go to state 42
    BOOL_TYPE       shift and go to state 43
    FLOAT64_TYPE    shift and go to state 44
    VARIABLE        shift and go to state 39
    LBRACKET        shift and go to state 45
    LBRACE          reduce using rule 105 (empty -> .)

    return_type                    shift and go to state 101
    type                           shift and go to state 57
    empty                          shift and go to state 58

state 78

    (17) function -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list . RPAREN return_type block
    (21) param_list -> param_list . COMMA param

    RPAREN          shift and go to state 102
    COMMA           shift and go to state 47


state 79

    (19) function -> FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN . param_list RPAREN return_type block
    (20) function -> FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN . RPAREN return_type block
    (21) param_list -> . param_list COMMA param
    (22) param_list -> . param
    (23) param_list -> . empty
    (24) param -> . VARIABLE type
    (105) empty -> .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 103
    VARIABLE        shift and go to state 32
    COMMA           reduce using rule 105 (empty -> .)

  ! RPAREN          [ reduce using rule 105 (empty -> .) ]

    param_list                     shift and go to state 104
    param                          shift and go to state 34
    empty                          shift and go to state 35

state 80

    (28) type_list -> type_list COMMA type .

    RPAREN          reduce using rule 28 (type_list -> type_list COMMA type .)
    COMMA           reduce using rule 28 (type_list -> type_list COMMA type .)


state 81

    (36) block -> LBRACE statement_list RBRACE .

    FUNC            reduce using rule 36 (block -> LBRACE statement_list RBRACE .)
    TYPE            reduce using rule 36 (block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 36 (block -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 36 (block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 36 (block -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 36 (block -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 36 (block -> LBRACE statement_list RBRACE .)
    SWITCH          reduce using rule 36 (block -> LBRACE statement_list RBRACE .)
    VAR             reduce using rule 36 (block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 36 (block -> LBRACE statement_list RBRACE .)
    APPEND          reduce using rule 36 (block -> LBRACE statement_list RBRACE .)
    PRINTLN         reduce using rule 36 (block -> LBRACE statement_list RBRACE .)
    PRINTF          reduce using rule 36 (block -> LBRACE statement_list RBRACE .)
    VARIABLE        reduce using rule 36 (block -> LBRACE statement_list RBRACE .)
    CASE            reduce using rule 36 (block -> LBRACE statement_list RBRACE .)
    DEFAULT         reduce using rule 36 (block -> LBRACE statement_list RBRACE .)


state 82

    (37) statement_list -> statement_list statement .

    RBRACE          reduce using rule 37 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 37 (statement_list -> statement_list statement .)
    FOR             reduce using rule 37 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 37 (statement_list -> statement_list statement .)
    VAR             reduce using rule 37 (statement_list -> statement_list statement .)
    IF              reduce using rule 37 (statement_list -> statement_list statement .)
    APPEND          reduce using rule 37 (statement_list -> statement_list statement .)
    PRINTLN         reduce using rule 37 (statement_list -> statement_list statement .)
    PRINTF          reduce using rule 37 (statement_list -> statement_list statement .)
    VARIABLE        reduce using rule 37 (statement_list -> statement_list statement .)
    TYPE            reduce using rule 37 (statement_list -> statement_list statement .)
    CASE            reduce using rule 37 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 37 (statement_list -> statement_list statement .)


state 83

    (39) statement -> declaration .

    RBRACE          reduce using rule 39 (statement -> declaration .)
    RETURN          reduce using rule 39 (statement -> declaration .)
    FOR             reduce using rule 39 (statement -> declaration .)
    SWITCH          reduce using rule 39 (statement -> declaration .)
    VAR             reduce using rule 39 (statement -> declaration .)
    IF              reduce using rule 39 (statement -> declaration .)
    APPEND          reduce using rule 39 (statement -> declaration .)
    PRINTLN         reduce using rule 39 (statement -> declaration .)
    PRINTF          reduce using rule 39 (statement -> declaration .)
    VARIABLE        reduce using rule 39 (statement -> declaration .)
    TYPE            reduce using rule 39 (statement -> declaration .)
    CASE            reduce using rule 39 (statement -> declaration .)
    DEFAULT         reduce using rule 39 (statement -> declaration .)


state 84

    (40) statement -> assignment .

    RBRACE          reduce using rule 40 (statement -> assignment .)
    RETURN          reduce using rule 40 (statement -> assignment .)
    FOR             reduce using rule 40 (statement -> assignment .)
    SWITCH          reduce using rule 40 (statement -> assignment .)
    VAR             reduce using rule 40 (statement -> assignment .)
    IF              reduce using rule 40 (statement -> assignment .)
    APPEND          reduce using rule 40 (statement -> assignment .)
    PRINTLN         reduce using rule 40 (statement -> assignment .)
    PRINTF          reduce using rule 40 (statement -> assignment .)
    VARIABLE        reduce using rule 40 (statement -> assignment .)
    TYPE            reduce using rule 40 (statement -> assignment .)
    CASE            reduce using rule 40 (statement -> assignment .)
    DEFAULT         reduce using rule 40 (statement -> assignment .)


state 85

    (41) statement -> short_declaration .

    RBRACE          reduce using rule 41 (statement -> short_declaration .)
    RETURN          reduce using rule 41 (statement -> short_declaration .)
    FOR             reduce using rule 41 (statement -> short_declaration .)
    SWITCH          reduce using rule 41 (statement -> short_declaration .)
    VAR             reduce using rule 41 (statement -> short_declaration .)
    IF              reduce using rule 41 (statement -> short_declaration .)
    APPEND          reduce using rule 41 (statement -> short_declaration .)
    PRINTLN         reduce using rule 41 (statement -> short_declaration .)
    PRINTF          reduce using rule 41 (statement -> short_declaration .)
    VARIABLE        reduce using rule 41 (statement -> short_declaration .)
    TYPE            reduce using rule 41 (statement -> short_declaration .)
    CASE            reduce using rule 41 (statement -> short_declaration .)
    DEFAULT         reduce using rule 41 (statement -> short_declaration .)


state 86

    (42) statement -> if_statement .

    RBRACE          reduce using rule 42 (statement -> if_statement .)
    RETURN          reduce using rule 42 (statement -> if_statement .)
    FOR             reduce using rule 42 (statement -> if_statement .)
    SWITCH          reduce using rule 42 (statement -> if_statement .)
    VAR             reduce using rule 42 (statement -> if_statement .)
    IF              reduce using rule 42 (statement -> if_statement .)
    APPEND          reduce using rule 42 (statement -> if_statement .)
    PRINTLN         reduce using rule 42 (statement -> if_statement .)
    PRINTF          reduce using rule 42 (statement -> if_statement .)
    VARIABLE        reduce using rule 42 (statement -> if_statement .)
    TYPE            reduce using rule 42 (statement -> if_statement .)
    CASE            reduce using rule 42 (statement -> if_statement .)
    DEFAULT         reduce using rule 42 (statement -> if_statement .)


state 87

    (43) statement -> for_loop .

    RBRACE          reduce using rule 43 (statement -> for_loop .)
    RETURN          reduce using rule 43 (statement -> for_loop .)
    FOR             reduce using rule 43 (statement -> for_loop .)
    SWITCH          reduce using rule 43 (statement -> for_loop .)
    VAR             reduce using rule 43 (statement -> for_loop .)
    IF              reduce using rule 43 (statement -> for_loop .)
    APPEND          reduce using rule 43 (statement -> for_loop .)
    PRINTLN         reduce using rule 43 (statement -> for_loop .)
    PRINTF          reduce using rule 43 (statement -> for_loop .)
    VARIABLE        reduce using rule 43 (statement -> for_loop .)
    TYPE            reduce using rule 43 (statement -> for_loop .)
    CASE            reduce using rule 43 (statement -> for_loop .)
    DEFAULT         reduce using rule 43 (statement -> for_loop .)


state 88

    (44) statement -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 105


state 89

    (45) statement -> RETURN . expression_list
    (46) statement -> RETURN . expression_list SEMICOLON
    (117) expression_list -> . expression
    (118) expression_list -> . expression COMMA expression_list
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression_list                shift and go to state 106
    expression                     shift and go to state 107
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 90

    (47) statement -> FOR . VARIABLE COMMA VARIABLE ASSIGN_SHORT RANGE variable block
    (64) for_loop -> FOR . VARIABLE ASSIGN expression SEMICOLON expression SEMICOLON assignment block
    (65) for_loop -> FOR . VARIABLE ASSIGN_SHORT expression SEMICOLON expression SEMICOLON increment_statement block
    (66) for_loop -> FOR . variable_list ASSIGN_SHORT RANGE variable block
    (115) variable_list -> . variable
    (116) variable_list -> . variable COMMA variable_list
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET

    VARIABLE        shift and go to state 121

    variable                       shift and go to state 122
    variable_list                  shift and go to state 123

state 91

    (110) variable -> VARIABLE .

    INCREMENT       reduce using rule 110 (variable -> VARIABLE .)
    DECREMENT       reduce using rule 110 (variable -> VARIABLE .)
    ASSIGN          reduce using rule 110 (variable -> VARIABLE .)
    PLUS_ASSIGN     reduce using rule 110 (variable -> VARIABLE .)
    MINUS_ASSIGN    reduce using rule 110 (variable -> VARIABLE .)
    TIMES_ASSIGN    reduce using rule 110 (variable -> VARIABLE .)
    DIVIDE_ASSIGN   reduce using rule 110 (variable -> VARIABLE .)
    LPAREN          reduce using rule 110 (variable -> VARIABLE .)
    DOT             reduce using rule 110 (variable -> VARIABLE .)
    LBRACKET        reduce using rule 110 (variable -> VARIABLE .)
    COMMA           reduce using rule 110 (variable -> VARIABLE .)
    ASSIGN_SHORT    reduce using rule 110 (variable -> VARIABLE .)
    LBRACE          reduce using rule 110 (variable -> VARIABLE .)


state 92

    (48) statement -> variable . INCREMENT
    (49) statement -> variable . DECREMENT
    (55) assignment -> variable . ASSIGN expression
    (56) assignment -> variable . ASSIGN expression SEMICOLON
    (57) assignment -> variable . PLUS_ASSIGN expression
    (58) assignment -> variable . MINUS_ASSIGN expression
    (59) assignment -> variable . TIMES_ASSIGN expression
    (60) assignment -> variable . DIVIDE_ASSIGN expression
    (69) function_call -> variable . LPAREN argument_list RPAREN
    (70) function_call -> variable . LPAREN RPAREN
    (73) function_call -> variable . DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> variable . DOT APPEND LPAREN RPAREN
    (77) function_call -> variable . DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> variable . DOT PRINTLN LPAREN RPAREN
    (81) function_call -> variable . DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> variable . DOT PRINTF LPAREN RPAREN
    (111) variable -> variable . DOT VARIABLE
    (112) variable -> variable . LBRACKET expression RBRACKET
    (115) variable_list -> variable .
    (116) variable_list -> variable . COMMA variable_list

    INCREMENT       shift and go to state 124
    DECREMENT       shift and go to state 125
    ASSIGN          shift and go to state 126
    PLUS_ASSIGN     shift and go to state 127
    MINUS_ASSIGN    shift and go to state 128
    TIMES_ASSIGN    shift and go to state 129
    DIVIDE_ASSIGN   shift and go to state 130
    LPAREN          shift and go to state 131
    DOT             shift and go to state 132
    LBRACKET        shift and go to state 133
    ASSIGN_SHORT    reduce using rule 115 (variable_list -> variable .)
    COMMA           shift and go to state 134


state 93

    (50) statement -> SWITCH . LBRACE case_list RBRACE
    (51) statement -> SWITCH . expression LBRACE case_list RBRACE
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LBRACE          shift and go to state 135
    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 136
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 94

    (52) statement -> type_declaration .

    RBRACE          reduce using rule 52 (statement -> type_declaration .)
    RETURN          reduce using rule 52 (statement -> type_declaration .)
    FOR             reduce using rule 52 (statement -> type_declaration .)
    SWITCH          reduce using rule 52 (statement -> type_declaration .)
    VAR             reduce using rule 52 (statement -> type_declaration .)
    IF              reduce using rule 52 (statement -> type_declaration .)
    APPEND          reduce using rule 52 (statement -> type_declaration .)
    PRINTLN         reduce using rule 52 (statement -> type_declaration .)
    PRINTF          reduce using rule 52 (statement -> type_declaration .)
    VARIABLE        reduce using rule 52 (statement -> type_declaration .)
    TYPE            reduce using rule 52 (statement -> type_declaration .)
    CASE            reduce using rule 52 (statement -> type_declaration .)
    DEFAULT         reduce using rule 52 (statement -> type_declaration .)


state 95

    (53) declaration -> VAR . VARIABLE ASSIGN expression
    (54) declaration -> VAR . VARIABLE ASSIGN expression SEMICOLON

    VARIABLE        shift and go to state 137


state 96

    (113) short_declaration -> variable_list . ASSIGN_SHORT expression_list
    (114) short_declaration -> variable_list . ASSIGN_SHORT expression_list SEMICOLON

    ASSIGN_SHORT    shift and go to state 138


state 97

    (61) if_statement -> IF . expression block else_clause
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 139
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 98

    (71) function_call -> APPEND . LPAREN argument_list RPAREN
    (72) function_call -> APPEND . LPAREN RPAREN

    LPAREN          shift and go to state 140


state 99

    (75) function_call -> PRINTLN . LPAREN argument_list RPAREN
    (76) function_call -> PRINTLN . LPAREN RPAREN

    LPAREN          shift and go to state 141


state 100

    (79) function_call -> PRINTF . LPAREN argument_list RPAREN
    (80) function_call -> PRINTF . LPAREN RPAREN

    LPAREN          shift and go to state 142


state 101

    (18) function -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type . block
    (36) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 70

    block                          shift and go to state 143

state 102

    (17) function -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN . return_type block
    (25) return_type -> . type
    (26) return_type -> . LPAREN type_list RPAREN
    (27) return_type -> . empty
    (30) type -> . STRING_TYPE
    (31) type -> . INT_TYPE
    (32) type -> . BOOL_TYPE
    (33) type -> . FLOAT64_TYPE
    (34) type -> . VARIABLE
    (35) type -> . LBRACKET RBRACKET VARIABLE
    (105) empty -> .

    LPAREN          shift and go to state 55
    STRING_TYPE     shift and go to state 41
    INT_TYPE        shift and go to state 42
    BOOL_TYPE       shift and go to state 43
    FLOAT64_TYPE    shift and go to state 44
    VARIABLE        shift and go to state 39
    LBRACKET        shift and go to state 45
    LBRACE          reduce using rule 105 (empty -> .)

    return_type                    shift and go to state 144
    type                           shift and go to state 57
    empty                          shift and go to state 58

state 103

    (20) function -> FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN RPAREN . return_type block
    (25) return_type -> . type
    (26) return_type -> . LPAREN type_list RPAREN
    (27) return_type -> . empty
    (30) type -> . STRING_TYPE
    (31) type -> . INT_TYPE
    (32) type -> . BOOL_TYPE
    (33) type -> . FLOAT64_TYPE
    (34) type -> . VARIABLE
    (35) type -> . LBRACKET RBRACKET VARIABLE
    (105) empty -> .

    LPAREN          shift and go to state 55
    STRING_TYPE     shift and go to state 41
    INT_TYPE        shift and go to state 42
    BOOL_TYPE       shift and go to state 43
    FLOAT64_TYPE    shift and go to state 44
    VARIABLE        shift and go to state 39
    LBRACKET        shift and go to state 45
    LBRACE          reduce using rule 105 (empty -> .)

    return_type                    shift and go to state 145
    type                           shift and go to state 57
    empty                          shift and go to state 58

state 104

    (19) function -> FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN param_list . RPAREN return_type block
    (21) param_list -> param_list . COMMA param

    RPAREN          shift and go to state 146
    COMMA           shift and go to state 47


state 105

    (44) statement -> function_call SEMICOLON .

    RBRACE          reduce using rule 44 (statement -> function_call SEMICOLON .)
    RETURN          reduce using rule 44 (statement -> function_call SEMICOLON .)
    FOR             reduce using rule 44 (statement -> function_call SEMICOLON .)
    SWITCH          reduce using rule 44 (statement -> function_call SEMICOLON .)
    VAR             reduce using rule 44 (statement -> function_call SEMICOLON .)
    IF              reduce using rule 44 (statement -> function_call SEMICOLON .)
    APPEND          reduce using rule 44 (statement -> function_call SEMICOLON .)
    PRINTLN         reduce using rule 44 (statement -> function_call SEMICOLON .)
    PRINTF          reduce using rule 44 (statement -> function_call SEMICOLON .)
    VARIABLE        reduce using rule 44 (statement -> function_call SEMICOLON .)
    TYPE            reduce using rule 44 (statement -> function_call SEMICOLON .)
    CASE            reduce using rule 44 (statement -> function_call SEMICOLON .)
    DEFAULT         reduce using rule 44 (statement -> function_call SEMICOLON .)


state 106

    (45) statement -> RETURN expression_list .
    (46) statement -> RETURN expression_list . SEMICOLON

    RBRACE          reduce using rule 45 (statement -> RETURN expression_list .)
    RETURN          reduce using rule 45 (statement -> RETURN expression_list .)
    FOR             reduce using rule 45 (statement -> RETURN expression_list .)
    SWITCH          reduce using rule 45 (statement -> RETURN expression_list .)
    VAR             reduce using rule 45 (statement -> RETURN expression_list .)
    IF              reduce using rule 45 (statement -> RETURN expression_list .)
    APPEND          reduce using rule 45 (statement -> RETURN expression_list .)
    PRINTLN         reduce using rule 45 (statement -> RETURN expression_list .)
    PRINTF          reduce using rule 45 (statement -> RETURN expression_list .)
    VARIABLE        reduce using rule 45 (statement -> RETURN expression_list .)
    TYPE            reduce using rule 45 (statement -> RETURN expression_list .)
    CASE            reduce using rule 45 (statement -> RETURN expression_list .)
    DEFAULT         reduce using rule 45 (statement -> RETURN expression_list .)
    SEMICOLON       shift and go to state 147


state 107

    (117) expression_list -> expression .
    (118) expression_list -> expression . COMMA expression_list
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    SEMICOLON       reduce using rule 117 (expression_list -> expression .)
    RBRACE          reduce using rule 117 (expression_list -> expression .)
    RETURN          reduce using rule 117 (expression_list -> expression .)
    FOR             reduce using rule 117 (expression_list -> expression .)
    SWITCH          reduce using rule 117 (expression_list -> expression .)
    VAR             reduce using rule 117 (expression_list -> expression .)
    IF              reduce using rule 117 (expression_list -> expression .)
    APPEND          reduce using rule 117 (expression_list -> expression .)
    PRINTLN         reduce using rule 117 (expression_list -> expression .)
    PRINTF          reduce using rule 117 (expression_list -> expression .)
    VARIABLE        reduce using rule 117 (expression_list -> expression .)
    TYPE            reduce using rule 117 (expression_list -> expression .)
    CASE            reduce using rule 117 (expression_list -> expression .)
    DEFAULT         reduce using rule 117 (expression_list -> expression .)
    COMMA           shift and go to state 148
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 108

    (98) expression -> LPAREN . expression RPAREN
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 162
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 109

    (99) expression -> NUMBER .

    COMMA           reduce using rule 99 (expression -> NUMBER .)
    PLUS            reduce using rule 99 (expression -> NUMBER .)
    MINUS           reduce using rule 99 (expression -> NUMBER .)
    TIMES           reduce using rule 99 (expression -> NUMBER .)
    DIVIDE          reduce using rule 99 (expression -> NUMBER .)
    MOD             reduce using rule 99 (expression -> NUMBER .)
    LT              reduce using rule 99 (expression -> NUMBER .)
    LE              reduce using rule 99 (expression -> NUMBER .)
    GT              reduce using rule 99 (expression -> NUMBER .)
    GE              reduce using rule 99 (expression -> NUMBER .)
    EQ              reduce using rule 99 (expression -> NUMBER .)
    NE              reduce using rule 99 (expression -> NUMBER .)
    AND             reduce using rule 99 (expression -> NUMBER .)
    OR              reduce using rule 99 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 99 (expression -> NUMBER .)
    RBRACE          reduce using rule 99 (expression -> NUMBER .)
    RETURN          reduce using rule 99 (expression -> NUMBER .)
    FOR             reduce using rule 99 (expression -> NUMBER .)
    SWITCH          reduce using rule 99 (expression -> NUMBER .)
    VAR             reduce using rule 99 (expression -> NUMBER .)
    IF              reduce using rule 99 (expression -> NUMBER .)
    APPEND          reduce using rule 99 (expression -> NUMBER .)
    PRINTLN         reduce using rule 99 (expression -> NUMBER .)
    PRINTF          reduce using rule 99 (expression -> NUMBER .)
    VARIABLE        reduce using rule 99 (expression -> NUMBER .)
    TYPE            reduce using rule 99 (expression -> NUMBER .)
    CASE            reduce using rule 99 (expression -> NUMBER .)
    DEFAULT         reduce using rule 99 (expression -> NUMBER .)
    LBRACE          reduce using rule 99 (expression -> NUMBER .)
    RPAREN          reduce using rule 99 (expression -> NUMBER .)
    RBRACKET        reduce using rule 99 (expression -> NUMBER .)
    COLON           reduce using rule 99 (expression -> NUMBER .)


state 110

    (100) expression -> variable .
    (111) variable -> variable . DOT VARIABLE
    (112) variable -> variable . LBRACKET expression RBRACKET
    (69) function_call -> variable . LPAREN argument_list RPAREN
    (70) function_call -> variable . LPAREN RPAREN
    (73) function_call -> variable . DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> variable . DOT APPEND LPAREN RPAREN
    (77) function_call -> variable . DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> variable . DOT PRINTLN LPAREN RPAREN
    (81) function_call -> variable . DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> variable . DOT PRINTF LPAREN RPAREN

    COMMA           reduce using rule 100 (expression -> variable .)
    PLUS            reduce using rule 100 (expression -> variable .)
    MINUS           reduce using rule 100 (expression -> variable .)
    TIMES           reduce using rule 100 (expression -> variable .)
    DIVIDE          reduce using rule 100 (expression -> variable .)
    MOD             reduce using rule 100 (expression -> variable .)
    LT              reduce using rule 100 (expression -> variable .)
    LE              reduce using rule 100 (expression -> variable .)
    GT              reduce using rule 100 (expression -> variable .)
    GE              reduce using rule 100 (expression -> variable .)
    EQ              reduce using rule 100 (expression -> variable .)
    NE              reduce using rule 100 (expression -> variable .)
    AND             reduce using rule 100 (expression -> variable .)
    OR              reduce using rule 100 (expression -> variable .)
    SEMICOLON       reduce using rule 100 (expression -> variable .)
    RBRACE          reduce using rule 100 (expression -> variable .)
    RETURN          reduce using rule 100 (expression -> variable .)
    FOR             reduce using rule 100 (expression -> variable .)
    SWITCH          reduce using rule 100 (expression -> variable .)
    VAR             reduce using rule 100 (expression -> variable .)
    IF              reduce using rule 100 (expression -> variable .)
    APPEND          reduce using rule 100 (expression -> variable .)
    PRINTLN         reduce using rule 100 (expression -> variable .)
    PRINTF          reduce using rule 100 (expression -> variable .)
    VARIABLE        reduce using rule 100 (expression -> variable .)
    TYPE            reduce using rule 100 (expression -> variable .)
    CASE            reduce using rule 100 (expression -> variable .)
    DEFAULT         reduce using rule 100 (expression -> variable .)
    LBRACE          reduce using rule 100 (expression -> variable .)
    RPAREN          reduce using rule 100 (expression -> variable .)
    RBRACKET        reduce using rule 100 (expression -> variable .)
    COLON           reduce using rule 100 (expression -> variable .)
    DOT             shift and go to state 163
    LBRACKET        shift and go to state 133
    LPAREN          shift and go to state 131


state 111

    (101) expression -> function_call .

    COMMA           reduce using rule 101 (expression -> function_call .)
    PLUS            reduce using rule 101 (expression -> function_call .)
    MINUS           reduce using rule 101 (expression -> function_call .)
    TIMES           reduce using rule 101 (expression -> function_call .)
    DIVIDE          reduce using rule 101 (expression -> function_call .)
    MOD             reduce using rule 101 (expression -> function_call .)
    LT              reduce using rule 101 (expression -> function_call .)
    LE              reduce using rule 101 (expression -> function_call .)
    GT              reduce using rule 101 (expression -> function_call .)
    GE              reduce using rule 101 (expression -> function_call .)
    EQ              reduce using rule 101 (expression -> function_call .)
    NE              reduce using rule 101 (expression -> function_call .)
    AND             reduce using rule 101 (expression -> function_call .)
    OR              reduce using rule 101 (expression -> function_call .)
    SEMICOLON       reduce using rule 101 (expression -> function_call .)
    RBRACE          reduce using rule 101 (expression -> function_call .)
    RETURN          reduce using rule 101 (expression -> function_call .)
    FOR             reduce using rule 101 (expression -> function_call .)
    SWITCH          reduce using rule 101 (expression -> function_call .)
    VAR             reduce using rule 101 (expression -> function_call .)
    IF              reduce using rule 101 (expression -> function_call .)
    APPEND          reduce using rule 101 (expression -> function_call .)
    PRINTLN         reduce using rule 101 (expression -> function_call .)
    PRINTF          reduce using rule 101 (expression -> function_call .)
    VARIABLE        reduce using rule 101 (expression -> function_call .)
    TYPE            reduce using rule 101 (expression -> function_call .)
    CASE            reduce using rule 101 (expression -> function_call .)
    DEFAULT         reduce using rule 101 (expression -> function_call .)
    LBRACE          reduce using rule 101 (expression -> function_call .)
    RPAREN          reduce using rule 101 (expression -> function_call .)
    RBRACKET        reduce using rule 101 (expression -> function_call .)
    COLON           reduce using rule 101 (expression -> function_call .)


state 112

    (102) expression -> STRING .

    COMMA           reduce using rule 102 (expression -> STRING .)
    PLUS            reduce using rule 102 (expression -> STRING .)
    MINUS           reduce using rule 102 (expression -> STRING .)
    TIMES           reduce using rule 102 (expression -> STRING .)
    DIVIDE          reduce using rule 102 (expression -> STRING .)
    MOD             reduce using rule 102 (expression -> STRING .)
    LT              reduce using rule 102 (expression -> STRING .)
    LE              reduce using rule 102 (expression -> STRING .)
    GT              reduce using rule 102 (expression -> STRING .)
    GE              reduce using rule 102 (expression -> STRING .)
    EQ              reduce using rule 102 (expression -> STRING .)
    NE              reduce using rule 102 (expression -> STRING .)
    AND             reduce using rule 102 (expression -> STRING .)
    OR              reduce using rule 102 (expression -> STRING .)
    SEMICOLON       reduce using rule 102 (expression -> STRING .)
    RBRACE          reduce using rule 102 (expression -> STRING .)
    RETURN          reduce using rule 102 (expression -> STRING .)
    FOR             reduce using rule 102 (expression -> STRING .)
    SWITCH          reduce using rule 102 (expression -> STRING .)
    VAR             reduce using rule 102 (expression -> STRING .)
    IF              reduce using rule 102 (expression -> STRING .)
    APPEND          reduce using rule 102 (expression -> STRING .)
    PRINTLN         reduce using rule 102 (expression -> STRING .)
    PRINTF          reduce using rule 102 (expression -> STRING .)
    VARIABLE        reduce using rule 102 (expression -> STRING .)
    TYPE            reduce using rule 102 (expression -> STRING .)
    CASE            reduce using rule 102 (expression -> STRING .)
    DEFAULT         reduce using rule 102 (expression -> STRING .)
    LBRACE          reduce using rule 102 (expression -> STRING .)
    RPAREN          reduce using rule 102 (expression -> STRING .)
    RBRACKET        reduce using rule 102 (expression -> STRING .)
    COLON           reduce using rule 102 (expression -> STRING .)


state 113

    (103) expression -> TRUE .

    COMMA           reduce using rule 103 (expression -> TRUE .)
    PLUS            reduce using rule 103 (expression -> TRUE .)
    MINUS           reduce using rule 103 (expression -> TRUE .)
    TIMES           reduce using rule 103 (expression -> TRUE .)
    DIVIDE          reduce using rule 103 (expression -> TRUE .)
    MOD             reduce using rule 103 (expression -> TRUE .)
    LT              reduce using rule 103 (expression -> TRUE .)
    LE              reduce using rule 103 (expression -> TRUE .)
    GT              reduce using rule 103 (expression -> TRUE .)
    GE              reduce using rule 103 (expression -> TRUE .)
    EQ              reduce using rule 103 (expression -> TRUE .)
    NE              reduce using rule 103 (expression -> TRUE .)
    AND             reduce using rule 103 (expression -> TRUE .)
    OR              reduce using rule 103 (expression -> TRUE .)
    SEMICOLON       reduce using rule 103 (expression -> TRUE .)
    RBRACE          reduce using rule 103 (expression -> TRUE .)
    RETURN          reduce using rule 103 (expression -> TRUE .)
    FOR             reduce using rule 103 (expression -> TRUE .)
    SWITCH          reduce using rule 103 (expression -> TRUE .)
    VAR             reduce using rule 103 (expression -> TRUE .)
    IF              reduce using rule 103 (expression -> TRUE .)
    APPEND          reduce using rule 103 (expression -> TRUE .)
    PRINTLN         reduce using rule 103 (expression -> TRUE .)
    PRINTF          reduce using rule 103 (expression -> TRUE .)
    VARIABLE        reduce using rule 103 (expression -> TRUE .)
    TYPE            reduce using rule 103 (expression -> TRUE .)
    CASE            reduce using rule 103 (expression -> TRUE .)
    DEFAULT         reduce using rule 103 (expression -> TRUE .)
    LBRACE          reduce using rule 103 (expression -> TRUE .)
    RPAREN          reduce using rule 103 (expression -> TRUE .)
    RBRACKET        reduce using rule 103 (expression -> TRUE .)
    COLON           reduce using rule 103 (expression -> TRUE .)


state 114

    (104) expression -> FALSE .

    COMMA           reduce using rule 104 (expression -> FALSE .)
    PLUS            reduce using rule 104 (expression -> FALSE .)
    MINUS           reduce using rule 104 (expression -> FALSE .)
    TIMES           reduce using rule 104 (expression -> FALSE .)
    DIVIDE          reduce using rule 104 (expression -> FALSE .)
    MOD             reduce using rule 104 (expression -> FALSE .)
    LT              reduce using rule 104 (expression -> FALSE .)
    LE              reduce using rule 104 (expression -> FALSE .)
    GT              reduce using rule 104 (expression -> FALSE .)
    GE              reduce using rule 104 (expression -> FALSE .)
    EQ              reduce using rule 104 (expression -> FALSE .)
    NE              reduce using rule 104 (expression -> FALSE .)
    AND             reduce using rule 104 (expression -> FALSE .)
    OR              reduce using rule 104 (expression -> FALSE .)
    SEMICOLON       reduce using rule 104 (expression -> FALSE .)
    RBRACE          reduce using rule 104 (expression -> FALSE .)
    RETURN          reduce using rule 104 (expression -> FALSE .)
    FOR             reduce using rule 104 (expression -> FALSE .)
    SWITCH          reduce using rule 104 (expression -> FALSE .)
    VAR             reduce using rule 104 (expression -> FALSE .)
    IF              reduce using rule 104 (expression -> FALSE .)
    APPEND          reduce using rule 104 (expression -> FALSE .)
    PRINTLN         reduce using rule 104 (expression -> FALSE .)
    PRINTF          reduce using rule 104 (expression -> FALSE .)
    VARIABLE        reduce using rule 104 (expression -> FALSE .)
    TYPE            reduce using rule 104 (expression -> FALSE .)
    CASE            reduce using rule 104 (expression -> FALSE .)
    DEFAULT         reduce using rule 104 (expression -> FALSE .)
    LBRACE          reduce using rule 104 (expression -> FALSE .)
    RPAREN          reduce using rule 104 (expression -> FALSE .)
    RBRACKET        reduce using rule 104 (expression -> FALSE .)
    COLON           reduce using rule 104 (expression -> FALSE .)


state 115

    (119) expression -> LBRACKET . RBRACKET variable LPAREN expression RPAREN

    RBRACKET        shift and go to state 164


state 116

    (120) expression -> FLOAT64_TYPE . LPAREN expression RPAREN

    LPAREN          shift and go to state 165


state 117

    (121) expression -> INT_TYPE . LPAREN expression RPAREN

    LPAREN          shift and go to state 166


state 118

    (122) expression -> STRING_TYPE . LPAREN expression RPAREN

    LPAREN          shift and go to state 167


state 119

    (123) expression -> BOOL_TYPE . LPAREN expression RPAREN

    LPAREN          shift and go to state 168


state 120

    (124) expression -> VARIABLE . LPAREN expression RPAREN
    (131) expression -> VARIABLE . LBRACE field_list RBRACE
    (110) variable -> VARIABLE .

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
    LPAREN          shift and go to state 169
    LBRACE          shift and go to state 170
    DOT             reduce using rule 110 (variable -> VARIABLE .)
    LBRACKET        reduce using rule 110 (variable -> VARIABLE .)
    COMMA           reduce using rule 110 (variable -> VARIABLE .)
    PLUS            reduce using rule 110 (variable -> VARIABLE .)
    MINUS           reduce using rule 110 (variable -> VARIABLE .)
    TIMES           reduce using rule 110 (variable -> VARIABLE .)
    DIVIDE          reduce using rule 110 (variable -> VARIABLE .)
    MOD             reduce using rule 110 (variable -> VARIABLE .)
    LT              reduce using rule 110 (variable -> VARIABLE .)
    LE              reduce using rule 110 (variable -> VARIABLE .)
    GT              reduce using rule 110 (variable -> VARIABLE .)
    GE              reduce using rule 110 (variable -> VARIABLE .)
    EQ              reduce using rule 110 (variable -> VARIABLE .)
    NE              reduce using rule 110 (variable -> VARIABLE .)
    AND             reduce using rule 110 (variable -> VARIABLE .)
    OR              reduce using rule 110 (variable -> VARIABLE .)
    SEMICOLON       reduce using rule 110 (variable -> VARIABLE .)
    RBRACE          reduce using rule 110 (variable -> VARIABLE .)
    RETURN          reduce using rule 110 (variable -> VARIABLE .)
    FOR             reduce using rule 110 (variable -> VARIABLE .)
    SWITCH          reduce using rule 110 (variable -> VARIABLE .)
    VAR             reduce using rule 110 (variable -> VARIABLE .)
    IF              reduce using rule 110 (variable -> VARIABLE .)
    APPEND          reduce using rule 110 (variable -> VARIABLE .)
    PRINTLN         reduce using rule 110 (variable -> VARIABLE .)
    PRINTF          reduce using rule 110 (variable -> VARIABLE .)
    VARIABLE        reduce using rule 110 (variable -> VARIABLE .)
    TYPE            reduce using rule 110 (variable -> VARIABLE .)
    CASE            reduce using rule 110 (variable -> VARIABLE .)
    DEFAULT         reduce using rule 110 (variable -> VARIABLE .)
    RPAREN          reduce using rule 110 (variable -> VARIABLE .)
    RBRACKET        reduce using rule 110 (variable -> VARIABLE .)
    COLON           reduce using rule 110 (variable -> VARIABLE .)

  ! LPAREN          [ reduce using rule 110 (variable -> VARIABLE .) ]
  ! LBRACE          [ reduce using rule 110 (variable -> VARIABLE .) ]


state 121

    (47) statement -> FOR VARIABLE . COMMA VARIABLE ASSIGN_SHORT RANGE variable block
    (64) for_loop -> FOR VARIABLE . ASSIGN expression SEMICOLON expression SEMICOLON assignment block
    (65) for_loop -> FOR VARIABLE . ASSIGN_SHORT expression SEMICOLON expression SEMICOLON increment_statement block
    (110) variable -> VARIABLE .

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for ASSIGN_SHORT resolved as shift
    COMMA           shift and go to state 171
    ASSIGN          shift and go to state 173
    ASSIGN_SHORT    shift and go to state 172
    DOT             reduce using rule 110 (variable -> VARIABLE .)
    LBRACKET        reduce using rule 110 (variable -> VARIABLE .)

  ! COMMA           [ reduce using rule 110 (variable -> VARIABLE .) ]
  ! ASSIGN_SHORT    [ reduce using rule 110 (variable -> VARIABLE .) ]


state 122

    (115) variable_list -> variable .
    (116) variable_list -> variable . COMMA variable_list
    (111) variable -> variable . DOT VARIABLE
    (112) variable -> variable . LBRACKET expression RBRACKET

    ASSIGN_SHORT    reduce using rule 115 (variable_list -> variable .)
    COMMA           shift and go to state 134
    DOT             shift and go to state 174
    LBRACKET        shift and go to state 133


state 123

    (66) for_loop -> FOR variable_list . ASSIGN_SHORT RANGE variable block

    ASSIGN_SHORT    shift and go to state 175


state 124

    (48) statement -> variable INCREMENT .

    RBRACE          reduce using rule 48 (statement -> variable INCREMENT .)
    RETURN          reduce using rule 48 (statement -> variable INCREMENT .)
    FOR             reduce using rule 48 (statement -> variable INCREMENT .)
    SWITCH          reduce using rule 48 (statement -> variable INCREMENT .)
    VAR             reduce using rule 48 (statement -> variable INCREMENT .)
    IF              reduce using rule 48 (statement -> variable INCREMENT .)
    APPEND          reduce using rule 48 (statement -> variable INCREMENT .)
    PRINTLN         reduce using rule 48 (statement -> variable INCREMENT .)
    PRINTF          reduce using rule 48 (statement -> variable INCREMENT .)
    VARIABLE        reduce using rule 48 (statement -> variable INCREMENT .)
    TYPE            reduce using rule 48 (statement -> variable INCREMENT .)
    CASE            reduce using rule 48 (statement -> variable INCREMENT .)
    DEFAULT         reduce using rule 48 (statement -> variable INCREMENT .)


state 125

    (49) statement -> variable DECREMENT .

    RBRACE          reduce using rule 49 (statement -> variable DECREMENT .)
    RETURN          reduce using rule 49 (statement -> variable DECREMENT .)
    FOR             reduce using rule 49 (statement -> variable DECREMENT .)
    SWITCH          reduce using rule 49 (statement -> variable DECREMENT .)
    VAR             reduce using rule 49 (statement -> variable DECREMENT .)
    IF              reduce using rule 49 (statement -> variable DECREMENT .)
    APPEND          reduce using rule 49 (statement -> variable DECREMENT .)
    PRINTLN         reduce using rule 49 (statement -> variable DECREMENT .)
    PRINTF          reduce using rule 49 (statement -> variable DECREMENT .)
    VARIABLE        reduce using rule 49 (statement -> variable DECREMENT .)
    TYPE            reduce using rule 49 (statement -> variable DECREMENT .)
    CASE            reduce using rule 49 (statement -> variable DECREMENT .)
    DEFAULT         reduce using rule 49 (statement -> variable DECREMENT .)


state 126

    (55) assignment -> variable ASSIGN . expression
    (56) assignment -> variable ASSIGN . expression SEMICOLON
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    variable                       shift and go to state 110
    expression                     shift and go to state 176
    function_call                  shift and go to state 111

state 127

    (57) assignment -> variable PLUS_ASSIGN . expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    variable                       shift and go to state 110
    expression                     shift and go to state 177
    function_call                  shift and go to state 111

state 128

    (58) assignment -> variable MINUS_ASSIGN . expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    variable                       shift and go to state 110
    expression                     shift and go to state 178
    function_call                  shift and go to state 111

state 129

    (59) assignment -> variable TIMES_ASSIGN . expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    variable                       shift and go to state 110
    expression                     shift and go to state 179
    function_call                  shift and go to state 111

state 130

    (60) assignment -> variable DIVIDE_ASSIGN . expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    variable                       shift and go to state 110
    expression                     shift and go to state 180
    function_call                  shift and go to state 111

state 131

    (69) function_call -> variable LPAREN . argument_list RPAREN
    (70) function_call -> variable LPAREN . RPAREN
    (83) argument_list -> . expression
    (84) argument_list -> . argument_list COMMA expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    RPAREN          shift and go to state 182
    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    variable                       shift and go to state 110
    argument_list                  shift and go to state 181
    expression                     shift and go to state 183
    function_call                  shift and go to state 111

state 132

    (73) function_call -> variable DOT . APPEND LPAREN argument_list RPAREN
    (74) function_call -> variable DOT . APPEND LPAREN RPAREN
    (77) function_call -> variable DOT . PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> variable DOT . PRINTLN LPAREN RPAREN
    (81) function_call -> variable DOT . PRINTF LPAREN argument_list RPAREN
    (82) function_call -> variable DOT . PRINTF LPAREN RPAREN
    (111) variable -> variable DOT . VARIABLE

    APPEND          shift and go to state 184
    PRINTLN         shift and go to state 185
    PRINTF          shift and go to state 186
    VARIABLE        shift and go to state 187


state 133

    (112) variable -> variable LBRACKET . expression RBRACKET
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    variable                       shift and go to state 110
    expression                     shift and go to state 188
    function_call                  shift and go to state 111

state 134

    (116) variable_list -> variable COMMA . variable_list
    (115) variable_list -> . variable
    (116) variable_list -> . variable COMMA variable_list
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET

    VARIABLE        shift and go to state 91

    variable                       shift and go to state 122
    variable_list                  shift and go to state 189

state 135

    (50) statement -> SWITCH LBRACE . case_list RBRACE
    (106) case_list -> . case_list case
    (107) case_list -> . case
    (108) case -> . CASE expression COLON statement_list
    (109) case -> . DEFAULT COLON statement_list

    CASE            shift and go to state 192
    DEFAULT         shift and go to state 193

    case_list                      shift and go to state 190
    case                           shift and go to state 191

state 136

    (51) statement -> SWITCH expression . LBRACE case_list RBRACE
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    LBRACE          shift and go to state 194
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 137

    (53) declaration -> VAR VARIABLE . ASSIGN expression
    (54) declaration -> VAR VARIABLE . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 195


state 138

    (113) short_declaration -> variable_list ASSIGN_SHORT . expression_list
    (114) short_declaration -> variable_list ASSIGN_SHORT . expression_list SEMICOLON
    (117) expression_list -> . expression
    (118) expression_list -> . expression COMMA expression_list
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression_list                shift and go to state 196
    expression                     shift and go to state 107
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 139

    (61) if_statement -> IF expression . block else_clause
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression
    (36) block -> . LBRACE statement_list RBRACE

    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161
    LBRACE          shift and go to state 70

    block                          shift and go to state 197

state 140

    (71) function_call -> APPEND LPAREN . argument_list RPAREN
    (72) function_call -> APPEND LPAREN . RPAREN
    (83) argument_list -> . expression
    (84) argument_list -> . argument_list COMMA expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    RPAREN          shift and go to state 199
    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    argument_list                  shift and go to state 198
    expression                     shift and go to state 183
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 141

    (75) function_call -> PRINTLN LPAREN . argument_list RPAREN
    (76) function_call -> PRINTLN LPAREN . RPAREN
    (83) argument_list -> . expression
    (84) argument_list -> . argument_list COMMA expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    RPAREN          shift and go to state 201
    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    argument_list                  shift and go to state 200
    expression                     shift and go to state 183
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 142

    (79) function_call -> PRINTF LPAREN . argument_list RPAREN
    (80) function_call -> PRINTF LPAREN . RPAREN
    (83) argument_list -> . expression
    (84) argument_list -> . argument_list COMMA expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    RPAREN          shift and go to state 203
    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    argument_list                  shift and go to state 202
    expression                     shift and go to state 183
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 143

    (18) function -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type block .

    FUNC            reduce using rule 18 (function -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type block .)
    TYPE            reduce using rule 18 (function -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type block .)
    $end            reduce using rule 18 (function -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type block .)


state 144

    (17) function -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type . block
    (36) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 70

    block                          shift and go to state 204

state 145

    (20) function -> FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type . block
    (36) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 70

    block                          shift and go to state 205

state 146

    (19) function -> FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN . return_type block
    (25) return_type -> . type
    (26) return_type -> . LPAREN type_list RPAREN
    (27) return_type -> . empty
    (30) type -> . STRING_TYPE
    (31) type -> . INT_TYPE
    (32) type -> . BOOL_TYPE
    (33) type -> . FLOAT64_TYPE
    (34) type -> . VARIABLE
    (35) type -> . LBRACKET RBRACKET VARIABLE
    (105) empty -> .

    LPAREN          shift and go to state 55
    STRING_TYPE     shift and go to state 41
    INT_TYPE        shift and go to state 42
    BOOL_TYPE       shift and go to state 43
    FLOAT64_TYPE    shift and go to state 44
    VARIABLE        shift and go to state 39
    LBRACKET        shift and go to state 45
    LBRACE          reduce using rule 105 (empty -> .)

    return_type                    shift and go to state 206
    type                           shift and go to state 57
    empty                          shift and go to state 58

state 147

    (46) statement -> RETURN expression_list SEMICOLON .

    RBRACE          reduce using rule 46 (statement -> RETURN expression_list SEMICOLON .)
    RETURN          reduce using rule 46 (statement -> RETURN expression_list SEMICOLON .)
    FOR             reduce using rule 46 (statement -> RETURN expression_list SEMICOLON .)
    SWITCH          reduce using rule 46 (statement -> RETURN expression_list SEMICOLON .)
    VAR             reduce using rule 46 (statement -> RETURN expression_list SEMICOLON .)
    IF              reduce using rule 46 (statement -> RETURN expression_list SEMICOLON .)
    APPEND          reduce using rule 46 (statement -> RETURN expression_list SEMICOLON .)
    PRINTLN         reduce using rule 46 (statement -> RETURN expression_list SEMICOLON .)
    PRINTF          reduce using rule 46 (statement -> RETURN expression_list SEMICOLON .)
    VARIABLE        reduce using rule 46 (statement -> RETURN expression_list SEMICOLON .)
    TYPE            reduce using rule 46 (statement -> RETURN expression_list SEMICOLON .)
    CASE            reduce using rule 46 (statement -> RETURN expression_list SEMICOLON .)
    DEFAULT         reduce using rule 46 (statement -> RETURN expression_list SEMICOLON .)


state 148

    (118) expression_list -> expression COMMA . expression_list
    (117) expression_list -> . expression
    (118) expression_list -> . expression COMMA expression_list
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 107
    expression_list                shift and go to state 207
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 149

    (85) expression -> expression PLUS . expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 208
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 150

    (86) expression -> expression MINUS . expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 209
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 151

    (87) expression -> expression TIMES . expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 210
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 152

    (88) expression -> expression DIVIDE . expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 211
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 153

    (89) expression -> expression MOD . expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 212
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 154

    (90) expression -> expression LT . expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 213
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 155

    (91) expression -> expression LE . expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 214
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 156

    (92) expression -> expression GT . expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 215
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 157

    (93) expression -> expression GE . expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 216
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 158

    (94) expression -> expression EQ . expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 217
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 159

    (95) expression -> expression NE . expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 218
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 160

    (96) expression -> expression AND . expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 219
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 161

    (97) expression -> expression OR . expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 220
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 162

    (98) expression -> LPAREN expression . RPAREN
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    RPAREN          shift and go to state 221
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 163

    (111) variable -> variable DOT . VARIABLE
    (73) function_call -> variable DOT . APPEND LPAREN argument_list RPAREN
    (74) function_call -> variable DOT . APPEND LPAREN RPAREN
    (77) function_call -> variable DOT . PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> variable DOT . PRINTLN LPAREN RPAREN
    (81) function_call -> variable DOT . PRINTF LPAREN argument_list RPAREN
    (82) function_call -> variable DOT . PRINTF LPAREN RPAREN

    VARIABLE        shift and go to state 187
    APPEND          shift and go to state 184
    PRINTLN         shift and go to state 185
    PRINTF          shift and go to state 186


state 164

    (119) expression -> LBRACKET RBRACKET . variable LPAREN expression RPAREN
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET

    VARIABLE        shift and go to state 91

    variable                       shift and go to state 222

state 165

    (120) expression -> FLOAT64_TYPE LPAREN . expression RPAREN
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 223
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 166

    (121) expression -> INT_TYPE LPAREN . expression RPAREN
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 224
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 167

    (122) expression -> STRING_TYPE LPAREN . expression RPAREN
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 225
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 168

    (123) expression -> BOOL_TYPE LPAREN . expression RPAREN
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 226
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 169

    (124) expression -> VARIABLE LPAREN . expression RPAREN
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 227
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 170

    (131) expression -> VARIABLE LBRACE . field_list RBRACE
    (132) field_list -> . field_list COMMA field
    (133) field_list -> . field
    (134) field_list -> . empty
    (135) field -> . VARIABLE COLON expression
    (105) empty -> .

    VARIABLE        shift and go to state 228
    RBRACE          reduce using rule 105 (empty -> .)
    COMMA           reduce using rule 105 (empty -> .)

    field_list                     shift and go to state 229
    field                          shift and go to state 230
    empty                          shift and go to state 231

state 171

    (47) statement -> FOR VARIABLE COMMA . VARIABLE ASSIGN_SHORT RANGE variable block

    VARIABLE        shift and go to state 232


state 172

    (65) for_loop -> FOR VARIABLE ASSIGN_SHORT . expression SEMICOLON expression SEMICOLON increment_statement block
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 233
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 173

    (64) for_loop -> FOR VARIABLE ASSIGN . expression SEMICOLON expression SEMICOLON assignment block
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 234
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 174

    (111) variable -> variable DOT . VARIABLE

    VARIABLE        shift and go to state 187


state 175

    (66) for_loop -> FOR variable_list ASSIGN_SHORT . RANGE variable block

    RANGE           shift and go to state 235


state 176

    (55) assignment -> variable ASSIGN expression .
    (56) assignment -> variable ASSIGN expression . SEMICOLON
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    RBRACE          reduce using rule 55 (assignment -> variable ASSIGN expression .)
    RETURN          reduce using rule 55 (assignment -> variable ASSIGN expression .)
    FOR             reduce using rule 55 (assignment -> variable ASSIGN expression .)
    SWITCH          reduce using rule 55 (assignment -> variable ASSIGN expression .)
    VAR             reduce using rule 55 (assignment -> variable ASSIGN expression .)
    IF              reduce using rule 55 (assignment -> variable ASSIGN expression .)
    APPEND          reduce using rule 55 (assignment -> variable ASSIGN expression .)
    PRINTLN         reduce using rule 55 (assignment -> variable ASSIGN expression .)
    PRINTF          reduce using rule 55 (assignment -> variable ASSIGN expression .)
    VARIABLE        reduce using rule 55 (assignment -> variable ASSIGN expression .)
    TYPE            reduce using rule 55 (assignment -> variable ASSIGN expression .)
    CASE            reduce using rule 55 (assignment -> variable ASSIGN expression .)
    DEFAULT         reduce using rule 55 (assignment -> variable ASSIGN expression .)
    LBRACE          reduce using rule 55 (assignment -> variable ASSIGN expression .)
    SEMICOLON       shift and go to state 236
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 177

    (57) assignment -> variable PLUS_ASSIGN expression .
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    RBRACE          reduce using rule 57 (assignment -> variable PLUS_ASSIGN expression .)
    RETURN          reduce using rule 57 (assignment -> variable PLUS_ASSIGN expression .)
    FOR             reduce using rule 57 (assignment -> variable PLUS_ASSIGN expression .)
    SWITCH          reduce using rule 57 (assignment -> variable PLUS_ASSIGN expression .)
    VAR             reduce using rule 57 (assignment -> variable PLUS_ASSIGN expression .)
    IF              reduce using rule 57 (assignment -> variable PLUS_ASSIGN expression .)
    APPEND          reduce using rule 57 (assignment -> variable PLUS_ASSIGN expression .)
    PRINTLN         reduce using rule 57 (assignment -> variable PLUS_ASSIGN expression .)
    PRINTF          reduce using rule 57 (assignment -> variable PLUS_ASSIGN expression .)
    VARIABLE        reduce using rule 57 (assignment -> variable PLUS_ASSIGN expression .)
    TYPE            reduce using rule 57 (assignment -> variable PLUS_ASSIGN expression .)
    CASE            reduce using rule 57 (assignment -> variable PLUS_ASSIGN expression .)
    DEFAULT         reduce using rule 57 (assignment -> variable PLUS_ASSIGN expression .)
    LBRACE          reduce using rule 57 (assignment -> variable PLUS_ASSIGN expression .)
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 178

    (58) assignment -> variable MINUS_ASSIGN expression .
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    RBRACE          reduce using rule 58 (assignment -> variable MINUS_ASSIGN expression .)
    RETURN          reduce using rule 58 (assignment -> variable MINUS_ASSIGN expression .)
    FOR             reduce using rule 58 (assignment -> variable MINUS_ASSIGN expression .)
    SWITCH          reduce using rule 58 (assignment -> variable MINUS_ASSIGN expression .)
    VAR             reduce using rule 58 (assignment -> variable MINUS_ASSIGN expression .)
    IF              reduce using rule 58 (assignment -> variable MINUS_ASSIGN expression .)
    APPEND          reduce using rule 58 (assignment -> variable MINUS_ASSIGN expression .)
    PRINTLN         reduce using rule 58 (assignment -> variable MINUS_ASSIGN expression .)
    PRINTF          reduce using rule 58 (assignment -> variable MINUS_ASSIGN expression .)
    VARIABLE        reduce using rule 58 (assignment -> variable MINUS_ASSIGN expression .)
    TYPE            reduce using rule 58 (assignment -> variable MINUS_ASSIGN expression .)
    CASE            reduce using rule 58 (assignment -> variable MINUS_ASSIGN expression .)
    DEFAULT         reduce using rule 58 (assignment -> variable MINUS_ASSIGN expression .)
    LBRACE          reduce using rule 58 (assignment -> variable MINUS_ASSIGN expression .)
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 179

    (59) assignment -> variable TIMES_ASSIGN expression .
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    RBRACE          reduce using rule 59 (assignment -> variable TIMES_ASSIGN expression .)
    RETURN          reduce using rule 59 (assignment -> variable TIMES_ASSIGN expression .)
    FOR             reduce using rule 59 (assignment -> variable TIMES_ASSIGN expression .)
    SWITCH          reduce using rule 59 (assignment -> variable TIMES_ASSIGN expression .)
    VAR             reduce using rule 59 (assignment -> variable TIMES_ASSIGN expression .)
    IF              reduce using rule 59 (assignment -> variable TIMES_ASSIGN expression .)
    APPEND          reduce using rule 59 (assignment -> variable TIMES_ASSIGN expression .)
    PRINTLN         reduce using rule 59 (assignment -> variable TIMES_ASSIGN expression .)
    PRINTF          reduce using rule 59 (assignment -> variable TIMES_ASSIGN expression .)
    VARIABLE        reduce using rule 59 (assignment -> variable TIMES_ASSIGN expression .)
    TYPE            reduce using rule 59 (assignment -> variable TIMES_ASSIGN expression .)
    CASE            reduce using rule 59 (assignment -> variable TIMES_ASSIGN expression .)
    DEFAULT         reduce using rule 59 (assignment -> variable TIMES_ASSIGN expression .)
    LBRACE          reduce using rule 59 (assignment -> variable TIMES_ASSIGN expression .)
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 180

    (60) assignment -> variable DIVIDE_ASSIGN expression .
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    RBRACE          reduce using rule 60 (assignment -> variable DIVIDE_ASSIGN expression .)
    RETURN          reduce using rule 60 (assignment -> variable DIVIDE_ASSIGN expression .)
    FOR             reduce using rule 60 (assignment -> variable DIVIDE_ASSIGN expression .)
    SWITCH          reduce using rule 60 (assignment -> variable DIVIDE_ASSIGN expression .)
    VAR             reduce using rule 60 (assignment -> variable DIVIDE_ASSIGN expression .)
    IF              reduce using rule 60 (assignment -> variable DIVIDE_ASSIGN expression .)
    APPEND          reduce using rule 60 (assignment -> variable DIVIDE_ASSIGN expression .)
    PRINTLN         reduce using rule 60 (assignment -> variable DIVIDE_ASSIGN expression .)
    PRINTF          reduce using rule 60 (assignment -> variable DIVIDE_ASSIGN expression .)
    VARIABLE        reduce using rule 60 (assignment -> variable DIVIDE_ASSIGN expression .)
    TYPE            reduce using rule 60 (assignment -> variable DIVIDE_ASSIGN expression .)
    CASE            reduce using rule 60 (assignment -> variable DIVIDE_ASSIGN expression .)
    DEFAULT         reduce using rule 60 (assignment -> variable DIVIDE_ASSIGN expression .)
    LBRACE          reduce using rule 60 (assignment -> variable DIVIDE_ASSIGN expression .)
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 181

    (69) function_call -> variable LPAREN argument_list . RPAREN
    (84) argument_list -> argument_list . COMMA expression

    RPAREN          shift and go to state 237
    COMMA           shift and go to state 238


state 182

    (70) function_call -> variable LPAREN RPAREN .

    SEMICOLON       reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    COMMA           reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    PLUS            reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    MINUS           reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    TIMES           reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    DIVIDE          reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    MOD             reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    LT              reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    LE              reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    GT              reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    GE              reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    EQ              reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    NE              reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    AND             reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    OR              reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    RBRACE          reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    RETURN          reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    FOR             reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    SWITCH          reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    VAR             reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    IF              reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    APPEND          reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    PRINTLN         reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    PRINTF          reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    VARIABLE        reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    TYPE            reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    CASE            reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    DEFAULT         reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    LBRACE          reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    RPAREN          reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    RBRACKET        reduce using rule 70 (function_call -> variable LPAREN RPAREN .)
    COLON           reduce using rule 70 (function_call -> variable LPAREN RPAREN .)


state 183

    (83) argument_list -> expression .
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    RPAREN          reduce using rule 83 (argument_list -> expression .)
    COMMA           reduce using rule 83 (argument_list -> expression .)
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 184

    (73) function_call -> variable DOT APPEND . LPAREN argument_list RPAREN
    (74) function_call -> variable DOT APPEND . LPAREN RPAREN

    LPAREN          shift and go to state 239


state 185

    (77) function_call -> variable DOT PRINTLN . LPAREN argument_list RPAREN
    (78) function_call -> variable DOT PRINTLN . LPAREN RPAREN

    LPAREN          shift and go to state 240


state 186

    (81) function_call -> variable DOT PRINTF . LPAREN argument_list RPAREN
    (82) function_call -> variable DOT PRINTF . LPAREN RPAREN

    LPAREN          shift and go to state 241


state 187

    (111) variable -> variable DOT VARIABLE .

    INCREMENT       reduce using rule 111 (variable -> variable DOT VARIABLE .)
    DECREMENT       reduce using rule 111 (variable -> variable DOT VARIABLE .)
    ASSIGN          reduce using rule 111 (variable -> variable DOT VARIABLE .)
    PLUS_ASSIGN     reduce using rule 111 (variable -> variable DOT VARIABLE .)
    MINUS_ASSIGN    reduce using rule 111 (variable -> variable DOT VARIABLE .)
    TIMES_ASSIGN    reduce using rule 111 (variable -> variable DOT VARIABLE .)
    DIVIDE_ASSIGN   reduce using rule 111 (variable -> variable DOT VARIABLE .)
    LPAREN          reduce using rule 111 (variable -> variable DOT VARIABLE .)
    DOT             reduce using rule 111 (variable -> variable DOT VARIABLE .)
    LBRACKET        reduce using rule 111 (variable -> variable DOT VARIABLE .)
    COMMA           reduce using rule 111 (variable -> variable DOT VARIABLE .)
    ASSIGN_SHORT    reduce using rule 111 (variable -> variable DOT VARIABLE .)
    PLUS            reduce using rule 111 (variable -> variable DOT VARIABLE .)
    MINUS           reduce using rule 111 (variable -> variable DOT VARIABLE .)
    TIMES           reduce using rule 111 (variable -> variable DOT VARIABLE .)
    DIVIDE          reduce using rule 111 (variable -> variable DOT VARIABLE .)
    MOD             reduce using rule 111 (variable -> variable DOT VARIABLE .)
    LT              reduce using rule 111 (variable -> variable DOT VARIABLE .)
    LE              reduce using rule 111 (variable -> variable DOT VARIABLE .)
    GT              reduce using rule 111 (variable -> variable DOT VARIABLE .)
    GE              reduce using rule 111 (variable -> variable DOT VARIABLE .)
    EQ              reduce using rule 111 (variable -> variable DOT VARIABLE .)
    NE              reduce using rule 111 (variable -> variable DOT VARIABLE .)
    AND             reduce using rule 111 (variable -> variable DOT VARIABLE .)
    OR              reduce using rule 111 (variable -> variable DOT VARIABLE .)
    SEMICOLON       reduce using rule 111 (variable -> variable DOT VARIABLE .)
    RBRACE          reduce using rule 111 (variable -> variable DOT VARIABLE .)
    RETURN          reduce using rule 111 (variable -> variable DOT VARIABLE .)
    FOR             reduce using rule 111 (variable -> variable DOT VARIABLE .)
    SWITCH          reduce using rule 111 (variable -> variable DOT VARIABLE .)
    VAR             reduce using rule 111 (variable -> variable DOT VARIABLE .)
    IF              reduce using rule 111 (variable -> variable DOT VARIABLE .)
    APPEND          reduce using rule 111 (variable -> variable DOT VARIABLE .)
    PRINTLN         reduce using rule 111 (variable -> variable DOT VARIABLE .)
    PRINTF          reduce using rule 111 (variable -> variable DOT VARIABLE .)
    VARIABLE        reduce using rule 111 (variable -> variable DOT VARIABLE .)
    TYPE            reduce using rule 111 (variable -> variable DOT VARIABLE .)
    CASE            reduce using rule 111 (variable -> variable DOT VARIABLE .)
    DEFAULT         reduce using rule 111 (variable -> variable DOT VARIABLE .)
    LBRACE          reduce using rule 111 (variable -> variable DOT VARIABLE .)
    RPAREN          reduce using rule 111 (variable -> variable DOT VARIABLE .)
    RBRACKET        reduce using rule 111 (variable -> variable DOT VARIABLE .)
    COLON           reduce using rule 111 (variable -> variable DOT VARIABLE .)


state 188

    (112) variable -> variable LBRACKET expression . RBRACKET
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    RBRACKET        shift and go to state 242
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 189

    (116) variable_list -> variable COMMA variable_list .

    ASSIGN_SHORT    reduce using rule 116 (variable_list -> variable COMMA variable_list .)


state 190

    (50) statement -> SWITCH LBRACE case_list . RBRACE
    (106) case_list -> case_list . case
    (108) case -> . CASE expression COLON statement_list
    (109) case -> . DEFAULT COLON statement_list

    RBRACE          shift and go to state 243
    CASE            shift and go to state 192
    DEFAULT         shift and go to state 193

    case                           shift and go to state 244

state 191

    (107) case_list -> case .

    RBRACE          reduce using rule 107 (case_list -> case .)
    CASE            reduce using rule 107 (case_list -> case .)
    DEFAULT         reduce using rule 107 (case_list -> case .)


state 192

    (108) case -> CASE . expression COLON statement_list
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 245
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 193

    (109) case -> DEFAULT . COLON statement_list

    COLON           shift and go to state 246


state 194

    (51) statement -> SWITCH expression LBRACE . case_list RBRACE
    (106) case_list -> . case_list case
    (107) case_list -> . case
    (108) case -> . CASE expression COLON statement_list
    (109) case -> . DEFAULT COLON statement_list

    CASE            shift and go to state 192
    DEFAULT         shift and go to state 193

    case_list                      shift and go to state 247
    case                           shift and go to state 191

state 195

    (53) declaration -> VAR VARIABLE ASSIGN . expression
    (54) declaration -> VAR VARIABLE ASSIGN . expression SEMICOLON
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 248
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 196

    (113) short_declaration -> variable_list ASSIGN_SHORT expression_list .
    (114) short_declaration -> variable_list ASSIGN_SHORT expression_list . SEMICOLON

    RBRACE          reduce using rule 113 (short_declaration -> variable_list ASSIGN_SHORT expression_list .)
    RETURN          reduce using rule 113 (short_declaration -> variable_list ASSIGN_SHORT expression_list .)
    FOR             reduce using rule 113 (short_declaration -> variable_list ASSIGN_SHORT expression_list .)
    SWITCH          reduce using rule 113 (short_declaration -> variable_list ASSIGN_SHORT expression_list .)
    VAR             reduce using rule 113 (short_declaration -> variable_list ASSIGN_SHORT expression_list .)
    IF              reduce using rule 113 (short_declaration -> variable_list ASSIGN_SHORT expression_list .)
    APPEND          reduce using rule 113 (short_declaration -> variable_list ASSIGN_SHORT expression_list .)
    PRINTLN         reduce using rule 113 (short_declaration -> variable_list ASSIGN_SHORT expression_list .)
    PRINTF          reduce using rule 113 (short_declaration -> variable_list ASSIGN_SHORT expression_list .)
    VARIABLE        reduce using rule 113 (short_declaration -> variable_list ASSIGN_SHORT expression_list .)
    TYPE            reduce using rule 113 (short_declaration -> variable_list ASSIGN_SHORT expression_list .)
    CASE            reduce using rule 113 (short_declaration -> variable_list ASSIGN_SHORT expression_list .)
    DEFAULT         reduce using rule 113 (short_declaration -> variable_list ASSIGN_SHORT expression_list .)
    SEMICOLON       shift and go to state 249


state 197

    (61) if_statement -> IF expression block . else_clause
    (62) else_clause -> . ELSE block
    (63) else_clause -> . empty
    (105) empty -> .

    ELSE            shift and go to state 251
    RBRACE          reduce using rule 105 (empty -> .)
    RETURN          reduce using rule 105 (empty -> .)
    FOR             reduce using rule 105 (empty -> .)
    SWITCH          reduce using rule 105 (empty -> .)
    VAR             reduce using rule 105 (empty -> .)
    IF              reduce using rule 105 (empty -> .)
    APPEND          reduce using rule 105 (empty -> .)
    PRINTLN         reduce using rule 105 (empty -> .)
    PRINTF          reduce using rule 105 (empty -> .)
    VARIABLE        reduce using rule 105 (empty -> .)
    TYPE            reduce using rule 105 (empty -> .)
    CASE            reduce using rule 105 (empty -> .)
    DEFAULT         reduce using rule 105 (empty -> .)

    else_clause                    shift and go to state 250
    empty                          shift and go to state 252

state 198

    (71) function_call -> APPEND LPAREN argument_list . RPAREN
    (84) argument_list -> argument_list . COMMA expression

    RPAREN          shift and go to state 253
    COMMA           shift and go to state 238


state 199

    (72) function_call -> APPEND LPAREN RPAREN .

    SEMICOLON       reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    COMMA           reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    PLUS            reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    MINUS           reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    TIMES           reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    DIVIDE          reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    MOD             reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    LT              reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    LE              reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    GT              reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    GE              reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    EQ              reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    NE              reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    AND             reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    OR              reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    RBRACE          reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    RETURN          reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    FOR             reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    SWITCH          reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    VAR             reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    IF              reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    APPEND          reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    PRINTLN         reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    PRINTF          reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    VARIABLE        reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    TYPE            reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    CASE            reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    DEFAULT         reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    LBRACE          reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    RPAREN          reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    RBRACKET        reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)
    COLON           reduce using rule 72 (function_call -> APPEND LPAREN RPAREN .)


state 200

    (75) function_call -> PRINTLN LPAREN argument_list . RPAREN
    (84) argument_list -> argument_list . COMMA expression

    RPAREN          shift and go to state 254
    COMMA           shift and go to state 238


state 201

    (76) function_call -> PRINTLN LPAREN RPAREN .

    SEMICOLON       reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    COMMA           reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    PLUS            reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    MINUS           reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    TIMES           reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    DIVIDE          reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    MOD             reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    LT              reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    LE              reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    GT              reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    GE              reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    EQ              reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    NE              reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    AND             reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    OR              reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    RBRACE          reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    RETURN          reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    FOR             reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    SWITCH          reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    VAR             reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    IF              reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    APPEND          reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    PRINTLN         reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    PRINTF          reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    VARIABLE        reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    TYPE            reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    CASE            reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    DEFAULT         reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    LBRACE          reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    RPAREN          reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    RBRACKET        reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)
    COLON           reduce using rule 76 (function_call -> PRINTLN LPAREN RPAREN .)


state 202

    (79) function_call -> PRINTF LPAREN argument_list . RPAREN
    (84) argument_list -> argument_list . COMMA expression

    RPAREN          shift and go to state 255
    COMMA           shift and go to state 238


state 203

    (80) function_call -> PRINTF LPAREN RPAREN .

    SEMICOLON       reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    COMMA           reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    PLUS            reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    MINUS           reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    TIMES           reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    DIVIDE          reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    MOD             reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    LT              reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    LE              reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    GT              reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    GE              reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    EQ              reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    NE              reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    AND             reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    OR              reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    RBRACE          reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    RETURN          reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    FOR             reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    SWITCH          reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    VAR             reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    IF              reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    APPEND          reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    PRINTLN         reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    PRINTF          reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    VARIABLE        reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    TYPE            reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    CASE            reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    DEFAULT         reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    LBRACE          reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    RPAREN          reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    RBRACKET        reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)
    COLON           reduce using rule 80 (function_call -> PRINTF LPAREN RPAREN .)


state 204

    (17) function -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type block .

    FUNC            reduce using rule 17 (function -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type block .)
    TYPE            reduce using rule 17 (function -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type block .)
    $end            reduce using rule 17 (function -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type block .)


state 205

    (20) function -> FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type block .

    FUNC            reduce using rule 20 (function -> FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type block .)
    TYPE            reduce using rule 20 (function -> FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type block .)
    $end            reduce using rule 20 (function -> FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN RPAREN return_type block .)


state 206

    (19) function -> FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type . block
    (36) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 70

    block                          shift and go to state 256

state 207

    (118) expression_list -> expression COMMA expression_list .

    SEMICOLON       reduce using rule 118 (expression_list -> expression COMMA expression_list .)
    RBRACE          reduce using rule 118 (expression_list -> expression COMMA expression_list .)
    RETURN          reduce using rule 118 (expression_list -> expression COMMA expression_list .)
    FOR             reduce using rule 118 (expression_list -> expression COMMA expression_list .)
    SWITCH          reduce using rule 118 (expression_list -> expression COMMA expression_list .)
    VAR             reduce using rule 118 (expression_list -> expression COMMA expression_list .)
    IF              reduce using rule 118 (expression_list -> expression COMMA expression_list .)
    APPEND          reduce using rule 118 (expression_list -> expression COMMA expression_list .)
    PRINTLN         reduce using rule 118 (expression_list -> expression COMMA expression_list .)
    PRINTF          reduce using rule 118 (expression_list -> expression COMMA expression_list .)
    VARIABLE        reduce using rule 118 (expression_list -> expression COMMA expression_list .)
    TYPE            reduce using rule 118 (expression_list -> expression COMMA expression_list .)
    CASE            reduce using rule 118 (expression_list -> expression COMMA expression_list .)
    DEFAULT         reduce using rule 118 (expression_list -> expression COMMA expression_list .)


state 208

    (85) expression -> expression PLUS expression .
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    COMMA           reduce using rule 85 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 85 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 85 (expression -> expression PLUS expression .)
    LT              reduce using rule 85 (expression -> expression PLUS expression .)
    LE              reduce using rule 85 (expression -> expression PLUS expression .)
    GT              reduce using rule 85 (expression -> expression PLUS expression .)
    GE              reduce using rule 85 (expression -> expression PLUS expression .)
    EQ              reduce using rule 85 (expression -> expression PLUS expression .)
    NE              reduce using rule 85 (expression -> expression PLUS expression .)
    AND             reduce using rule 85 (expression -> expression PLUS expression .)
    OR              reduce using rule 85 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 85 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 85 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 85 (expression -> expression PLUS expression .)
    FOR             reduce using rule 85 (expression -> expression PLUS expression .)
    SWITCH          reduce using rule 85 (expression -> expression PLUS expression .)
    VAR             reduce using rule 85 (expression -> expression PLUS expression .)
    IF              reduce using rule 85 (expression -> expression PLUS expression .)
    APPEND          reduce using rule 85 (expression -> expression PLUS expression .)
    PRINTLN         reduce using rule 85 (expression -> expression PLUS expression .)
    PRINTF          reduce using rule 85 (expression -> expression PLUS expression .)
    VARIABLE        reduce using rule 85 (expression -> expression PLUS expression .)
    TYPE            reduce using rule 85 (expression -> expression PLUS expression .)
    CASE            reduce using rule 85 (expression -> expression PLUS expression .)
    DEFAULT         reduce using rule 85 (expression -> expression PLUS expression .)
    LBRACE          reduce using rule 85 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 85 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 85 (expression -> expression PLUS expression .)
    COLON           reduce using rule 85 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153

  ! TIMES           [ reduce using rule 85 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 85 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 85 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 149 ]
  ! MINUS           [ shift and go to state 150 ]
  ! LT              [ shift and go to state 154 ]
  ! LE              [ shift and go to state 155 ]
  ! GT              [ shift and go to state 156 ]
  ! GE              [ shift and go to state 157 ]
  ! EQ              [ shift and go to state 158 ]
  ! NE              [ shift and go to state 159 ]
  ! AND             [ shift and go to state 160 ]
  ! OR              [ shift and go to state 161 ]


state 209

    (86) expression -> expression MINUS expression .
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    COMMA           reduce using rule 86 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 86 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 86 (expression -> expression MINUS expression .)
    LT              reduce using rule 86 (expression -> expression MINUS expression .)
    LE              reduce using rule 86 (expression -> expression MINUS expression .)
    GT              reduce using rule 86 (expression -> expression MINUS expression .)
    GE              reduce using rule 86 (expression -> expression MINUS expression .)
    EQ              reduce using rule 86 (expression -> expression MINUS expression .)
    NE              reduce using rule 86 (expression -> expression MINUS expression .)
    AND             reduce using rule 86 (expression -> expression MINUS expression .)
    OR              reduce using rule 86 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 86 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 86 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 86 (expression -> expression MINUS expression .)
    FOR             reduce using rule 86 (expression -> expression MINUS expression .)
    SWITCH          reduce using rule 86 (expression -> expression MINUS expression .)
    VAR             reduce using rule 86 (expression -> expression MINUS expression .)
    IF              reduce using rule 86 (expression -> expression MINUS expression .)
    APPEND          reduce using rule 86 (expression -> expression MINUS expression .)
    PRINTLN         reduce using rule 86 (expression -> expression MINUS expression .)
    PRINTF          reduce using rule 86 (expression -> expression MINUS expression .)
    VARIABLE        reduce using rule 86 (expression -> expression MINUS expression .)
    TYPE            reduce using rule 86 (expression -> expression MINUS expression .)
    CASE            reduce using rule 86 (expression -> expression MINUS expression .)
    DEFAULT         reduce using rule 86 (expression -> expression MINUS expression .)
    LBRACE          reduce using rule 86 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 86 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 86 (expression -> expression MINUS expression .)
    COLON           reduce using rule 86 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153

  ! TIMES           [ reduce using rule 86 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 86 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 86 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 149 ]
  ! MINUS           [ shift and go to state 150 ]
  ! LT              [ shift and go to state 154 ]
  ! LE              [ shift and go to state 155 ]
  ! GT              [ shift and go to state 156 ]
  ! GE              [ shift and go to state 157 ]
  ! EQ              [ shift and go to state 158 ]
  ! NE              [ shift and go to state 159 ]
  ! AND             [ shift and go to state 160 ]
  ! OR              [ shift and go to state 161 ]


state 210

    (87) expression -> expression TIMES expression .
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    COMMA           reduce using rule 87 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 87 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 87 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 87 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 87 (expression -> expression TIMES expression .)
    MOD             reduce using rule 87 (expression -> expression TIMES expression .)
    LT              reduce using rule 87 (expression -> expression TIMES expression .)
    LE              reduce using rule 87 (expression -> expression TIMES expression .)
    GT              reduce using rule 87 (expression -> expression TIMES expression .)
    GE              reduce using rule 87 (expression -> expression TIMES expression .)
    EQ              reduce using rule 87 (expression -> expression TIMES expression .)
    NE              reduce using rule 87 (expression -> expression TIMES expression .)
    AND             reduce using rule 87 (expression -> expression TIMES expression .)
    OR              reduce using rule 87 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 87 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 87 (expression -> expression TIMES expression .)
    RETURN          reduce using rule 87 (expression -> expression TIMES expression .)
    FOR             reduce using rule 87 (expression -> expression TIMES expression .)
    SWITCH          reduce using rule 87 (expression -> expression TIMES expression .)
    VAR             reduce using rule 87 (expression -> expression TIMES expression .)
    IF              reduce using rule 87 (expression -> expression TIMES expression .)
    APPEND          reduce using rule 87 (expression -> expression TIMES expression .)
    PRINTLN         reduce using rule 87 (expression -> expression TIMES expression .)
    PRINTF          reduce using rule 87 (expression -> expression TIMES expression .)
    VARIABLE        reduce using rule 87 (expression -> expression TIMES expression .)
    TYPE            reduce using rule 87 (expression -> expression TIMES expression .)
    CASE            reduce using rule 87 (expression -> expression TIMES expression .)
    DEFAULT         reduce using rule 87 (expression -> expression TIMES expression .)
    LBRACE          reduce using rule 87 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 87 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 87 (expression -> expression TIMES expression .)
    COLON           reduce using rule 87 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 149 ]
  ! MINUS           [ shift and go to state 150 ]
  ! TIMES           [ shift and go to state 151 ]
  ! DIVIDE          [ shift and go to state 152 ]
  ! MOD             [ shift and go to state 153 ]
  ! LT              [ shift and go to state 154 ]
  ! LE              [ shift and go to state 155 ]
  ! GT              [ shift and go to state 156 ]
  ! GE              [ shift and go to state 157 ]
  ! EQ              [ shift and go to state 158 ]
  ! NE              [ shift and go to state 159 ]
  ! AND             [ shift and go to state 160 ]
  ! OR              [ shift and go to state 161 ]


state 211

    (88) expression -> expression DIVIDE expression .
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    COMMA           reduce using rule 88 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 88 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 88 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 88 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 88 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 88 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 88 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 88 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 88 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 88 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 88 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 88 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 88 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 88 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 88 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 88 (expression -> expression DIVIDE expression .)
    RETURN          reduce using rule 88 (expression -> expression DIVIDE expression .)
    FOR             reduce using rule 88 (expression -> expression DIVIDE expression .)
    SWITCH          reduce using rule 88 (expression -> expression DIVIDE expression .)
    VAR             reduce using rule 88 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 88 (expression -> expression DIVIDE expression .)
    APPEND          reduce using rule 88 (expression -> expression DIVIDE expression .)
    PRINTLN         reduce using rule 88 (expression -> expression DIVIDE expression .)
    PRINTF          reduce using rule 88 (expression -> expression DIVIDE expression .)
    VARIABLE        reduce using rule 88 (expression -> expression DIVIDE expression .)
    TYPE            reduce using rule 88 (expression -> expression DIVIDE expression .)
    CASE            reduce using rule 88 (expression -> expression DIVIDE expression .)
    DEFAULT         reduce using rule 88 (expression -> expression DIVIDE expression .)
    LBRACE          reduce using rule 88 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 88 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 88 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 88 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 149 ]
  ! MINUS           [ shift and go to state 150 ]
  ! TIMES           [ shift and go to state 151 ]
  ! DIVIDE          [ shift and go to state 152 ]
  ! MOD             [ shift and go to state 153 ]
  ! LT              [ shift and go to state 154 ]
  ! LE              [ shift and go to state 155 ]
  ! GT              [ shift and go to state 156 ]
  ! GE              [ shift and go to state 157 ]
  ! EQ              [ shift and go to state 158 ]
  ! NE              [ shift and go to state 159 ]
  ! AND             [ shift and go to state 160 ]
  ! OR              [ shift and go to state 161 ]


state 212

    (89) expression -> expression MOD expression .
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    COMMA           reduce using rule 89 (expression -> expression MOD expression .)
    PLUS            reduce using rule 89 (expression -> expression MOD expression .)
    MINUS           reduce using rule 89 (expression -> expression MOD expression .)
    TIMES           reduce using rule 89 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 89 (expression -> expression MOD expression .)
    MOD             reduce using rule 89 (expression -> expression MOD expression .)
    LT              reduce using rule 89 (expression -> expression MOD expression .)
    LE              reduce using rule 89 (expression -> expression MOD expression .)
    GT              reduce using rule 89 (expression -> expression MOD expression .)
    GE              reduce using rule 89 (expression -> expression MOD expression .)
    EQ              reduce using rule 89 (expression -> expression MOD expression .)
    NE              reduce using rule 89 (expression -> expression MOD expression .)
    AND             reduce using rule 89 (expression -> expression MOD expression .)
    OR              reduce using rule 89 (expression -> expression MOD expression .)
    SEMICOLON       reduce using rule 89 (expression -> expression MOD expression .)
    RBRACE          reduce using rule 89 (expression -> expression MOD expression .)
    RETURN          reduce using rule 89 (expression -> expression MOD expression .)
    FOR             reduce using rule 89 (expression -> expression MOD expression .)
    SWITCH          reduce using rule 89 (expression -> expression MOD expression .)
    VAR             reduce using rule 89 (expression -> expression MOD expression .)
    IF              reduce using rule 89 (expression -> expression MOD expression .)
    APPEND          reduce using rule 89 (expression -> expression MOD expression .)
    PRINTLN         reduce using rule 89 (expression -> expression MOD expression .)
    PRINTF          reduce using rule 89 (expression -> expression MOD expression .)
    VARIABLE        reduce using rule 89 (expression -> expression MOD expression .)
    TYPE            reduce using rule 89 (expression -> expression MOD expression .)
    CASE            reduce using rule 89 (expression -> expression MOD expression .)
    DEFAULT         reduce using rule 89 (expression -> expression MOD expression .)
    LBRACE          reduce using rule 89 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 89 (expression -> expression MOD expression .)
    RBRACKET        reduce using rule 89 (expression -> expression MOD expression .)
    COLON           reduce using rule 89 (expression -> expression MOD expression .)

  ! PLUS            [ shift and go to state 149 ]
  ! MINUS           [ shift and go to state 150 ]
  ! TIMES           [ shift and go to state 151 ]
  ! DIVIDE          [ shift and go to state 152 ]
  ! MOD             [ shift and go to state 153 ]
  ! LT              [ shift and go to state 154 ]
  ! LE              [ shift and go to state 155 ]
  ! GT              [ shift and go to state 156 ]
  ! GE              [ shift and go to state 157 ]
  ! EQ              [ shift and go to state 158 ]
  ! NE              [ shift and go to state 159 ]
  ! AND             [ shift and go to state 160 ]
  ! OR              [ shift and go to state 161 ]


state 213

    (90) expression -> expression LT expression .
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COMMA           reduce using rule 90 (expression -> expression LT expression .)
    SEMICOLON       reduce using rule 90 (expression -> expression LT expression .)
    RBRACE          reduce using rule 90 (expression -> expression LT expression .)
    RETURN          reduce using rule 90 (expression -> expression LT expression .)
    FOR             reduce using rule 90 (expression -> expression LT expression .)
    SWITCH          reduce using rule 90 (expression -> expression LT expression .)
    VAR             reduce using rule 90 (expression -> expression LT expression .)
    IF              reduce using rule 90 (expression -> expression LT expression .)
    APPEND          reduce using rule 90 (expression -> expression LT expression .)
    PRINTLN         reduce using rule 90 (expression -> expression LT expression .)
    PRINTF          reduce using rule 90 (expression -> expression LT expression .)
    VARIABLE        reduce using rule 90 (expression -> expression LT expression .)
    TYPE            reduce using rule 90 (expression -> expression LT expression .)
    CASE            reduce using rule 90 (expression -> expression LT expression .)
    DEFAULT         reduce using rule 90 (expression -> expression LT expression .)
    LBRACE          reduce using rule 90 (expression -> expression LT expression .)
    RPAREN          reduce using rule 90 (expression -> expression LT expression .)
    RBRACKET        reduce using rule 90 (expression -> expression LT expression .)
    COLON           reduce using rule 90 (expression -> expression LT expression .)
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161

  ! PLUS            [ reduce using rule 90 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 90 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 90 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 90 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 90 (expression -> expression LT expression .) ]
  ! LT              [ reduce using rule 90 (expression -> expression LT expression .) ]
  ! LE              [ reduce using rule 90 (expression -> expression LT expression .) ]
  ! GT              [ reduce using rule 90 (expression -> expression LT expression .) ]
  ! GE              [ reduce using rule 90 (expression -> expression LT expression .) ]
  ! EQ              [ reduce using rule 90 (expression -> expression LT expression .) ]
  ! NE              [ reduce using rule 90 (expression -> expression LT expression .) ]
  ! AND             [ reduce using rule 90 (expression -> expression LT expression .) ]
  ! OR              [ reduce using rule 90 (expression -> expression LT expression .) ]


state 214

    (91) expression -> expression LE expression .
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COMMA           reduce using rule 91 (expression -> expression LE expression .)
    SEMICOLON       reduce using rule 91 (expression -> expression LE expression .)
    RBRACE          reduce using rule 91 (expression -> expression LE expression .)
    RETURN          reduce using rule 91 (expression -> expression LE expression .)
    FOR             reduce using rule 91 (expression -> expression LE expression .)
    SWITCH          reduce using rule 91 (expression -> expression LE expression .)
    VAR             reduce using rule 91 (expression -> expression LE expression .)
    IF              reduce using rule 91 (expression -> expression LE expression .)
    APPEND          reduce using rule 91 (expression -> expression LE expression .)
    PRINTLN         reduce using rule 91 (expression -> expression LE expression .)
    PRINTF          reduce using rule 91 (expression -> expression LE expression .)
    VARIABLE        reduce using rule 91 (expression -> expression LE expression .)
    TYPE            reduce using rule 91 (expression -> expression LE expression .)
    CASE            reduce using rule 91 (expression -> expression LE expression .)
    DEFAULT         reduce using rule 91 (expression -> expression LE expression .)
    LBRACE          reduce using rule 91 (expression -> expression LE expression .)
    RPAREN          reduce using rule 91 (expression -> expression LE expression .)
    RBRACKET        reduce using rule 91 (expression -> expression LE expression .)
    COLON           reduce using rule 91 (expression -> expression LE expression .)
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161

  ! PLUS            [ reduce using rule 91 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 91 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 91 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 91 (expression -> expression LE expression .) ]
  ! MOD             [ reduce using rule 91 (expression -> expression LE expression .) ]
  ! LT              [ reduce using rule 91 (expression -> expression LE expression .) ]
  ! LE              [ reduce using rule 91 (expression -> expression LE expression .) ]
  ! GT              [ reduce using rule 91 (expression -> expression LE expression .) ]
  ! GE              [ reduce using rule 91 (expression -> expression LE expression .) ]
  ! EQ              [ reduce using rule 91 (expression -> expression LE expression .) ]
  ! NE              [ reduce using rule 91 (expression -> expression LE expression .) ]
  ! AND             [ reduce using rule 91 (expression -> expression LE expression .) ]
  ! OR              [ reduce using rule 91 (expression -> expression LE expression .) ]


state 215

    (92) expression -> expression GT expression .
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COMMA           reduce using rule 92 (expression -> expression GT expression .)
    SEMICOLON       reduce using rule 92 (expression -> expression GT expression .)
    RBRACE          reduce using rule 92 (expression -> expression GT expression .)
    RETURN          reduce using rule 92 (expression -> expression GT expression .)
    FOR             reduce using rule 92 (expression -> expression GT expression .)
    SWITCH          reduce using rule 92 (expression -> expression GT expression .)
    VAR             reduce using rule 92 (expression -> expression GT expression .)
    IF              reduce using rule 92 (expression -> expression GT expression .)
    APPEND          reduce using rule 92 (expression -> expression GT expression .)
    PRINTLN         reduce using rule 92 (expression -> expression GT expression .)
    PRINTF          reduce using rule 92 (expression -> expression GT expression .)
    VARIABLE        reduce using rule 92 (expression -> expression GT expression .)
    TYPE            reduce using rule 92 (expression -> expression GT expression .)
    CASE            reduce using rule 92 (expression -> expression GT expression .)
    DEFAULT         reduce using rule 92 (expression -> expression GT expression .)
    LBRACE          reduce using rule 92 (expression -> expression GT expression .)
    RPAREN          reduce using rule 92 (expression -> expression GT expression .)
    RBRACKET        reduce using rule 92 (expression -> expression GT expression .)
    COLON           reduce using rule 92 (expression -> expression GT expression .)
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161

  ! PLUS            [ reduce using rule 92 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 92 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 92 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 92 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 92 (expression -> expression GT expression .) ]
  ! LT              [ reduce using rule 92 (expression -> expression GT expression .) ]
  ! LE              [ reduce using rule 92 (expression -> expression GT expression .) ]
  ! GT              [ reduce using rule 92 (expression -> expression GT expression .) ]
  ! GE              [ reduce using rule 92 (expression -> expression GT expression .) ]
  ! EQ              [ reduce using rule 92 (expression -> expression GT expression .) ]
  ! NE              [ reduce using rule 92 (expression -> expression GT expression .) ]
  ! AND             [ reduce using rule 92 (expression -> expression GT expression .) ]
  ! OR              [ reduce using rule 92 (expression -> expression GT expression .) ]


state 216

    (93) expression -> expression GE expression .
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COMMA           reduce using rule 93 (expression -> expression GE expression .)
    SEMICOLON       reduce using rule 93 (expression -> expression GE expression .)
    RBRACE          reduce using rule 93 (expression -> expression GE expression .)
    RETURN          reduce using rule 93 (expression -> expression GE expression .)
    FOR             reduce using rule 93 (expression -> expression GE expression .)
    SWITCH          reduce using rule 93 (expression -> expression GE expression .)
    VAR             reduce using rule 93 (expression -> expression GE expression .)
    IF              reduce using rule 93 (expression -> expression GE expression .)
    APPEND          reduce using rule 93 (expression -> expression GE expression .)
    PRINTLN         reduce using rule 93 (expression -> expression GE expression .)
    PRINTF          reduce using rule 93 (expression -> expression GE expression .)
    VARIABLE        reduce using rule 93 (expression -> expression GE expression .)
    TYPE            reduce using rule 93 (expression -> expression GE expression .)
    CASE            reduce using rule 93 (expression -> expression GE expression .)
    DEFAULT         reduce using rule 93 (expression -> expression GE expression .)
    LBRACE          reduce using rule 93 (expression -> expression GE expression .)
    RPAREN          reduce using rule 93 (expression -> expression GE expression .)
    RBRACKET        reduce using rule 93 (expression -> expression GE expression .)
    COLON           reduce using rule 93 (expression -> expression GE expression .)
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161

  ! PLUS            [ reduce using rule 93 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 93 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 93 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 93 (expression -> expression GE expression .) ]
  ! MOD             [ reduce using rule 93 (expression -> expression GE expression .) ]
  ! LT              [ reduce using rule 93 (expression -> expression GE expression .) ]
  ! LE              [ reduce using rule 93 (expression -> expression GE expression .) ]
  ! GT              [ reduce using rule 93 (expression -> expression GE expression .) ]
  ! GE              [ reduce using rule 93 (expression -> expression GE expression .) ]
  ! EQ              [ reduce using rule 93 (expression -> expression GE expression .) ]
  ! NE              [ reduce using rule 93 (expression -> expression GE expression .) ]
  ! AND             [ reduce using rule 93 (expression -> expression GE expression .) ]
  ! OR              [ reduce using rule 93 (expression -> expression GE expression .) ]


state 217

    (94) expression -> expression EQ expression .
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COMMA           reduce using rule 94 (expression -> expression EQ expression .)
    SEMICOLON       reduce using rule 94 (expression -> expression EQ expression .)
    RBRACE          reduce using rule 94 (expression -> expression EQ expression .)
    RETURN          reduce using rule 94 (expression -> expression EQ expression .)
    FOR             reduce using rule 94 (expression -> expression EQ expression .)
    SWITCH          reduce using rule 94 (expression -> expression EQ expression .)
    VAR             reduce using rule 94 (expression -> expression EQ expression .)
    IF              reduce using rule 94 (expression -> expression EQ expression .)
    APPEND          reduce using rule 94 (expression -> expression EQ expression .)
    PRINTLN         reduce using rule 94 (expression -> expression EQ expression .)
    PRINTF          reduce using rule 94 (expression -> expression EQ expression .)
    VARIABLE        reduce using rule 94 (expression -> expression EQ expression .)
    TYPE            reduce using rule 94 (expression -> expression EQ expression .)
    CASE            reduce using rule 94 (expression -> expression EQ expression .)
    DEFAULT         reduce using rule 94 (expression -> expression EQ expression .)
    LBRACE          reduce using rule 94 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 94 (expression -> expression EQ expression .)
    RBRACKET        reduce using rule 94 (expression -> expression EQ expression .)
    COLON           reduce using rule 94 (expression -> expression EQ expression .)
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161

  ! PLUS            [ reduce using rule 94 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 94 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 94 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 94 (expression -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 94 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 94 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 94 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 94 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 94 (expression -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 94 (expression -> expression EQ expression .) ]
  ! NE              [ reduce using rule 94 (expression -> expression EQ expression .) ]
  ! AND             [ reduce using rule 94 (expression -> expression EQ expression .) ]
  ! OR              [ reduce using rule 94 (expression -> expression EQ expression .) ]


state 218

    (95) expression -> expression NE expression .
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COMMA           reduce using rule 95 (expression -> expression NE expression .)
    SEMICOLON       reduce using rule 95 (expression -> expression NE expression .)
    RBRACE          reduce using rule 95 (expression -> expression NE expression .)
    RETURN          reduce using rule 95 (expression -> expression NE expression .)
    FOR             reduce using rule 95 (expression -> expression NE expression .)
    SWITCH          reduce using rule 95 (expression -> expression NE expression .)
    VAR             reduce using rule 95 (expression -> expression NE expression .)
    IF              reduce using rule 95 (expression -> expression NE expression .)
    APPEND          reduce using rule 95 (expression -> expression NE expression .)
    PRINTLN         reduce using rule 95 (expression -> expression NE expression .)
    PRINTF          reduce using rule 95 (expression -> expression NE expression .)
    VARIABLE        reduce using rule 95 (expression -> expression NE expression .)
    TYPE            reduce using rule 95 (expression -> expression NE expression .)
    CASE            reduce using rule 95 (expression -> expression NE expression .)
    DEFAULT         reduce using rule 95 (expression -> expression NE expression .)
    LBRACE          reduce using rule 95 (expression -> expression NE expression .)
    RPAREN          reduce using rule 95 (expression -> expression NE expression .)
    RBRACKET        reduce using rule 95 (expression -> expression NE expression .)
    COLON           reduce using rule 95 (expression -> expression NE expression .)
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161

  ! PLUS            [ reduce using rule 95 (expression -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 95 (expression -> expression NE expression .) ]
  ! TIMES           [ reduce using rule 95 (expression -> expression NE expression .) ]
  ! DIVIDE          [ reduce using rule 95 (expression -> expression NE expression .) ]
  ! MOD             [ reduce using rule 95 (expression -> expression NE expression .) ]
  ! LT              [ reduce using rule 95 (expression -> expression NE expression .) ]
  ! LE              [ reduce using rule 95 (expression -> expression NE expression .) ]
  ! GT              [ reduce using rule 95 (expression -> expression NE expression .) ]
  ! GE              [ reduce using rule 95 (expression -> expression NE expression .) ]
  ! EQ              [ reduce using rule 95 (expression -> expression NE expression .) ]
  ! NE              [ reduce using rule 95 (expression -> expression NE expression .) ]
  ! AND             [ reduce using rule 95 (expression -> expression NE expression .) ]
  ! OR              [ reduce using rule 95 (expression -> expression NE expression .) ]


state 219

    (96) expression -> expression AND expression .
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COMMA           reduce using rule 96 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 96 (expression -> expression AND expression .)
    RBRACE          reduce using rule 96 (expression -> expression AND expression .)
    RETURN          reduce using rule 96 (expression -> expression AND expression .)
    FOR             reduce using rule 96 (expression -> expression AND expression .)
    SWITCH          reduce using rule 96 (expression -> expression AND expression .)
    VAR             reduce using rule 96 (expression -> expression AND expression .)
    IF              reduce using rule 96 (expression -> expression AND expression .)
    APPEND          reduce using rule 96 (expression -> expression AND expression .)
    PRINTLN         reduce using rule 96 (expression -> expression AND expression .)
    PRINTF          reduce using rule 96 (expression -> expression AND expression .)
    VARIABLE        reduce using rule 96 (expression -> expression AND expression .)
    TYPE            reduce using rule 96 (expression -> expression AND expression .)
    CASE            reduce using rule 96 (expression -> expression AND expression .)
    DEFAULT         reduce using rule 96 (expression -> expression AND expression .)
    LBRACE          reduce using rule 96 (expression -> expression AND expression .)
    RPAREN          reduce using rule 96 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 96 (expression -> expression AND expression .)
    COLON           reduce using rule 96 (expression -> expression AND expression .)
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161

  ! PLUS            [ reduce using rule 96 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 96 (expression -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 96 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 96 (expression -> expression AND expression .) ]
  ! MOD             [ reduce using rule 96 (expression -> expression AND expression .) ]
  ! LT              [ reduce using rule 96 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 96 (expression -> expression AND expression .) ]
  ! GT              [ reduce using rule 96 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 96 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 96 (expression -> expression AND expression .) ]
  ! NE              [ reduce using rule 96 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 96 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 96 (expression -> expression AND expression .) ]


state 220

    (97) expression -> expression OR expression .
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COMMA           reduce using rule 97 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 97 (expression -> expression OR expression .)
    RBRACE          reduce using rule 97 (expression -> expression OR expression .)
    RETURN          reduce using rule 97 (expression -> expression OR expression .)
    FOR             reduce using rule 97 (expression -> expression OR expression .)
    SWITCH          reduce using rule 97 (expression -> expression OR expression .)
    VAR             reduce using rule 97 (expression -> expression OR expression .)
    IF              reduce using rule 97 (expression -> expression OR expression .)
    APPEND          reduce using rule 97 (expression -> expression OR expression .)
    PRINTLN         reduce using rule 97 (expression -> expression OR expression .)
    PRINTF          reduce using rule 97 (expression -> expression OR expression .)
    VARIABLE        reduce using rule 97 (expression -> expression OR expression .)
    TYPE            reduce using rule 97 (expression -> expression OR expression .)
    CASE            reduce using rule 97 (expression -> expression OR expression .)
    DEFAULT         reduce using rule 97 (expression -> expression OR expression .)
    LBRACE          reduce using rule 97 (expression -> expression OR expression .)
    RPAREN          reduce using rule 97 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 97 (expression -> expression OR expression .)
    COLON           reduce using rule 97 (expression -> expression OR expression .)
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161

  ! PLUS            [ reduce using rule 97 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 97 (expression -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 97 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 97 (expression -> expression OR expression .) ]
  ! MOD             [ reduce using rule 97 (expression -> expression OR expression .) ]
  ! LT              [ reduce using rule 97 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 97 (expression -> expression OR expression .) ]
  ! GT              [ reduce using rule 97 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 97 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 97 (expression -> expression OR expression .) ]
  ! NE              [ reduce using rule 97 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 97 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 97 (expression -> expression OR expression .) ]


state 221

    (98) expression -> LPAREN expression RPAREN .

    COMMA           reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    APPEND          reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    PRINTLN         reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    PRINTF          reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    TYPE            reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 98 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 98 (expression -> LPAREN expression RPAREN .)


state 222

    (119) expression -> LBRACKET RBRACKET variable . LPAREN expression RPAREN
    (111) variable -> variable . DOT VARIABLE
    (112) variable -> variable . LBRACKET expression RBRACKET

    LPAREN          shift and go to state 257
    DOT             shift and go to state 174
    LBRACKET        shift and go to state 133


state 223

    (120) expression -> FLOAT64_TYPE LPAREN expression . RPAREN
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    RPAREN          shift and go to state 258
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 224

    (121) expression -> INT_TYPE LPAREN expression . RPAREN
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    RPAREN          shift and go to state 259
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 225

    (122) expression -> STRING_TYPE LPAREN expression . RPAREN
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    RPAREN          shift and go to state 260
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 226

    (123) expression -> BOOL_TYPE LPAREN expression . RPAREN
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    RPAREN          shift and go to state 261
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 227

    (124) expression -> VARIABLE LPAREN expression . RPAREN
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    RPAREN          shift and go to state 262
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 228

    (135) field -> VARIABLE . COLON expression

    COLON           shift and go to state 263


state 229

    (131) expression -> VARIABLE LBRACE field_list . RBRACE
    (132) field_list -> field_list . COMMA field

    RBRACE          shift and go to state 264
    COMMA           shift and go to state 265


state 230

    (133) field_list -> field .

    RBRACE          reduce using rule 133 (field_list -> field .)
    COMMA           reduce using rule 133 (field_list -> field .)


state 231

    (134) field_list -> empty .

    RBRACE          reduce using rule 134 (field_list -> empty .)
    COMMA           reduce using rule 134 (field_list -> empty .)


state 232

    (47) statement -> FOR VARIABLE COMMA VARIABLE . ASSIGN_SHORT RANGE variable block

    ASSIGN_SHORT    shift and go to state 266


state 233

    (65) for_loop -> FOR VARIABLE ASSIGN_SHORT expression . SEMICOLON expression SEMICOLON increment_statement block
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    SEMICOLON       shift and go to state 267
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 234

    (64) for_loop -> FOR VARIABLE ASSIGN expression . SEMICOLON expression SEMICOLON assignment block
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    SEMICOLON       shift and go to state 268
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 235

    (66) for_loop -> FOR variable_list ASSIGN_SHORT RANGE . variable block
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET

    VARIABLE        shift and go to state 91

    variable                       shift and go to state 269

state 236

    (56) assignment -> variable ASSIGN expression SEMICOLON .

    RBRACE          reduce using rule 56 (assignment -> variable ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 56 (assignment -> variable ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 56 (assignment -> variable ASSIGN expression SEMICOLON .)
    SWITCH          reduce using rule 56 (assignment -> variable ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 56 (assignment -> variable ASSIGN expression SEMICOLON .)
    IF              reduce using rule 56 (assignment -> variable ASSIGN expression SEMICOLON .)
    APPEND          reduce using rule 56 (assignment -> variable ASSIGN expression SEMICOLON .)
    PRINTLN         reduce using rule 56 (assignment -> variable ASSIGN expression SEMICOLON .)
    PRINTF          reduce using rule 56 (assignment -> variable ASSIGN expression SEMICOLON .)
    VARIABLE        reduce using rule 56 (assignment -> variable ASSIGN expression SEMICOLON .)
    TYPE            reduce using rule 56 (assignment -> variable ASSIGN expression SEMICOLON .)
    CASE            reduce using rule 56 (assignment -> variable ASSIGN expression SEMICOLON .)
    DEFAULT         reduce using rule 56 (assignment -> variable ASSIGN expression SEMICOLON .)
    LBRACE          reduce using rule 56 (assignment -> variable ASSIGN expression SEMICOLON .)


state 237

    (69) function_call -> variable LPAREN argument_list RPAREN .

    SEMICOLON       reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    COMMA           reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    PLUS            reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    MINUS           reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    TIMES           reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    DIVIDE          reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    MOD             reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    LT              reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    LE              reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    GT              reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    GE              reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    EQ              reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    NE              reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    AND             reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    OR              reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    RBRACE          reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    RETURN          reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    FOR             reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    SWITCH          reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    VAR             reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    IF              reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    APPEND          reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    PRINTLN         reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    PRINTF          reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    VARIABLE        reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    TYPE            reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    CASE            reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    DEFAULT         reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    LBRACE          reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    RPAREN          reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    RBRACKET        reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)
    COLON           reduce using rule 69 (function_call -> variable LPAREN argument_list RPAREN .)


state 238

    (84) argument_list -> argument_list COMMA . expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 270
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 239

    (73) function_call -> variable DOT APPEND LPAREN . argument_list RPAREN
    (74) function_call -> variable DOT APPEND LPAREN . RPAREN
    (83) argument_list -> . expression
    (84) argument_list -> . argument_list COMMA expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    RPAREN          shift and go to state 272
    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    variable                       shift and go to state 110
    argument_list                  shift and go to state 271
    expression                     shift and go to state 183
    function_call                  shift and go to state 111

state 240

    (77) function_call -> variable DOT PRINTLN LPAREN . argument_list RPAREN
    (78) function_call -> variable DOT PRINTLN LPAREN . RPAREN
    (83) argument_list -> . expression
    (84) argument_list -> . argument_list COMMA expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    RPAREN          shift and go to state 274
    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    variable                       shift and go to state 110
    argument_list                  shift and go to state 273
    expression                     shift and go to state 183
    function_call                  shift and go to state 111

state 241

    (81) function_call -> variable DOT PRINTF LPAREN . argument_list RPAREN
    (82) function_call -> variable DOT PRINTF LPAREN . RPAREN
    (83) argument_list -> . expression
    (84) argument_list -> . argument_list COMMA expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    RPAREN          shift and go to state 276
    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    variable                       shift and go to state 110
    argument_list                  shift and go to state 275
    expression                     shift and go to state 183
    function_call                  shift and go to state 111

state 242

    (112) variable -> variable LBRACKET expression RBRACKET .

    INCREMENT       reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    DECREMENT       reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    PLUS_ASSIGN     reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    MINUS_ASSIGN    reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    TIMES_ASSIGN    reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    DIVIDE_ASSIGN   reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    DOT             reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    ASSIGN_SHORT    reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    MOD             reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    LT              reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    LE              reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    GT              reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    GE              reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    EQ              reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    NE              reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    AND             reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    OR              reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    FOR             reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    SWITCH          reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    VAR             reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    IF              reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    APPEND          reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    PRINTLN         reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    PRINTF          reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    VARIABLE        reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    TYPE            reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    CASE            reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    DEFAULT         reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)
    COLON           reduce using rule 112 (variable -> variable LBRACKET expression RBRACKET .)


state 243

    (50) statement -> SWITCH LBRACE case_list RBRACE .

    RBRACE          reduce using rule 50 (statement -> SWITCH LBRACE case_list RBRACE .)
    RETURN          reduce using rule 50 (statement -> SWITCH LBRACE case_list RBRACE .)
    FOR             reduce using rule 50 (statement -> SWITCH LBRACE case_list RBRACE .)
    SWITCH          reduce using rule 50 (statement -> SWITCH LBRACE case_list RBRACE .)
    VAR             reduce using rule 50 (statement -> SWITCH LBRACE case_list RBRACE .)
    IF              reduce using rule 50 (statement -> SWITCH LBRACE case_list RBRACE .)
    APPEND          reduce using rule 50 (statement -> SWITCH LBRACE case_list RBRACE .)
    PRINTLN         reduce using rule 50 (statement -> SWITCH LBRACE case_list RBRACE .)
    PRINTF          reduce using rule 50 (statement -> SWITCH LBRACE case_list RBRACE .)
    VARIABLE        reduce using rule 50 (statement -> SWITCH LBRACE case_list RBRACE .)
    TYPE            reduce using rule 50 (statement -> SWITCH LBRACE case_list RBRACE .)
    CASE            reduce using rule 50 (statement -> SWITCH LBRACE case_list RBRACE .)
    DEFAULT         reduce using rule 50 (statement -> SWITCH LBRACE case_list RBRACE .)


state 244

    (106) case_list -> case_list case .

    RBRACE          reduce using rule 106 (case_list -> case_list case .)
    CASE            reduce using rule 106 (case_list -> case_list case .)
    DEFAULT         reduce using rule 106 (case_list -> case_list case .)


state 245

    (108) case -> CASE expression . COLON statement_list
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    COLON           shift and go to state 277
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 246

    (109) case -> DEFAULT COLON . statement_list
    (37) statement_list -> . statement_list statement
    (38) statement_list -> . empty
    (105) empty -> .

    RETURN          reduce using rule 105 (empty -> .)
    FOR             reduce using rule 105 (empty -> .)
    SWITCH          reduce using rule 105 (empty -> .)
    VAR             reduce using rule 105 (empty -> .)
    IF              reduce using rule 105 (empty -> .)
    APPEND          reduce using rule 105 (empty -> .)
    PRINTLN         reduce using rule 105 (empty -> .)
    PRINTF          reduce using rule 105 (empty -> .)
    VARIABLE        reduce using rule 105 (empty -> .)
    TYPE            reduce using rule 105 (empty -> .)
    RBRACE          reduce using rule 105 (empty -> .)
    CASE            reduce using rule 105 (empty -> .)
    DEFAULT         reduce using rule 105 (empty -> .)

    statement_list                 shift and go to state 278
    empty                          shift and go to state 76

state 247

    (51) statement -> SWITCH expression LBRACE case_list . RBRACE
    (106) case_list -> case_list . case
    (108) case -> . CASE expression COLON statement_list
    (109) case -> . DEFAULT COLON statement_list

    RBRACE          shift and go to state 279
    CASE            shift and go to state 192
    DEFAULT         shift and go to state 193

    case                           shift and go to state 244

state 248

    (53) declaration -> VAR VARIABLE ASSIGN expression .
    (54) declaration -> VAR VARIABLE ASSIGN expression . SEMICOLON
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    RBRACE          reduce using rule 53 (declaration -> VAR VARIABLE ASSIGN expression .)
    RETURN          reduce using rule 53 (declaration -> VAR VARIABLE ASSIGN expression .)
    FOR             reduce using rule 53 (declaration -> VAR VARIABLE ASSIGN expression .)
    SWITCH          reduce using rule 53 (declaration -> VAR VARIABLE ASSIGN expression .)
    VAR             reduce using rule 53 (declaration -> VAR VARIABLE ASSIGN expression .)
    IF              reduce using rule 53 (declaration -> VAR VARIABLE ASSIGN expression .)
    APPEND          reduce using rule 53 (declaration -> VAR VARIABLE ASSIGN expression .)
    PRINTLN         reduce using rule 53 (declaration -> VAR VARIABLE ASSIGN expression .)
    PRINTF          reduce using rule 53 (declaration -> VAR VARIABLE ASSIGN expression .)
    VARIABLE        reduce using rule 53 (declaration -> VAR VARIABLE ASSIGN expression .)
    TYPE            reduce using rule 53 (declaration -> VAR VARIABLE ASSIGN expression .)
    CASE            reduce using rule 53 (declaration -> VAR VARIABLE ASSIGN expression .)
    DEFAULT         reduce using rule 53 (declaration -> VAR VARIABLE ASSIGN expression .)
    SEMICOLON       shift and go to state 280
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 249

    (114) short_declaration -> variable_list ASSIGN_SHORT expression_list SEMICOLON .

    RBRACE          reduce using rule 114 (short_declaration -> variable_list ASSIGN_SHORT expression_list SEMICOLON .)
    RETURN          reduce using rule 114 (short_declaration -> variable_list ASSIGN_SHORT expression_list SEMICOLON .)
    FOR             reduce using rule 114 (short_declaration -> variable_list ASSIGN_SHORT expression_list SEMICOLON .)
    SWITCH          reduce using rule 114 (short_declaration -> variable_list ASSIGN_SHORT expression_list SEMICOLON .)
    VAR             reduce using rule 114 (short_declaration -> variable_list ASSIGN_SHORT expression_list SEMICOLON .)
    IF              reduce using rule 114 (short_declaration -> variable_list ASSIGN_SHORT expression_list SEMICOLON .)
    APPEND          reduce using rule 114 (short_declaration -> variable_list ASSIGN_SHORT expression_list SEMICOLON .)
    PRINTLN         reduce using rule 114 (short_declaration -> variable_list ASSIGN_SHORT expression_list SEMICOLON .)
    PRINTF          reduce using rule 114 (short_declaration -> variable_list ASSIGN_SHORT expression_list SEMICOLON .)
    VARIABLE        reduce using rule 114 (short_declaration -> variable_list ASSIGN_SHORT expression_list SEMICOLON .)
    TYPE            reduce using rule 114 (short_declaration -> variable_list ASSIGN_SHORT expression_list SEMICOLON .)
    CASE            reduce using rule 114 (short_declaration -> variable_list ASSIGN_SHORT expression_list SEMICOLON .)
    DEFAULT         reduce using rule 114 (short_declaration -> variable_list ASSIGN_SHORT expression_list SEMICOLON .)


state 250

    (61) if_statement -> IF expression block else_clause .

    RBRACE          reduce using rule 61 (if_statement -> IF expression block else_clause .)
    RETURN          reduce using rule 61 (if_statement -> IF expression block else_clause .)
    FOR             reduce using rule 61 (if_statement -> IF expression block else_clause .)
    SWITCH          reduce using rule 61 (if_statement -> IF expression block else_clause .)
    VAR             reduce using rule 61 (if_statement -> IF expression block else_clause .)
    IF              reduce using rule 61 (if_statement -> IF expression block else_clause .)
    APPEND          reduce using rule 61 (if_statement -> IF expression block else_clause .)
    PRINTLN         reduce using rule 61 (if_statement -> IF expression block else_clause .)
    PRINTF          reduce using rule 61 (if_statement -> IF expression block else_clause .)
    VARIABLE        reduce using rule 61 (if_statement -> IF expression block else_clause .)
    TYPE            reduce using rule 61 (if_statement -> IF expression block else_clause .)
    CASE            reduce using rule 61 (if_statement -> IF expression block else_clause .)
    DEFAULT         reduce using rule 61 (if_statement -> IF expression block else_clause .)


state 251

    (62) else_clause -> ELSE . block
    (36) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 70

    block                          shift and go to state 281

state 252

    (63) else_clause -> empty .

    RBRACE          reduce using rule 63 (else_clause -> empty .)
    RETURN          reduce using rule 63 (else_clause -> empty .)
    FOR             reduce using rule 63 (else_clause -> empty .)
    SWITCH          reduce using rule 63 (else_clause -> empty .)
    VAR             reduce using rule 63 (else_clause -> empty .)
    IF              reduce using rule 63 (else_clause -> empty .)
    APPEND          reduce using rule 63 (else_clause -> empty .)
    PRINTLN         reduce using rule 63 (else_clause -> empty .)
    PRINTF          reduce using rule 63 (else_clause -> empty .)
    VARIABLE        reduce using rule 63 (else_clause -> empty .)
    TYPE            reduce using rule 63 (else_clause -> empty .)
    CASE            reduce using rule 63 (else_clause -> empty .)
    DEFAULT         reduce using rule 63 (else_clause -> empty .)


state 253

    (71) function_call -> APPEND LPAREN argument_list RPAREN .

    SEMICOLON       reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    COMMA           reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    PLUS            reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    MINUS           reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    TIMES           reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    DIVIDE          reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    MOD             reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    LT              reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    LE              reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    GT              reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    GE              reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    EQ              reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    NE              reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    AND             reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    OR              reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    RBRACE          reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    RETURN          reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    FOR             reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    SWITCH          reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    VAR             reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    IF              reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    APPEND          reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    PRINTLN         reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    PRINTF          reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    VARIABLE        reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    TYPE            reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    CASE            reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    DEFAULT         reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    LBRACE          reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    RPAREN          reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    RBRACKET        reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)
    COLON           reduce using rule 71 (function_call -> APPEND LPAREN argument_list RPAREN .)


state 254

    (75) function_call -> PRINTLN LPAREN argument_list RPAREN .

    SEMICOLON       reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    COMMA           reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    PLUS            reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    MINUS           reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    TIMES           reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    DIVIDE          reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    MOD             reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    LT              reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    LE              reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    GT              reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    GE              reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    EQ              reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    NE              reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    AND             reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    OR              reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    RBRACE          reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    RETURN          reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    FOR             reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    SWITCH          reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    VAR             reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    IF              reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    APPEND          reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    PRINTLN         reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    PRINTF          reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    VARIABLE        reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    TYPE            reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    CASE            reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    DEFAULT         reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    LBRACE          reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    RPAREN          reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    RBRACKET        reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)
    COLON           reduce using rule 75 (function_call -> PRINTLN LPAREN argument_list RPAREN .)


state 255

    (79) function_call -> PRINTF LPAREN argument_list RPAREN .

    SEMICOLON       reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    COMMA           reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    PLUS            reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    MINUS           reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    TIMES           reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    DIVIDE          reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    MOD             reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    LT              reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    LE              reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    GT              reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    GE              reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    EQ              reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    NE              reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    AND             reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    OR              reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    RBRACE          reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    RETURN          reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    FOR             reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    SWITCH          reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    VAR             reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    IF              reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    APPEND          reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    PRINTLN         reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    PRINTF          reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    VARIABLE        reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    TYPE            reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    CASE            reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    DEFAULT         reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    LBRACE          reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    RPAREN          reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    RBRACKET        reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)
    COLON           reduce using rule 79 (function_call -> PRINTF LPAREN argument_list RPAREN .)


state 256

    (19) function -> FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type block .

    FUNC            reduce using rule 19 (function -> FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type block .)
    TYPE            reduce using rule 19 (function -> FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type block .)
    $end            reduce using rule 19 (function -> FUNC LPAREN VARIABLE TIMES VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN return_type block .)


state 257

    (119) expression -> LBRACKET RBRACKET variable LPAREN . expression RPAREN
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    variable                       shift and go to state 110
    expression                     shift and go to state 282
    function_call                  shift and go to state 111

state 258

    (120) expression -> FLOAT64_TYPE LPAREN expression RPAREN .

    COMMA           reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    PLUS            reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    MINUS           reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    TIMES           reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    MOD             reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    LT              reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    LE              reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    GT              reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    GE              reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    EQ              reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    NE              reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    AND             reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    OR              reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    RBRACE          reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    RETURN          reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    FOR             reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    SWITCH          reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    VAR             reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    IF              reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    APPEND          reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    PRINTLN         reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    PRINTF          reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    TYPE            reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    CASE            reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    LBRACE          reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    RPAREN          reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)
    COLON           reduce using rule 120 (expression -> FLOAT64_TYPE LPAREN expression RPAREN .)


state 259

    (121) expression -> INT_TYPE LPAREN expression RPAREN .

    COMMA           reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    PLUS            reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    MINUS           reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    TIMES           reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    MOD             reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    LT              reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    LE              reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    GT              reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    GE              reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    EQ              reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    NE              reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    AND             reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    OR              reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    RBRACE          reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    RETURN          reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    FOR             reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    SWITCH          reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    VAR             reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    IF              reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    APPEND          reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    PRINTLN         reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    PRINTF          reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    TYPE            reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    CASE            reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    LBRACE          reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    RPAREN          reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)
    COLON           reduce using rule 121 (expression -> INT_TYPE LPAREN expression RPAREN .)


state 260

    (122) expression -> STRING_TYPE LPAREN expression RPAREN .

    COMMA           reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    PLUS            reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    MINUS           reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    TIMES           reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    MOD             reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    LT              reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    LE              reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    GT              reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    GE              reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    EQ              reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    NE              reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    AND             reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    OR              reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    RBRACE          reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    RETURN          reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    FOR             reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    SWITCH          reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    VAR             reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    IF              reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    APPEND          reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    PRINTLN         reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    PRINTF          reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    TYPE            reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    CASE            reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    LBRACE          reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    RPAREN          reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)
    COLON           reduce using rule 122 (expression -> STRING_TYPE LPAREN expression RPAREN .)


state 261

    (123) expression -> BOOL_TYPE LPAREN expression RPAREN .

    COMMA           reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    PLUS            reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    MINUS           reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    TIMES           reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    MOD             reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    LT              reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    LE              reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    GT              reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    GE              reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    EQ              reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    NE              reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    AND             reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    OR              reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    RBRACE          reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    RETURN          reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    FOR             reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    SWITCH          reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    VAR             reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    IF              reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    APPEND          reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    PRINTLN         reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    PRINTF          reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    TYPE            reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    CASE            reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    LBRACE          reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    RPAREN          reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)
    COLON           reduce using rule 123 (expression -> BOOL_TYPE LPAREN expression RPAREN .)


state 262

    (124) expression -> VARIABLE LPAREN expression RPAREN .

    COMMA           reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    PLUS            reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    MINUS           reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    TIMES           reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    MOD             reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    LT              reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    LE              reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    GT              reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    GE              reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    EQ              reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    NE              reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    AND             reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    OR              reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    RBRACE          reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    RETURN          reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    FOR             reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    SWITCH          reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    VAR             reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    IF              reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    APPEND          reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    PRINTLN         reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    PRINTF          reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    TYPE            reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    CASE            reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    LBRACE          reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    RPAREN          reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)
    COLON           reduce using rule 124 (expression -> VARIABLE LPAREN expression RPAREN .)


state 263

    (135) field -> VARIABLE COLON . expression
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 283
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 264

    (131) expression -> VARIABLE LBRACE field_list RBRACE .

    COMMA           reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    PLUS            reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    MINUS           reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    TIMES           reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    DIVIDE          reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    MOD             reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    LT              reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    LE              reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    GT              reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    GE              reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    EQ              reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    NE              reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    AND             reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    OR              reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    SEMICOLON       reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    RBRACE          reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    RETURN          reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    FOR             reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    SWITCH          reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    VAR             reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    IF              reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    APPEND          reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    PRINTLN         reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    PRINTF          reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    VARIABLE        reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    TYPE            reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    CASE            reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    DEFAULT         reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    LBRACE          reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    RPAREN          reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    RBRACKET        reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)
    COLON           reduce using rule 131 (expression -> VARIABLE LBRACE field_list RBRACE .)


state 265

    (132) field_list -> field_list COMMA . field
    (135) field -> . VARIABLE COLON expression

    VARIABLE        shift and go to state 228

    field                          shift and go to state 284

state 266

    (47) statement -> FOR VARIABLE COMMA VARIABLE ASSIGN_SHORT . RANGE variable block

    RANGE           shift and go to state 285


state 267

    (65) for_loop -> FOR VARIABLE ASSIGN_SHORT expression SEMICOLON . expression SEMICOLON increment_statement block
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 286
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 268

    (64) for_loop -> FOR VARIABLE ASSIGN expression SEMICOLON . expression SEMICOLON assignment block
    (85) expression -> . expression PLUS expression
    (86) expression -> . expression MINUS expression
    (87) expression -> . expression TIMES expression
    (88) expression -> . expression DIVIDE expression
    (89) expression -> . expression MOD expression
    (90) expression -> . expression LT expression
    (91) expression -> . expression LE expression
    (92) expression -> . expression GT expression
    (93) expression -> . expression GE expression
    (94) expression -> . expression EQ expression
    (95) expression -> . expression NE expression
    (96) expression -> . expression AND expression
    (97) expression -> . expression OR expression
    (98) expression -> . LPAREN expression RPAREN
    (99) expression -> . NUMBER
    (100) expression -> . variable
    (101) expression -> . function_call
    (102) expression -> . STRING
    (103) expression -> . TRUE
    (104) expression -> . FALSE
    (119) expression -> . LBRACKET RBRACKET variable LPAREN expression RPAREN
    (120) expression -> . FLOAT64_TYPE LPAREN expression RPAREN
    (121) expression -> . INT_TYPE LPAREN expression RPAREN
    (122) expression -> . STRING_TYPE LPAREN expression RPAREN
    (123) expression -> . BOOL_TYPE LPAREN expression RPAREN
    (124) expression -> . VARIABLE LPAREN expression RPAREN
    (131) expression -> . VARIABLE LBRACE field_list RBRACE
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 109
    STRING          shift and go to state 112
    TRUE            shift and go to state 113
    FALSE           shift and go to state 114
    LBRACKET        shift and go to state 115
    FLOAT64_TYPE    shift and go to state 116
    INT_TYPE        shift and go to state 117
    STRING_TYPE     shift and go to state 118
    BOOL_TYPE       shift and go to state 119
    VARIABLE        shift and go to state 120
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100

    expression                     shift and go to state 287
    variable                       shift and go to state 110
    function_call                  shift and go to state 111

state 269

    (66) for_loop -> FOR variable_list ASSIGN_SHORT RANGE variable . block
    (111) variable -> variable . DOT VARIABLE
    (112) variable -> variable . LBRACKET expression RBRACKET
    (36) block -> . LBRACE statement_list RBRACE

    DOT             shift and go to state 174
    LBRACKET        shift and go to state 133
    LBRACE          shift and go to state 70

    block                          shift and go to state 288

state 270

    (84) argument_list -> argument_list COMMA expression .
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    RPAREN          reduce using rule 84 (argument_list -> argument_list COMMA expression .)
    COMMA           reduce using rule 84 (argument_list -> argument_list COMMA expression .)
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 271

    (73) function_call -> variable DOT APPEND LPAREN argument_list . RPAREN
    (84) argument_list -> argument_list . COMMA expression

    RPAREN          shift and go to state 289
    COMMA           shift and go to state 238


state 272

    (74) function_call -> variable DOT APPEND LPAREN RPAREN .

    SEMICOLON       reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    COMMA           reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    PLUS            reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    MINUS           reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    TIMES           reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    DIVIDE          reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    MOD             reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    LT              reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    LE              reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    GT              reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    GE              reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    EQ              reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    NE              reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    AND             reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    OR              reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    RBRACE          reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    RETURN          reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    FOR             reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    SWITCH          reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    VAR             reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    IF              reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    APPEND          reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    PRINTLN         reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    PRINTF          reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    VARIABLE        reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    TYPE            reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    CASE            reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    DEFAULT         reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    LBRACE          reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    RPAREN          reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    RBRACKET        reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)
    COLON           reduce using rule 74 (function_call -> variable DOT APPEND LPAREN RPAREN .)


state 273

    (77) function_call -> variable DOT PRINTLN LPAREN argument_list . RPAREN
    (84) argument_list -> argument_list . COMMA expression

    RPAREN          shift and go to state 290
    COMMA           shift and go to state 238


state 274

    (78) function_call -> variable DOT PRINTLN LPAREN RPAREN .

    SEMICOLON       reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    COMMA           reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    PLUS            reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    MINUS           reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    TIMES           reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    DIVIDE          reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    MOD             reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    LT              reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    LE              reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    GT              reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    GE              reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    EQ              reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    NE              reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    AND             reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    OR              reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    RBRACE          reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    RETURN          reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    FOR             reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    SWITCH          reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    VAR             reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    IF              reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    APPEND          reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    PRINTLN         reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    PRINTF          reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    VARIABLE        reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    TYPE            reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    CASE            reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    DEFAULT         reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    LBRACE          reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    RPAREN          reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    RBRACKET        reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)
    COLON           reduce using rule 78 (function_call -> variable DOT PRINTLN LPAREN RPAREN .)


state 275

    (81) function_call -> variable DOT PRINTF LPAREN argument_list . RPAREN
    (84) argument_list -> argument_list . COMMA expression

    RPAREN          shift and go to state 291
    COMMA           shift and go to state 238


state 276

    (82) function_call -> variable DOT PRINTF LPAREN RPAREN .

    SEMICOLON       reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    COMMA           reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    PLUS            reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    MINUS           reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    TIMES           reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    DIVIDE          reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    MOD             reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    LT              reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    LE              reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    GT              reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    GE              reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    EQ              reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    NE              reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    AND             reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    OR              reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    RBRACE          reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    RETURN          reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    FOR             reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    SWITCH          reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    VAR             reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    IF              reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    APPEND          reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    PRINTLN         reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    PRINTF          reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    VARIABLE        reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    TYPE            reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    CASE            reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    DEFAULT         reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    LBRACE          reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    RPAREN          reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    RBRACKET        reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)
    COLON           reduce using rule 82 (function_call -> variable DOT PRINTF LPAREN RPAREN .)


state 277

    (108) case -> CASE expression COLON . statement_list
    (37) statement_list -> . statement_list statement
    (38) statement_list -> . empty
    (105) empty -> .

    RETURN          reduce using rule 105 (empty -> .)
    FOR             reduce using rule 105 (empty -> .)
    SWITCH          reduce using rule 105 (empty -> .)
    VAR             reduce using rule 105 (empty -> .)
    IF              reduce using rule 105 (empty -> .)
    APPEND          reduce using rule 105 (empty -> .)
    PRINTLN         reduce using rule 105 (empty -> .)
    PRINTF          reduce using rule 105 (empty -> .)
    VARIABLE        reduce using rule 105 (empty -> .)
    TYPE            reduce using rule 105 (empty -> .)
    RBRACE          reduce using rule 105 (empty -> .)
    CASE            reduce using rule 105 (empty -> .)
    DEFAULT         reduce using rule 105 (empty -> .)

    statement_list                 shift and go to state 292
    empty                          shift and go to state 76

state 278

    (109) case -> DEFAULT COLON statement_list .
    (37) statement_list -> statement_list . statement
    (39) statement -> . declaration
    (40) statement -> . assignment
    (41) statement -> . short_declaration
    (42) statement -> . if_statement
    (43) statement -> . for_loop
    (44) statement -> . function_call SEMICOLON
    (45) statement -> . RETURN expression_list
    (46) statement -> . RETURN expression_list SEMICOLON
    (47) statement -> . FOR VARIABLE COMMA VARIABLE ASSIGN_SHORT RANGE variable block
    (48) statement -> . variable INCREMENT
    (49) statement -> . variable DECREMENT
    (50) statement -> . SWITCH LBRACE case_list RBRACE
    (51) statement -> . SWITCH expression LBRACE case_list RBRACE
    (52) statement -> . type_declaration
    (53) declaration -> . VAR VARIABLE ASSIGN expression
    (54) declaration -> . VAR VARIABLE ASSIGN expression SEMICOLON
    (55) assignment -> . variable ASSIGN expression
    (56) assignment -> . variable ASSIGN expression SEMICOLON
    (57) assignment -> . variable PLUS_ASSIGN expression
    (58) assignment -> . variable MINUS_ASSIGN expression
    (59) assignment -> . variable TIMES_ASSIGN expression
    (60) assignment -> . variable DIVIDE_ASSIGN expression
    (113) short_declaration -> . variable_list ASSIGN_SHORT expression_list
    (114) short_declaration -> . variable_list ASSIGN_SHORT expression_list SEMICOLON
    (61) if_statement -> . IF expression block else_clause
    (64) for_loop -> . FOR VARIABLE ASSIGN expression SEMICOLON expression SEMICOLON assignment block
    (65) for_loop -> . FOR VARIABLE ASSIGN_SHORT expression SEMICOLON expression SEMICOLON increment_statement block
    (66) for_loop -> . FOR variable_list ASSIGN_SHORT RANGE variable block
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (125) type_declaration -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (115) variable_list -> . variable
    (116) variable_list -> . variable COMMA variable_list

    RBRACE          reduce using rule 109 (case -> DEFAULT COLON statement_list .)
    CASE            reduce using rule 109 (case -> DEFAULT COLON statement_list .)
    DEFAULT         reduce using rule 109 (case -> DEFAULT COLON statement_list .)
    RETURN          shift and go to state 89
    FOR             shift and go to state 90
    SWITCH          shift and go to state 93
    VAR             shift and go to state 95
    IF              shift and go to state 97
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100
    VARIABLE        shift and go to state 91
    TYPE            shift and go to state 14

    statement                      shift and go to state 82
    declaration                    shift and go to state 83
    assignment                     shift and go to state 84
    short_declaration              shift and go to state 85
    if_statement                   shift and go to state 86
    for_loop                       shift and go to state 87
    function_call                  shift and go to state 88
    variable                       shift and go to state 92
    type_declaration               shift and go to state 94
    variable_list                  shift and go to state 96

state 279

    (51) statement -> SWITCH expression LBRACE case_list RBRACE .

    RBRACE          reduce using rule 51 (statement -> SWITCH expression LBRACE case_list RBRACE .)
    RETURN          reduce using rule 51 (statement -> SWITCH expression LBRACE case_list RBRACE .)
    FOR             reduce using rule 51 (statement -> SWITCH expression LBRACE case_list RBRACE .)
    SWITCH          reduce using rule 51 (statement -> SWITCH expression LBRACE case_list RBRACE .)
    VAR             reduce using rule 51 (statement -> SWITCH expression LBRACE case_list RBRACE .)
    IF              reduce using rule 51 (statement -> SWITCH expression LBRACE case_list RBRACE .)
    APPEND          reduce using rule 51 (statement -> SWITCH expression LBRACE case_list RBRACE .)
    PRINTLN         reduce using rule 51 (statement -> SWITCH expression LBRACE case_list RBRACE .)
    PRINTF          reduce using rule 51 (statement -> SWITCH expression LBRACE case_list RBRACE .)
    VARIABLE        reduce using rule 51 (statement -> SWITCH expression LBRACE case_list RBRACE .)
    TYPE            reduce using rule 51 (statement -> SWITCH expression LBRACE case_list RBRACE .)
    CASE            reduce using rule 51 (statement -> SWITCH expression LBRACE case_list RBRACE .)
    DEFAULT         reduce using rule 51 (statement -> SWITCH expression LBRACE case_list RBRACE .)


state 280

    (54) declaration -> VAR VARIABLE ASSIGN expression SEMICOLON .

    RBRACE          reduce using rule 54 (declaration -> VAR VARIABLE ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 54 (declaration -> VAR VARIABLE ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 54 (declaration -> VAR VARIABLE ASSIGN expression SEMICOLON .)
    SWITCH          reduce using rule 54 (declaration -> VAR VARIABLE ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 54 (declaration -> VAR VARIABLE ASSIGN expression SEMICOLON .)
    IF              reduce using rule 54 (declaration -> VAR VARIABLE ASSIGN expression SEMICOLON .)
    APPEND          reduce using rule 54 (declaration -> VAR VARIABLE ASSIGN expression SEMICOLON .)
    PRINTLN         reduce using rule 54 (declaration -> VAR VARIABLE ASSIGN expression SEMICOLON .)
    PRINTF          reduce using rule 54 (declaration -> VAR VARIABLE ASSIGN expression SEMICOLON .)
    VARIABLE        reduce using rule 54 (declaration -> VAR VARIABLE ASSIGN expression SEMICOLON .)
    TYPE            reduce using rule 54 (declaration -> VAR VARIABLE ASSIGN expression SEMICOLON .)
    CASE            reduce using rule 54 (declaration -> VAR VARIABLE ASSIGN expression SEMICOLON .)
    DEFAULT         reduce using rule 54 (declaration -> VAR VARIABLE ASSIGN expression SEMICOLON .)


state 281

    (62) else_clause -> ELSE block .

    RBRACE          reduce using rule 62 (else_clause -> ELSE block .)
    RETURN          reduce using rule 62 (else_clause -> ELSE block .)
    FOR             reduce using rule 62 (else_clause -> ELSE block .)
    SWITCH          reduce using rule 62 (else_clause -> ELSE block .)
    VAR             reduce using rule 62 (else_clause -> ELSE block .)
    IF              reduce using rule 62 (else_clause -> ELSE block .)
    APPEND          reduce using rule 62 (else_clause -> ELSE block .)
    PRINTLN         reduce using rule 62 (else_clause -> ELSE block .)
    PRINTF          reduce using rule 62 (else_clause -> ELSE block .)
    VARIABLE        reduce using rule 62 (else_clause -> ELSE block .)
    TYPE            reduce using rule 62 (else_clause -> ELSE block .)
    CASE            reduce using rule 62 (else_clause -> ELSE block .)
    DEFAULT         reduce using rule 62 (else_clause -> ELSE block .)


state 282

    (119) expression -> LBRACKET RBRACKET variable LPAREN expression . RPAREN
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    RPAREN          shift and go to state 293
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 283

    (135) field -> VARIABLE COLON expression .
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    RBRACE          reduce using rule 135 (field -> VARIABLE COLON expression .)
    COMMA           reduce using rule 135 (field -> VARIABLE COLON expression .)
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 284

    (132) field_list -> field_list COMMA field .

    RBRACE          reduce using rule 132 (field_list -> field_list COMMA field .)
    COMMA           reduce using rule 132 (field_list -> field_list COMMA field .)


state 285

    (47) statement -> FOR VARIABLE COMMA VARIABLE ASSIGN_SHORT RANGE . variable block
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET

    VARIABLE        shift and go to state 91

    variable                       shift and go to state 294

state 286

    (65) for_loop -> FOR VARIABLE ASSIGN_SHORT expression SEMICOLON expression . SEMICOLON increment_statement block
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    SEMICOLON       shift and go to state 295
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 287

    (64) for_loop -> FOR VARIABLE ASSIGN expression SEMICOLON expression . SEMICOLON assignment block
    (85) expression -> expression . PLUS expression
    (86) expression -> expression . MINUS expression
    (87) expression -> expression . TIMES expression
    (88) expression -> expression . DIVIDE expression
    (89) expression -> expression . MOD expression
    (90) expression -> expression . LT expression
    (91) expression -> expression . LE expression
    (92) expression -> expression . GT expression
    (93) expression -> expression . GE expression
    (94) expression -> expression . EQ expression
    (95) expression -> expression . NE expression
    (96) expression -> expression . AND expression
    (97) expression -> expression . OR expression

    SEMICOLON       shift and go to state 296
    PLUS            shift and go to state 149
    MINUS           shift and go to state 150
    TIMES           shift and go to state 151
    DIVIDE          shift and go to state 152
    MOD             shift and go to state 153
    LT              shift and go to state 154
    LE              shift and go to state 155
    GT              shift and go to state 156
    GE              shift and go to state 157
    EQ              shift and go to state 158
    NE              shift and go to state 159
    AND             shift and go to state 160
    OR              shift and go to state 161


state 288

    (66) for_loop -> FOR variable_list ASSIGN_SHORT RANGE variable block .

    RBRACE          reduce using rule 66 (for_loop -> FOR variable_list ASSIGN_SHORT RANGE variable block .)
    RETURN          reduce using rule 66 (for_loop -> FOR variable_list ASSIGN_SHORT RANGE variable block .)
    FOR             reduce using rule 66 (for_loop -> FOR variable_list ASSIGN_SHORT RANGE variable block .)
    SWITCH          reduce using rule 66 (for_loop -> FOR variable_list ASSIGN_SHORT RANGE variable block .)
    VAR             reduce using rule 66 (for_loop -> FOR variable_list ASSIGN_SHORT RANGE variable block .)
    IF              reduce using rule 66 (for_loop -> FOR variable_list ASSIGN_SHORT RANGE variable block .)
    APPEND          reduce using rule 66 (for_loop -> FOR variable_list ASSIGN_SHORT RANGE variable block .)
    PRINTLN         reduce using rule 66 (for_loop -> FOR variable_list ASSIGN_SHORT RANGE variable block .)
    PRINTF          reduce using rule 66 (for_loop -> FOR variable_list ASSIGN_SHORT RANGE variable block .)
    VARIABLE        reduce using rule 66 (for_loop -> FOR variable_list ASSIGN_SHORT RANGE variable block .)
    TYPE            reduce using rule 66 (for_loop -> FOR variable_list ASSIGN_SHORT RANGE variable block .)
    CASE            reduce using rule 66 (for_loop -> FOR variable_list ASSIGN_SHORT RANGE variable block .)
    DEFAULT         reduce using rule 66 (for_loop -> FOR variable_list ASSIGN_SHORT RANGE variable block .)


state 289

    (73) function_call -> variable DOT APPEND LPAREN argument_list RPAREN .

    SEMICOLON       reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    COMMA           reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    PLUS            reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    MINUS           reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    TIMES           reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    DIVIDE          reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    MOD             reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    LT              reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    LE              reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    GT              reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    GE              reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    EQ              reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    NE              reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    AND             reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    OR              reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    RBRACE          reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    RETURN          reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    FOR             reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    SWITCH          reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    VAR             reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    IF              reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    APPEND          reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    PRINTLN         reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    PRINTF          reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    VARIABLE        reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    TYPE            reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    CASE            reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    DEFAULT         reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    LBRACE          reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    RPAREN          reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    RBRACKET        reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)
    COLON           reduce using rule 73 (function_call -> variable DOT APPEND LPAREN argument_list RPAREN .)


state 290

    (77) function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .

    SEMICOLON       reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    COMMA           reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    PLUS            reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    MINUS           reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    TIMES           reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    DIVIDE          reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    MOD             reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    LT              reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    LE              reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    GT              reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    GE              reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    EQ              reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    NE              reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    AND             reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    OR              reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    RBRACE          reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    RETURN          reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    FOR             reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    SWITCH          reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    VAR             reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    IF              reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    APPEND          reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    PRINTLN         reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    PRINTF          reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    VARIABLE        reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    TYPE            reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    CASE            reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    DEFAULT         reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    LBRACE          reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    RPAREN          reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    RBRACKET        reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)
    COLON           reduce using rule 77 (function_call -> variable DOT PRINTLN LPAREN argument_list RPAREN .)


state 291

    (81) function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .

    SEMICOLON       reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    COMMA           reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    PLUS            reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    MINUS           reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    TIMES           reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    DIVIDE          reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    MOD             reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    LT              reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    LE              reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    GT              reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    GE              reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    EQ              reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    NE              reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    AND             reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    OR              reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    RBRACE          reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    RETURN          reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    FOR             reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    SWITCH          reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    VAR             reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    IF              reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    APPEND          reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    PRINTLN         reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    PRINTF          reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    VARIABLE        reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    TYPE            reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    CASE            reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    DEFAULT         reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    LBRACE          reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    RPAREN          reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    RBRACKET        reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)
    COLON           reduce using rule 81 (function_call -> variable DOT PRINTF LPAREN argument_list RPAREN .)


state 292

    (108) case -> CASE expression COLON statement_list .
    (37) statement_list -> statement_list . statement
    (39) statement -> . declaration
    (40) statement -> . assignment
    (41) statement -> . short_declaration
    (42) statement -> . if_statement
    (43) statement -> . for_loop
    (44) statement -> . function_call SEMICOLON
    (45) statement -> . RETURN expression_list
    (46) statement -> . RETURN expression_list SEMICOLON
    (47) statement -> . FOR VARIABLE COMMA VARIABLE ASSIGN_SHORT RANGE variable block
    (48) statement -> . variable INCREMENT
    (49) statement -> . variable DECREMENT
    (50) statement -> . SWITCH LBRACE case_list RBRACE
    (51) statement -> . SWITCH expression LBRACE case_list RBRACE
    (52) statement -> . type_declaration
    (53) declaration -> . VAR VARIABLE ASSIGN expression
    (54) declaration -> . VAR VARIABLE ASSIGN expression SEMICOLON
    (55) assignment -> . variable ASSIGN expression
    (56) assignment -> . variable ASSIGN expression SEMICOLON
    (57) assignment -> . variable PLUS_ASSIGN expression
    (58) assignment -> . variable MINUS_ASSIGN expression
    (59) assignment -> . variable TIMES_ASSIGN expression
    (60) assignment -> . variable DIVIDE_ASSIGN expression
    (113) short_declaration -> . variable_list ASSIGN_SHORT expression_list
    (114) short_declaration -> . variable_list ASSIGN_SHORT expression_list SEMICOLON
    (61) if_statement -> . IF expression block else_clause
    (64) for_loop -> . FOR VARIABLE ASSIGN expression SEMICOLON expression SEMICOLON assignment block
    (65) for_loop -> . FOR VARIABLE ASSIGN_SHORT expression SEMICOLON expression SEMICOLON increment_statement block
    (66) for_loop -> . FOR variable_list ASSIGN_SHORT RANGE variable block
    (69) function_call -> . variable LPAREN argument_list RPAREN
    (70) function_call -> . variable LPAREN RPAREN
    (71) function_call -> . APPEND LPAREN argument_list RPAREN
    (72) function_call -> . APPEND LPAREN RPAREN
    (73) function_call -> . variable DOT APPEND LPAREN argument_list RPAREN
    (74) function_call -> . variable DOT APPEND LPAREN RPAREN
    (75) function_call -> . PRINTLN LPAREN argument_list RPAREN
    (76) function_call -> . PRINTLN LPAREN RPAREN
    (77) function_call -> . variable DOT PRINTLN LPAREN argument_list RPAREN
    (78) function_call -> . variable DOT PRINTLN LPAREN RPAREN
    (79) function_call -> . PRINTF LPAREN argument_list RPAREN
    (80) function_call -> . PRINTF LPAREN RPAREN
    (81) function_call -> . variable DOT PRINTF LPAREN argument_list RPAREN
    (82) function_call -> . variable DOT PRINTF LPAREN RPAREN
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET
    (125) type_declaration -> . TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE
    (115) variable_list -> . variable
    (116) variable_list -> . variable COMMA variable_list

    RBRACE          reduce using rule 108 (case -> CASE expression COLON statement_list .)
    CASE            reduce using rule 108 (case -> CASE expression COLON statement_list .)
    DEFAULT         reduce using rule 108 (case -> CASE expression COLON statement_list .)
    RETURN          shift and go to state 89
    FOR             shift and go to state 90
    SWITCH          shift and go to state 93
    VAR             shift and go to state 95
    IF              shift and go to state 97
    APPEND          shift and go to state 98
    PRINTLN         shift and go to state 99
    PRINTF          shift and go to state 100
    VARIABLE        shift and go to state 91
    TYPE            shift and go to state 14

    statement                      shift and go to state 82
    declaration                    shift and go to state 83
    assignment                     shift and go to state 84
    short_declaration              shift and go to state 85
    if_statement                   shift and go to state 86
    for_loop                       shift and go to state 87
    function_call                  shift and go to state 88
    variable                       shift and go to state 92
    type_declaration               shift and go to state 94
    variable_list                  shift and go to state 96

state 293

    (119) expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .

    COMMA           reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    PLUS            reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    MINUS           reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    TIMES           reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    MOD             reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    LT              reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    LE              reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    GT              reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    GE              reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    EQ              reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    NE              reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    AND             reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    OR              reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    RBRACE          reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    RETURN          reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    FOR             reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    SWITCH          reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    VAR             reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    IF              reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    APPEND          reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    PRINTLN         reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    PRINTF          reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    VARIABLE        reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    TYPE            reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    CASE            reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    LBRACE          reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    RPAREN          reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)
    COLON           reduce using rule 119 (expression -> LBRACKET RBRACKET variable LPAREN expression RPAREN .)


state 294

    (47) statement -> FOR VARIABLE COMMA VARIABLE ASSIGN_SHORT RANGE variable . block
    (111) variable -> variable . DOT VARIABLE
    (112) variable -> variable . LBRACKET expression RBRACKET
    (36) block -> . LBRACE statement_list RBRACE

    DOT             shift and go to state 174
    LBRACKET        shift and go to state 133
    LBRACE          shift and go to state 70

    block                          shift and go to state 297

state 295

    (65) for_loop -> FOR VARIABLE ASSIGN_SHORT expression SEMICOLON expression SEMICOLON . increment_statement block
    (67) increment_statement -> . variable INCREMENT
    (68) increment_statement -> . variable DECREMENT
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET

    VARIABLE        shift and go to state 91

    increment_statement            shift and go to state 298
    variable                       shift and go to state 299

state 296

    (64) for_loop -> FOR VARIABLE ASSIGN expression SEMICOLON expression SEMICOLON . assignment block
    (55) assignment -> . variable ASSIGN expression
    (56) assignment -> . variable ASSIGN expression SEMICOLON
    (57) assignment -> . variable PLUS_ASSIGN expression
    (58) assignment -> . variable MINUS_ASSIGN expression
    (59) assignment -> . variable TIMES_ASSIGN expression
    (60) assignment -> . variable DIVIDE_ASSIGN expression
    (110) variable -> . VARIABLE
    (111) variable -> . variable DOT VARIABLE
    (112) variable -> . variable LBRACKET expression RBRACKET

    VARIABLE        shift and go to state 91

    assignment                     shift and go to state 300
    variable                       shift and go to state 301

state 297

    (47) statement -> FOR VARIABLE COMMA VARIABLE ASSIGN_SHORT RANGE variable block .

    RBRACE          reduce using rule 47 (statement -> FOR VARIABLE COMMA VARIABLE ASSIGN_SHORT RANGE variable block .)
    RETURN          reduce using rule 47 (statement -> FOR VARIABLE COMMA VARIABLE ASSIGN_SHORT RANGE variable block .)
    FOR             reduce using rule 47 (statement -> FOR VARIABLE COMMA VARIABLE ASSIGN_SHORT RANGE variable block .)
    SWITCH          reduce using rule 47 (statement -> FOR VARIABLE COMMA VARIABLE ASSIGN_SHORT RANGE variable block .)
    VAR             reduce using rule 47 (statement -> FOR VARIABLE COMMA VARIABLE ASSIGN_SHORT RANGE variable block .)
    IF              reduce using rule 47 (statement -> FOR VARIABLE COMMA VARIABLE ASSIGN_SHORT RANGE variable block .)
    APPEND          reduce using rule 47 (statement -> FOR VARIABLE COMMA VARIABLE ASSIGN_SHORT RANGE variable block .)
    PRINTLN         reduce using rule 47 (statement -> FOR VARIABLE COMMA VARIABLE ASSIGN_SHORT RANGE variable block .)
    PRINTF          reduce using rule 47 (statement -> FOR VARIABLE COMMA VARIABLE ASSIGN_SHORT RANGE variable block .)
    VARIABLE        reduce using rule 47 (statement -> FOR VARIABLE COMMA VARIABLE ASSIGN_SHORT RANGE variable block .)
    TYPE            reduce using rule 47 (statement -> FOR VARIABLE COMMA VARIABLE ASSIGN_SHORT RANGE variable block .)
    CASE            reduce using rule 47 (statement -> FOR VARIABLE COMMA VARIABLE ASSIGN_SHORT RANGE variable block .)
    DEFAULT         reduce using rule 47 (statement -> FOR VARIABLE COMMA VARIABLE ASSIGN_SHORT RANGE variable block .)


state 298

    (65) for_loop -> FOR VARIABLE ASSIGN_SHORT expression SEMICOLON expression SEMICOLON increment_statement . block
    (36) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 70

    block                          shift and go to state 302

state 299

    (67) increment_statement -> variable . INCREMENT
    (68) increment_statement -> variable . DECREMENT
    (111) variable -> variable . DOT VARIABLE
    (112) variable -> variable . LBRACKET expression RBRACKET

    INCREMENT       shift and go to state 303
    DECREMENT       shift and go to state 304
    DOT             shift and go to state 174
    LBRACKET        shift and go to state 133


state 300

    (64) for_loop -> FOR VARIABLE ASSIGN expression SEMICOLON expression SEMICOLON assignment . block
    (36) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 70

    block                          shift and go to state 305

state 301

    (55) assignment -> variable . ASSIGN expression
    (56) assignment -> variable . ASSIGN expression SEMICOLON
    (57) assignment -> variable . PLUS_ASSIGN expression
    (58) assignment -> variable . MINUS_ASSIGN expression
    (59) assignment -> variable . TIMES_ASSIGN expression
    (60) assignment -> variable . DIVIDE_ASSIGN expression
    (111) variable -> variable . DOT VARIABLE
    (112) variable -> variable . LBRACKET expression RBRACKET

    ASSIGN          shift and go to state 126
    PLUS_ASSIGN     shift and go to state 127
    MINUS_ASSIGN    shift and go to state 128
    TIMES_ASSIGN    shift and go to state 129
    DIVIDE_ASSIGN   shift and go to state 130
    DOT             shift and go to state 174
    LBRACKET        shift and go to state 133


state 302

    (65) for_loop -> FOR VARIABLE ASSIGN_SHORT expression SEMICOLON expression SEMICOLON increment_statement block .

    RBRACE          reduce using rule 65 (for_loop -> FOR VARIABLE ASSIGN_SHORT expression SEMICOLON expression SEMICOLON increment_statement block .)
    RETURN          reduce using rule 65 (for_loop -> FOR VARIABLE ASSIGN_SHORT expression SEMICOLON expression SEMICOLON increment_statement block .)
    FOR             reduce using rule 65 (for_loop -> FOR VARIABLE ASSIGN_SHORT expression SEMICOLON expression SEMICOLON increment_statement block .)
    SWITCH          reduce using rule 65 (for_loop -> FOR VARIABLE ASSIGN_SHORT expression SEMICOLON expression SEMICOLON increment_statement block .)
    VAR             reduce using rule 65 (for_loop -> FOR VARIABLE ASSIGN_SHORT expression SEMICOLON expression SEMICOLON increment_statement block .)
    IF              reduce using rule 65 (for_loop -> FOR VARIABLE ASSIGN_SHORT expression SEMICOLON expression SEMICOLON increment_statement block .)
    APPEND          reduce using rule 65 (for_loop -> FOR VARIABLE ASSIGN_SHORT expression SEMICOLON expression SEMICOLON increment_statement block .)
    PRINTLN         reduce using rule 65 (for_loop -> FOR VARIABLE ASSIGN_SHORT expression SEMICOLON expression SEMICOLON increment_statement block .)
    PRINTF          reduce using rule 65 (for_loop -> FOR VARIABLE ASSIGN_SHORT expression SEMICOLON expression SEMICOLON increment_statement block .)
    VARIABLE        reduce using rule 65 (for_loop -> FOR VARIABLE ASSIGN_SHORT expression SEMICOLON expression SEMICOLON increment_statement block .)
    TYPE            reduce using rule 65 (for_loop -> FOR VARIABLE ASSIGN_SHORT expression SEMICOLON expression SEMICOLON increment_statement block .)
    CASE            reduce using rule 65 (for_loop -> FOR VARIABLE ASSIGN_SHORT expression SEMICOLON expression SEMICOLON increment_statement block .)
    DEFAULT         reduce using rule 65 (for_loop -> FOR VARIABLE ASSIGN_SHORT expression SEMICOLON expression SEMICOLON increment_statement block .)


state 303

    (67) increment_statement -> variable INCREMENT .

    LBRACE          reduce using rule 67 (increment_statement -> variable INCREMENT .)


state 304

    (68) increment_statement -> variable DECREMENT .

    LBRACE          reduce using rule 68 (increment_statement -> variable DECREMENT .)


state 305

    (64) for_loop -> FOR VARIABLE ASSIGN expression SEMICOLON expression SEMICOLON assignment block .

    RBRACE          reduce using rule 64 (for_loop -> FOR VARIABLE ASSIGN expression SEMICOLON expression SEMICOLON assignment block .)
    RETURN          reduce using rule 64 (for_loop -> FOR VARIABLE ASSIGN expression SEMICOLON expression SEMICOLON assignment block .)
    FOR             reduce using rule 64 (for_loop -> FOR VARIABLE ASSIGN expression SEMICOLON expression SEMICOLON assignment block .)
    SWITCH          reduce using rule 64 (for_loop -> FOR VARIABLE ASSIGN expression SEMICOLON expression SEMICOLON assignment block .)
    VAR             reduce using rule 64 (for_loop -> FOR VARIABLE ASSIGN expression SEMICOLON expression SEMICOLON assignment block .)
    IF              reduce using rule 64 (for_loop -> FOR VARIABLE ASSIGN expression SEMICOLON expression SEMICOLON assignment block .)
    APPEND          reduce using rule 64 (for_loop -> FOR VARIABLE ASSIGN expression SEMICOLON expression SEMICOLON assignment block .)
    PRINTLN         reduce using rule 64 (for_loop -> FOR VARIABLE ASSIGN expression SEMICOLON expression SEMICOLON assignment block .)
    PRINTF          reduce using rule 64 (for_loop -> FOR VARIABLE ASSIGN expression SEMICOLON expression SEMICOLON assignment block .)
    VARIABLE        reduce using rule 64 (for_loop -> FOR VARIABLE ASSIGN expression SEMICOLON expression SEMICOLON assignment block .)
    TYPE            reduce using rule 64 (for_loop -> FOR VARIABLE ASSIGN expression SEMICOLON expression SEMICOLON assignment block .)
    CASE            reduce using rule 64 (for_loop -> FOR VARIABLE ASSIGN expression SEMICOLON expression SEMICOLON assignment block .)
    DEFAULT         reduce using rule 64 (for_loop -> FOR VARIABLE ASSIGN expression SEMICOLON expression SEMICOLON assignment block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNC in state 5 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 5 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 8 resolved as shift
WARNING: shift/reduce conflict for TYPE in state 8 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 38 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 51 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 51 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 71 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 79 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 120 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 120 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 121 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_SHORT in state 121 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 213 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 213 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 213 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 213 resolved as shift
WARNING: shift/reduce conflict for MOD in state 213 resolved as shift
WARNING: shift/reduce conflict for LT in state 213 resolved as shift
WARNING: shift/reduce conflict for LE in state 213 resolved as shift
WARNING: shift/reduce conflict for GT in state 213 resolved as shift
WARNING: shift/reduce conflict for GE in state 213 resolved as shift
WARNING: shift/reduce conflict for EQ in state 213 resolved as shift
WARNING: shift/reduce conflict for NE in state 213 resolved as shift
WARNING: shift/reduce conflict for AND in state 213 resolved as shift
WARNING: shift/reduce conflict for OR in state 213 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 214 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 214 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 214 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 214 resolved as shift
WARNING: shift/reduce conflict for MOD in state 214 resolved as shift
WARNING: shift/reduce conflict for LT in state 214 resolved as shift
WARNING: shift/reduce conflict for LE in state 214 resolved as shift
WARNING: shift/reduce conflict for GT in state 214 resolved as shift
WARNING: shift/reduce conflict for GE in state 214 resolved as shift
WARNING: shift/reduce conflict for EQ in state 214 resolved as shift
WARNING: shift/reduce conflict for NE in state 214 resolved as shift
WARNING: shift/reduce conflict for AND in state 214 resolved as shift
WARNING: shift/reduce conflict for OR in state 214 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 215 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 215 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 215 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 215 resolved as shift
WARNING: shift/reduce conflict for MOD in state 215 resolved as shift
WARNING: shift/reduce conflict for LT in state 215 resolved as shift
WARNING: shift/reduce conflict for LE in state 215 resolved as shift
WARNING: shift/reduce conflict for GT in state 215 resolved as shift
WARNING: shift/reduce conflict for GE in state 215 resolved as shift
WARNING: shift/reduce conflict for EQ in state 215 resolved as shift
WARNING: shift/reduce conflict for NE in state 215 resolved as shift
WARNING: shift/reduce conflict for AND in state 215 resolved as shift
WARNING: shift/reduce conflict for OR in state 215 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 216 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 216 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 216 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 216 resolved as shift
WARNING: shift/reduce conflict for MOD in state 216 resolved as shift
WARNING: shift/reduce conflict for LT in state 216 resolved as shift
WARNING: shift/reduce conflict for LE in state 216 resolved as shift
WARNING: shift/reduce conflict for GT in state 216 resolved as shift
WARNING: shift/reduce conflict for GE in state 216 resolved as shift
WARNING: shift/reduce conflict for EQ in state 216 resolved as shift
WARNING: shift/reduce conflict for NE in state 216 resolved as shift
WARNING: shift/reduce conflict for AND in state 216 resolved as shift
WARNING: shift/reduce conflict for OR in state 216 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 217 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 217 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 217 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 217 resolved as shift
WARNING: shift/reduce conflict for MOD in state 217 resolved as shift
WARNING: shift/reduce conflict for LT in state 217 resolved as shift
WARNING: shift/reduce conflict for LE in state 217 resolved as shift
WARNING: shift/reduce conflict for GT in state 217 resolved as shift
WARNING: shift/reduce conflict for GE in state 217 resolved as shift
WARNING: shift/reduce conflict for EQ in state 217 resolved as shift
WARNING: shift/reduce conflict for NE in state 217 resolved as shift
WARNING: shift/reduce conflict for AND in state 217 resolved as shift
WARNING: shift/reduce conflict for OR in state 217 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 218 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 218 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 218 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 218 resolved as shift
WARNING: shift/reduce conflict for MOD in state 218 resolved as shift
WARNING: shift/reduce conflict for LT in state 218 resolved as shift
WARNING: shift/reduce conflict for LE in state 218 resolved as shift
WARNING: shift/reduce conflict for GT in state 218 resolved as shift
WARNING: shift/reduce conflict for GE in state 218 resolved as shift
WARNING: shift/reduce conflict for EQ in state 218 resolved as shift
WARNING: shift/reduce conflict for NE in state 218 resolved as shift
WARNING: shift/reduce conflict for AND in state 218 resolved as shift
WARNING: shift/reduce conflict for OR in state 218 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 219 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 219 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 219 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 219 resolved as shift
WARNING: shift/reduce conflict for MOD in state 219 resolved as shift
WARNING: shift/reduce conflict for LT in state 219 resolved as shift
WARNING: shift/reduce conflict for LE in state 219 resolved as shift
WARNING: shift/reduce conflict for GT in state 219 resolved as shift
WARNING: shift/reduce conflict for GE in state 219 resolved as shift
WARNING: shift/reduce conflict for EQ in state 219 resolved as shift
WARNING: shift/reduce conflict for NE in state 219 resolved as shift
WARNING: shift/reduce conflict for AND in state 219 resolved as shift
WARNING: shift/reduce conflict for OR in state 219 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 220 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 220 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 220 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 220 resolved as shift
WARNING: shift/reduce conflict for MOD in state 220 resolved as shift
WARNING: shift/reduce conflict for LT in state 220 resolved as shift
WARNING: shift/reduce conflict for LE in state 220 resolved as shift
WARNING: shift/reduce conflict for GT in state 220 resolved as shift
WARNING: shift/reduce conflict for GE in state 220 resolved as shift
WARNING: shift/reduce conflict for EQ in state 220 resolved as shift
WARNING: shift/reduce conflict for NE in state 220 resolved as shift
WARNING: shift/reduce conflict for AND in state 220 resolved as shift
WARNING: shift/reduce conflict for OR in state 220 resolved as shift
WARNING: reduce/reduce conflict in state 10 resolved using rule (program -> PACKAGE MAIN import_section empty)
WARNING: rejected rule (function_list -> empty) in state 10
WARNING: reduce/reduce conflict in state 19 resolved using rule (program -> PACKAGE VARIABLE import_section empty)
WARNING: rejected rule (function_list -> empty) in state 19
WARNING: reduce/reduce conflict in state 53 resolved using rule (struct_fields -> empty)
WARNING: rejected rule (struct_field -> empty) in state 53
