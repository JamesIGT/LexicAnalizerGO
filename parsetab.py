
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'startAMPER AND ASIG ASSIGN BOOL_TYPE BREAK CASE COLON COMMA CONTINUE DECREMENT DEFAULT DIVIDE DOT ELSE EQ FALSE FLOAT FLOAT64_TYPE FMT FOR FUNC GE GT IF IMPORT INCREMENT INT_TYPE LBRACE LBRACKET LE LPAREN LT MAKE MAP MINUS MOD NE NEW NOT NUMBER OR PACKAGE PLUS PRINT PRINTF PRINTLN RANGE RBRACE RBRACKET RETURN RPAREN SCANLN SEMICOLON STRING STRING_TYPE STRUCT SWITCH TIMES TRUE TYPE UINT VAR VARIABLEstart : PACKAGE VARIABLE import_stmt programimport_stmt : IMPORT LPAREN STRING RPAREN\n                    | IMPORT STRINGprogram : statement\n               | statement programstatement : declaration\n                 | assignment\n                 | print_stmt\n                 | input_stmt\n                 | continue_stmt\n                 | struct_method\n                 | func_def\n                 | func_no_params\n                 | func_no_params_void\n                 | func_with_map\n                 | func_call\n                 | if_stmt\n                 | for_stmt\n                 | struct_def\n                 | switch_stmt\n                 | map_declaration\n                 | map_declaration_values\n                 | array_declaration\n                 | array_literal\n                 | slice_declaration\n                 | make_stmt\n                 | new_stmt\n                 | break_stmt\n                 | increment_stmt\n                 | return_stmtdeclaration : VAR VARIABLE type \n                   | VAR VARIABLE type ASIG expression\n                   | VAR VARIABLE type ASSIGN expressionexpression : NUMBERexpression : FLOATexpression : VARIABLEassignment : VARIABLE ASSIGN expression\n                  | VARIABLE ASIG expression\n                  print_stmt : FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN\n                  | FMT DOT PRINTLN LPAREN expression RPAREN\n                  | FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPARENinput_stmt : FMT DOT SCANLN LPAREN AMPER VARIABLE RPARENfunc_def : func_header func_bodyfunc_header : FUNC VARIABLE LPAREN param_list RPAREN typefunc_body : LBRACE program RBRACEreturn_stmt : RETURN expressionfunc_with_map : FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type  func_body  func_no_params : FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACEfunc_no_params_void : FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACEfunc_call : VARIABLE LPAREN arg_list RPAREN\n                 | VARIABLE LPAREN RPARENparam_list : param\n                  | param COMMA param_listparam : VARIABLE typearg_list : expression\n                | expression COMMA arg_listexpression : term\n                  | expression PLUS term\n                  | expression MINUS term\n                  | expression AND expression\n                  | expression OR expression\n                  | expression EQ expression\n                  | expression NE expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression LE expression\n                  | expression GE expressionterm : factor\n            | term TIMES factor\n            | term DIVIDE factorterm : VARIABLEfactor : NUMBER\n              | FLOAT\n              | STRING\n              | VARIABLE\n              | TRUE\n              | FALSE\n              | LPAREN expression RPAREN\n              | make_expr\n              | struct_instance\n              | func_calltype : INT_TYPE\n            | FLOAT64_TYPE\n            | STRING_TYPE\n            | BOOL_TYPEif_stmt : IF expression block\n               | IF expression block ELSE blockfor_stmt : FOR expression for_block\n                | FOR assignment SEMICOLON expression SEMICOLON for_update for_blockfor_block : begin_loop block end_loopbegin_loop :end_loop :continue_stmt : CONTINUEfor_update : assignment\n                  | increment_stmtblock : LBRACE program RBRACEstruct_method : FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE\n                     | FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACEstruct_def : TYPE VARIABLE STRUCT LBRACE struct_fields RBRACEstruct_fields : struct_field\n                     | struct_field struct_fieldsstruct_field : VARIABLE type\n                    | typestruct_instance : VARIABLE LBRACE struct_fields_values RBRACEstruct_fields_values : field_value\n                            | field_value COMMA struct_fields_valuesfield_value : VARIABLE COLON expressionswitch_stmt : SWITCH expression LBRACE case_list RBRACE\n                   | SWITCH LBRACE case_list RBRACEcase_list : case_clause\n                 | case_clause case_listcase_clause : CASE expression COLON program\n                   | DEFAULT COLON programmap_declaration : VAR VARIABLE MAP LBRACKET type RBRACKET type\n                       | VARIABLE ASIG MAP LBRACKET type RBRACKET type\n                       | VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE  map_params RBRACEmap_params : map_param\n                    | map_param COMMA map_paramsmap_param : STRING COLON factormake_stmt : VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN\n                 | VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPARENmake_expr : MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN\n                 | MAKE LPAREN LBRACKET RBRACKET type RPARENmap_declaration_values : VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACEmap_kv_pairs : map_kv_pair\n                    | map_kv_pair COMMA map_kv_pairsmap_kv_pair : STRING COLON expressionarray_declaration : VAR VARIABLE LBRACKET NUMBER RBRACKET type\n                         | VAR VARIABLE ASSIGN array_literalarray_literal : LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACEarray_values : expression\n                    | expression COMMA array_valuesslice_declaration : VAR VARIABLE LBRACKET RBRACKET type\n                         | VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACEslice_values : expression\n                    | expression COMMA slice_valuesnew_stmt : VARIABLE ASIG NEW LPAREN VARIABLE RPARENbreak_stmt : BREAKincrement_stmt : VARIABLE INCREMENT\n                      | VARIABLE DECREMENT'
    
_lr_action_items = {'PACKAGE':([0,],[2,]),'$end':([1,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,44,51,52,53,58,62,63,64,65,66,67,68,69,71,72,73,81,83,84,90,92,96,97,98,99,107,124,139,143,155,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,181,185,195,196,199,212,213,215,219,225,232,234,236,256,259,264,267,270,272,275,276,278,281,282,283,286,300,301,302,306,309,323,326,],[0,-1,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-93,-138,-139,-140,-5,-43,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,-46,-37,-38,-51,-31,-82,-83,-84,-85,-86,-88,-50,-129,-45,-58,-71,-72,-73,-59,-60,-61,-62,-63,-64,-65,-66,-67,-69,-75,-70,-78,-92,-109,-32,-33,-133,-87,-96,-104,-90,-108,-137,-128,-40,-99,-115,-114,-42,-49,-130,-123,-89,-134,-121,-39,-41,-48,-122,-116,-124,-120,-47,-98,-97,]),'VARIABLE':([2,4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,40,41,42,43,44,45,47,48,49,50,51,52,56,58,59,62,63,64,65,66,67,68,69,70,71,72,73,81,83,84,90,92,96,97,98,99,103,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,126,127,132,134,138,139,140,141,142,143,148,155,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,181,183,185,188,195,196,199,203,204,207,210,211,212,213,214,215,216,219,220,223,224,225,226,229,232,234,235,236,237,240,255,256,259,264,267,268,270,272,273,275,276,278,279,281,282,283,286,300,301,302,305,306,307,309,320,321,322,323,326,],[3,6,6,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,54,-93,57,64,77,78,64,-138,64,-3,64,64,64,-139,-140,103,-43,6,-34,-35,-36,-57,-68,-74,-76,-77,64,-79,-80,-81,-46,-37,-38,-51,-31,-82,-83,-84,-85,150,151,-86,159,159,64,64,64,64,64,64,64,64,6,172,176,176,-88,64,64,64,-2,193,-50,64,64,64,-129,64,-45,-58,-71,-72,-73,-59,-60,-61,-62,-63,-64,-65,-66,-67,-69,-75,-70,-78,-92,221,-109,6,-32,-33,-133,238,239,6,151,64,-87,-96,64,-104,172,-90,254,221,-103,-108,6,64,-137,-128,64,-40,266,6,-102,-99,-115,-114,-42,151,-49,-130,64,-123,-89,-134,64,-121,-39,-41,-48,-122,-116,-124,318,-120,6,-47,6,176,64,-98,-97,]),'IMPORT':([3,],[5,]),'VAR':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,44,47,51,52,58,59,62,63,64,65,66,67,68,69,71,72,73,81,83,84,90,92,96,97,98,99,107,118,124,134,139,143,155,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,181,185,188,195,196,199,207,212,213,215,219,225,226,232,234,236,240,256,259,264,267,270,272,275,276,278,281,282,283,286,300,301,302,306,307,309,320,323,326,],[34,34,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-93,-138,-3,-139,-140,-43,34,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,-46,-37,-38,-51,-31,-82,-83,-84,-85,-86,34,-88,-2,-50,-129,-45,-58,-71,-72,-73,-59,-60,-61,-62,-63,-64,-65,-66,-67,-69,-75,-70,-78,-92,-109,34,-32,-33,-133,34,-87,-96,-104,-90,-108,34,-137,-128,-40,34,-99,-115,-114,-42,-49,-130,-123,-89,-134,-121,-39,-41,-48,-122,-116,-124,-120,34,-47,34,-98,-97,]),'FMT':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,44,47,51,52,58,59,62,63,64,65,66,67,68,69,71,72,73,81,83,84,90,92,96,97,98,99,107,118,124,134,139,143,155,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,181,185,188,195,196,199,207,212,213,215,219,225,226,232,234,236,240,256,259,264,267,270,272,275,276,278,281,282,283,286,300,301,302,306,307,309,320,323,326,],[35,35,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-93,-138,-3,-139,-140,-43,35,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,-46,-37,-38,-51,-31,-82,-83,-84,-85,-86,35,-88,-2,-50,-129,-45,-58,-71,-72,-73,-59,-60,-61,-62,-63,-64,-65,-66,-67,-69,-75,-70,-78,-92,-109,35,-32,-33,-133,35,-87,-96,-104,-90,-108,35,-137,-128,-40,35,-99,-115,-114,-42,-49,-130,-123,-89,-134,-121,-39,-41,-48,-122,-116,-124,-120,35,-47,35,-98,-97,]),'CONTINUE':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,44,47,51,52,58,59,62,63,64,65,66,67,68,69,71,72,73,81,83,84,90,92,96,97,98,99,107,118,124,134,139,143,155,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,181,185,188,195,196,199,207,212,213,215,219,225,226,232,234,236,240,256,259,264,267,270,272,275,276,278,281,282,283,286,300,301,302,306,307,309,320,323,326,],[36,36,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-93,-138,-3,-139,-140,-43,36,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,-46,-37,-38,-51,-31,-82,-83,-84,-85,-86,36,-88,-2,-50,-129,-45,-58,-71,-72,-73,-59,-60,-61,-62,-63,-64,-65,-66,-67,-69,-75,-70,-78,-92,-109,36,-32,-33,-133,36,-87,-96,-104,-90,-108,36,-137,-128,-40,36,-99,-115,-114,-42,-49,-130,-123,-89,-134,-121,-39,-41,-48,-122,-116,-124,-120,36,-47,36,-98,-97,]),'FUNC':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,44,47,51,52,58,59,62,63,64,65,66,67,68,69,71,72,73,81,83,84,90,92,96,97,98,99,107,118,124,134,139,143,155,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,181,185,188,195,196,199,207,212,213,215,219,225,226,232,234,236,240,256,259,264,267,270,272,275,276,278,281,282,283,286,300,301,302,306,307,309,320,323,326,],[37,37,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-93,-138,-3,-139,-140,-43,37,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,-46,-37,-38,-51,-31,-82,-83,-84,-85,-86,37,-88,-2,-50,-129,-45,-58,-71,-72,-73,-59,-60,-61,-62,-63,-64,-65,-66,-67,-69,-75,-70,-78,-92,-109,37,-32,-33,-133,37,-87,-96,-104,-90,-108,37,-137,-128,-40,37,-99,-115,-114,-42,-49,-130,-123,-89,-134,-121,-39,-41,-48,-122,-116,-124,-120,37,-47,37,-98,-97,]),'IF':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,44,47,51,52,58,59,62,63,64,65,66,67,68,69,71,72,73,81,83,84,90,92,96,97,98,99,107,118,124,134,139,143,155,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,181,185,188,195,196,199,207,212,213,215,219,225,226,232,234,236,240,256,259,264,267,270,272,275,276,278,281,282,283,286,300,301,302,306,307,309,320,323,326,],[40,40,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-93,-138,-3,-139,-140,-43,40,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,-46,-37,-38,-51,-31,-82,-83,-84,-85,-86,40,-88,-2,-50,-129,-45,-58,-71,-72,-73,-59,-60,-61,-62,-63,-64,-65,-66,-67,-69,-75,-70,-78,-92,-109,40,-32,-33,-133,40,-87,-96,-104,-90,-108,40,-137,-128,-40,40,-99,-115,-114,-42,-49,-130,-123,-89,-134,-121,-39,-41,-48,-122,-116,-124,-120,40,-47,40,-98,-97,]),'FOR':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,44,47,51,52,58,59,62,63,64,65,66,67,68,69,71,72,73,81,83,84,90,92,96,97,98,99,107,118,124,134,139,143,155,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,181,185,188,195,196,199,207,212,213,215,219,225,226,232,234,236,240,256,259,264,267,270,272,275,276,278,281,282,283,286,300,301,302,306,307,309,320,323,326,],[41,41,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-93,-138,-3,-139,-140,-43,41,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,-46,-37,-38,-51,-31,-82,-83,-84,-85,-86,41,-88,-2,-50,-129,-45,-58,-71,-72,-73,-59,-60,-61,-62,-63,-64,-65,-66,-67,-69,-75,-70,-78,-92,-109,41,-32,-33,-133,41,-87,-96,-104,-90,-108,41,-137,-128,-40,41,-99,-115,-114,-42,-49,-130,-123,-89,-134,-121,-39,-41,-48,-122,-116,-124,-120,41,-47,41,-98,-97,]),'TYPE':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,44,47,51,52,58,59,62,63,64,65,66,67,68,69,71,72,73,81,83,84,90,92,96,97,98,99,107,118,124,134,139,143,155,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,181,185,188,195,196,199,207,212,213,215,219,225,226,232,234,236,240,256,259,264,267,270,272,275,276,278,281,282,283,286,300,301,302,306,307,309,320,323,326,],[42,42,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-93,-138,-3,-139,-140,-43,42,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,-46,-37,-38,-51,-31,-82,-83,-84,-85,-86,42,-88,-2,-50,-129,-45,-58,-71,-72,-73,-59,-60,-61,-62,-63,-64,-65,-66,-67,-69,-75,-70,-78,-92,-109,42,-32,-33,-133,42,-87,-96,-104,-90,-108,42,-137,-128,-40,42,-99,-115,-114,-42,-49,-130,-123,-89,-134,-121,-39,-41,-48,-122,-116,-124,-120,42,-47,42,-98,-97,]),'SWITCH':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,44,47,51,52,58,59,62,63,64,65,66,67,68,69,71,72,73,81,83,84,90,92,96,97,98,99,107,118,124,134,139,143,155,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,181,185,188,195,196,199,207,212,213,215,219,225,226,232,234,236,240,256,259,264,267,270,272,275,276,278,281,282,283,286,300,301,302,306,307,309,320,323,326,],[43,43,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-93,-138,-3,-139,-140,-43,43,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,-46,-37,-38,-51,-31,-82,-83,-84,-85,-86,43,-88,-2,-50,-129,-45,-58,-71,-72,-73,-59,-60,-61,-62,-63,-64,-65,-66,-67,-69,-75,-70,-78,-92,-109,43,-32,-33,-133,43,-87,-96,-104,-90,-108,43,-137,-128,-40,43,-99,-115,-114,-42,-49,-130,-123,-89,-134,-121,-39,-41,-48,-122,-116,-124,-120,43,-47,43,-98,-97,]),'LBRACKET':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,44,47,49,51,52,54,58,59,62,63,64,65,66,67,68,69,71,72,73,81,83,84,85,90,92,93,94,96,97,98,99,107,118,123,124,134,137,139,143,155,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,179,181,185,188,191,195,196,199,207,208,212,213,215,219,225,226,232,234,236,240,256,259,264,267,270,272,275,276,278,281,282,283,286,300,301,302,306,307,309,320,323,326,],[39,39,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-93,-138,-3,86,-139,-140,95,-43,39,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,-46,-37,-38,135,-51,-31,39,144,-82,-83,-84,-85,-86,39,180,-88,-2,192,-50,-129,-45,-58,-71,-72,-73,-59,-60,-61,-62,-63,-64,-65,-66,-67,-69,-75,-70,-78,217,-92,-109,39,230,-32,-33,-133,39,242,-87,-96,-104,-90,-108,39,-137,-128,-40,39,-99,-115,-114,-42,-49,-130,-123,-89,-134,-121,-39,-41,-48,-122,-116,-124,-120,39,-47,39,-98,-97,]),'BREAK':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,44,47,51,52,58,59,62,63,64,65,66,67,68,69,71,72,73,81,83,84,90,92,96,97,98,99,107,118,124,134,139,143,155,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,181,185,188,195,196,199,207,212,213,215,219,225,226,232,234,236,240,256,259,264,267,270,272,275,276,278,281,282,283,286,300,301,302,306,307,309,320,323,326,],[44,44,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-93,-138,-3,-139,-140,-43,44,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,-46,-37,-38,-51,-31,-82,-83,-84,-85,-86,44,-88,-2,-50,-129,-45,-58,-71,-72,-73,-59,-60,-61,-62,-63,-64,-65,-66,-67,-69,-75,-70,-78,-92,-109,44,-32,-33,-133,44,-87,-96,-104,-90,-108,44,-137,-128,-40,44,-99,-115,-114,-42,-49,-130,-123,-89,-134,-121,-39,-41,-48,-122,-116,-124,-120,44,-47,44,-98,-97,]),'RETURN':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,44,47,51,52,58,59,62,63,64,65,66,67,68,69,71,72,73,81,83,84,90,92,96,97,98,99,107,118,124,134,139,143,155,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,181,185,188,195,196,199,207,212,213,215,219,225,226,232,234,236,240,256,259,264,267,270,272,275,276,278,281,282,283,286,300,301,302,306,307,309,320,323,326,],[45,45,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-93,-138,-3,-139,-140,-43,45,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,-46,-37,-38,-51,-31,-82,-83,-84,-85,-86,45,-88,-2,-50,-129,-45,-58,-71,-72,-73,-59,-60,-61,-62,-63,-64,-65,-66,-67,-69,-75,-70,-78,-92,-109,45,-32,-33,-133,45,-87,-96,-104,-90,-108,45,-137,-128,-40,45,-99,-115,-114,-42,-49,-130,-123,-89,-134,-121,-39,-41,-48,-122,-116,-124,-120,45,-47,45,-98,-97,]),'LPAREN':([5,6,37,40,41,43,45,48,49,50,57,64,70,74,77,87,88,100,101,102,108,109,110,111,112,113,114,115,116,117,120,121,126,127,132,140,141,142,148,159,176,211,214,229,235,239,273,279,305,318,321,322,],[46,50,56,70,70,70,70,70,70,70,104,50,70,123,50,137,138,147,148,149,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,50,50,70,70,70,70,268,70,70,70,50,70,70,]),'STRING':([5,40,41,43,45,46,48,49,50,70,108,109,110,111,112,113,114,115,116,117,120,121,126,127,132,140,141,142,147,148,211,214,229,235,273,277,279,303,304,305,321,322,],[47,67,67,67,67,82,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,200,202,67,67,67,67,67,294,67,311,313,67,67,67,]),'ASSIGN':([6,54,77,92,96,97,98,99,254,],[48,93,48,142,-82,-83,-84,-85,48,]),'ASIG':([6,77,92,96,97,98,99,254,],[49,127,141,-82,-83,-84,-85,127,]),'INCREMENT':([6,254,],[51,51,]),'DECREMENT':([6,254,],[52,52,]),'RBRACE':([8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,44,51,52,53,58,62,63,64,65,66,67,68,69,71,72,73,81,83,84,90,92,96,97,98,99,105,107,124,130,131,139,143,155,158,159,160,161,162,163,164,165,166,167,168,169,170,171,173,174,175,176,177,178,181,184,185,186,195,196,199,212,213,215,219,222,223,224,225,227,232,234,236,241,245,246,247,248,255,256,257,258,259,260,261,264,267,269,270,272,275,276,278,281,282,283,286,288,290,291,292,293,295,300,301,302,306,309,310,312,314,315,316,317,318,319,323,324,325,326,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-93,-138,-139,-140,-5,-43,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,-46,-37,-38,-51,-31,-82,-83,-84,-85,155,-86,-88,185,-110,-50,-129,-45,-58,-71,-72,-73,-59,-60,-61,-62,-63,-64,-65,-66,-67,213,215,-105,-69,-75,-70,-78,-92,225,-109,-111,-32,-33,-133,-87,-96,-104,-90,256,-100,-103,-108,-113,-137,-128,-40,270,272,-131,-107,-106,-102,-99,-101,-112,-115,278,-135,-114,-42,286,-49,-130,-123,-89,-134,-121,-39,-41,-48,-132,301,302,-117,-125,-136,-122,-116,-124,-120,-47,-118,-126,-68,-127,-34,-35,-36,323,-98,326,-119,-97,]),'CASE':([8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,44,51,52,53,58,62,63,64,65,66,67,68,69,71,72,73,80,81,83,84,90,92,96,97,98,99,107,124,129,131,139,143,155,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,181,185,195,196,199,212,213,215,219,225,227,232,234,236,256,258,259,264,267,270,272,275,276,278,281,282,283,286,300,301,302,306,309,323,326,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-93,-138,-139,-140,-5,-43,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,132,-46,-37,-38,-51,-31,-82,-83,-84,-85,-86,-88,132,132,-50,-129,-45,-58,-71,-72,-73,-59,-60,-61,-62,-63,-64,-65,-66,-67,-69,-75,-70,-78,-92,-109,-32,-33,-133,-87,-96,-104,-90,-108,-113,-137,-128,-40,-99,-112,-115,-114,-42,-49,-130,-123,-89,-134,-121,-39,-41,-48,-122,-116,-124,-120,-47,-98,-97,]),'DEFAULT':([8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,44,51,52,53,58,62,63,64,65,66,67,68,69,71,72,73,80,81,83,84,90,92,96,97,98,99,107,124,129,131,139,143,155,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,181,185,195,196,199,212,213,215,219,225,227,232,234,236,256,258,259,264,267,270,272,275,276,278,281,282,283,286,300,301,302,306,309,323,326,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-93,-138,-139,-140,-5,-43,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,133,-46,-37,-38,-51,-31,-82,-83,-84,-85,-86,-88,133,133,-50,-129,-45,-58,-71,-72,-73,-59,-60,-61,-62,-63,-64,-65,-66,-67,-69,-75,-70,-78,-92,-109,-32,-33,-133,-87,-96,-104,-90,-108,-113,-137,-128,-40,-99,-112,-115,-114,-42,-49,-130,-123,-89,-134,-121,-39,-41,-48,-122,-116,-124,-120,-47,-98,-97,]),'DOT':([35,],[55,]),'LBRACE':([38,43,51,52,61,62,63,64,65,66,67,68,69,71,72,73,75,77,79,83,84,90,96,97,98,99,125,128,139,152,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,190,206,215,243,251,252,253,259,275,297,299,300,308,318,],[59,80,-139,-140,118,-34,-35,119,-57,-68,-74,-76,-77,-79,-80,-81,-91,119,129,-37,-38,-51,-82,-83,-84,-85,118,183,-50,207,211,118,-58,119,-72,-73,-59,-60,-61,-62,-63,-64,-65,-66,-67,-69,119,-70,-78,229,240,-104,-44,-94,-91,-95,277,-123,307,59,-122,320,119,]),'NUMBER':([39,40,41,43,45,48,49,50,70,95,108,109,110,111,112,113,114,115,116,117,120,121,126,127,132,140,141,142,148,211,214,229,235,273,279,305,321,322,],[60,62,62,62,62,62,62,62,62,145,160,160,62,62,62,62,62,62,62,62,160,160,62,62,62,62,62,62,62,62,62,62,62,62,62,316,160,62,]),'FLOAT':([40,41,43,45,48,49,50,70,108,109,110,111,112,113,114,115,116,117,120,121,126,127,132,140,141,142,148,211,214,229,235,273,279,305,321,322,],[63,63,63,63,63,63,63,63,161,161,63,63,63,63,63,63,63,63,161,161,63,63,63,63,63,63,63,63,63,63,63,63,63,317,161,63,]),'TRUE':([40,41,43,45,48,49,50,70,108,109,110,111,112,113,114,115,116,117,120,121,126,127,132,140,141,142,148,211,214,229,235,273,279,305,321,322,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'FALSE':([40,41,43,45,48,49,50,70,108,109,110,111,112,113,114,115,116,117,120,121,126,127,132,140,141,142,148,211,214,229,235,273,279,305,321,322,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'MAKE':([40,41,43,45,48,49,50,70,108,109,110,111,112,113,114,115,116,117,120,121,126,127,132,140,141,142,148,211,214,229,235,273,279,305,321,322,],[74,74,74,74,74,87,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'MAP':([49,54,123,137,152,],[85,94,179,191,208,]),'NEW':([49,],[88,]),'RPAREN':([50,62,63,64,65,66,67,68,69,71,72,73,82,89,90,91,96,97,98,99,104,122,139,150,153,154,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,193,194,201,202,205,215,238,244,250,263,265,266,268,275,285,289,296,300,],[90,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,134,139,-51,-55,-82,-83,-84,-85,152,178,-50,204,209,-52,-58,-71,-72,-73,-59,-60,-61,-62,-63,-64,-65,-66,-67,-69,-75,-70,-78,232,-56,236,-74,-54,-104,267,-53,275,281,282,283,284,-123,298,300,306,-122,]),'INT_TYPE':([54,96,97,98,99,106,135,136,144,146,151,152,183,198,209,217,218,221,223,224,228,230,231,233,242,255,274,280,284,287,298,],[96,-82,-83,-84,-85,96,96,96,96,96,96,96,96,96,96,96,96,96,96,-103,96,96,96,96,96,-102,96,96,96,96,96,]),'FLOAT64_TYPE':([54,96,97,98,99,106,135,136,144,146,151,152,183,198,209,217,218,221,223,224,228,230,231,233,242,255,274,280,284,287,298,],[97,-82,-83,-84,-85,97,97,97,97,97,97,97,97,97,97,97,97,97,97,-103,97,97,97,97,97,-102,97,97,97,97,97,]),'STRING_TYPE':([54,96,97,98,99,106,135,136,144,146,151,152,183,198,209,217,218,221,223,224,228,230,231,233,242,255,274,280,284,287,298,],[98,-82,-83,-84,-85,98,98,98,98,98,98,98,98,98,98,98,98,98,98,-103,98,98,98,98,98,-102,98,98,98,98,98,]),'BOOL_TYPE':([54,96,97,98,99,106,135,136,144,146,151,152,183,198,209,217,218,221,223,224,228,230,231,233,242,255,274,280,284,287,298,],[99,-82,-83,-84,-85,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-103,99,99,99,99,99,-102,99,99,99,99,99,]),'PRINTF':([55,],[100,]),'PRINTLN':([55,],[101,]),'SCANLN':([55,],[102,]),'RBRACKET':([60,86,95,96,97,98,99,145,180,189,192,197,249,262,271,],[106,136,146,-82,-83,-84,-85,198,218,228,231,233,274,280,287,]),'PLUS':([61,62,63,64,65,66,67,68,69,71,72,73,75,77,79,81,83,84,90,91,122,139,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,182,187,195,196,201,202,215,246,247,261,265,275,281,300,306,314,315,316,317,318,],[108,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,108,-36,108,108,108,108,-51,108,108,-50,-58,-71,-72,-73,-59,108,108,108,108,108,108,108,108,-69,-75,-70,-78,108,108,108,108,108,-74,-104,108,108,108,108,-123,-123,-122,-122,-68,108,-34,-35,-36,]),'MINUS':([61,62,63,64,65,66,67,68,69,71,72,73,75,77,79,81,83,84,90,91,122,139,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,182,187,195,196,201,202,215,246,247,261,265,275,281,300,306,314,315,316,317,318,],[109,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,109,-36,109,109,109,109,-51,109,109,-50,-58,-71,-72,-73,-59,109,109,109,109,109,109,109,109,-69,-75,-70,-78,109,109,109,109,109,-74,-104,109,109,109,109,-123,-123,-122,-122,-68,109,-34,-35,-36,]),'AND':([61,62,63,64,65,66,67,68,69,71,72,73,75,77,79,81,83,84,90,91,122,139,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,182,187,195,196,201,202,215,246,247,261,265,275,281,300,306,314,315,316,317,318,],[110,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,110,-36,110,110,110,110,-51,110,110,-50,-58,-71,-72,-73,-59,110,110,110,110,110,110,110,110,-69,-75,-70,-78,110,110,110,110,110,-74,-104,110,110,110,110,-123,-123,-122,-122,-68,110,-34,-35,-36,]),'OR':([61,62,63,64,65,66,67,68,69,71,72,73,75,77,79,81,83,84,90,91,122,139,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,182,187,195,196,201,202,215,246,247,261,265,275,281,300,306,314,315,316,317,318,],[111,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,111,-36,111,111,111,111,-51,111,111,-50,-58,-71,-72,-73,-59,111,111,111,111,111,111,111,111,-69,-75,-70,-78,111,111,111,111,111,-74,-104,111,111,111,111,-123,-123,-122,-122,-68,111,-34,-35,-36,]),'EQ':([61,62,63,64,65,66,67,68,69,71,72,73,75,77,79,81,83,84,90,91,122,139,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,182,187,195,196,201,202,215,246,247,261,265,275,281,300,306,314,315,316,317,318,],[112,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,112,-36,112,112,112,112,-51,112,112,-50,-58,-71,-72,-73,-59,112,112,112,112,112,112,112,112,-69,-75,-70,-78,112,112,112,112,112,-74,-104,112,112,112,112,-123,-123,-122,-122,-68,112,-34,-35,-36,]),'NE':([61,62,63,64,65,66,67,68,69,71,72,73,75,77,79,81,83,84,90,91,122,139,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,182,187,195,196,201,202,215,246,247,261,265,275,281,300,306,314,315,316,317,318,],[113,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,113,-36,113,113,113,113,-51,113,113,-50,-58,-71,-72,-73,-59,113,113,113,113,113,113,113,113,-69,-75,-70,-78,113,113,113,113,113,-74,-104,113,113,113,113,-123,-123,-122,-122,-68,113,-34,-35,-36,]),'LT':([61,62,63,64,65,66,67,68,69,71,72,73,75,77,79,81,83,84,90,91,122,139,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,182,187,195,196,201,202,215,246,247,261,265,275,281,300,306,314,315,316,317,318,],[114,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,114,-36,114,114,114,114,-51,114,114,-50,-58,-71,-72,-73,-59,114,114,114,114,114,114,114,114,-69,-75,-70,-78,114,114,114,114,114,-74,-104,114,114,114,114,-123,-123,-122,-122,-68,114,-34,-35,-36,]),'GT':([61,62,63,64,65,66,67,68,69,71,72,73,75,77,79,81,83,84,90,91,122,139,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,182,187,195,196,201,202,215,246,247,261,265,275,281,300,306,314,315,316,317,318,],[115,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,115,-36,115,115,115,115,-51,115,115,-50,-58,-71,-72,-73,-59,115,115,115,115,115,115,115,115,-69,-75,-70,-78,115,115,115,115,115,-74,-104,115,115,115,115,-123,-123,-122,-122,-68,115,-34,-35,-36,]),'LE':([61,62,63,64,65,66,67,68,69,71,72,73,75,77,79,81,83,84,90,91,122,139,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,182,187,195,196,201,202,215,246,247,261,265,275,281,300,306,314,315,316,317,318,],[116,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,116,-36,116,116,116,116,-51,116,116,-50,-58,-71,-72,-73,-59,116,116,116,116,116,116,116,116,-69,-75,-70,-78,116,116,116,116,116,-74,-104,116,116,116,116,-123,-123,-122,-122,-68,116,-34,-35,-36,]),'GE':([61,62,63,64,65,66,67,68,69,71,72,73,75,77,79,81,83,84,90,91,122,139,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,182,187,195,196,201,202,215,246,247,261,265,275,281,300,306,314,315,316,317,318,],[117,-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,117,-36,117,117,117,117,-51,117,117,-50,-58,-71,-72,-73,-59,117,117,117,117,117,117,117,117,-69,-75,-70,-78,117,117,117,117,117,-74,-104,117,117,117,117,-123,-123,-122,-122,-68,117,-34,-35,-36,]),'SEMICOLON':([62,63,64,65,66,67,68,69,71,72,73,76,83,84,90,139,158,159,160,161,162,163,164,165,166,167,168,169,170,175,176,177,178,182,215,275,300,],[-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,126,-37,-38,-51,-50,-58,-71,-72,-73,-59,-60,-61,-62,-63,-64,-65,-66,-67,-69,-75,-70,-78,220,-104,-123,-122,]),'COMMA':([62,63,64,65,66,67,68,69,71,72,73,90,91,96,97,98,99,139,154,158,159,160,161,162,163,164,165,166,167,168,169,170,174,175,176,177,178,200,202,205,215,246,247,261,275,292,293,300,314,315,316,317,318,325,],[-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,-51,140,-82,-83,-84,-85,-50,210,-58,-71,-72,-73,-59,-60,-61,-62,-63,-64,-65,-66,-67,216,-69,-75,-70,-78,235,237,-54,-104,273,-107,279,-123,303,304,-122,-68,-127,-34,-35,-36,-119,]),'COLON':([62,63,64,65,66,67,68,69,71,72,73,90,133,139,158,159,160,161,162,163,164,165,166,167,168,169,170,172,175,176,177,178,187,215,275,294,300,311,313,],[-34,-35,-36,-57,-68,-74,-76,-77,-79,-80,-81,-51,188,-50,-58,-71,-72,-73,-59,-60,-61,-62,-63,-64,-65,-66,-67,214,-69,-75,-70,-78,226,-104,-123,305,-122,321,322,]),'TIMES':([62,63,64,65,66,67,68,69,71,72,73,77,90,139,158,159,160,161,162,175,176,177,178,202,215,275,281,300,306,314,316,317,318,],[-72,-73,-71,120,-68,-74,-76,-77,-79,-80,-81,-71,-51,-50,120,-71,-72,-73,120,-69,-75,-70,-78,-74,-104,-123,-123,-122,-122,-68,-72,-73,-71,]),'DIVIDE':([62,63,64,65,66,67,68,69,71,72,73,77,90,139,158,159,160,161,162,175,176,177,178,202,215,275,281,300,306,314,316,317,318,],[-72,-73,-71,121,-68,-74,-76,-77,-79,-80,-81,-71,-51,-50,121,-71,-72,-73,121,-69,-75,-70,-78,-74,-104,-123,-123,-122,-122,-68,-72,-73,-71,]),'STRUCT':([78,],[128,]),'ELSE':([107,213,],[157,-96,]),'AMPER':([149,],[203,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'import_stmt':([3,],[4,]),'program':([4,8,59,118,188,207,226,240,307,320,],[7,53,105,171,227,241,258,269,319,324,]),'statement':([4,8,59,118,188,207,226,240,307,320,],[8,8,8,8,8,8,8,8,8,8,]),'declaration':([4,8,59,118,188,207,226,240,307,320,],[9,9,9,9,9,9,9,9,9,9,]),'assignment':([4,8,41,59,118,188,207,220,226,240,307,320,],[10,10,76,10,10,10,10,251,10,10,10,10,]),'print_stmt':([4,8,59,118,188,207,226,240,307,320,],[11,11,11,11,11,11,11,11,11,11,]),'input_stmt':([4,8,59,118,188,207,226,240,307,320,],[12,12,12,12,12,12,12,12,12,12,]),'continue_stmt':([4,8,59,118,188,207,226,240,307,320,],[13,13,13,13,13,13,13,13,13,13,]),'struct_method':([4,8,59,118,188,207,226,240,307,320,],[14,14,14,14,14,14,14,14,14,14,]),'func_def':([4,8,59,118,188,207,226,240,307,320,],[15,15,15,15,15,15,15,15,15,15,]),'func_no_params':([4,8,59,118,188,207,226,240,307,320,],[16,16,16,16,16,16,16,16,16,16,]),'func_no_params_void':([4,8,59,118,188,207,226,240,307,320,],[17,17,17,17,17,17,17,17,17,17,]),'func_with_map':([4,8,59,118,188,207,226,240,307,320,],[18,18,18,18,18,18,18,18,18,18,]),'func_call':([4,8,40,41,43,45,48,49,50,59,70,108,109,110,111,112,113,114,115,116,117,118,120,121,126,127,132,140,141,142,148,188,207,211,214,226,229,235,240,273,279,305,307,320,321,322,],[19,19,73,73,73,73,73,73,73,19,73,73,73,73,73,73,73,73,73,73,73,19,73,73,73,73,73,73,73,73,73,19,19,73,73,19,73,73,19,73,73,73,19,19,73,73,]),'if_stmt':([4,8,59,118,188,207,226,240,307,320,],[20,20,20,20,20,20,20,20,20,20,]),'for_stmt':([4,8,59,118,188,207,226,240,307,320,],[21,21,21,21,21,21,21,21,21,21,]),'struct_def':([4,8,59,118,188,207,226,240,307,320,],[22,22,22,22,22,22,22,22,22,22,]),'switch_stmt':([4,8,59,118,188,207,226,240,307,320,],[23,23,23,23,23,23,23,23,23,23,]),'map_declaration':([4,8,59,118,188,207,226,240,307,320,],[24,24,24,24,24,24,24,24,24,24,]),'map_declaration_values':([4,8,59,118,188,207,226,240,307,320,],[25,25,25,25,25,25,25,25,25,25,]),'array_declaration':([4,8,59,118,188,207,226,240,307,320,],[26,26,26,26,26,26,26,26,26,26,]),'array_literal':([4,8,59,93,118,188,207,226,240,307,320,],[27,27,27,143,27,27,27,27,27,27,27,]),'slice_declaration':([4,8,59,118,188,207,226,240,307,320,],[28,28,28,28,28,28,28,28,28,28,]),'make_stmt':([4,8,59,118,188,207,226,240,307,320,],[29,29,29,29,29,29,29,29,29,29,]),'new_stmt':([4,8,59,118,188,207,226,240,307,320,],[30,30,30,30,30,30,30,30,30,30,]),'break_stmt':([4,8,59,118,188,207,226,240,307,320,],[31,31,31,31,31,31,31,31,31,31,]),'increment_stmt':([4,8,59,118,188,207,220,226,240,307,320,],[32,32,32,32,32,32,253,32,32,32,32,]),'return_stmt':([4,8,59,118,188,207,226,240,307,320,],[33,33,33,33,33,33,33,33,33,33,]),'func_header':([4,8,59,118,188,207,226,240,307,320,],[38,38,38,38,38,38,38,38,38,38,]),'func_body':([38,299,],[58,309,]),'expression':([40,41,43,45,48,49,50,70,110,111,112,113,114,115,116,117,126,127,132,140,141,142,148,211,214,229,235,273,279,305,322,],[61,75,79,81,83,84,91,122,163,164,165,166,167,168,169,170,182,84,187,91,195,196,201,246,247,261,265,246,261,315,315,]),'term':([40,41,43,45,48,49,50,70,108,109,110,111,112,113,114,115,116,117,126,127,132,140,141,142,148,211,214,229,235,273,279,305,322,],[65,65,65,65,65,65,65,65,158,162,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'factor':([40,41,43,45,48,49,50,70,108,109,110,111,112,113,114,115,116,117,120,121,126,127,132,140,141,142,148,211,214,229,235,273,279,305,321,322,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,175,177,66,66,66,66,66,66,66,66,66,66,66,66,66,314,325,66,]),'make_expr':([40,41,43,45,48,49,50,70,108,109,110,111,112,113,114,115,116,117,120,121,126,127,132,140,141,142,148,211,214,229,235,273,279,305,321,322,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'struct_instance':([40,41,43,45,48,49,50,70,108,109,110,111,112,113,114,115,116,117,120,121,126,127,132,140,141,142,148,211,214,229,235,273,279,305,321,322,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'arg_list':([50,140,],[89,194,]),'type':([54,106,135,136,144,146,151,152,183,198,209,217,218,221,223,228,230,231,233,242,274,280,284,287,298,],[92,156,189,190,197,199,205,206,224,234,243,249,250,255,224,259,262,263,264,271,289,296,297,299,308,]),'block':([61,125,157,],[107,181,212,]),'for_block':([75,252,],[124,276,]),'begin_loop':([75,252,],[125,125,]),'case_list':([80,129,131,],[130,184,186,]),'case_clause':([80,129,131,],[131,131,131,]),'param_list':([104,210,268,],[153,244,285,]),'param':([104,210,268,],[154,154,154,]),'struct_fields_values':([119,216,],[173,248,]),'field_value':([119,216,],[174,174,]),'end_loop':([181,],[219,]),'struct_fields':([183,223,],[222,257,]),'struct_field':([183,223,],[223,223,]),'array_values':([211,273,],[245,288,]),'for_update':([220,],[252,]),'slice_values':([229,279,],[260,295,]),'map_params':([277,303,],[290,310,]),'map_kv_pairs':([277,304,],[291,312,]),'map_param':([277,303,],[292,292,]),'map_kv_pair':([277,304,],[293,293,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> PACKAGE VARIABLE import_stmt program','start',4,'p_start','parser.py',63),
  ('import_stmt -> IMPORT LPAREN STRING RPAREN','import_stmt',4,'p_import_function','parser.py',69),
  ('import_stmt -> IMPORT STRING','import_stmt',2,'p_import_function','parser.py',70),
  ('program -> statement','program',1,'p_program','parser.py',74),
  ('program -> statement program','program',2,'p_program','parser.py',75),
  ('statement -> declaration','statement',1,'p_statement','parser.py',80),
  ('statement -> assignment','statement',1,'p_statement','parser.py',81),
  ('statement -> print_stmt','statement',1,'p_statement','parser.py',82),
  ('statement -> input_stmt','statement',1,'p_statement','parser.py',83),
  ('statement -> continue_stmt','statement',1,'p_statement','parser.py',84),
  ('statement -> struct_method','statement',1,'p_statement','parser.py',85),
  ('statement -> func_def','statement',1,'p_statement','parser.py',86),
  ('statement -> func_no_params','statement',1,'p_statement','parser.py',87),
  ('statement -> func_no_params_void','statement',1,'p_statement','parser.py',88),
  ('statement -> func_with_map','statement',1,'p_statement','parser.py',89),
  ('statement -> func_call','statement',1,'p_statement','parser.py',90),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',91),
  ('statement -> for_stmt','statement',1,'p_statement','parser.py',92),
  ('statement -> struct_def','statement',1,'p_statement','parser.py',93),
  ('statement -> switch_stmt','statement',1,'p_statement','parser.py',94),
  ('statement -> map_declaration','statement',1,'p_statement','parser.py',95),
  ('statement -> map_declaration_values','statement',1,'p_statement','parser.py',96),
  ('statement -> array_declaration','statement',1,'p_statement','parser.py',97),
  ('statement -> array_literal','statement',1,'p_statement','parser.py',98),
  ('statement -> slice_declaration','statement',1,'p_statement','parser.py',99),
  ('statement -> make_stmt','statement',1,'p_statement','parser.py',100),
  ('statement -> new_stmt','statement',1,'p_statement','parser.py',101),
  ('statement -> break_stmt','statement',1,'p_statement','parser.py',102),
  ('statement -> increment_stmt','statement',1,'p_statement','parser.py',103),
  ('statement -> return_stmt','statement',1,'p_statement','parser.py',104),
  ('declaration -> VAR VARIABLE type','declaration',3,'p_declaration','parser.py',110),
  ('declaration -> VAR VARIABLE type ASIG expression','declaration',5,'p_declaration','parser.py',111),
  ('declaration -> VAR VARIABLE type ASSIGN expression','declaration',5,'p_declaration','parser.py',112),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',135),
  ('expression -> FLOAT','expression',1,'p_expression_float','parser.py',139),
  ('expression -> VARIABLE','expression',1,'p_expression_variable','parser.py',143),
  ('assignment -> VARIABLE ASSIGN expression','assignment',3,'p_assignment','parser.py',157),
  ('assignment -> VARIABLE ASIG expression','assignment',3,'p_assignment','parser.py',158),
  ('print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN','print_stmt',8,'p_print_stmt','parser.py',198),
  ('print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN','print_stmt',6,'p_print_stmt','parser.py',199),
  ('print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN','print_stmt',8,'p_print_stmt','parser.py',200),
  ('input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN','input_stmt',7,'p_input_stmt','parser.py',228),
  ('func_def -> func_header func_body','func_def',2,'p_func_def','parser.py',233),
  ('func_header -> FUNC VARIABLE LPAREN param_list RPAREN type','func_header',6,'p_func_header','parser.py',237),
  ('func_body -> LBRACE program RBRACE','func_body',3,'p_func_body','parser.py',246),
  ('return_stmt -> RETURN expression','return_stmt',2,'p_return_stmt','parser.py',252),
  ('func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body','func_with_map',10,'p_func_def_with_map','parser.py',258),
  ('func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE','func_no_params',8,'p_func_def_no_params','parser.py',263),
  ('func_no_params_void -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE','func_no_params_void',7,'p_func_def_no_params_void','parser.py',269),
  ('func_call -> VARIABLE LPAREN arg_list RPAREN','func_call',4,'p_func_call','parser.py',274),
  ('func_call -> VARIABLE LPAREN RPAREN','func_call',3,'p_func_call','parser.py',275),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',283),
  ('param_list -> param COMMA param_list','param_list',3,'p_param_list','parser.py',284),
  ('param -> VARIABLE type','param',2,'p_param','parser.py',293),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',307),
  ('arg_list -> expression COMMA arg_list','arg_list',3,'p_arg_list','parser.py',308),
  ('expression -> term','expression',1,'p_expression','parser.py',318),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',319),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',320),
  ('expression -> expression AND expression','expression',3,'p_expression','parser.py',321),
  ('expression -> expression OR expression','expression',3,'p_expression','parser.py',322),
  ('expression -> expression EQ expression','expression',3,'p_expression','parser.py',323),
  ('expression -> expression NE expression','expression',3,'p_expression','parser.py',324),
  ('expression -> expression LT expression','expression',3,'p_expression','parser.py',325),
  ('expression -> expression GT expression','expression',3,'p_expression','parser.py',326),
  ('expression -> expression LE expression','expression',3,'p_expression','parser.py',327),
  ('expression -> expression GE expression','expression',3,'p_expression','parser.py',328),
  ('term -> factor','term',1,'p_term','parser.py',358),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',359),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',360),
  ('term -> VARIABLE','term',1,'p_term_variable','parser.py',375),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',386),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',387),
  ('factor -> STRING','factor',1,'p_factor','parser.py',388),
  ('factor -> VARIABLE','factor',1,'p_factor','parser.py',389),
  ('factor -> TRUE','factor',1,'p_factor','parser.py',390),
  ('factor -> FALSE','factor',1,'p_factor','parser.py',391),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',392),
  ('factor -> make_expr','factor',1,'p_factor','parser.py',393),
  ('factor -> struct_instance','factor',1,'p_factor','parser.py',394),
  ('factor -> func_call','factor',1,'p_factor','parser.py',395),
  ('type -> INT_TYPE','type',1,'p_type','parser.py',419),
  ('type -> FLOAT64_TYPE','type',1,'p_type','parser.py',420),
  ('type -> STRING_TYPE','type',1,'p_type','parser.py',421),
  ('type -> BOOL_TYPE','type',1,'p_type','parser.py',422),
  ('if_stmt -> IF expression block','if_stmt',3,'p_if_stmt','parser.py',427),
  ('if_stmt -> IF expression block ELSE block','if_stmt',5,'p_if_stmt','parser.py',428),
  ('for_stmt -> FOR expression for_block','for_stmt',3,'p_for_stmt','parser.py',437),
  ('for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update for_block','for_stmt',7,'p_for_stmt','parser.py',438),
  ('for_block -> begin_loop block end_loop','for_block',3,'p_for_block','parser.py',443),
  ('begin_loop -> <empty>','begin_loop',0,'p_begin_lop','parser.py',447),
  ('end_loop -> <empty>','end_loop',0,'p_end_loop','parser.py',451),
  ('continue_stmt -> CONTINUE','continue_stmt',1,'p_continue_stmt','parser.py',456),
  ('for_update -> assignment','for_update',1,'p_for_update','parser.py',462),
  ('for_update -> increment_stmt','for_update',1,'p_for_update','parser.py',463),
  ('block -> LBRACE program RBRACE','block',3,'p_block','parser.py',468),
  ('struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE','struct_method',13,'p_struct_method','parser.py',473),
  ('struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE','struct_method',12,'p_struct_method','parser.py',474),
  ('struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE','struct_def',6,'p_struct_def','parser.py',479),
  ('struct_fields -> struct_field','struct_fields',1,'p_struct_fields','parser.py',484),
  ('struct_fields -> struct_field struct_fields','struct_fields',2,'p_struct_fields','parser.py',485),
  ('struct_field -> VARIABLE type','struct_field',2,'p_struct_field','parser.py',490),
  ('struct_field -> type','struct_field',1,'p_struct_field','parser.py',491),
  ('struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE','struct_instance',4,'p_struct_instance','parser.py',496),
  ('struct_fields_values -> field_value','struct_fields_values',1,'p_struct_fields_values','parser.py',500),
  ('struct_fields_values -> field_value COMMA struct_fields_values','struct_fields_values',3,'p_struct_fields_values','parser.py',501),
  ('field_value -> VARIABLE COLON expression','field_value',3,'p_field_value','parser.py',505),
  ('switch_stmt -> SWITCH expression LBRACE case_list RBRACE','switch_stmt',5,'p_switch_stmt','parser.py',509),
  ('switch_stmt -> SWITCH LBRACE case_list RBRACE','switch_stmt',4,'p_switch_stmt','parser.py',510),
  ('case_list -> case_clause','case_list',1,'p_case_list','parser.py',514),
  ('case_list -> case_clause case_list','case_list',2,'p_case_list','parser.py',515),
  ('case_clause -> CASE expression COLON program','case_clause',4,'p_case_clause','parser.py',519),
  ('case_clause -> DEFAULT COLON program','case_clause',3,'p_case_clause','parser.py',520),
  ('map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type','map_declaration',7,'p_map_declaration','parser.py',526),
  ('map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type','map_declaration',7,'p_map_declaration','parser.py',527),
  ('map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE','map_declaration',10,'p_map_declaration','parser.py',528),
  ('map_params -> map_param','map_params',1,'p_map_params','parser.py',532),
  ('map_params -> map_param COMMA map_params','map_params',3,'p_map_params','parser.py',533),
  ('map_param -> STRING COLON factor','map_param',3,'p_map_param','parser.py',537),
  ('make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN','make_stmt',10,'p_make_stmt','parser.py',542),
  ('make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN','make_stmt',8,'p_make_stmt','parser.py',543),
  ('make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN','make_expr',8,'p_make_expr','parser.py',547),
  ('make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN','make_expr',6,'p_make_expr','parser.py',548),
  ('map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE','map_declaration_values',10,'p_map_literal_declaration','parser.py',560),
  ('map_kv_pairs -> map_kv_pair','map_kv_pairs',1,'p_map_kv_pairs','parser.py',570),
  ('map_kv_pairs -> map_kv_pair COMMA map_kv_pairs','map_kv_pairs',3,'p_map_kv_pairs','parser.py',571),
  ('map_kv_pair -> STRING COLON expression','map_kv_pair',3,'p_map_kv_pair','parser.py',575),
  ('array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type','array_declaration',6,'p_array_declaration','parser.py',580),
  ('array_declaration -> VAR VARIABLE ASSIGN array_literal','array_declaration',4,'p_array_declaration','parser.py',581),
  ('array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE','array_literal',7,'p_array_literal','parser.py',605),
  ('array_values -> expression','array_values',1,'p_array_values','parser.py',621),
  ('array_values -> expression COMMA array_values','array_values',3,'p_array_values','parser.py',622),
  ('slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type','slice_declaration',5,'p_slice_declaration','parser.py',632),
  ('slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE','slice_declaration',8,'p_slice_declaration','parser.py',633),
  ('slice_values -> expression','slice_values',1,'p_slice_values','parser.py',637),
  ('slice_values -> expression COMMA slice_values','slice_values',3,'p_slice_values','parser.py',638),
  ('new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN','new_stmt',6,'p_new_stmt','parser.py',643),
  ('break_stmt -> BREAK','break_stmt',1,'p_break_stmt','parser.py',648),
  ('increment_stmt -> VARIABLE INCREMENT','increment_stmt',2,'p_increment_stmt','parser.py',655),
  ('increment_stmt -> VARIABLE DECREMENT','increment_stmt',2,'p_increment_stmt','parser.py',656),
]
