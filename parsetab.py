
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'startAMPER AND ASIG ASSIGN BOOL_TYPE BREAK CASE COLON COMMA CONTINUE DECREMENT DEFAULT DIVIDE DOT ELSE EQ FALSE FLOAT FLOAT64_TYPE FMT FOR FUNC GE GT IF IMPORT INCREMENT INT_TYPE LBRACE LBRACKET LE LPAREN LT MAIN MAKE MAP MINUS MOD NE NEW NOT NUMBER OR PACKAGE PLUS PRINT PRINTF PRINTLN RANGE RBRACE RBRACKET RETURN RPAREN SCANLN SEMICOLON STRING STRING_TYPE STRUCT SWITCH TIMES TRUE TYPE UINT VAR VARIABLEstart : PACKAGE MAIN import_stmt programimport_stmt : IMPORT LPAREN STRING RPAREN\n                    | IMPORT STRINGprogram : statement\n               | statement programstatement : declaration\n                 | assignment\n                 | print_stmt\n                 | input_stmt\n                 | continue_stmt\n                 | struct_method\n                 | func_def\n                 | func_no_params\n                 | func_call\n                 | if_stmt\n                 | for_stmt\n                 | struct_def\n                 | switch_stmt\n                 | map_declaration\n                 | map_declaration_values\n                 | array_declaration\n                 | array_literal\n                 | slice_declaration\n                 | make_stmt\n                 | new_stmt\n                 | break_stmt\n                 | increment_stmt\n                 | return_stmtdeclaration : VAR VARIABLE type \n                   | VAR VARIABLE type ASIG expression\n                   | VAR VARIABLE type ASSIGN expressionexpression : NUMBERexpression : FLOATexpression : VARIABLEassignment : VARIABLE ASSIGN expression\n                  | VARIABLE ASIG expressionprint_stmt : FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN\n                  | FMT DOT PRINTLN LPAREN expression RPARENinput_stmt : FMT DOT SCANLN LPAREN AMPER VARIABLE RPARENfunc_def : FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE\n                | FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACEreturn_stmt : RETURN expressionfunc_no_params : FUNC VARIABLE LPAREN RPAREN blockfunc_call : VARIABLE LPAREN arg_list RPAREN\n                 | VARIABLE LPAREN RPARENparam_list : param\n                  | param COMMA param_listparam : VARIABLE typearg_list : expression\n                | expression COMMA arg_listexpression : term\n                  | expression PLUS term\n                  | expression MINUS term\n                  | expression AND expression\n                  | expression OR expression\n                  | expression EQ expression\n                  | expression NE expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression LE expression\n                  | expression GE expressionterm : factor\n            | term TIMES factor\n            | term DIVIDE factorfactor : NUMBER\n              | FLOAT\n              | STRING\n              | VARIABLE\n              | LPAREN expression RPAREN\n              | make_expr\n              | struct_instancetype : INT_TYPE\n            | FLOAT64_TYPE\n            | STRING_TYPE\n            | BOOL_TYPEif_stmt : IF expression block\n               | IF expression block ELSE blockfor_stmt : FOR expression block\n                | FOR assignment SEMICOLON expression SEMICOLON for_update blockcontinue_stmt : CONTINUEfor_update : assignment\n                  | increment_stmtblock : LBRACE program RBRACEstruct_method : FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE\n                     | FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACEstruct_def : TYPE VARIABLE STRUCT LBRACE struct_fields RBRACEstruct_fields : struct_field\n                     | struct_field struct_fieldsstruct_field : VARIABLE type\n                    | typestruct_instance : VARIABLE LBRACE struct_fields_values RBRACEstruct_fields_values : field_value\n                            | field_value COMMA struct_fields_valuesfield_value : VARIABLE COLON expressionswitch_stmt : SWITCH expression LBRACE case_list RBRACE\n                   | SWITCH LBRACE case_list RBRACEcase_list : case_clause\n                 | case_clause case_listcase_clause : CASE expression COLON program\n                   | DEFAULT COLON programmap_declaration : VAR VARIABLE MAP LBRACKET type RBRACKET type\n                       | VARIABLE ASIG MAP LBRACKET type RBRACKET typemake_stmt : VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN\n                 | VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPARENmake_expr : MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN\n                 | MAKE LPAREN LBRACKET RBRACKET type RPARENmap_declaration_values : VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACEmap_kv_pairs : map_kv_pair\n                    | map_kv_pair COMMA map_kv_pairsmap_kv_pair : STRING COLON expressionarray_declaration : VAR VARIABLE LBRACKET NUMBER RBRACKET type\n                         | VAR VARIABLE ASSIGN array_literalarray_literal : LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACEarray_values : expression\n                    | expression COMMA array_valuesslice_declaration : VAR VARIABLE LBRACKET RBRACKET type\n                         | VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACEslice_values : expression\n                    | expression COMMA slice_valuesnew_stmt : VARIABLE ASIG NEW LPAREN VARIABLE RPARENbreak_stmt : BREAKincrement_stmt : VARIABLE INCREMENT\n                      | VARIABLE DECREMENT'
    
_lr_action_items = {'PACKAGE':([0,],[2,]),'$end':([1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,45,50,51,56,57,58,59,60,61,63,64,73,75,79,80,81,82,83,84,90,97,114,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,176,177,180,194,196,197,199,208,213,218,220,235,240,241,247,252,253,254,257,260,261,265,275,276,277,280,287,289,],[0,-1,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-80,-121,-5,-122,-123,-32,-33,-34,-51,-62,-67,-70,-71,-42,-29,-72,-73,-74,-75,-35,-36,-45,-76,-78,-112,-44,-52,-65,-66,-68,-53,-54,-55,-56,-57,-58,-59,-60,-61,-63,-64,-69,-96,-30,-31,-116,-43,-77,-83,-91,-95,-111,-120,-38,-86,-101,-102,-39,-106,-79,-113,-117,-104,-37,-41,-40,-105,-107,-103,-85,-84,]),'MAIN':([2,],[3,]),'IMPORT':([3,],[5,]),'VAR':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,44,50,51,56,57,58,59,60,61,63,64,73,75,79,80,81,82,83,84,90,97,108,114,124,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,174,176,177,180,194,196,197,199,208,209,213,218,220,224,235,240,241,247,249,252,253,254,257,260,261,265,275,276,277,280,281,286,287,289,],[31,31,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-80,-121,-3,-122,-123,-32,-33,-34,-51,-62,-67,-70,-71,-42,-29,-72,-73,-74,-75,-35,-36,-45,-76,31,-78,-2,-112,-44,-52,-65,-66,-68,-53,-54,-55,-56,-57,-58,-59,-60,-61,-63,-64,-69,-96,31,-30,-31,-116,-43,-77,-83,-91,-95,31,-111,-120,-38,31,-86,-101,-102,-39,31,-106,-79,-113,-117,-104,-37,-41,-40,-105,-107,-103,31,31,-85,-84,]),'VARIABLE':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,35,36,37,38,39,41,42,44,47,48,49,50,51,53,56,57,58,59,60,61,62,63,64,73,75,79,80,81,82,83,84,90,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,114,115,116,121,124,125,126,127,134,135,136,138,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,169,171,174,176,177,180,189,190,194,195,196,197,198,199,200,203,206,207,208,209,211,213,215,218,219,220,224,234,235,240,241,247,248,249,252,253,254,255,257,258,260,261,265,275,276,277,279,280,281,286,287,289,],[32,32,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,46,-80,54,58,68,69,58,-121,58,-3,58,58,58,-122,-123,95,-32,-33,-34,-51,-62,-67,58,-70,-71,-42,-29,-72,-73,-74,-75,-35,-36,-45,140,141,-76,149,149,58,58,58,58,58,58,58,58,32,160,149,149,-78,58,58,58,-2,58,58,-112,185,-44,58,58,-52,-65,-66,-68,-53,-54,-55,-56,-57,-58,-59,-60,-61,-63,-64,-69,204,-96,32,-30,-31,-116,221,222,-43,141,-77,-83,58,-91,160,233,204,-90,-95,32,58,-111,58,-120,58,-38,32,-89,-86,-101,-102,-39,141,32,-106,-79,-113,58,-117,58,-104,-37,-41,-40,-105,-107,58,-103,32,32,-85,-84,]),'FMT':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,44,50,51,56,57,58,59,60,61,63,64,73,75,79,80,81,82,83,84,90,97,108,114,124,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,174,176,177,180,194,196,197,199,208,209,213,218,220,224,235,240,241,247,249,252,253,254,257,260,261,265,275,276,277,280,281,286,287,289,],[33,33,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-80,-121,-3,-122,-123,-32,-33,-34,-51,-62,-67,-70,-71,-42,-29,-72,-73,-74,-75,-35,-36,-45,-76,33,-78,-2,-112,-44,-52,-65,-66,-68,-53,-54,-55,-56,-57,-58,-59,-60,-61,-63,-64,-69,-96,33,-30,-31,-116,-43,-77,-83,-91,-95,33,-111,-120,-38,33,-86,-101,-102,-39,33,-106,-79,-113,-117,-104,-37,-41,-40,-105,-107,-103,33,33,-85,-84,]),'CONTINUE':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,44,50,51,56,57,58,59,60,61,63,64,73,75,79,80,81,82,83,84,90,97,108,114,124,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,174,176,177,180,194,196,197,199,208,209,213,218,220,224,235,240,241,247,249,252,253,254,257,260,261,265,275,276,277,280,281,286,287,289,],[34,34,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-80,-121,-3,-122,-123,-32,-33,-34,-51,-62,-67,-70,-71,-42,-29,-72,-73,-74,-75,-35,-36,-45,-76,34,-78,-2,-112,-44,-52,-65,-66,-68,-53,-54,-55,-56,-57,-58,-59,-60,-61,-63,-64,-69,-96,34,-30,-31,-116,-43,-77,-83,-91,-95,34,-111,-120,-38,34,-86,-101,-102,-39,34,-106,-79,-113,-117,-104,-37,-41,-40,-105,-107,-103,34,34,-85,-84,]),'FUNC':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,44,50,51,56,57,58,59,60,61,63,64,73,75,79,80,81,82,83,84,90,97,108,114,124,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,174,176,177,180,194,196,197,199,208,209,213,218,220,224,235,240,241,247,249,252,253,254,257,260,261,265,275,276,277,280,281,286,287,289,],[35,35,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-80,-121,-3,-122,-123,-32,-33,-34,-51,-62,-67,-70,-71,-42,-29,-72,-73,-74,-75,-35,-36,-45,-76,35,-78,-2,-112,-44,-52,-65,-66,-68,-53,-54,-55,-56,-57,-58,-59,-60,-61,-63,-64,-69,-96,35,-30,-31,-116,-43,-77,-83,-91,-95,35,-111,-120,-38,35,-86,-101,-102,-39,35,-106,-79,-113,-117,-104,-37,-41,-40,-105,-107,-103,35,35,-85,-84,]),'IF':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,44,50,51,56,57,58,59,60,61,63,64,73,75,79,80,81,82,83,84,90,97,108,114,124,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,174,176,177,180,194,196,197,199,208,209,213,218,220,224,235,240,241,247,249,252,253,254,257,260,261,265,275,276,277,280,281,286,287,289,],[36,36,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-80,-121,-3,-122,-123,-32,-33,-34,-51,-62,-67,-70,-71,-42,-29,-72,-73,-74,-75,-35,-36,-45,-76,36,-78,-2,-112,-44,-52,-65,-66,-68,-53,-54,-55,-56,-57,-58,-59,-60,-61,-63,-64,-69,-96,36,-30,-31,-116,-43,-77,-83,-91,-95,36,-111,-120,-38,36,-86,-101,-102,-39,36,-106,-79,-113,-117,-104,-37,-41,-40,-105,-107,-103,36,36,-85,-84,]),'FOR':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,44,50,51,56,57,58,59,60,61,63,64,73,75,79,80,81,82,83,84,90,97,108,114,124,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,174,176,177,180,194,196,197,199,208,209,213,218,220,224,235,240,241,247,249,252,253,254,257,260,261,265,275,276,277,280,281,286,287,289,],[37,37,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-80,-121,-3,-122,-123,-32,-33,-34,-51,-62,-67,-70,-71,-42,-29,-72,-73,-74,-75,-35,-36,-45,-76,37,-78,-2,-112,-44,-52,-65,-66,-68,-53,-54,-55,-56,-57,-58,-59,-60,-61,-63,-64,-69,-96,37,-30,-31,-116,-43,-77,-83,-91,-95,37,-111,-120,-38,37,-86,-101,-102,-39,37,-106,-79,-113,-117,-104,-37,-41,-40,-105,-107,-103,37,37,-85,-84,]),'TYPE':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,44,50,51,56,57,58,59,60,61,63,64,73,75,79,80,81,82,83,84,90,97,108,114,124,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,174,176,177,180,194,196,197,199,208,209,213,218,220,224,235,240,241,247,249,252,253,254,257,260,261,265,275,276,277,280,281,286,287,289,],[38,38,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-80,-121,-3,-122,-123,-32,-33,-34,-51,-62,-67,-70,-71,-42,-29,-72,-73,-74,-75,-35,-36,-45,-76,38,-78,-2,-112,-44,-52,-65,-66,-68,-53,-54,-55,-56,-57,-58,-59,-60,-61,-63,-64,-69,-96,38,-30,-31,-116,-43,-77,-83,-91,-95,38,-111,-120,-38,38,-86,-101,-102,-39,38,-106,-79,-113,-117,-104,-37,-41,-40,-105,-107,-103,38,38,-85,-84,]),'SWITCH':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,44,50,51,56,57,58,59,60,61,63,64,73,75,79,80,81,82,83,84,90,97,108,114,124,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,174,176,177,180,194,196,197,199,208,209,213,218,220,224,235,240,241,247,249,252,253,254,257,260,261,265,275,276,277,280,281,286,287,289,],[39,39,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-80,-121,-3,-122,-123,-32,-33,-34,-51,-62,-67,-70,-71,-42,-29,-72,-73,-74,-75,-35,-36,-45,-76,39,-78,-2,-112,-44,-52,-65,-66,-68,-53,-54,-55,-56,-57,-58,-59,-60,-61,-63,-64,-69,-96,39,-30,-31,-116,-43,-77,-83,-91,-95,39,-111,-120,-38,39,-86,-101,-102,-39,39,-106,-79,-113,-117,-104,-37,-41,-40,-105,-107,-103,39,39,-85,-84,]),'LBRACKET':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,44,46,48,50,51,56,57,58,59,60,61,63,64,73,75,76,77,79,80,81,82,83,84,85,90,97,108,113,114,124,127,133,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,166,171,174,176,177,180,183,194,196,197,199,208,209,213,218,220,224,235,240,241,247,249,252,253,254,257,260,261,265,275,276,277,280,281,286,287,289,],[40,40,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-80,-121,-3,78,86,-122,-123,-32,-33,-34,-51,-62,-67,-70,-71,-42,-29,40,128,-72,-73,-74,-75,-35,-36,131,-45,-76,40,167,-78,-2,-112,184,-44,-52,-65,-66,-68,-53,-54,-55,-56,-57,-58,-59,-60,-61,-63,-64,-69,201,-96,40,-30,-31,-116,216,-43,-77,-83,-91,-95,40,-111,-120,-38,40,-86,-101,-102,-39,40,-106,-79,-113,-117,-104,-37,-41,-40,-105,-107,-103,40,40,-85,-84,]),'BREAK':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,44,50,51,56,57,58,59,60,61,63,64,73,75,79,80,81,82,83,84,90,97,108,114,124,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,174,176,177,180,194,196,197,199,208,209,213,218,220,224,235,240,241,247,249,252,253,254,257,260,261,265,275,276,277,280,281,286,287,289,],[41,41,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-80,-121,-3,-122,-123,-32,-33,-34,-51,-62,-67,-70,-71,-42,-29,-72,-73,-74,-75,-35,-36,-45,-76,41,-78,-2,-112,-44,-52,-65,-66,-68,-53,-54,-55,-56,-57,-58,-59,-60,-61,-63,-64,-69,-96,41,-30,-31,-116,-43,-77,-83,-91,-95,41,-111,-120,-38,41,-86,-101,-102,-39,41,-106,-79,-113,-117,-104,-37,-41,-40,-105,-107,-103,41,41,-85,-84,]),'RETURN':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,44,50,51,56,57,58,59,60,61,63,64,73,75,79,80,81,82,83,84,90,97,108,114,124,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,174,176,177,180,194,196,197,199,208,209,213,218,220,224,235,240,241,247,249,252,253,254,257,260,261,265,275,276,277,280,281,286,287,289,],[42,42,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-80,-121,-3,-122,-123,-32,-33,-34,-51,-62,-67,-70,-71,-42,-29,-72,-73,-74,-75,-35,-36,-45,-76,42,-78,-2,-112,-44,-52,-65,-66,-68,-53,-54,-55,-56,-57,-58,-59,-60,-61,-63,-64,-69,-96,42,-30,-31,-116,-43,-77,-83,-91,-95,42,-111,-120,-38,42,-86,-101,-102,-39,42,-106,-79,-113,-117,-104,-37,-41,-40,-105,-107,-103,42,42,-85,-84,]),'LPAREN':([5,32,35,36,37,39,42,47,48,49,54,62,65,87,88,92,93,94,98,99,100,101,102,103,104,105,106,107,110,111,115,116,121,125,126,136,138,198,211,215,219,222,255,258,279,],[43,49,53,62,62,62,62,62,62,62,96,62,113,133,134,137,138,139,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,248,62,62,62,]),'STRING':([5,36,37,39,42,43,47,48,49,62,98,99,100,101,102,103,104,105,106,107,110,111,115,116,121,125,126,136,137,138,198,211,215,219,255,256,258,278,279,],[44,61,61,61,61,74,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,187,61,61,61,61,61,61,270,61,270,61,]),'RBRACE':([7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,45,50,51,56,57,58,59,60,61,63,64,73,75,79,80,81,82,83,84,90,97,114,119,120,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,163,164,165,170,171,172,176,177,180,194,196,197,199,205,206,207,208,210,213,218,220,226,227,234,235,236,237,238,239,240,241,242,243,247,250,252,253,254,257,260,261,264,265,267,268,269,271,275,276,277,280,283,284,285,287,288,289,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-80,-121,-5,-122,-123,-32,-33,-34,-51,-62,-67,-70,-71,-42,-29,-72,-73,-74,-75,-35,-36,-45,-76,-78,171,-97,-112,-44,-52,-65,-66,-68,-53,-54,-55,-56,-57,-58,-59,-60,-61,197,199,-92,-63,-64,-69,208,-96,-98,-30,-31,-116,-43,-77,-83,-91,235,-87,-90,-95,-100,-111,-120,-38,-94,-93,-89,-86,-88,-99,254,-114,-101,-102,257,-118,-39,265,-106,-79,-113,-117,-104,-37,275,-41,-115,277,-108,-119,-40,-105,-107,-103,-109,-110,287,-85,289,-84,]),'CASE':([7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,45,50,51,56,57,58,59,60,61,63,64,71,73,75,79,80,81,82,83,84,90,97,114,118,120,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,176,177,180,194,196,197,199,208,210,213,218,220,235,237,240,241,247,252,253,254,257,260,261,265,275,276,277,280,287,289,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-80,-121,-5,-122,-123,-32,-33,-34,-51,-62,-67,-70,-71,121,-42,-29,-72,-73,-74,-75,-35,-36,-45,-76,-78,121,121,-112,-44,-52,-65,-66,-68,-53,-54,-55,-56,-57,-58,-59,-60,-61,-63,-64,-69,-96,-30,-31,-116,-43,-77,-83,-91,-95,-100,-111,-120,-38,-86,-99,-101,-102,-39,-106,-79,-113,-117,-104,-37,-41,-40,-105,-107,-103,-85,-84,]),'DEFAULT':([7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,45,50,51,56,57,58,59,60,61,63,64,71,73,75,79,80,81,82,83,84,90,97,114,118,120,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,176,177,180,194,196,197,199,208,210,213,218,220,235,237,240,241,247,252,253,254,257,260,261,265,275,276,277,280,287,289,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-80,-121,-5,-122,-123,-32,-33,-34,-51,-62,-67,-70,-71,122,-42,-29,-72,-73,-74,-75,-35,-36,-45,-76,-78,122,122,-112,-44,-52,-65,-66,-68,-53,-54,-55,-56,-57,-58,-59,-60,-61,-63,-64,-69,-96,-30,-31,-116,-43,-77,-83,-91,-95,-100,-111,-120,-38,-86,-99,-101,-102,-39,-106,-79,-113,-117,-104,-37,-41,-40,-105,-107,-103,-85,-84,]),'ASSIGN':([32,46,68,75,79,80,81,82,233,],[47,76,47,126,-72,-73,-74,-75,47,]),'ASIG':([32,68,75,79,80,81,82,233,],[48,116,125,-72,-73,-74,-75,116,]),'INCREMENT':([32,233,],[50,50,]),'DECREMENT':([32,233,],[51,51,]),'DOT':([33,],[52,]),'NUMBER':([36,37,39,40,42,47,48,49,62,78,98,99,100,101,102,103,104,105,106,107,110,111,115,116,121,125,126,136,138,198,211,215,219,255,258,279,],[56,56,56,72,56,56,56,56,56,129,147,147,56,56,56,56,56,56,56,56,147,147,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'FLOAT':([36,37,39,42,47,48,49,62,98,99,100,101,102,103,104,105,106,107,110,111,115,116,121,125,126,136,138,198,211,215,219,255,258,279,],[57,57,57,57,57,57,57,57,148,148,57,57,57,57,57,57,57,57,148,148,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'MAKE':([36,37,39,42,47,48,49,62,98,99,100,101,102,103,104,105,106,107,110,111,115,116,121,125,126,136,138,198,211,215,219,255,258,279,],[65,65,65,65,65,87,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'LBRACE':([39,50,51,55,56,57,58,59,60,61,63,64,66,68,70,79,80,81,82,83,84,117,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,175,182,193,199,223,230,231,232,241,252,273,276,282,],[71,-122,-123,108,-32,-33,109,-51,-62,-67,-70,-71,108,109,118,-72,-73,-74,-75,-35,-36,169,108,108,-52,-65,-66,109,-53,-54,-55,-56,-57,-58,-59,-60,-61,-63,-64,-69,211,215,224,-91,249,-81,108,-82,256,-106,281,-105,286,]),'MAP':([46,48,113,133,],[77,85,166,183,]),'INT_TYPE':([46,79,80,81,82,123,128,130,131,132,141,143,169,179,192,201,202,204,206,207,212,214,216,217,234,251,259,262,274,],[79,-72,-73,-74,-75,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-90,79,79,79,79,-89,79,79,79,79,]),'FLOAT64_TYPE':([46,79,80,81,82,123,128,130,131,132,141,143,169,179,192,201,202,204,206,207,212,214,216,217,234,251,259,262,274,],[80,-72,-73,-74,-75,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-90,80,80,80,80,-89,80,80,80,80,]),'STRING_TYPE':([46,79,80,81,82,123,128,130,131,132,141,143,169,179,192,201,202,204,206,207,212,214,216,217,234,251,259,262,274,],[81,-72,-73,-74,-75,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-90,81,81,81,81,-89,81,81,81,81,]),'BOOL_TYPE':([46,79,80,81,82,123,128,130,131,132,141,143,169,179,192,201,202,204,206,207,212,214,216,217,234,251,259,262,274,],[82,-72,-73,-74,-75,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-90,82,82,82,82,-89,82,82,82,82,]),'NEW':([48,],[88,]),'RPAREN':([49,56,57,58,59,60,61,63,64,74,79,80,81,82,89,91,96,112,140,142,144,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,185,186,188,191,199,221,225,229,245,246,248,252,263,266,272,276,],[90,-32,-33,-34,-51,-62,-67,-70,-71,124,-72,-73,-74,-75,135,-49,143,165,190,192,-46,-52,-65,-66,-68,-53,-54,-55,-56,-57,-58,-59,-60,-61,-63,-64,-69,218,-50,220,-48,-91,247,-47,252,260,261,262,-106,274,276,280,-105,]),'PRINTF':([52,],[92,]),'PRINTLN':([52,],[93,]),'SCANLN':([52,],[94,]),'PLUS':([55,56,57,58,59,60,61,63,64,66,68,70,73,83,84,91,112,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,168,173,176,177,188,199,226,239,243,246,252,260,276,280,284,],[98,-32,-33,-34,-51,-62,-67,-70,-71,98,-34,98,98,98,98,98,98,-52,-65,-66,-68,-53,98,98,98,98,98,98,98,98,-63,-64,-69,98,98,98,98,98,-91,98,98,98,98,-106,-106,-105,-105,98,]),'MINUS':([55,56,57,58,59,60,61,63,64,66,68,70,73,83,84,91,112,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,168,173,176,177,188,199,226,239,243,246,252,260,276,280,284,],[99,-32,-33,-34,-51,-62,-67,-70,-71,99,-34,99,99,99,99,99,99,-52,-65,-66,-68,-53,99,99,99,99,99,99,99,99,-63,-64,-69,99,99,99,99,99,-91,99,99,99,99,-106,-106,-105,-105,99,]),'AND':([55,56,57,58,59,60,61,63,64,66,68,70,73,83,84,91,112,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,168,173,176,177,188,199,226,239,243,246,252,260,276,280,284,],[100,-32,-33,-34,-51,-62,-67,-70,-71,100,-34,100,100,100,100,100,100,-52,-65,-66,-68,-53,100,100,100,100,100,100,100,100,-63,-64,-69,100,100,100,100,100,-91,100,100,100,100,-106,-106,-105,-105,100,]),'OR':([55,56,57,58,59,60,61,63,64,66,68,70,73,83,84,91,112,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,168,173,176,177,188,199,226,239,243,246,252,260,276,280,284,],[101,-32,-33,-34,-51,-62,-67,-70,-71,101,-34,101,101,101,101,101,101,-52,-65,-66,-68,-53,101,101,101,101,101,101,101,101,-63,-64,-69,101,101,101,101,101,-91,101,101,101,101,-106,-106,-105,-105,101,]),'EQ':([55,56,57,58,59,60,61,63,64,66,68,70,73,83,84,91,112,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,168,173,176,177,188,199,226,239,243,246,252,260,276,280,284,],[102,-32,-33,-34,-51,-62,-67,-70,-71,102,-34,102,102,102,102,102,102,-52,-65,-66,-68,-53,102,102,102,102,102,102,102,102,-63,-64,-69,102,102,102,102,102,-91,102,102,102,102,-106,-106,-105,-105,102,]),'NE':([55,56,57,58,59,60,61,63,64,66,68,70,73,83,84,91,112,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,168,173,176,177,188,199,226,239,243,246,252,260,276,280,284,],[103,-32,-33,-34,-51,-62,-67,-70,-71,103,-34,103,103,103,103,103,103,-52,-65,-66,-68,-53,103,103,103,103,103,103,103,103,-63,-64,-69,103,103,103,103,103,-91,103,103,103,103,-106,-106,-105,-105,103,]),'LT':([55,56,57,58,59,60,61,63,64,66,68,70,73,83,84,91,112,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,168,173,176,177,188,199,226,239,243,246,252,260,276,280,284,],[104,-32,-33,-34,-51,-62,-67,-70,-71,104,-34,104,104,104,104,104,104,-52,-65,-66,-68,-53,104,104,104,104,104,104,104,104,-63,-64,-69,104,104,104,104,104,-91,104,104,104,104,-106,-106,-105,-105,104,]),'GT':([55,56,57,58,59,60,61,63,64,66,68,70,73,83,84,91,112,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,168,173,176,177,188,199,226,239,243,246,252,260,276,280,284,],[105,-32,-33,-34,-51,-62,-67,-70,-71,105,-34,105,105,105,105,105,105,-52,-65,-66,-68,-53,105,105,105,105,105,105,105,105,-63,-64,-69,105,105,105,105,105,-91,105,105,105,105,-106,-106,-105,-105,105,]),'LE':([55,56,57,58,59,60,61,63,64,66,68,70,73,83,84,91,112,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,168,173,176,177,188,199,226,239,243,246,252,260,276,280,284,],[106,-32,-33,-34,-51,-62,-67,-70,-71,106,-34,106,106,106,106,106,106,-52,-65,-66,-68,-53,106,106,106,106,106,106,106,106,-63,-64,-69,106,106,106,106,106,-91,106,106,106,106,-106,-106,-105,-105,106,]),'GE':([55,56,57,58,59,60,61,63,64,66,68,70,73,83,84,91,112,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,168,173,176,177,188,199,226,239,243,246,252,260,276,280,284,],[107,-32,-33,-34,-51,-62,-67,-70,-71,107,-34,107,107,107,107,107,107,-52,-65,-66,-68,-53,107,107,107,107,107,107,107,107,-63,-64,-69,107,107,107,107,107,-91,107,107,107,107,-106,-106,-105,-105,107,]),'SEMICOLON':([56,57,58,59,60,61,63,64,67,83,84,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,168,199,252,276,],[-32,-33,-34,-51,-62,-67,-70,-71,115,-35,-36,-52,-65,-66,-68,-53,-54,-55,-56,-57,-58,-59,-60,-61,-63,-64,-69,203,-91,-106,-105,]),'COMMA':([56,57,58,59,60,61,63,64,79,80,81,82,91,144,146,147,148,149,150,151,152,153,154,155,156,157,158,162,163,164,165,187,191,199,226,239,243,252,269,276,284,],[-32,-33,-34,-51,-62,-67,-70,-71,-72,-73,-74,-75,136,195,-52,-65,-66,-68,-53,-54,-55,-56,-57,-58,-59,-60,-61,200,-63,-64,-69,219,-48,-91,-94,255,258,-106,278,-105,-110,]),'COLON':([56,57,58,59,60,61,63,64,122,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,164,165,173,199,252,270,276,],[-32,-33,-34,-51,-62,-67,-70,-71,174,-52,-65,-66,-68,-53,-54,-55,-56,-57,-58,-59,-60,-61,198,-63,-64,-69,209,-91,-106,279,-105,]),'TIMES':([56,57,58,59,60,61,63,64,68,146,147,148,149,150,163,164,165,199,252,260,276,280,],[-65,-66,-68,110,-62,-67,-70,-71,-68,110,-65,-66,-68,110,-63,-64,-69,-91,-106,-106,-105,-105,]),'DIVIDE':([56,57,58,59,60,61,63,64,68,146,147,148,149,150,163,164,165,199,252,260,276,280,],[-65,-66,-68,111,-62,-67,-70,-71,-68,111,-65,-66,-68,111,-63,-64,-69,-91,-106,-106,-105,-105,]),'STRUCT':([69,],[117,]),'RBRACKET':([72,78,79,80,81,82,86,129,167,178,181,184,228,244,],[123,130,-72,-73,-74,-75,132,179,202,212,214,217,251,259,]),'ELSE':([97,197,],[145,-83,]),'AMPER':([139,],[189,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'import_stmt':([3,],[4,]),'program':([4,7,108,174,209,224,249,281,286,],[6,45,159,210,237,250,264,285,288,]),'statement':([4,7,108,174,209,224,249,281,286,],[7,7,7,7,7,7,7,7,7,]),'declaration':([4,7,108,174,209,224,249,281,286,],[8,8,8,8,8,8,8,8,8,]),'assignment':([4,7,37,108,174,203,209,224,249,281,286,],[9,9,67,9,9,230,9,9,9,9,9,]),'print_stmt':([4,7,108,174,209,224,249,281,286,],[10,10,10,10,10,10,10,10,10,]),'input_stmt':([4,7,108,174,209,224,249,281,286,],[11,11,11,11,11,11,11,11,11,]),'continue_stmt':([4,7,108,174,209,224,249,281,286,],[12,12,12,12,12,12,12,12,12,]),'struct_method':([4,7,108,174,209,224,249,281,286,],[13,13,13,13,13,13,13,13,13,]),'func_def':([4,7,108,174,209,224,249,281,286,],[14,14,14,14,14,14,14,14,14,]),'func_no_params':([4,7,108,174,209,224,249,281,286,],[15,15,15,15,15,15,15,15,15,]),'func_call':([4,7,108,174,209,224,249,281,286,],[16,16,16,16,16,16,16,16,16,]),'if_stmt':([4,7,108,174,209,224,249,281,286,],[17,17,17,17,17,17,17,17,17,]),'for_stmt':([4,7,108,174,209,224,249,281,286,],[18,18,18,18,18,18,18,18,18,]),'struct_def':([4,7,108,174,209,224,249,281,286,],[19,19,19,19,19,19,19,19,19,]),'switch_stmt':([4,7,108,174,209,224,249,281,286,],[20,20,20,20,20,20,20,20,20,]),'map_declaration':([4,7,108,174,209,224,249,281,286,],[21,21,21,21,21,21,21,21,21,]),'map_declaration_values':([4,7,108,174,209,224,249,281,286,],[22,22,22,22,22,22,22,22,22,]),'array_declaration':([4,7,108,174,209,224,249,281,286,],[23,23,23,23,23,23,23,23,23,]),'array_literal':([4,7,76,108,174,209,224,249,281,286,],[24,24,127,24,24,24,24,24,24,24,]),'slice_declaration':([4,7,108,174,209,224,249,281,286,],[25,25,25,25,25,25,25,25,25,]),'make_stmt':([4,7,108,174,209,224,249,281,286,],[26,26,26,26,26,26,26,26,26,]),'new_stmt':([4,7,108,174,209,224,249,281,286,],[27,27,27,27,27,27,27,27,27,]),'break_stmt':([4,7,108,174,209,224,249,281,286,],[28,28,28,28,28,28,28,28,28,]),'increment_stmt':([4,7,108,174,203,209,224,249,281,286,],[29,29,29,29,232,29,29,29,29,29,]),'return_stmt':([4,7,108,174,209,224,249,281,286,],[30,30,30,30,30,30,30,30,30,]),'expression':([36,37,39,42,47,48,49,62,100,101,102,103,104,105,106,107,115,116,121,125,126,136,138,198,211,215,219,255,258,279,],[55,66,70,73,83,84,91,112,151,152,153,154,155,156,157,158,168,84,173,176,177,91,188,226,239,243,246,239,243,284,]),'term':([36,37,39,42,47,48,49,62,98,99,100,101,102,103,104,105,106,107,115,116,121,125,126,136,138,198,211,215,219,255,258,279,],[59,59,59,59,59,59,59,59,146,150,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'factor':([36,37,39,42,47,48,49,62,98,99,100,101,102,103,104,105,106,107,110,111,115,116,121,125,126,136,138,198,211,215,219,255,258,279,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,163,164,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'make_expr':([36,37,39,42,47,48,49,62,98,99,100,101,102,103,104,105,106,107,110,111,115,116,121,125,126,136,138,198,211,215,219,255,258,279,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'struct_instance':([36,37,39,42,47,48,49,62,98,99,100,101,102,103,104,105,106,107,110,111,115,116,121,125,126,136,138,198,211,215,219,255,258,279,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'type':([46,123,128,130,131,132,141,143,169,179,192,201,202,204,206,212,214,216,217,251,259,262,274,],[75,175,178,180,181,182,191,193,207,213,223,228,229,234,207,240,241,244,245,266,272,273,282,]),'arg_list':([49,136,],[89,186,]),'block':([55,66,143,145,231,],[97,114,194,196,253,]),'case_list':([71,118,120,],[119,170,172,]),'case_clause':([71,118,120,],[120,120,120,]),'param_list':([96,195,248,],[142,225,263,]),'param':([96,195,248,],[144,144,144,]),'struct_fields_values':([109,200,],[161,227,]),'field_value':([109,200,],[162,162,]),'struct_fields':([169,206,],[205,236,]),'struct_field':([169,206,],[206,206,]),'for_update':([203,],[231,]),'array_values':([211,255,],[238,267,]),'slice_values':([215,258,],[242,271,]),'map_kv_pairs':([256,278,],[268,283,]),'map_kv_pair':([256,278,],[269,269,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> PACKAGE MAIN import_stmt program','start',4,'p_start','parser.py',65),
  ('import_stmt -> IMPORT LPAREN STRING RPAREN','import_stmt',4,'p_import_function','parser.py',70),
  ('import_stmt -> IMPORT STRING','import_stmt',2,'p_import_function','parser.py',71),
  ('program -> statement','program',1,'p_program','parser.py',75),
  ('program -> statement program','program',2,'p_program','parser.py',76),
  ('statement -> declaration','statement',1,'p_statement','parser.py',81),
  ('statement -> assignment','statement',1,'p_statement','parser.py',82),
  ('statement -> print_stmt','statement',1,'p_statement','parser.py',83),
  ('statement -> input_stmt','statement',1,'p_statement','parser.py',84),
  ('statement -> continue_stmt','statement',1,'p_statement','parser.py',85),
  ('statement -> struct_method','statement',1,'p_statement','parser.py',86),
  ('statement -> func_def','statement',1,'p_statement','parser.py',87),
  ('statement -> func_no_params','statement',1,'p_statement','parser.py',88),
  ('statement -> func_call','statement',1,'p_statement','parser.py',89),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',90),
  ('statement -> for_stmt','statement',1,'p_statement','parser.py',91),
  ('statement -> struct_def','statement',1,'p_statement','parser.py',92),
  ('statement -> switch_stmt','statement',1,'p_statement','parser.py',93),
  ('statement -> map_declaration','statement',1,'p_statement','parser.py',94),
  ('statement -> map_declaration_values','statement',1,'p_statement','parser.py',95),
  ('statement -> array_declaration','statement',1,'p_statement','parser.py',96),
  ('statement -> array_literal','statement',1,'p_statement','parser.py',97),
  ('statement -> slice_declaration','statement',1,'p_statement','parser.py',98),
  ('statement -> make_stmt','statement',1,'p_statement','parser.py',99),
  ('statement -> new_stmt','statement',1,'p_statement','parser.py',100),
  ('statement -> break_stmt','statement',1,'p_statement','parser.py',101),
  ('statement -> increment_stmt','statement',1,'p_statement','parser.py',102),
  ('statement -> return_stmt','statement',1,'p_statement','parser.py',103),
  ('declaration -> VAR VARIABLE type','declaration',3,'p_declaration','parser.py',109),
  ('declaration -> VAR VARIABLE type ASIG expression','declaration',5,'p_declaration','parser.py',110),
  ('declaration -> VAR VARIABLE type ASSIGN expression','declaration',5,'p_declaration','parser.py',111),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',134),
  ('expression -> FLOAT','expression',1,'p_expression_float','parser.py',138),
  ('expression -> VARIABLE','expression',1,'p_expression_variable','parser.py',142),
  ('assignment -> VARIABLE ASSIGN expression','assignment',3,'p_assignment','parser.py',154),
  ('assignment -> VARIABLE ASIG expression','assignment',3,'p_assignment','parser.py',155),
  ('print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN','print_stmt',8,'p_print_stmt','parser.py',172),
  ('print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN','print_stmt',6,'p_print_stmt','parser.py',173),
  ('input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN','input_stmt',7,'p_input_stmt','parser.py',178),
  ('func_def -> FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE','func_def',9,'p_func_def','parser.py',183),
  ('func_def -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE','func_def',8,'p_func_def','parser.py',184),
  ('return_stmt -> RETURN expression','return_stmt',2,'p_return_stmt','parser.py',192),
  ('func_no_params -> FUNC VARIABLE LPAREN RPAREN block','func_no_params',5,'p_func_def_no_params','parser.py',208),
  ('func_call -> VARIABLE LPAREN arg_list RPAREN','func_call',4,'p_func_call','parser.py',214),
  ('func_call -> VARIABLE LPAREN RPAREN','func_call',3,'p_func_call','parser.py',215),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',247),
  ('param_list -> param COMMA param_list','param_list',3,'p_param_list','parser.py',248),
  ('param -> VARIABLE type','param',2,'p_param','parser.py',252),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',263),
  ('arg_list -> expression COMMA arg_list','arg_list',3,'p_arg_list','parser.py',264),
  ('expression -> term','expression',1,'p_expression','parser.py',274),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',275),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',276),
  ('expression -> expression AND expression','expression',3,'p_expression','parser.py',277),
  ('expression -> expression OR expression','expression',3,'p_expression','parser.py',278),
  ('expression -> expression EQ expression','expression',3,'p_expression','parser.py',279),
  ('expression -> expression NE expression','expression',3,'p_expression','parser.py',280),
  ('expression -> expression LT expression','expression',3,'p_expression','parser.py',281),
  ('expression -> expression GT expression','expression',3,'p_expression','parser.py',282),
  ('expression -> expression LE expression','expression',3,'p_expression','parser.py',283),
  ('expression -> expression GE expression','expression',3,'p_expression','parser.py',284),
  ('term -> factor','term',1,'p_term','parser.py',309),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',310),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',311),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',327),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',328),
  ('factor -> STRING','factor',1,'p_factor','parser.py',329),
  ('factor -> VARIABLE','factor',1,'p_factor','parser.py',330),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',331),
  ('factor -> make_expr','factor',1,'p_factor','parser.py',332),
  ('factor -> struct_instance','factor',1,'p_factor','parser.py',333),
  ('type -> INT_TYPE','type',1,'p_type','parser.py',352),
  ('type -> FLOAT64_TYPE','type',1,'p_type','parser.py',353),
  ('type -> STRING_TYPE','type',1,'p_type','parser.py',354),
  ('type -> BOOL_TYPE','type',1,'p_type','parser.py',355),
  ('if_stmt -> IF expression block','if_stmt',3,'p_if_stmt','parser.py',360),
  ('if_stmt -> IF expression block ELSE block','if_stmt',5,'p_if_stmt','parser.py',361),
  ('for_stmt -> FOR expression block','for_stmt',3,'p_for_stmt','parser.py',370),
  ('for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block','for_stmt',7,'p_for_stmt','parser.py',371),
  ('continue_stmt -> CONTINUE','continue_stmt',1,'p_continue_stmt','parser.py',377),
  ('for_update -> assignment','for_update',1,'p_for_update','parser.py',383),
  ('for_update -> increment_stmt','for_update',1,'p_for_update','parser.py',384),
  ('block -> LBRACE program RBRACE','block',3,'p_block','parser.py',389),
  ('struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE','struct_method',13,'p_struct_method','parser.py',394),
  ('struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE','struct_method',12,'p_struct_method','parser.py',395),
  ('struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE','struct_def',6,'p_struct_def','parser.py',400),
  ('struct_fields -> struct_field','struct_fields',1,'p_struct_fields','parser.py',405),
  ('struct_fields -> struct_field struct_fields','struct_fields',2,'p_struct_fields','parser.py',406),
  ('struct_field -> VARIABLE type','struct_field',2,'p_struct_field','parser.py',411),
  ('struct_field -> type','struct_field',1,'p_struct_field','parser.py',412),
  ('struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE','struct_instance',4,'p_struct_instance','parser.py',417),
  ('struct_fields_values -> field_value','struct_fields_values',1,'p_struct_fields_values','parser.py',421),
  ('struct_fields_values -> field_value COMMA struct_fields_values','struct_fields_values',3,'p_struct_fields_values','parser.py',422),
  ('field_value -> VARIABLE COLON expression','field_value',3,'p_field_value','parser.py',426),
  ('switch_stmt -> SWITCH expression LBRACE case_list RBRACE','switch_stmt',5,'p_switch_stmt','parser.py',430),
  ('switch_stmt -> SWITCH LBRACE case_list RBRACE','switch_stmt',4,'p_switch_stmt','parser.py',431),
  ('case_list -> case_clause','case_list',1,'p_case_list','parser.py',435),
  ('case_list -> case_clause case_list','case_list',2,'p_case_list','parser.py',436),
  ('case_clause -> CASE expression COLON program','case_clause',4,'p_case_clause','parser.py',440),
  ('case_clause -> DEFAULT COLON program','case_clause',3,'p_case_clause','parser.py',441),
  ('map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type','map_declaration',7,'p_map_declaration','parser.py',447),
  ('map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type','map_declaration',7,'p_map_declaration','parser.py',448),
  ('make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN','make_stmt',10,'p_make_stmt','parser.py',453),
  ('make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN','make_stmt',8,'p_make_stmt','parser.py',454),
  ('make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN','make_expr',8,'p_make_expr','parser.py',458),
  ('make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN','make_expr',6,'p_make_expr','parser.py',459),
  ('map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE','map_declaration_values',10,'p_map_literal_declaration','parser.py',465),
  ('map_kv_pairs -> map_kv_pair','map_kv_pairs',1,'p_map_kv_pairs','parser.py',469),
  ('map_kv_pairs -> map_kv_pair COMMA map_kv_pairs','map_kv_pairs',3,'p_map_kv_pairs','parser.py',470),
  ('map_kv_pair -> STRING COLON expression','map_kv_pair',3,'p_map_kv_pair','parser.py',474),
  ('array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type','array_declaration',6,'p_array_declaration','parser.py',479),
  ('array_declaration -> VAR VARIABLE ASSIGN array_literal','array_declaration',4,'p_array_declaration','parser.py',480),
  ('array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE','array_literal',7,'p_array_literal','parser.py',504),
  ('array_values -> expression','array_values',1,'p_array_values','parser.py',520),
  ('array_values -> expression COMMA array_values','array_values',3,'p_array_values','parser.py',521),
  ('slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type','slice_declaration',5,'p_slice_declaration','parser.py',531),
  ('slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE','slice_declaration',8,'p_slice_declaration','parser.py',532),
  ('slice_values -> expression','slice_values',1,'p_slice_values','parser.py',536),
  ('slice_values -> expression COMMA slice_values','slice_values',3,'p_slice_values','parser.py',537),
  ('new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN','new_stmt',6,'p_new_stmt','parser.py',542),
  ('break_stmt -> BREAK','break_stmt',1,'p_break_stmt','parser.py',547),
  ('increment_stmt -> VARIABLE INCREMENT','increment_stmt',2,'p_increment_stmt','parser.py',554),
  ('increment_stmt -> VARIABLE DECREMENT','increment_stmt',2,'p_increment_stmt','parser.py',555),
]
