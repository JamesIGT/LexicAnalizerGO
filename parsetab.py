
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'startAMPER AND ASIG ASSIGN BOOL_TYPE BREAK CASE COLON COMMA CONTINUE DECREMENT DEFAULT DIVIDE DOT ELSE EQ FALSE FLOAT FLOAT64_TYPE FMT FOR FUNC GE GT IF IMPORT INCREMENT INT_TYPE LBRACE LBRACKET LE LPAREN LT MAIN MAKE MAP MINUS MOD NE NEW NOT NUMBER OR PACKAGE PLUS PRINT PRINTF PRINTLN RANGE RBRACE RBRACKET RETURN RPAREN SCANLN SEMICOLON STRING STRING_TYPE STRUCT SWITCH TIMES TRUE TYPE UINT VAR VARIABLEstart : PACKAGE MAIN import_stmt programimport_stmt : IMPORT LPAREN STRING RPAREN\n                    | IMPORT STRINGprogram : statement\n               | statement programstatement : declaration\n                 | assignment\n                 | print_stmt\n                 | input_stmt\n                 | continue_stmt\n                 | struct_method\n                 | func_def\n                 | func_no_params\n                 | func_call\n                 | if_stmt\n                 | for_stmt\n                 | struct_def\n                 | switch_stmt\n                 | map_declaration\n                 | map_declaration_values\n                 | array_declaration\n                 | array_literal\n                 | slice_declaration\n                 | make_stmt\n                 | new_stmt\n                 | break_stmt\n                 | increment_stmt\n                 | return_stmtdeclaration : VAR VARIABLE type \n                   | VAR VARIABLE type ASIG expression\n                   | VAR VARIABLE type ASSIGN expressionexpression : NUMBERexpression : FLOATexpression : VARIABLEassignment : VARIABLE ASSIGN expression\n                  | VARIABLE ASIG expressionprint_stmt : FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN\n                  | FMT DOT PRINTLN LPAREN expression RPARENinput_stmt : FMT DOT SCANLN LPAREN AMPER VARIABLE RPARENfunc_def : FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACEreturn_stmt : RETURN expressionfunc_no_params : FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACEfunc_call : VARIABLE LPAREN arg_list RPAREN\n                 | VARIABLE LPAREN RPARENparam_list : param\n                  | param COMMA param_listparam : VARIABLE typearg_list : expression\n                | expression COMMA arg_listexpression : term\n                  | expression PLUS term\n                  | expression MINUS term\n                  | expression AND expression\n                  | expression OR expression\n                  | expression EQ expression\n                  | expression NE expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression LE expression\n                  | expression GE expressionterm : factor\n            | term TIMES factor\n            | term DIVIDE factorfactor : NUMBER\n              | FLOAT\n              | STRING\n              | VARIABLE\n              | LPAREN expression RPAREN\n              | make_expr\n              | struct_instancetype : INT_TYPE\n            | FLOAT64_TYPE\n            | STRING_TYPE\n            | BOOL_TYPEif_stmt : IF expression block\n               | IF expression block ELSE blockfor_stmt : FOR expression block\n                | FOR assignment SEMICOLON expression SEMICOLON for_update blockcontinue_stmt : CONTINUEfor_update : assignment\n                  | increment_stmtblock : LBRACE program RBRACEstruct_method : FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE\n                     | FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACEstruct_def : TYPE VARIABLE STRUCT LBRACE struct_fields RBRACEstruct_fields : struct_field\n                     | struct_field struct_fieldsstruct_field : VARIABLE type\n                    | typestruct_instance : VARIABLE LBRACE struct_fields_values RBRACEstruct_fields_values : field_value\n                            | field_value COMMA struct_fields_valuesfield_value : VARIABLE COLON expressionswitch_stmt : SWITCH expression LBRACE case_list RBRACE\n                   | SWITCH LBRACE case_list RBRACEcase_list : case_clause\n                 | case_clause case_listcase_clause : CASE expression COLON program\n                   | DEFAULT COLON programmap_declaration : VAR VARIABLE MAP LBRACKET type RBRACKET type\n                       | VARIABLE ASIG MAP LBRACKET type RBRACKET typemake_stmt : VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN\n                 | VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPARENmake_expr : MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN\n                 | MAKE LPAREN LBRACKET RBRACKET type RPARENmap_declaration_values : VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACEmap_kv_pairs : map_kv_pair\n                    | map_kv_pair COMMA map_kv_pairsmap_kv_pair : STRING COLON expressionarray_declaration : VAR VARIABLE LBRACKET NUMBER RBRACKET type\n                         | VAR VARIABLE ASSIGN array_literalarray_literal : LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACEarray_values : expression\n                    | expression COMMA array_valuesslice_declaration : VAR VARIABLE LBRACKET RBRACKET type\n                         | VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACEslice_values : expression\n                    | expression COMMA slice_valuesnew_stmt : VARIABLE ASIG NEW LPAREN VARIABLE RPARENbreak_stmt : BREAKincrement_stmt : VARIABLE INCREMENT\n                      | VARIABLE DECREMENT'
    
_lr_action_items = {'PACKAGE':([0,],[2,]),'$end':([1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,45,50,51,56,57,58,59,60,61,63,64,73,75,79,80,81,82,83,84,90,97,114,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,176,177,180,195,196,198,207,212,217,219,234,239,240,246,251,252,253,256,259,260,264,274,275,276,279,286,288,],[0,-1,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-79,-120,-5,-121,-122,-32,-33,-34,-50,-61,-66,-69,-70,-41,-29,-71,-72,-73,-74,-35,-36,-44,-75,-77,-111,-43,-51,-64,-65,-67,-52,-53,-54,-55,-56,-57,-58,-59,-60,-62,-63,-68,-95,-30,-31,-115,-76,-82,-90,-94,-110,-119,-38,-85,-100,-101,-39,-105,-78,-112,-116,-103,-37,-42,-40,-104,-106,-102,-84,-83,]),'MAIN':([2,],[3,]),'IMPORT':([3,],[5,]),'VAR':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,44,50,51,56,57,58,59,60,61,63,64,73,75,79,80,81,82,83,84,90,97,108,114,124,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,174,176,177,180,195,196,198,207,208,212,217,219,223,234,239,240,246,248,251,252,253,256,259,260,264,274,275,276,279,280,285,286,288,],[31,31,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-79,-120,-3,-121,-122,-32,-33,-34,-50,-61,-66,-69,-70,-41,-29,-71,-72,-73,-74,-35,-36,-44,-75,31,-77,-2,-111,-43,-51,-64,-65,-67,-52,-53,-54,-55,-56,-57,-58,-59,-60,-62,-63,-68,-95,31,-30,-31,-115,-76,-82,-90,-94,31,-110,-119,-38,31,-85,-100,-101,-39,31,-105,-78,-112,-116,-103,-37,-42,-40,-104,-106,-102,31,31,-84,-83,]),'VARIABLE':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,35,36,37,38,39,41,42,44,47,48,49,50,51,53,56,57,58,59,60,61,62,63,64,73,75,79,80,81,82,83,84,90,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,114,115,116,121,124,125,126,127,134,135,136,138,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,169,171,174,176,177,180,189,190,194,195,196,197,198,199,202,205,206,207,208,210,212,214,217,218,219,223,233,234,239,240,246,247,248,251,252,253,254,256,257,259,260,264,274,275,276,278,279,280,285,286,288,],[32,32,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,46,-79,54,58,68,69,58,-120,58,-3,58,58,58,-121,-122,95,-32,-33,-34,-50,-61,-66,58,-69,-70,-41,-29,-71,-72,-73,-74,-35,-36,-44,140,141,-75,149,149,58,58,58,58,58,58,58,58,32,160,149,149,-77,58,58,58,-2,58,58,-111,185,-43,58,58,-51,-64,-65,-67,-52,-53,-54,-55,-56,-57,-58,-59,-60,-62,-63,-68,203,-95,32,-30,-31,-115,220,221,141,-76,-82,58,-90,160,232,203,-89,-94,32,58,-110,58,-119,58,-38,32,-88,-85,-100,-101,-39,141,32,-105,-78,-112,58,-116,58,-103,-37,-42,-40,-104,-106,58,-102,32,32,-84,-83,]),'FMT':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,44,50,51,56,57,58,59,60,61,63,64,73,75,79,80,81,82,83,84,90,97,108,114,124,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,174,176,177,180,195,196,198,207,208,212,217,219,223,234,239,240,246,248,251,252,253,256,259,260,264,274,275,276,279,280,285,286,288,],[33,33,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-79,-120,-3,-121,-122,-32,-33,-34,-50,-61,-66,-69,-70,-41,-29,-71,-72,-73,-74,-35,-36,-44,-75,33,-77,-2,-111,-43,-51,-64,-65,-67,-52,-53,-54,-55,-56,-57,-58,-59,-60,-62,-63,-68,-95,33,-30,-31,-115,-76,-82,-90,-94,33,-110,-119,-38,33,-85,-100,-101,-39,33,-105,-78,-112,-116,-103,-37,-42,-40,-104,-106,-102,33,33,-84,-83,]),'CONTINUE':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,44,50,51,56,57,58,59,60,61,63,64,73,75,79,80,81,82,83,84,90,97,108,114,124,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,174,176,177,180,195,196,198,207,208,212,217,219,223,234,239,240,246,248,251,252,253,256,259,260,264,274,275,276,279,280,285,286,288,],[34,34,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-79,-120,-3,-121,-122,-32,-33,-34,-50,-61,-66,-69,-70,-41,-29,-71,-72,-73,-74,-35,-36,-44,-75,34,-77,-2,-111,-43,-51,-64,-65,-67,-52,-53,-54,-55,-56,-57,-58,-59,-60,-62,-63,-68,-95,34,-30,-31,-115,-76,-82,-90,-94,34,-110,-119,-38,34,-85,-100,-101,-39,34,-105,-78,-112,-116,-103,-37,-42,-40,-104,-106,-102,34,34,-84,-83,]),'FUNC':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,44,50,51,56,57,58,59,60,61,63,64,73,75,79,80,81,82,83,84,90,97,108,114,124,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,174,176,177,180,195,196,198,207,208,212,217,219,223,234,239,240,246,248,251,252,253,256,259,260,264,274,275,276,279,280,285,286,288,],[35,35,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-79,-120,-3,-121,-122,-32,-33,-34,-50,-61,-66,-69,-70,-41,-29,-71,-72,-73,-74,-35,-36,-44,-75,35,-77,-2,-111,-43,-51,-64,-65,-67,-52,-53,-54,-55,-56,-57,-58,-59,-60,-62,-63,-68,-95,35,-30,-31,-115,-76,-82,-90,-94,35,-110,-119,-38,35,-85,-100,-101,-39,35,-105,-78,-112,-116,-103,-37,-42,-40,-104,-106,-102,35,35,-84,-83,]),'IF':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,44,50,51,56,57,58,59,60,61,63,64,73,75,79,80,81,82,83,84,90,97,108,114,124,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,174,176,177,180,195,196,198,207,208,212,217,219,223,234,239,240,246,248,251,252,253,256,259,260,264,274,275,276,279,280,285,286,288,],[36,36,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-79,-120,-3,-121,-122,-32,-33,-34,-50,-61,-66,-69,-70,-41,-29,-71,-72,-73,-74,-35,-36,-44,-75,36,-77,-2,-111,-43,-51,-64,-65,-67,-52,-53,-54,-55,-56,-57,-58,-59,-60,-62,-63,-68,-95,36,-30,-31,-115,-76,-82,-90,-94,36,-110,-119,-38,36,-85,-100,-101,-39,36,-105,-78,-112,-116,-103,-37,-42,-40,-104,-106,-102,36,36,-84,-83,]),'FOR':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,44,50,51,56,57,58,59,60,61,63,64,73,75,79,80,81,82,83,84,90,97,108,114,124,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,174,176,177,180,195,196,198,207,208,212,217,219,223,234,239,240,246,248,251,252,253,256,259,260,264,274,275,276,279,280,285,286,288,],[37,37,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-79,-120,-3,-121,-122,-32,-33,-34,-50,-61,-66,-69,-70,-41,-29,-71,-72,-73,-74,-35,-36,-44,-75,37,-77,-2,-111,-43,-51,-64,-65,-67,-52,-53,-54,-55,-56,-57,-58,-59,-60,-62,-63,-68,-95,37,-30,-31,-115,-76,-82,-90,-94,37,-110,-119,-38,37,-85,-100,-101,-39,37,-105,-78,-112,-116,-103,-37,-42,-40,-104,-106,-102,37,37,-84,-83,]),'TYPE':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,44,50,51,56,57,58,59,60,61,63,64,73,75,79,80,81,82,83,84,90,97,108,114,124,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,174,176,177,180,195,196,198,207,208,212,217,219,223,234,239,240,246,248,251,252,253,256,259,260,264,274,275,276,279,280,285,286,288,],[38,38,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-79,-120,-3,-121,-122,-32,-33,-34,-50,-61,-66,-69,-70,-41,-29,-71,-72,-73,-74,-35,-36,-44,-75,38,-77,-2,-111,-43,-51,-64,-65,-67,-52,-53,-54,-55,-56,-57,-58,-59,-60,-62,-63,-68,-95,38,-30,-31,-115,-76,-82,-90,-94,38,-110,-119,-38,38,-85,-100,-101,-39,38,-105,-78,-112,-116,-103,-37,-42,-40,-104,-106,-102,38,38,-84,-83,]),'SWITCH':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,44,50,51,56,57,58,59,60,61,63,64,73,75,79,80,81,82,83,84,90,97,108,114,124,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,174,176,177,180,195,196,198,207,208,212,217,219,223,234,239,240,246,248,251,252,253,256,259,260,264,274,275,276,279,280,285,286,288,],[39,39,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-79,-120,-3,-121,-122,-32,-33,-34,-50,-61,-66,-69,-70,-41,-29,-71,-72,-73,-74,-35,-36,-44,-75,39,-77,-2,-111,-43,-51,-64,-65,-67,-52,-53,-54,-55,-56,-57,-58,-59,-60,-62,-63,-68,-95,39,-30,-31,-115,-76,-82,-90,-94,39,-110,-119,-38,39,-85,-100,-101,-39,39,-105,-78,-112,-116,-103,-37,-42,-40,-104,-106,-102,39,39,-84,-83,]),'LBRACKET':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,44,46,48,50,51,56,57,58,59,60,61,63,64,73,75,76,77,79,80,81,82,83,84,85,90,97,108,113,114,124,127,133,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,166,171,174,176,177,180,183,195,196,198,207,208,212,217,219,223,234,239,240,246,248,251,252,253,256,259,260,264,274,275,276,279,280,285,286,288,],[40,40,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-79,-120,-3,78,86,-121,-122,-32,-33,-34,-50,-61,-66,-69,-70,-41,-29,40,128,-71,-72,-73,-74,-35,-36,131,-44,-75,40,167,-77,-2,-111,184,-43,-51,-64,-65,-67,-52,-53,-54,-55,-56,-57,-58,-59,-60,-62,-63,-68,200,-95,40,-30,-31,-115,215,-76,-82,-90,-94,40,-110,-119,-38,40,-85,-100,-101,-39,40,-105,-78,-112,-116,-103,-37,-42,-40,-104,-106,-102,40,40,-84,-83,]),'BREAK':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,44,50,51,56,57,58,59,60,61,63,64,73,75,79,80,81,82,83,84,90,97,108,114,124,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,174,176,177,180,195,196,198,207,208,212,217,219,223,234,239,240,246,248,251,252,253,256,259,260,264,274,275,276,279,280,285,286,288,],[41,41,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-79,-120,-3,-121,-122,-32,-33,-34,-50,-61,-66,-69,-70,-41,-29,-71,-72,-73,-74,-35,-36,-44,-75,41,-77,-2,-111,-43,-51,-64,-65,-67,-52,-53,-54,-55,-56,-57,-58,-59,-60,-62,-63,-68,-95,41,-30,-31,-115,-76,-82,-90,-94,41,-110,-119,-38,41,-85,-100,-101,-39,41,-105,-78,-112,-116,-103,-37,-42,-40,-104,-106,-102,41,41,-84,-83,]),'RETURN':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,44,50,51,56,57,58,59,60,61,63,64,73,75,79,80,81,82,83,84,90,97,108,114,124,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,174,176,177,180,195,196,198,207,208,212,217,219,223,234,239,240,246,248,251,252,253,256,259,260,264,274,275,276,279,280,285,286,288,],[42,42,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-79,-120,-3,-121,-122,-32,-33,-34,-50,-61,-66,-69,-70,-41,-29,-71,-72,-73,-74,-35,-36,-44,-75,42,-77,-2,-111,-43,-51,-64,-65,-67,-52,-53,-54,-55,-56,-57,-58,-59,-60,-62,-63,-68,-95,42,-30,-31,-115,-76,-82,-90,-94,42,-110,-119,-38,42,-85,-100,-101,-39,42,-105,-78,-112,-116,-103,-37,-42,-40,-104,-106,-102,42,42,-84,-83,]),'LPAREN':([5,32,35,36,37,39,42,47,48,49,54,62,65,87,88,92,93,94,98,99,100,101,102,103,104,105,106,107,110,111,115,116,121,125,126,136,138,197,210,214,218,221,254,257,278,],[43,49,53,62,62,62,62,62,62,62,96,62,113,133,134,137,138,139,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,247,62,62,62,]),'STRING':([5,36,37,39,42,43,47,48,49,62,98,99,100,101,102,103,104,105,106,107,110,111,115,116,121,125,126,136,137,138,197,210,214,218,254,255,257,277,278,],[44,61,61,61,61,74,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,187,61,61,61,61,61,61,269,61,269,61,]),'RBRACE':([7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,45,50,51,56,57,58,59,60,61,63,64,73,75,79,80,81,82,83,84,90,97,114,119,120,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,159,161,162,163,164,165,170,171,172,176,177,180,195,196,198,204,205,206,207,209,212,217,219,225,226,233,234,235,236,237,238,239,240,241,242,246,249,251,252,253,256,259,260,263,264,266,267,268,270,274,275,276,279,282,283,284,286,287,288,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-79,-120,-5,-121,-122,-32,-33,-34,-50,-61,-66,-69,-70,-41,-29,-71,-72,-73,-74,-35,-36,-44,-75,-77,171,-96,-111,-43,-51,-64,-65,-67,-52,-53,-54,-55,-56,-57,-58,-59,-60,196,198,-91,-62,-63,-68,207,-95,-97,-30,-31,-115,-76,-82,-90,234,-86,-89,-94,-99,-110,-119,-38,-93,-92,-88,-85,-87,-98,253,-113,-100,-101,256,-117,-39,264,-105,-78,-112,-116,-103,-37,274,-42,-114,276,-107,-118,-40,-104,-106,-102,-108,-109,286,-84,288,-83,]),'CASE':([7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,45,50,51,56,57,58,59,60,61,63,64,71,73,75,79,80,81,82,83,84,90,97,114,118,120,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,176,177,180,195,196,198,207,209,212,217,219,234,236,239,240,246,251,252,253,256,259,260,264,274,275,276,279,286,288,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-79,-120,-5,-121,-122,-32,-33,-34,-50,-61,-66,-69,-70,121,-41,-29,-71,-72,-73,-74,-35,-36,-44,-75,-77,121,121,-111,-43,-51,-64,-65,-67,-52,-53,-54,-55,-56,-57,-58,-59,-60,-62,-63,-68,-95,-30,-31,-115,-76,-82,-90,-94,-99,-110,-119,-38,-85,-98,-100,-101,-39,-105,-78,-112,-116,-103,-37,-42,-40,-104,-106,-102,-84,-83,]),'DEFAULT':([7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,41,45,50,51,56,57,58,59,60,61,63,64,71,73,75,79,80,81,82,83,84,90,97,114,118,120,127,135,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,171,176,177,180,195,196,198,207,209,212,217,219,234,236,239,240,246,251,252,253,256,259,260,264,274,275,276,279,286,288,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-79,-120,-5,-121,-122,-32,-33,-34,-50,-61,-66,-69,-70,122,-41,-29,-71,-72,-73,-74,-35,-36,-44,-75,-77,122,122,-111,-43,-51,-64,-65,-67,-52,-53,-54,-55,-56,-57,-58,-59,-60,-62,-63,-68,-95,-30,-31,-115,-76,-82,-90,-94,-99,-110,-119,-38,-85,-98,-100,-101,-39,-105,-78,-112,-116,-103,-37,-42,-40,-104,-106,-102,-84,-83,]),'ASSIGN':([32,46,68,75,79,80,81,82,232,],[47,76,47,126,-71,-72,-73,-74,47,]),'ASIG':([32,68,75,79,80,81,82,232,],[48,116,125,-71,-72,-73,-74,116,]),'INCREMENT':([32,232,],[50,50,]),'DECREMENT':([32,232,],[51,51,]),'DOT':([33,],[52,]),'NUMBER':([36,37,39,40,42,47,48,49,62,78,98,99,100,101,102,103,104,105,106,107,110,111,115,116,121,125,126,136,138,197,210,214,218,254,257,278,],[56,56,56,72,56,56,56,56,56,129,147,147,56,56,56,56,56,56,56,56,147,147,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'FLOAT':([36,37,39,42,47,48,49,62,98,99,100,101,102,103,104,105,106,107,110,111,115,116,121,125,126,136,138,197,210,214,218,254,257,278,],[57,57,57,57,57,57,57,57,148,148,57,57,57,57,57,57,57,57,148,148,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'MAKE':([36,37,39,42,47,48,49,62,98,99,100,101,102,103,104,105,106,107,110,111,115,116,121,125,126,136,138,197,210,214,218,254,257,278,],[65,65,65,65,65,87,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'LBRACE':([39,50,51,55,56,57,58,59,60,61,63,64,66,68,70,79,80,81,82,83,84,117,145,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,175,182,193,198,222,229,230,231,240,251,272,275,281,],[71,-121,-122,108,-32,-33,109,-50,-61,-66,-69,-70,108,109,118,-71,-72,-73,-74,-35,-36,169,108,-51,-64,-65,109,-52,-53,-54,-55,-56,-57,-58,-59,-60,-62,-63,-68,210,214,223,-90,248,-80,108,-81,255,-105,280,-104,285,]),'MAP':([46,48,113,133,],[77,85,166,183,]),'INT_TYPE':([46,79,80,81,82,123,128,130,131,132,141,143,169,179,192,200,201,203,205,206,211,213,215,216,233,250,258,261,273,],[79,-71,-72,-73,-74,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-89,79,79,79,79,-88,79,79,79,79,]),'FLOAT64_TYPE':([46,79,80,81,82,123,128,130,131,132,141,143,169,179,192,200,201,203,205,206,211,213,215,216,233,250,258,261,273,],[80,-71,-72,-73,-74,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-89,80,80,80,80,-88,80,80,80,80,]),'STRING_TYPE':([46,79,80,81,82,123,128,130,131,132,141,143,169,179,192,200,201,203,205,206,211,213,215,216,233,250,258,261,273,],[81,-71,-72,-73,-74,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-89,81,81,81,81,-88,81,81,81,81,]),'BOOL_TYPE':([46,79,80,81,82,123,128,130,131,132,141,143,169,179,192,200,201,203,205,206,211,213,215,216,233,250,258,261,273,],[82,-71,-72,-73,-74,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-89,82,82,82,82,-88,82,82,82,82,]),'NEW':([48,],[88,]),'RPAREN':([49,56,57,58,59,60,61,63,64,74,79,80,81,82,89,91,96,112,140,142,144,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,185,186,188,191,198,220,224,228,244,245,247,251,262,265,271,275,],[90,-32,-33,-34,-50,-61,-66,-69,-70,124,-71,-72,-73,-74,135,-48,143,165,190,192,-45,-51,-64,-65,-67,-52,-53,-54,-55,-56,-57,-58,-59,-60,-62,-63,-68,217,-49,219,-47,-90,246,-46,251,259,260,261,-105,273,275,279,-104,]),'PRINTF':([52,],[92,]),'PRINTLN':([52,],[93,]),'SCANLN':([52,],[94,]),'PLUS':([55,56,57,58,59,60,61,63,64,66,68,70,73,83,84,91,112,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,168,173,176,177,188,198,225,238,242,245,251,259,275,279,283,],[98,-32,-33,-34,-50,-61,-66,-69,-70,98,-34,98,98,98,98,98,98,-51,-64,-65,-67,-52,98,98,98,98,98,98,98,98,-62,-63,-68,98,98,98,98,98,-90,98,98,98,98,-105,-105,-104,-104,98,]),'MINUS':([55,56,57,58,59,60,61,63,64,66,68,70,73,83,84,91,112,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,168,173,176,177,188,198,225,238,242,245,251,259,275,279,283,],[99,-32,-33,-34,-50,-61,-66,-69,-70,99,-34,99,99,99,99,99,99,-51,-64,-65,-67,-52,99,99,99,99,99,99,99,99,-62,-63,-68,99,99,99,99,99,-90,99,99,99,99,-105,-105,-104,-104,99,]),'AND':([55,56,57,58,59,60,61,63,64,66,68,70,73,83,84,91,112,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,168,173,176,177,188,198,225,238,242,245,251,259,275,279,283,],[100,-32,-33,-34,-50,-61,-66,-69,-70,100,-34,100,100,100,100,100,100,-51,-64,-65,-67,-52,100,100,100,100,100,100,100,100,-62,-63,-68,100,100,100,100,100,-90,100,100,100,100,-105,-105,-104,-104,100,]),'OR':([55,56,57,58,59,60,61,63,64,66,68,70,73,83,84,91,112,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,168,173,176,177,188,198,225,238,242,245,251,259,275,279,283,],[101,-32,-33,-34,-50,-61,-66,-69,-70,101,-34,101,101,101,101,101,101,-51,-64,-65,-67,-52,101,101,101,101,101,101,101,101,-62,-63,-68,101,101,101,101,101,-90,101,101,101,101,-105,-105,-104,-104,101,]),'EQ':([55,56,57,58,59,60,61,63,64,66,68,70,73,83,84,91,112,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,168,173,176,177,188,198,225,238,242,245,251,259,275,279,283,],[102,-32,-33,-34,-50,-61,-66,-69,-70,102,-34,102,102,102,102,102,102,-51,-64,-65,-67,-52,102,102,102,102,102,102,102,102,-62,-63,-68,102,102,102,102,102,-90,102,102,102,102,-105,-105,-104,-104,102,]),'NE':([55,56,57,58,59,60,61,63,64,66,68,70,73,83,84,91,112,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,168,173,176,177,188,198,225,238,242,245,251,259,275,279,283,],[103,-32,-33,-34,-50,-61,-66,-69,-70,103,-34,103,103,103,103,103,103,-51,-64,-65,-67,-52,103,103,103,103,103,103,103,103,-62,-63,-68,103,103,103,103,103,-90,103,103,103,103,-105,-105,-104,-104,103,]),'LT':([55,56,57,58,59,60,61,63,64,66,68,70,73,83,84,91,112,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,168,173,176,177,188,198,225,238,242,245,251,259,275,279,283,],[104,-32,-33,-34,-50,-61,-66,-69,-70,104,-34,104,104,104,104,104,104,-51,-64,-65,-67,-52,104,104,104,104,104,104,104,104,-62,-63,-68,104,104,104,104,104,-90,104,104,104,104,-105,-105,-104,-104,104,]),'GT':([55,56,57,58,59,60,61,63,64,66,68,70,73,83,84,91,112,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,168,173,176,177,188,198,225,238,242,245,251,259,275,279,283,],[105,-32,-33,-34,-50,-61,-66,-69,-70,105,-34,105,105,105,105,105,105,-51,-64,-65,-67,-52,105,105,105,105,105,105,105,105,-62,-63,-68,105,105,105,105,105,-90,105,105,105,105,-105,-105,-104,-104,105,]),'LE':([55,56,57,58,59,60,61,63,64,66,68,70,73,83,84,91,112,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,168,173,176,177,188,198,225,238,242,245,251,259,275,279,283,],[106,-32,-33,-34,-50,-61,-66,-69,-70,106,-34,106,106,106,106,106,106,-51,-64,-65,-67,-52,106,106,106,106,106,106,106,106,-62,-63,-68,106,106,106,106,106,-90,106,106,106,106,-105,-105,-104,-104,106,]),'GE':([55,56,57,58,59,60,61,63,64,66,68,70,73,83,84,91,112,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,168,173,176,177,188,198,225,238,242,245,251,259,275,279,283,],[107,-32,-33,-34,-50,-61,-66,-69,-70,107,-34,107,107,107,107,107,107,-51,-64,-65,-67,-52,107,107,107,107,107,107,107,107,-62,-63,-68,107,107,107,107,107,-90,107,107,107,107,-105,-105,-104,-104,107,]),'SEMICOLON':([56,57,58,59,60,61,63,64,67,83,84,146,147,148,149,150,151,152,153,154,155,156,157,158,163,164,165,168,198,251,275,],[-32,-33,-34,-50,-61,-66,-69,-70,115,-35,-36,-51,-64,-65,-67,-52,-53,-54,-55,-56,-57,-58,-59,-60,-62,-63,-68,202,-90,-105,-104,]),'COMMA':([56,57,58,59,60,61,63,64,79,80,81,82,91,144,146,147,148,149,150,151,152,153,154,155,156,157,158,162,163,164,165,187,191,198,225,238,242,251,268,275,283,],[-32,-33,-34,-50,-61,-66,-69,-70,-71,-72,-73,-74,136,194,-51,-64,-65,-67,-52,-53,-54,-55,-56,-57,-58,-59,-60,199,-62,-63,-68,218,-47,-90,-93,254,257,-105,277,-104,-109,]),'COLON':([56,57,58,59,60,61,63,64,122,146,147,148,149,150,151,152,153,154,155,156,157,158,160,163,164,165,173,198,251,269,275,],[-32,-33,-34,-50,-61,-66,-69,-70,174,-51,-64,-65,-67,-52,-53,-54,-55,-56,-57,-58,-59,-60,197,-62,-63,-68,208,-90,-105,278,-104,]),'TIMES':([56,57,58,59,60,61,63,64,68,146,147,148,149,150,163,164,165,198,251,259,275,279,],[-64,-65,-67,110,-61,-66,-69,-70,-67,110,-64,-65,-67,110,-62,-63,-68,-90,-105,-105,-104,-104,]),'DIVIDE':([56,57,58,59,60,61,63,64,68,146,147,148,149,150,163,164,165,198,251,259,275,279,],[-64,-65,-67,111,-61,-66,-69,-70,-67,111,-64,-65,-67,111,-62,-63,-68,-90,-105,-105,-104,-104,]),'STRUCT':([69,],[117,]),'RBRACKET':([72,78,79,80,81,82,86,129,167,178,181,184,227,243,],[123,130,-71,-72,-73,-74,132,179,201,211,213,216,250,258,]),'ELSE':([97,196,],[145,-82,]),'AMPER':([139,],[189,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'import_stmt':([3,],[4,]),'program':([4,7,108,174,208,223,248,280,285,],[6,45,159,209,236,249,263,284,287,]),'statement':([4,7,108,174,208,223,248,280,285,],[7,7,7,7,7,7,7,7,7,]),'declaration':([4,7,108,174,208,223,248,280,285,],[8,8,8,8,8,8,8,8,8,]),'assignment':([4,7,37,108,174,202,208,223,248,280,285,],[9,9,67,9,9,229,9,9,9,9,9,]),'print_stmt':([4,7,108,174,208,223,248,280,285,],[10,10,10,10,10,10,10,10,10,]),'input_stmt':([4,7,108,174,208,223,248,280,285,],[11,11,11,11,11,11,11,11,11,]),'continue_stmt':([4,7,108,174,208,223,248,280,285,],[12,12,12,12,12,12,12,12,12,]),'struct_method':([4,7,108,174,208,223,248,280,285,],[13,13,13,13,13,13,13,13,13,]),'func_def':([4,7,108,174,208,223,248,280,285,],[14,14,14,14,14,14,14,14,14,]),'func_no_params':([4,7,108,174,208,223,248,280,285,],[15,15,15,15,15,15,15,15,15,]),'func_call':([4,7,108,174,208,223,248,280,285,],[16,16,16,16,16,16,16,16,16,]),'if_stmt':([4,7,108,174,208,223,248,280,285,],[17,17,17,17,17,17,17,17,17,]),'for_stmt':([4,7,108,174,208,223,248,280,285,],[18,18,18,18,18,18,18,18,18,]),'struct_def':([4,7,108,174,208,223,248,280,285,],[19,19,19,19,19,19,19,19,19,]),'switch_stmt':([4,7,108,174,208,223,248,280,285,],[20,20,20,20,20,20,20,20,20,]),'map_declaration':([4,7,108,174,208,223,248,280,285,],[21,21,21,21,21,21,21,21,21,]),'map_declaration_values':([4,7,108,174,208,223,248,280,285,],[22,22,22,22,22,22,22,22,22,]),'array_declaration':([4,7,108,174,208,223,248,280,285,],[23,23,23,23,23,23,23,23,23,]),'array_literal':([4,7,76,108,174,208,223,248,280,285,],[24,24,127,24,24,24,24,24,24,24,]),'slice_declaration':([4,7,108,174,208,223,248,280,285,],[25,25,25,25,25,25,25,25,25,]),'make_stmt':([4,7,108,174,208,223,248,280,285,],[26,26,26,26,26,26,26,26,26,]),'new_stmt':([4,7,108,174,208,223,248,280,285,],[27,27,27,27,27,27,27,27,27,]),'break_stmt':([4,7,108,174,208,223,248,280,285,],[28,28,28,28,28,28,28,28,28,]),'increment_stmt':([4,7,108,174,202,208,223,248,280,285,],[29,29,29,29,231,29,29,29,29,29,]),'return_stmt':([4,7,108,174,208,223,248,280,285,],[30,30,30,30,30,30,30,30,30,]),'expression':([36,37,39,42,47,48,49,62,100,101,102,103,104,105,106,107,115,116,121,125,126,136,138,197,210,214,218,254,257,278,],[55,66,70,73,83,84,91,112,151,152,153,154,155,156,157,158,168,84,173,176,177,91,188,225,238,242,245,238,242,283,]),'term':([36,37,39,42,47,48,49,62,98,99,100,101,102,103,104,105,106,107,115,116,121,125,126,136,138,197,210,214,218,254,257,278,],[59,59,59,59,59,59,59,59,146,150,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'factor':([36,37,39,42,47,48,49,62,98,99,100,101,102,103,104,105,106,107,110,111,115,116,121,125,126,136,138,197,210,214,218,254,257,278,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,163,164,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'make_expr':([36,37,39,42,47,48,49,62,98,99,100,101,102,103,104,105,106,107,110,111,115,116,121,125,126,136,138,197,210,214,218,254,257,278,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'struct_instance':([36,37,39,42,47,48,49,62,98,99,100,101,102,103,104,105,106,107,110,111,115,116,121,125,126,136,138,197,210,214,218,254,257,278,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'type':([46,123,128,130,131,132,141,143,169,179,192,200,201,203,205,211,213,215,216,250,258,261,273,],[75,175,178,180,181,182,191,193,206,212,222,227,228,233,206,239,240,243,244,265,271,272,281,]),'arg_list':([49,136,],[89,186,]),'block':([55,66,145,230,],[97,114,195,252,]),'case_list':([71,118,120,],[119,170,172,]),'case_clause':([71,118,120,],[120,120,120,]),'param_list':([96,194,247,],[142,224,262,]),'param':([96,194,247,],[144,144,144,]),'struct_fields_values':([109,199,],[161,226,]),'field_value':([109,199,],[162,162,]),'struct_fields':([169,205,],[204,235,]),'struct_field':([169,205,],[205,205,]),'for_update':([202,],[230,]),'array_values':([210,254,],[237,266,]),'slice_values':([214,257,],[241,270,]),'map_kv_pairs':([255,277,],[267,282,]),'map_kv_pair':([255,277,],[268,268,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> PACKAGE MAIN import_stmt program','start',4,'p_start','parser.py',65),
  ('import_stmt -> IMPORT LPAREN STRING RPAREN','import_stmt',4,'p_import_function','parser.py',70),
  ('import_stmt -> IMPORT STRING','import_stmt',2,'p_import_function','parser.py',71),
  ('program -> statement','program',1,'p_program','parser.py',75),
  ('program -> statement program','program',2,'p_program','parser.py',76),
  ('statement -> declaration','statement',1,'p_statement','parser.py',81),
  ('statement -> assignment','statement',1,'p_statement','parser.py',82),
  ('statement -> print_stmt','statement',1,'p_statement','parser.py',83),
  ('statement -> input_stmt','statement',1,'p_statement','parser.py',84),
  ('statement -> continue_stmt','statement',1,'p_statement','parser.py',85),
  ('statement -> struct_method','statement',1,'p_statement','parser.py',86),
  ('statement -> func_def','statement',1,'p_statement','parser.py',87),
  ('statement -> func_no_params','statement',1,'p_statement','parser.py',88),
  ('statement -> func_call','statement',1,'p_statement','parser.py',89),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',90),
  ('statement -> for_stmt','statement',1,'p_statement','parser.py',91),
  ('statement -> struct_def','statement',1,'p_statement','parser.py',92),
  ('statement -> switch_stmt','statement',1,'p_statement','parser.py',93),
  ('statement -> map_declaration','statement',1,'p_statement','parser.py',94),
  ('statement -> map_declaration_values','statement',1,'p_statement','parser.py',95),
  ('statement -> array_declaration','statement',1,'p_statement','parser.py',96),
  ('statement -> array_literal','statement',1,'p_statement','parser.py',97),
  ('statement -> slice_declaration','statement',1,'p_statement','parser.py',98),
  ('statement -> make_stmt','statement',1,'p_statement','parser.py',99),
  ('statement -> new_stmt','statement',1,'p_statement','parser.py',100),
  ('statement -> break_stmt','statement',1,'p_statement','parser.py',101),
  ('statement -> increment_stmt','statement',1,'p_statement','parser.py',102),
  ('statement -> return_stmt','statement',1,'p_statement','parser.py',103),
  ('declaration -> VAR VARIABLE type','declaration',3,'p_declaration','parser.py',109),
  ('declaration -> VAR VARIABLE type ASIG expression','declaration',5,'p_declaration','parser.py',110),
  ('declaration -> VAR VARIABLE type ASSIGN expression','declaration',5,'p_declaration','parser.py',111),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',134),
  ('expression -> FLOAT','expression',1,'p_expression_float','parser.py',138),
  ('expression -> VARIABLE','expression',1,'p_expression_variable','parser.py',142),
  ('assignment -> VARIABLE ASSIGN expression','assignment',3,'p_assignment','parser.py',154),
  ('assignment -> VARIABLE ASIG expression','assignment',3,'p_assignment','parser.py',155),
  ('print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN','print_stmt',8,'p_print_stmt','parser.py',172),
  ('print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN','print_stmt',6,'p_print_stmt','parser.py',173),
  ('input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN','input_stmt',7,'p_input_stmt','parser.py',178),
  ('func_def -> FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE','func_def',9,'p_func_def','parser.py',183),
  ('return_stmt -> RETURN expression','return_stmt',2,'p_return_stmt','parser.py',194),
  ('func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE','func_no_params',8,'p_func_def_no_params','parser.py',210),
  ('func_call -> VARIABLE LPAREN arg_list RPAREN','func_call',4,'p_func_call','parser.py',218),
  ('func_call -> VARIABLE LPAREN RPAREN','func_call',3,'p_func_call','parser.py',219),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',251),
  ('param_list -> param COMMA param_list','param_list',3,'p_param_list','parser.py',252),
  ('param -> VARIABLE type','param',2,'p_param','parser.py',259),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',271),
  ('arg_list -> expression COMMA arg_list','arg_list',3,'p_arg_list','parser.py',272),
  ('expression -> term','expression',1,'p_expression','parser.py',282),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',283),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',284),
  ('expression -> expression AND expression','expression',3,'p_expression','parser.py',285),
  ('expression -> expression OR expression','expression',3,'p_expression','parser.py',286),
  ('expression -> expression EQ expression','expression',3,'p_expression','parser.py',287),
  ('expression -> expression NE expression','expression',3,'p_expression','parser.py',288),
  ('expression -> expression LT expression','expression',3,'p_expression','parser.py',289),
  ('expression -> expression GT expression','expression',3,'p_expression','parser.py',290),
  ('expression -> expression LE expression','expression',3,'p_expression','parser.py',291),
  ('expression -> expression GE expression','expression',3,'p_expression','parser.py',292),
  ('term -> factor','term',1,'p_term','parser.py',317),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',318),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',319),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',335),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',336),
  ('factor -> STRING','factor',1,'p_factor','parser.py',337),
  ('factor -> VARIABLE','factor',1,'p_factor','parser.py',338),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',339),
  ('factor -> make_expr','factor',1,'p_factor','parser.py',340),
  ('factor -> struct_instance','factor',1,'p_factor','parser.py',341),
  ('type -> INT_TYPE','type',1,'p_type','parser.py',360),
  ('type -> FLOAT64_TYPE','type',1,'p_type','parser.py',361),
  ('type -> STRING_TYPE','type',1,'p_type','parser.py',362),
  ('type -> BOOL_TYPE','type',1,'p_type','parser.py',363),
  ('if_stmt -> IF expression block','if_stmt',3,'p_if_stmt','parser.py',368),
  ('if_stmt -> IF expression block ELSE block','if_stmt',5,'p_if_stmt','parser.py',369),
  ('for_stmt -> FOR expression block','for_stmt',3,'p_for_stmt','parser.py',378),
  ('for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block','for_stmt',7,'p_for_stmt','parser.py',379),
  ('continue_stmt -> CONTINUE','continue_stmt',1,'p_continue_stmt','parser.py',385),
  ('for_update -> assignment','for_update',1,'p_for_update','parser.py',391),
  ('for_update -> increment_stmt','for_update',1,'p_for_update','parser.py',392),
  ('block -> LBRACE program RBRACE','block',3,'p_block','parser.py',397),
  ('struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE','struct_method',13,'p_struct_method','parser.py',402),
  ('struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE','struct_method',12,'p_struct_method','parser.py',403),
  ('struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE','struct_def',6,'p_struct_def','parser.py',408),
  ('struct_fields -> struct_field','struct_fields',1,'p_struct_fields','parser.py',413),
  ('struct_fields -> struct_field struct_fields','struct_fields',2,'p_struct_fields','parser.py',414),
  ('struct_field -> VARIABLE type','struct_field',2,'p_struct_field','parser.py',419),
  ('struct_field -> type','struct_field',1,'p_struct_field','parser.py',420),
  ('struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE','struct_instance',4,'p_struct_instance','parser.py',425),
  ('struct_fields_values -> field_value','struct_fields_values',1,'p_struct_fields_values','parser.py',429),
  ('struct_fields_values -> field_value COMMA struct_fields_values','struct_fields_values',3,'p_struct_fields_values','parser.py',430),
  ('field_value -> VARIABLE COLON expression','field_value',3,'p_field_value','parser.py',434),
  ('switch_stmt -> SWITCH expression LBRACE case_list RBRACE','switch_stmt',5,'p_switch_stmt','parser.py',438),
  ('switch_stmt -> SWITCH LBRACE case_list RBRACE','switch_stmt',4,'p_switch_stmt','parser.py',439),
  ('case_list -> case_clause','case_list',1,'p_case_list','parser.py',443),
  ('case_list -> case_clause case_list','case_list',2,'p_case_list','parser.py',444),
  ('case_clause -> CASE expression COLON program','case_clause',4,'p_case_clause','parser.py',448),
  ('case_clause -> DEFAULT COLON program','case_clause',3,'p_case_clause','parser.py',449),
  ('map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type','map_declaration',7,'p_map_declaration','parser.py',455),
  ('map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type','map_declaration',7,'p_map_declaration','parser.py',456),
  ('make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN','make_stmt',10,'p_make_stmt','parser.py',461),
  ('make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN','make_stmt',8,'p_make_stmt','parser.py',462),
  ('make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN','make_expr',8,'p_make_expr','parser.py',466),
  ('make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN','make_expr',6,'p_make_expr','parser.py',467),
  ('map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE','map_declaration_values',10,'p_map_literal_declaration','parser.py',473),
  ('map_kv_pairs -> map_kv_pair','map_kv_pairs',1,'p_map_kv_pairs','parser.py',477),
  ('map_kv_pairs -> map_kv_pair COMMA map_kv_pairs','map_kv_pairs',3,'p_map_kv_pairs','parser.py',478),
  ('map_kv_pair -> STRING COLON expression','map_kv_pair',3,'p_map_kv_pair','parser.py',482),
  ('array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type','array_declaration',6,'p_array_declaration','parser.py',487),
  ('array_declaration -> VAR VARIABLE ASSIGN array_literal','array_declaration',4,'p_array_declaration','parser.py',488),
  ('array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE','array_literal',7,'p_array_literal','parser.py',512),
  ('array_values -> expression','array_values',1,'p_array_values','parser.py',528),
  ('array_values -> expression COMMA array_values','array_values',3,'p_array_values','parser.py',529),
  ('slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type','slice_declaration',5,'p_slice_declaration','parser.py',539),
  ('slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE','slice_declaration',8,'p_slice_declaration','parser.py',540),
  ('slice_values -> expression','slice_values',1,'p_slice_values','parser.py',544),
  ('slice_values -> expression COMMA slice_values','slice_values',3,'p_slice_values','parser.py',545),
  ('new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN','new_stmt',6,'p_new_stmt','parser.py',550),
  ('break_stmt -> BREAK','break_stmt',1,'p_break_stmt','parser.py',555),
  ('increment_stmt -> VARIABLE INCREMENT','increment_stmt',2,'p_increment_stmt','parser.py',562),
  ('increment_stmt -> VARIABLE DECREMENT','increment_stmt',2,'p_increment_stmt','parser.py',563),
]
