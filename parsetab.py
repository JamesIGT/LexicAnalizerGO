
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPER AND ASIG ASSIGN BOOL_TYPE BREAK CASE COLON COMMA CONTINUE DECREMENT DEFAULT DIVIDE DOT ELSE EQ FALSE FLOAT FLOAT64_TYPE FMT FOR FUNC FUNCNAME GE GT IF IMPORT INCREMENT INT_TYPE LBRACE LBRACKET LE LPAREN LT MAKE MAP MINUS MOD NE NEW NUMBER OR PACKAGE PLUS PRINT PRINTF PRINTLN RANGE RBRACE RBRACKET RETURN RPAREN SCANLN SEMICOLON STRING STRING_TYPE STRUCT SWITCH TIMES TRUE TYPE UINT VAR VARIABLEprogram : statement\n               | statement programstatement : declaration\n                 | assignment\n                 | print_stmt\n                 | input_stmt\n                 | continue_stmt\n                 | struct_method\n                 | func_def\n                 | func_no_params\n                 | func_call\n                 | if_stmt\n                 | for_stmt\n                 | struct_def\n                 | switch_stmt\n                 | map_declaration\n                 | map_declaration_values\n                 | array_declaration\n                 | slice_declaration\n                 | make_stmt\n                 | new_stmt\n                 | break_stmt\n                 | increment_stmt\n                 | return_stmtdeclaration : VAR VARIABLE type\n                   | VAR VARIABLE type ASIG expressionexpression : NUMBERexpression : FLOATexpression : VARIABLEassignment : VARIABLE ASSIGN expression\n                  | VARIABLE ASIG expressionprint_stmt : FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN\n                  | FMT DOT PRINTLN LPAREN expression RPARENinput_stmt : FMT DOT SCANLN LPAREN AMPER VARIABLE RPARENfunc_def : FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE\n                | FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACEreturn_stmt : RETURN expressionfunc_no_params : FUNC VARIABLE LPAREN RPAREN blockfunc_call : VARIABLE LPAREN arg_list RPAREN\n                 | VARIABLE LPAREN RPARENparam_list : param\n                  | param COMMA param_listparam : VARIABLE typearg_list : expression\n                | expression COMMA arg_listexpression : term\n                  | expression PLUS term\n                  | expression MINUS term\n                  | expression AND expression\n                  | expression OR expression\n                  | expression EQ expression\n                  | expression NE expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression LE expression\n                  | expression GE expressionterm : factor\n            | term TIMES factor\n            | term DIVIDE factorfactor : NUMBER\n              | FLOAT\n              | STRING\n              | VARIABLE\n              | LPAREN expression RPAREN\n              | make_expr\n              | struct_instancetype : INT_TYPE\n            | FLOAT64_TYPE\n            | STRING_TYPE\n            | BOOL_TYPEif_stmt : IF expression block\n               | IF expression block ELSE blockfor_stmt : FOR expression block\n                | FOR assignment SEMICOLON expression SEMICOLON for_update blockcontinue_stmt : CONTINUEfor_update : assignment\n                  | increment_stmtblock : LBRACE program RBRACEstruct_method : FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE\n                     | FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACEstruct_def : TYPE VARIABLE STRUCT LBRACE struct_fields RBRACEstruct_fields : struct_field\n                     | struct_field struct_fieldsstruct_field : VARIABLE type\n                    | typestruct_instance : VARIABLE LBRACE struct_fields_values RBRACEstruct_fields_values : field_value\n                            | field_value COMMA struct_fields_valuesfield_value : VARIABLE COLON expressionswitch_stmt : SWITCH expression LBRACE case_list RBRACE\n                   | SWITCH LBRACE case_list RBRACEcase_list : case_clause\n                 | case_clause case_listcase_clause : CASE expression COLON program\n                   | DEFAULT COLON programmap_declaration : VAR VARIABLE MAP LBRACKET type RBRACKET type\n                       | VARIABLE ASIG MAP LBRACKET type RBRACKET typemake_stmt : VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN\n                 | VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPARENmake_expr : MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN\n                 | MAKE LPAREN LBRACKET RBRACKET type RPARENmap_declaration_values : VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACEmap_kv_pairs : map_kv_pair\n                    | map_kv_pair COMMA map_kv_pairsmap_kv_pair : STRING COLON expressionarray_declaration : VAR VARIABLE LBRACKET NUMBER RBRACKET type\n                         | VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACEarray_values : expression\n                    | expression COMMA array_valuesslice_declaration : VAR VARIABLE LBRACKET RBRACKET type\n                         | VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACEslice_values : expression\n                    | expression COMMA slice_valuesnew_stmt : VARIABLE ASIG NEW LPAREN VARIABLE RPARENbreak_stmt : BREAKincrement_stmt : VARIABLE INCREMENT\n                      | VARIABLE DECREMENT'
    
_lr_action_items = {'VAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,34,41,42,47,48,49,50,51,52,54,55,63,64,67,68,69,70,71,72,78,85,96,102,120,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,156,159,160,163,178,180,181,183,192,193,196,202,204,208,219,222,223,230,232,235,236,240,243,244,248,253,259,260,261,265,266,271,272,274,],[25,25,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-75,-115,-116,-117,-27,-28,-29,-46,-57,-62,-65,-66,-37,-25,-67,-68,-69,-70,-30,-31,-40,-71,25,-73,-39,-47,-60,-61,-63,-48,-49,-50,-51,-52,-53,-54,-55,-56,-58,-59,-64,-91,25,-26,-110,-38,-72,-78,-86,-90,25,-106,-114,-33,25,-81,-96,-97,-34,25,-101,-74,-111,-99,-32,-36,-107,-35,-100,-102,-98,25,25,-80,-79,]),'VARIABLE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,28,29,30,31,32,33,34,35,38,39,40,41,42,44,47,48,49,50,51,52,53,54,55,63,64,67,68,69,70,71,72,78,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,102,103,104,109,111,119,120,121,123,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,154,156,159,160,163,173,174,178,179,180,181,182,183,184,187,190,191,192,193,196,199,202,203,204,208,218,219,222,223,224,230,231,232,235,236,240,241,243,244,248,253,254,259,260,261,263,265,266,271,272,274,],[26,26,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,37,-75,45,49,59,60,49,-115,49,49,49,49,-116,-117,83,-27,-28,-29,-46,-57,-62,49,-65,-66,-37,-25,-67,-68,-69,-70,-30,-31,-40,125,126,-71,134,134,49,49,49,49,49,49,49,49,26,145,134,134,-73,49,49,49,49,169,-39,49,49,-47,-60,-61,-63,-48,-49,-50,-51,-52,-53,-54,-55,-56,-58,-59,-64,188,-91,26,-26,-110,205,206,-38,126,-72,-78,49,-86,145,217,188,-85,-90,26,-106,49,-114,49,-33,26,-84,-81,-96,-97,49,-34,126,26,-101,-74,-111,49,-99,-32,-36,-107,49,-35,-100,-102,49,-98,26,26,-80,-79,]),'FMT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,34,41,42,47,48,49,50,51,52,54,55,63,64,67,68,69,70,71,72,78,85,96,102,120,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,156,159,160,163,178,180,181,183,192,193,196,202,204,208,219,222,223,230,232,235,236,240,243,244,248,253,259,260,261,265,266,271,272,274,],[27,27,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-75,-115,-116,-117,-27,-28,-29,-46,-57,-62,-65,-66,-37,-25,-67,-68,-69,-70,-30,-31,-40,-71,27,-73,-39,-47,-60,-61,-63,-48,-49,-50,-51,-52,-53,-54,-55,-56,-58,-59,-64,-91,27,-26,-110,-38,-72,-78,-86,-90,27,-106,-114,-33,27,-81,-96,-97,-34,27,-101,-74,-111,-99,-32,-36,-107,-35,-100,-102,-98,27,27,-80,-79,]),'CONTINUE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,34,41,42,47,48,49,50,51,52,54,55,63,64,67,68,69,70,71,72,78,85,96,102,120,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,156,159,160,163,178,180,181,183,192,193,196,202,204,208,219,222,223,230,232,235,236,240,243,244,248,253,259,260,261,265,266,271,272,274,],[28,28,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-75,-115,-116,-117,-27,-28,-29,-46,-57,-62,-65,-66,-37,-25,-67,-68,-69,-70,-30,-31,-40,-71,28,-73,-39,-47,-60,-61,-63,-48,-49,-50,-51,-52,-53,-54,-55,-56,-58,-59,-64,-91,28,-26,-110,-38,-72,-78,-86,-90,28,-106,-114,-33,28,-81,-96,-97,-34,28,-101,-74,-111,-99,-32,-36,-107,-35,-100,-102,-98,28,28,-80,-79,]),'FUNC':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,34,41,42,47,48,49,50,51,52,54,55,63,64,67,68,69,70,71,72,78,85,96,102,120,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,156,159,160,163,178,180,181,183,192,193,196,202,204,208,219,222,223,230,232,235,236,240,243,244,248,253,259,260,261,265,266,271,272,274,],[29,29,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-75,-115,-116,-117,-27,-28,-29,-46,-57,-62,-65,-66,-37,-25,-67,-68,-69,-70,-30,-31,-40,-71,29,-73,-39,-47,-60,-61,-63,-48,-49,-50,-51,-52,-53,-54,-55,-56,-58,-59,-64,-91,29,-26,-110,-38,-72,-78,-86,-90,29,-106,-114,-33,29,-81,-96,-97,-34,29,-101,-74,-111,-99,-32,-36,-107,-35,-100,-102,-98,29,29,-80,-79,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,34,41,42,47,48,49,50,51,52,54,55,63,64,67,68,69,70,71,72,78,85,96,102,120,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,156,159,160,163,178,180,181,183,192,193,196,202,204,208,219,222,223,230,232,235,236,240,243,244,248,253,259,260,261,265,266,271,272,274,],[30,30,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-75,-115,-116,-117,-27,-28,-29,-46,-57,-62,-65,-66,-37,-25,-67,-68,-69,-70,-30,-31,-40,-71,30,-73,-39,-47,-60,-61,-63,-48,-49,-50,-51,-52,-53,-54,-55,-56,-58,-59,-64,-91,30,-26,-110,-38,-72,-78,-86,-90,30,-106,-114,-33,30,-81,-96,-97,-34,30,-101,-74,-111,-99,-32,-36,-107,-35,-100,-102,-98,30,30,-80,-79,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,34,41,42,47,48,49,50,51,52,54,55,63,64,67,68,69,70,71,72,78,85,96,102,120,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,156,159,160,163,178,180,181,183,192,193,196,202,204,208,219,222,223,230,232,235,236,240,243,244,248,253,259,260,261,265,266,271,272,274,],[31,31,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-75,-115,-116,-117,-27,-28,-29,-46,-57,-62,-65,-66,-37,-25,-67,-68,-69,-70,-30,-31,-40,-71,31,-73,-39,-47,-60,-61,-63,-48,-49,-50,-51,-52,-53,-54,-55,-56,-58,-59,-64,-91,31,-26,-110,-38,-72,-78,-86,-90,31,-106,-114,-33,31,-81,-96,-97,-34,31,-101,-74,-111,-99,-32,-36,-107,-35,-100,-102,-98,31,31,-80,-79,]),'TYPE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,34,41,42,47,48,49,50,51,52,54,55,63,64,67,68,69,70,71,72,78,85,96,102,120,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,156,159,160,163,178,180,181,183,192,193,196,202,204,208,219,222,223,230,232,235,236,240,243,244,248,253,259,260,261,265,266,271,272,274,],[32,32,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-75,-115,-116,-117,-27,-28,-29,-46,-57,-62,-65,-66,-37,-25,-67,-68,-69,-70,-30,-31,-40,-71,32,-73,-39,-47,-60,-61,-63,-48,-49,-50,-51,-52,-53,-54,-55,-56,-58,-59,-64,-91,32,-26,-110,-38,-72,-78,-86,-90,32,-106,-114,-33,32,-81,-96,-97,-34,32,-101,-74,-111,-99,-32,-36,-107,-35,-100,-102,-98,32,32,-80,-79,]),'SWITCH':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,34,41,42,47,48,49,50,51,52,54,55,63,64,67,68,69,70,71,72,78,85,96,102,120,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,156,159,160,163,178,180,181,183,192,193,196,202,204,208,219,222,223,230,232,235,236,240,243,244,248,253,259,260,261,265,266,271,272,274,],[33,33,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-75,-115,-116,-117,-27,-28,-29,-46,-57,-62,-65,-66,-37,-25,-67,-68,-69,-70,-30,-31,-40,-71,33,-73,-39,-47,-60,-61,-63,-48,-49,-50,-51,-52,-53,-54,-55,-56,-58,-59,-64,-91,33,-26,-110,-38,-72,-78,-86,-90,33,-106,-114,-33,33,-81,-96,-97,-34,33,-101,-74,-111,-99,-32,-36,-107,-35,-100,-102,-98,33,33,-80,-79,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,34,41,42,47,48,49,50,51,52,54,55,63,64,67,68,69,70,71,72,78,85,96,102,120,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,156,159,160,163,178,180,181,183,192,193,196,202,204,208,219,222,223,230,232,235,236,240,243,244,248,253,259,260,261,265,266,271,272,274,],[34,34,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-75,-115,-116,-117,-27,-28,-29,-46,-57,-62,-65,-66,-37,-25,-67,-68,-69,-70,-30,-31,-40,-71,34,-73,-39,-47,-60,-61,-63,-48,-49,-50,-51,-52,-53,-54,-55,-56,-58,-59,-64,-91,34,-26,-110,-38,-72,-78,-86,-90,34,-106,-114,-33,34,-81,-96,-97,-34,34,-101,-74,-111,-99,-32,-36,-107,-35,-100,-102,-98,34,34,-80,-79,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,34,41,42,47,48,49,50,51,52,54,55,63,64,67,68,69,70,71,72,78,85,96,102,120,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,156,159,160,163,178,180,181,183,192,193,196,202,204,208,219,222,223,230,232,235,236,240,243,244,248,253,259,260,261,265,266,271,272,274,],[35,35,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-75,-115,-116,-117,-27,-28,-29,-46,-57,-62,-65,-66,-37,-25,-67,-68,-69,-70,-30,-31,-40,-71,35,-73,-39,-47,-60,-61,-63,-48,-49,-50,-51,-52,-53,-54,-55,-56,-58,-59,-64,-91,35,-26,-110,-38,-72,-78,-86,-90,35,-106,-114,-33,35,-81,-96,-97,-34,35,-101,-74,-111,-99,-32,-36,-107,-35,-100,-102,-98,35,35,-80,-79,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,34,36,41,42,47,48,49,50,51,52,54,55,63,64,67,68,69,70,71,72,78,85,102,120,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,156,160,163,178,180,181,183,192,196,202,204,219,222,223,230,235,236,240,243,244,248,253,259,260,261,265,272,274,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-75,-115,-2,-116,-117,-27,-28,-29,-46,-57,-62,-65,-66,-37,-25,-67,-68,-69,-70,-30,-31,-40,-71,-73,-39,-47,-60,-61,-63,-48,-49,-50,-51,-52,-53,-54,-55,-56,-58,-59,-64,-91,-26,-110,-38,-72,-78,-86,-90,-106,-114,-33,-81,-96,-97,-34,-101,-74,-111,-99,-32,-36,-107,-35,-100,-102,-98,-80,-79,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,34,36,41,42,47,48,49,50,51,52,54,55,63,64,67,68,69,70,71,72,78,85,102,107,108,120,131,132,133,134,135,136,137,138,139,140,141,142,143,144,146,147,148,149,150,155,156,157,160,163,178,180,181,183,189,190,191,192,194,196,202,204,210,211,218,219,220,221,222,223,225,226,230,233,235,236,238,239,240,243,244,247,248,250,251,253,255,259,260,261,264,265,268,269,270,272,273,274,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-75,-115,-2,-116,-117,-27,-28,-29,-46,-57,-62,-65,-66,-37,-25,-67,-68,-69,-70,-30,-31,-40,-71,-73,156,-92,-39,-47,-60,-61,-63,-48,-49,-50,-51,-52,-53,-54,-55,-56,181,183,-87,-58,-59,-64,192,-91,-93,-26,-110,-38,-72,-78,-86,219,-82,-85,-90,-95,-106,-114,-33,-89,-88,-84,-81,-83,-94,-96,-97,240,-112,-34,248,-101,-74,253,-108,-111,-99,-32,259,-36,261,-103,-107,-113,-35,-100,-102,-109,-98,-104,-105,272,-80,274,-79,]),'CASE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,34,36,41,42,47,48,49,50,51,52,54,55,62,63,64,67,68,69,70,71,72,78,85,102,106,108,120,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,156,160,163,178,180,181,183,192,194,196,202,204,219,221,222,223,230,235,236,240,243,244,248,253,259,260,261,265,272,274,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-75,-115,-2,-116,-117,-27,-28,-29,-46,-57,-62,-65,-66,109,-37,-25,-67,-68,-69,-70,-30,-31,-40,-71,-73,109,109,-39,-47,-60,-61,-63,-48,-49,-50,-51,-52,-53,-54,-55,-56,-58,-59,-64,-91,-26,-110,-38,-72,-78,-86,-90,-95,-106,-114,-33,-81,-94,-96,-97,-34,-101,-74,-111,-99,-32,-36,-107,-35,-100,-102,-98,-80,-79,]),'DEFAULT':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,34,36,41,42,47,48,49,50,51,52,54,55,62,63,64,67,68,69,70,71,72,78,85,102,106,108,120,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,156,160,163,178,180,181,183,192,194,196,202,204,219,221,222,223,230,235,236,240,243,244,248,253,259,260,261,265,272,274,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-75,-115,-2,-116,-117,-27,-28,-29,-46,-57,-62,-65,-66,110,-37,-25,-67,-68,-69,-70,-30,-31,-40,-71,-73,110,110,-39,-47,-60,-61,-63,-48,-49,-50,-51,-52,-53,-54,-55,-56,-58,-59,-64,-91,-26,-110,-38,-72,-78,-86,-90,-95,-106,-114,-33,-81,-94,-96,-97,-34,-101,-74,-111,-99,-32,-36,-107,-35,-100,-102,-98,-80,-79,]),'ASSIGN':([26,59,217,],[38,38,38,]),'ASIG':([26,59,64,67,68,69,70,217,],[39,104,111,-67,-68,-69,-70,104,]),'LPAREN':([26,29,30,31,33,35,38,39,40,45,53,56,75,76,80,81,82,86,87,88,89,90,91,92,93,94,95,98,99,103,104,109,111,121,123,182,199,203,206,224,241,254,263,],[40,44,53,53,53,53,53,53,53,84,53,101,118,119,122,123,124,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,231,53,53,53,53,]),'INCREMENT':([26,217,],[41,41,]),'DECREMENT':([26,217,],[42,42,]),'DOT':([27,],[43,]),'NUMBER':([30,31,33,35,38,39,40,53,66,74,86,87,88,89,90,91,92,93,94,95,98,99,103,104,109,111,121,123,182,199,203,224,241,254,263,],[47,47,47,47,47,47,47,47,113,116,132,132,47,47,47,47,47,47,47,47,132,132,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'FLOAT':([30,31,33,35,38,39,40,53,86,87,88,89,90,91,92,93,94,95,98,99,103,104,109,111,121,123,182,199,203,224,241,254,263,],[48,48,48,48,48,48,48,48,133,133,48,48,48,48,48,48,48,48,133,133,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'STRING':([30,31,33,35,38,39,40,53,86,87,88,89,90,91,92,93,94,95,98,99,103,104,109,111,121,122,123,182,199,203,224,237,241,254,262,263,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,171,52,52,52,52,52,252,52,52,252,52,]),'MAKE':([30,31,33,35,38,39,40,53,86,87,88,89,90,91,92,93,94,95,98,99,103,104,109,111,121,123,182,199,203,224,241,254,263,],[56,56,56,56,56,75,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'LBRACE':([33,41,42,46,47,48,49,50,51,52,54,55,57,59,61,67,68,69,70,71,72,105,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,166,177,183,198,207,214,215,216,223,235,257,260,267,],[62,-116,-117,96,-27,-28,97,-46,-57,-62,-65,-66,96,97,106,-67,-68,-69,-70,-30,-31,154,96,96,-47,-60,-61,97,-48,-49,-50,-51,-52,-53,-54,-55,-56,-58,-59,-64,199,208,-86,224,232,-76,96,-77,237,-101,266,-100,271,]),'MAP':([37,39,101,118,],[65,73,151,167,]),'LBRACKET':([37,39,65,73,101,118,151,167,],[66,74,112,115,152,168,185,200,]),'INT_TYPE':([37,67,68,69,70,112,114,115,117,126,128,154,162,165,176,185,186,188,190,191,195,197,200,201,218,234,242,245,258,],[67,-67,-68,-69,-70,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-85,67,67,67,67,-84,67,67,67,67,]),'FLOAT64_TYPE':([37,67,68,69,70,112,114,115,117,126,128,154,162,165,176,185,186,188,190,191,195,197,200,201,218,234,242,245,258,],[68,-67,-68,-69,-70,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-85,68,68,68,68,-84,68,68,68,68,]),'STRING_TYPE':([37,67,68,69,70,112,114,115,117,126,128,154,162,165,176,185,186,188,190,191,195,197,200,201,218,234,242,245,258,],[69,-67,-68,-69,-70,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-85,69,69,69,69,-84,69,69,69,69,]),'BOOL_TYPE':([37,67,68,69,70,112,114,115,117,126,128,154,162,165,176,185,186,188,190,191,195,197,200,201,218,234,242,245,258,],[70,-67,-68,-69,-70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-85,70,70,70,70,-84,70,70,70,70,]),'NEW':([39,],[76,]),'RPAREN':([40,47,48,49,50,51,52,54,55,67,68,69,70,77,79,84,100,125,127,129,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,169,170,172,175,183,205,209,213,228,229,231,235,246,249,256,260,],[78,-27,-28,-29,-46,-57,-62,-65,-66,-67,-68,-69,-70,120,-44,128,150,174,176,-41,-47,-60,-61,-63,-48,-49,-50,-51,-52,-53,-54,-55,-56,-58,-59,-64,202,-45,204,-43,-86,230,-42,235,243,244,245,-101,258,260,265,-100,]),'PRINTF':([43,],[80,]),'PRINTLN':([43,],[81,]),'SCANLN':([43,],[82,]),'PLUS':([46,47,48,49,50,51,52,54,55,57,59,61,63,71,72,79,100,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,153,158,160,172,183,210,226,229,235,239,243,260,265,269,],[86,-27,-28,-29,-46,-57,-62,-65,-66,86,-29,86,86,86,86,86,86,-47,-60,-61,-63,-48,86,86,86,86,86,86,86,86,-58,-59,-64,86,86,86,86,-86,86,86,86,-101,86,-101,-100,-100,86,]),'MINUS':([46,47,48,49,50,51,52,54,55,57,59,61,63,71,72,79,100,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,153,158,160,172,183,210,226,229,235,239,243,260,265,269,],[87,-27,-28,-29,-46,-57,-62,-65,-66,87,-29,87,87,87,87,87,87,-47,-60,-61,-63,-48,87,87,87,87,87,87,87,87,-58,-59,-64,87,87,87,87,-86,87,87,87,-101,87,-101,-100,-100,87,]),'AND':([46,47,48,49,50,51,52,54,55,57,59,61,63,71,72,79,100,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,153,158,160,172,183,210,226,229,235,239,243,260,265,269,],[88,-27,-28,-29,-46,-57,-62,-65,-66,88,-29,88,88,88,88,88,88,-47,-60,-61,-63,-48,88,88,88,88,88,88,88,88,-58,-59,-64,88,88,88,88,-86,88,88,88,-101,88,-101,-100,-100,88,]),'OR':([46,47,48,49,50,51,52,54,55,57,59,61,63,71,72,79,100,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,153,158,160,172,183,210,226,229,235,239,243,260,265,269,],[89,-27,-28,-29,-46,-57,-62,-65,-66,89,-29,89,89,89,89,89,89,-47,-60,-61,-63,-48,89,89,89,89,89,89,89,89,-58,-59,-64,89,89,89,89,-86,89,89,89,-101,89,-101,-100,-100,89,]),'EQ':([46,47,48,49,50,51,52,54,55,57,59,61,63,71,72,79,100,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,153,158,160,172,183,210,226,229,235,239,243,260,265,269,],[90,-27,-28,-29,-46,-57,-62,-65,-66,90,-29,90,90,90,90,90,90,-47,-60,-61,-63,-48,90,90,90,90,90,90,90,90,-58,-59,-64,90,90,90,90,-86,90,90,90,-101,90,-101,-100,-100,90,]),'NE':([46,47,48,49,50,51,52,54,55,57,59,61,63,71,72,79,100,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,153,158,160,172,183,210,226,229,235,239,243,260,265,269,],[91,-27,-28,-29,-46,-57,-62,-65,-66,91,-29,91,91,91,91,91,91,-47,-60,-61,-63,-48,91,91,91,91,91,91,91,91,-58,-59,-64,91,91,91,91,-86,91,91,91,-101,91,-101,-100,-100,91,]),'LT':([46,47,48,49,50,51,52,54,55,57,59,61,63,71,72,79,100,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,153,158,160,172,183,210,226,229,235,239,243,260,265,269,],[92,-27,-28,-29,-46,-57,-62,-65,-66,92,-29,92,92,92,92,92,92,-47,-60,-61,-63,-48,92,92,92,92,92,92,92,92,-58,-59,-64,92,92,92,92,-86,92,92,92,-101,92,-101,-100,-100,92,]),'GT':([46,47,48,49,50,51,52,54,55,57,59,61,63,71,72,79,100,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,153,158,160,172,183,210,226,229,235,239,243,260,265,269,],[93,-27,-28,-29,-46,-57,-62,-65,-66,93,-29,93,93,93,93,93,93,-47,-60,-61,-63,-48,93,93,93,93,93,93,93,93,-58,-59,-64,93,93,93,93,-86,93,93,93,-101,93,-101,-100,-100,93,]),'LE':([46,47,48,49,50,51,52,54,55,57,59,61,63,71,72,79,100,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,153,158,160,172,183,210,226,229,235,239,243,260,265,269,],[94,-27,-28,-29,-46,-57,-62,-65,-66,94,-29,94,94,94,94,94,94,-47,-60,-61,-63,-48,94,94,94,94,94,94,94,94,-58,-59,-64,94,94,94,94,-86,94,94,94,-101,94,-101,-100,-100,94,]),'GE':([46,47,48,49,50,51,52,54,55,57,59,61,63,71,72,79,100,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,153,158,160,172,183,210,226,229,235,239,243,260,265,269,],[95,-27,-28,-29,-46,-57,-62,-65,-66,95,-29,95,95,95,95,95,95,-47,-60,-61,-63,-48,95,95,95,95,95,95,95,95,-58,-59,-64,95,95,95,95,-86,95,95,95,-101,95,-101,-100,-100,95,]),'SEMICOLON':([47,48,49,50,51,52,54,55,58,71,72,131,132,133,134,135,136,137,138,139,140,141,142,143,148,149,150,153,183,235,260,],[-27,-28,-29,-46,-57,-62,-65,-66,103,-30,-31,-47,-60,-61,-63,-48,-49,-50,-51,-52,-53,-54,-55,-56,-58,-59,-64,187,-86,-101,-100,]),'COMMA':([47,48,49,50,51,52,54,55,67,68,69,70,79,129,131,132,133,134,135,136,137,138,139,140,141,142,143,147,148,149,150,171,175,183,210,226,235,239,251,260,269,],[-27,-28,-29,-46,-57,-62,-65,-66,-67,-68,-69,-70,121,179,-47,-60,-61,-63,-48,-49,-50,-51,-52,-53,-54,-55,-56,184,-58,-59,-64,203,-43,-86,-89,241,-101,254,262,-100,-105,]),'COLON':([47,48,49,50,51,52,54,55,110,131,132,133,134,135,136,137,138,139,140,141,142,143,145,148,149,150,158,183,235,252,260,],[-27,-28,-29,-46,-57,-62,-65,-66,159,-47,-60,-61,-63,-48,-49,-50,-51,-52,-53,-54,-55,-56,182,-58,-59,-64,193,-86,-101,263,-100,]),'TIMES':([47,48,49,50,51,52,54,55,59,131,132,133,134,135,148,149,150,183,235,243,260,265,],[-60,-61,-63,98,-57,-62,-65,-66,-63,98,-60,-61,-63,98,-58,-59,-64,-86,-101,-101,-100,-100,]),'DIVIDE':([47,48,49,50,51,52,54,55,59,131,132,133,134,135,148,149,150,183,235,243,260,265,],[-60,-61,-63,99,-57,-62,-65,-66,-63,99,-60,-61,-63,99,-58,-59,-64,-86,-101,-101,-100,-100,]),'STRUCT':([60,],[105,]),'RBRACKET':([66,67,68,69,70,74,113,116,152,161,164,168,212,227,],[114,-67,-68,-69,-70,117,162,165,186,195,197,201,234,242,]),'ELSE':([85,181,],[130,-78,]),'AMPER':([124,],[173,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,96,159,193,208,232,266,271,],[1,36,144,194,221,233,247,270,273,]),'statement':([0,2,96,159,193,208,232,266,271,],[2,2,2,2,2,2,2,2,2,]),'declaration':([0,2,96,159,193,208,232,266,271,],[3,3,3,3,3,3,3,3,3,]),'assignment':([0,2,31,96,159,187,193,208,232,266,271,],[4,4,58,4,4,214,4,4,4,4,4,]),'print_stmt':([0,2,96,159,193,208,232,266,271,],[5,5,5,5,5,5,5,5,5,]),'input_stmt':([0,2,96,159,193,208,232,266,271,],[6,6,6,6,6,6,6,6,6,]),'continue_stmt':([0,2,96,159,193,208,232,266,271,],[7,7,7,7,7,7,7,7,7,]),'struct_method':([0,2,96,159,193,208,232,266,271,],[8,8,8,8,8,8,8,8,8,]),'func_def':([0,2,96,159,193,208,232,266,271,],[9,9,9,9,9,9,9,9,9,]),'func_no_params':([0,2,96,159,193,208,232,266,271,],[10,10,10,10,10,10,10,10,10,]),'func_call':([0,2,96,159,193,208,232,266,271,],[11,11,11,11,11,11,11,11,11,]),'if_stmt':([0,2,96,159,193,208,232,266,271,],[12,12,12,12,12,12,12,12,12,]),'for_stmt':([0,2,96,159,193,208,232,266,271,],[13,13,13,13,13,13,13,13,13,]),'struct_def':([0,2,96,159,193,208,232,266,271,],[14,14,14,14,14,14,14,14,14,]),'switch_stmt':([0,2,96,159,193,208,232,266,271,],[15,15,15,15,15,15,15,15,15,]),'map_declaration':([0,2,96,159,193,208,232,266,271,],[16,16,16,16,16,16,16,16,16,]),'map_declaration_values':([0,2,96,159,193,208,232,266,271,],[17,17,17,17,17,17,17,17,17,]),'array_declaration':([0,2,96,159,193,208,232,266,271,],[18,18,18,18,18,18,18,18,18,]),'slice_declaration':([0,2,96,159,193,208,232,266,271,],[19,19,19,19,19,19,19,19,19,]),'make_stmt':([0,2,96,159,193,208,232,266,271,],[20,20,20,20,20,20,20,20,20,]),'new_stmt':([0,2,96,159,193,208,232,266,271,],[21,21,21,21,21,21,21,21,21,]),'break_stmt':([0,2,96,159,193,208,232,266,271,],[22,22,22,22,22,22,22,22,22,]),'increment_stmt':([0,2,96,159,187,193,208,232,266,271,],[23,23,23,23,216,23,23,23,23,23,]),'return_stmt':([0,2,96,159,193,208,232,266,271,],[24,24,24,24,24,24,24,24,24,]),'expression':([30,31,33,35,38,39,40,53,88,89,90,91,92,93,94,95,103,104,109,111,121,123,182,199,203,224,241,254,263,],[46,57,61,63,71,72,79,100,136,137,138,139,140,141,142,143,153,72,158,160,79,172,210,226,229,239,226,239,269,]),'term':([30,31,33,35,38,39,40,53,86,87,88,89,90,91,92,93,94,95,103,104,109,111,121,123,182,199,203,224,241,254,263,],[50,50,50,50,50,50,50,50,131,135,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'factor':([30,31,33,35,38,39,40,53,86,87,88,89,90,91,92,93,94,95,98,99,103,104,109,111,121,123,182,199,203,224,241,254,263,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,148,149,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'make_expr':([30,31,33,35,38,39,40,53,86,87,88,89,90,91,92,93,94,95,98,99,103,104,109,111,121,123,182,199,203,224,241,254,263,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'struct_instance':([30,31,33,35,38,39,40,53,86,87,88,89,90,91,92,93,94,95,98,99,103,104,109,111,121,123,182,199,203,224,241,254,263,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'type':([37,112,114,115,117,126,128,154,162,165,176,185,186,188,190,195,197,200,201,234,242,245,258,],[64,161,163,164,166,175,177,191,196,198,207,212,213,218,191,222,223,227,228,249,256,257,267,]),'arg_list':([40,121,],[77,170,]),'block':([46,57,128,130,215,],[85,102,178,180,236,]),'case_list':([62,106,108,],[107,155,157,]),'case_clause':([62,106,108,],[108,108,108,]),'param_list':([84,179,231,],[127,209,246,]),'param':([84,179,231,],[129,129,129,]),'struct_fields_values':([97,184,],[146,211,]),'field_value':([97,184,],[147,147,]),'struct_fields':([154,190,],[189,220,]),'struct_field':([154,190,],[190,190,]),'for_update':([187,],[215,]),'slice_values':([199,241,],[225,255,]),'array_values':([224,254,],[238,264,]),'map_kv_pairs':([237,262,],[250,268,]),'map_kv_pair':([237,262,],[251,251,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','parser.py',60),
  ('program -> statement program','program',2,'p_program','parser.py',61),
  ('statement -> declaration','statement',1,'p_statement','parser.py',66),
  ('statement -> assignment','statement',1,'p_statement','parser.py',67),
  ('statement -> print_stmt','statement',1,'p_statement','parser.py',68),
  ('statement -> input_stmt','statement',1,'p_statement','parser.py',69),
  ('statement -> continue_stmt','statement',1,'p_statement','parser.py',70),
  ('statement -> struct_method','statement',1,'p_statement','parser.py',71),
  ('statement -> func_def','statement',1,'p_statement','parser.py',72),
  ('statement -> func_no_params','statement',1,'p_statement','parser.py',73),
  ('statement -> func_call','statement',1,'p_statement','parser.py',74),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',75),
  ('statement -> for_stmt','statement',1,'p_statement','parser.py',76),
  ('statement -> struct_def','statement',1,'p_statement','parser.py',77),
  ('statement -> switch_stmt','statement',1,'p_statement','parser.py',78),
  ('statement -> map_declaration','statement',1,'p_statement','parser.py',79),
  ('statement -> map_declaration_values','statement',1,'p_statement','parser.py',80),
  ('statement -> array_declaration','statement',1,'p_statement','parser.py',81),
  ('statement -> slice_declaration','statement',1,'p_statement','parser.py',82),
  ('statement -> make_stmt','statement',1,'p_statement','parser.py',83),
  ('statement -> new_stmt','statement',1,'p_statement','parser.py',84),
  ('statement -> break_stmt','statement',1,'p_statement','parser.py',85),
  ('statement -> increment_stmt','statement',1,'p_statement','parser.py',86),
  ('statement -> return_stmt','statement',1,'p_statement','parser.py',87),
  ('declaration -> VAR VARIABLE type','declaration',3,'p_declaration','parser.py',93),
  ('declaration -> VAR VARIABLE type ASIG expression','declaration',5,'p_declaration','parser.py',94),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',117),
  ('expression -> FLOAT','expression',1,'p_expression_float','parser.py',121),
  ('expression -> VARIABLE','expression',1,'p_expression_variable','parser.py',125),
  ('assignment -> VARIABLE ASSIGN expression','assignment',3,'p_assignment','parser.py',137),
  ('assignment -> VARIABLE ASIG expression','assignment',3,'p_assignment','parser.py',138),
  ('print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN','print_stmt',8,'p_print_stmt','parser.py',155),
  ('print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN','print_stmt',6,'p_print_stmt','parser.py',156),
  ('input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN','input_stmt',7,'p_input_stmt','parser.py',161),
  ('func_def -> FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE','func_def',9,'p_func_def','parser.py',166),
  ('func_def -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE','func_def',8,'p_func_def','parser.py',167),
  ('return_stmt -> RETURN expression','return_stmt',2,'p_return_stmt','parser.py',175),
  ('func_no_params -> FUNC VARIABLE LPAREN RPAREN block','func_no_params',5,'p_func_def_no_params','parser.py',192),
  ('func_call -> VARIABLE LPAREN arg_list RPAREN','func_call',4,'p_func_call','parser.py',198),
  ('func_call -> VARIABLE LPAREN RPAREN','func_call',3,'p_func_call','parser.py',199),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',204),
  ('param_list -> param COMMA param_list','param_list',3,'p_param_list','parser.py',205),
  ('param -> VARIABLE type','param',2,'p_param','parser.py',209),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',214),
  ('arg_list -> expression COMMA arg_list','arg_list',3,'p_arg_list','parser.py',215),
  ('expression -> term','expression',1,'p_expression','parser.py',220),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',221),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',222),
  ('expression -> expression AND expression','expression',3,'p_expression','parser.py',223),
  ('expression -> expression OR expression','expression',3,'p_expression','parser.py',224),
  ('expression -> expression EQ expression','expression',3,'p_expression','parser.py',225),
  ('expression -> expression NE expression','expression',3,'p_expression','parser.py',226),
  ('expression -> expression LT expression','expression',3,'p_expression','parser.py',227),
  ('expression -> expression GT expression','expression',3,'p_expression','parser.py',228),
  ('expression -> expression LE expression','expression',3,'p_expression','parser.py',229),
  ('expression -> expression GE expression','expression',3,'p_expression','parser.py',230),
  ('term -> factor','term',1,'p_term','parser.py',248),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',249),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',250),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',266),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',267),
  ('factor -> STRING','factor',1,'p_factor','parser.py',268),
  ('factor -> VARIABLE','factor',1,'p_factor','parser.py',269),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',270),
  ('factor -> make_expr','factor',1,'p_factor','parser.py',271),
  ('factor -> struct_instance','factor',1,'p_factor','parser.py',272),
  ('type -> INT_TYPE','type',1,'p_type','parser.py',291),
  ('type -> FLOAT64_TYPE','type',1,'p_type','parser.py',292),
  ('type -> STRING_TYPE','type',1,'p_type','parser.py',293),
  ('type -> BOOL_TYPE','type',1,'p_type','parser.py',294),
  ('if_stmt -> IF expression block','if_stmt',3,'p_if_stmt','parser.py',299),
  ('if_stmt -> IF expression block ELSE block','if_stmt',5,'p_if_stmt','parser.py',300),
  ('for_stmt -> FOR expression block','for_stmt',3,'p_for_stmt','parser.py',305),
  ('for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block','for_stmt',7,'p_for_stmt','parser.py',306),
  ('continue_stmt -> CONTINUE','continue_stmt',1,'p_continue_stmt','parser.py',312),
  ('for_update -> assignment','for_update',1,'p_for_update','parser.py',318),
  ('for_update -> increment_stmt','for_update',1,'p_for_update','parser.py',319),
  ('block -> LBRACE program RBRACE','block',3,'p_block','parser.py',324),
  ('struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE','struct_method',13,'p_struct_method','parser.py',329),
  ('struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE','struct_method',12,'p_struct_method','parser.py',330),
  ('struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE','struct_def',6,'p_struct_def','parser.py',335),
  ('struct_fields -> struct_field','struct_fields',1,'p_struct_fields','parser.py',340),
  ('struct_fields -> struct_field struct_fields','struct_fields',2,'p_struct_fields','parser.py',341),
  ('struct_field -> VARIABLE type','struct_field',2,'p_struct_field','parser.py',346),
  ('struct_field -> type','struct_field',1,'p_struct_field','parser.py',347),
  ('struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE','struct_instance',4,'p_struct_instance','parser.py',352),
  ('struct_fields_values -> field_value','struct_fields_values',1,'p_struct_fields_values','parser.py',356),
  ('struct_fields_values -> field_value COMMA struct_fields_values','struct_fields_values',3,'p_struct_fields_values','parser.py',357),
  ('field_value -> VARIABLE COLON expression','field_value',3,'p_field_value','parser.py',361),
  ('switch_stmt -> SWITCH expression LBRACE case_list RBRACE','switch_stmt',5,'p_switch_stmt','parser.py',365),
  ('switch_stmt -> SWITCH LBRACE case_list RBRACE','switch_stmt',4,'p_switch_stmt','parser.py',366),
  ('case_list -> case_clause','case_list',1,'p_case_list','parser.py',370),
  ('case_list -> case_clause case_list','case_list',2,'p_case_list','parser.py',371),
  ('case_clause -> CASE expression COLON program','case_clause',4,'p_case_clause','parser.py',375),
  ('case_clause -> DEFAULT COLON program','case_clause',3,'p_case_clause','parser.py',376),
  ('map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type','map_declaration',7,'p_map_declaration','parser.py',382),
  ('map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type','map_declaration',7,'p_map_declaration','parser.py',383),
  ('make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN','make_stmt',10,'p_make_stmt','parser.py',388),
  ('make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN','make_stmt',8,'p_make_stmt','parser.py',389),
  ('make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN','make_expr',8,'p_make_expr','parser.py',393),
  ('make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN','make_expr',6,'p_make_expr','parser.py',394),
  ('map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE','map_declaration_values',10,'p_map_literal_declaration','parser.py',400),
  ('map_kv_pairs -> map_kv_pair','map_kv_pairs',1,'p_map_kv_pairs','parser.py',404),
  ('map_kv_pairs -> map_kv_pair COMMA map_kv_pairs','map_kv_pairs',3,'p_map_kv_pairs','parser.py',405),
  ('map_kv_pair -> STRING COLON expression','map_kv_pair',3,'p_map_kv_pair','parser.py',409),
  ('array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type','array_declaration',6,'p_array_declaration','parser.py',414),
  ('array_declaration -> VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE','array_declaration',9,'p_array_declaration','parser.py',415),
  ('array_values -> expression','array_values',1,'p_array_values','parser.py',419),
  ('array_values -> expression COMMA array_values','array_values',3,'p_array_values','parser.py',420),
  ('slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type','slice_declaration',5,'p_slice_declaration','parser.py',425),
  ('slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE','slice_declaration',8,'p_slice_declaration','parser.py',426),
  ('slice_values -> expression','slice_values',1,'p_slice_values','parser.py',430),
  ('slice_values -> expression COMMA slice_values','slice_values',3,'p_slice_values','parser.py',431),
  ('new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN','new_stmt',6,'p_new_stmt','parser.py',436),
  ('break_stmt -> BREAK','break_stmt',1,'p_break_stmt','parser.py',441),
  ('increment_stmt -> VARIABLE INCREMENT','increment_stmt',2,'p_increment_stmt','parser.py',448),
  ('increment_stmt -> VARIABLE DECREMENT','increment_stmt',2,'p_increment_stmt','parser.py',449),
]
