
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'startAMPER AND ASIG ASSIGN BOOL_TYPE BREAK CASE COLON COMMA CONTINUE DECREMENT DEFAULT DIVIDE DOT ELSE EQ FALSE FLOAT FLOAT64_TYPE FMT FOR FUNC FUNCNAME GE GT IF IMPORT INCREMENT INT_TYPE LBRACE LBRACKET LE LPAREN LT MAIN MAKE MAP MINUS MOD NE NEW NOT NUMBER OR PACKAGE PLUS PRINT PRINTF PRINTLN RANGE RBRACE RBRACKET RETURN RPAREN SCANLN SEMICOLON STRING STRING_TYPE STRUCT SWITCH TIMES TRUE TYPE UINT VAR VARIABLEstart : PACKAGE MAIN import_stmt programimport_stmt : IMPORT LPAREN STRING RPAREN\n                    | IMPORT STRINGprogram : statement\n               | statement programstatement : declaration\n                 | assignment\n                 | print_stmt\n                 | input_stmt\n                 | continue_stmt\n                 | struct_method\n                 | func_def\n                 | func_no_params\n                 | func_call\n                 | if_stmt\n                 | for_stmt\n                 | struct_def\n                 | switch_stmt\n                 | map_declaration\n                 | map_declaration_values\n                 | array_declaration\n                 | slice_declaration\n                 | make_stmt\n                 | new_stmt\n                 | break_stmt\n                 | increment_stmt\n                 | return_stmtdeclaration : VAR VARIABLE type\n                   | VAR VARIABLE type ASIG expressionexpression : NUMBERexpression : FLOATexpression : VARIABLEassignment : VARIABLE ASSIGN expression\n                  | VARIABLE ASIG expressionprint_stmt : FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN\n                  | FMT DOT PRINTLN LPAREN expression RPARENinput_stmt : FMT DOT SCANLN LPAREN AMPER VARIABLE RPARENfunc_def : FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE\n                | FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACEreturn_stmt : RETURN expressionfunc_no_params : FUNC VARIABLE LPAREN RPAREN blockfunc_call : VARIABLE LPAREN arg_list RPAREN\n                 | VARIABLE LPAREN RPARENparam_list : param\n                  | param COMMA param_listparam : VARIABLE typearg_list : expression\n                | expression COMMA arg_listexpression : term\n                  | expression PLUS term\n                  | expression MINUS term\n                  | expression AND expression\n                  | expression OR expression\n                  | expression EQ expression\n                  | expression NE expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression LE expression\n                  | expression GE expressionterm : factor\n            | term TIMES factor\n            | term DIVIDE factorfactor : NUMBER\n              | FLOAT\n              | STRING\n              | VARIABLE\n              | LPAREN expression RPAREN\n              | make_expr\n              | struct_instancetype : INT_TYPE\n            | FLOAT64_TYPE\n            | STRING_TYPE\n            | BOOL_TYPEif_stmt : IF expression block\n               | IF expression block ELSE blockfor_stmt : FOR expression block\n                | FOR assignment SEMICOLON expression SEMICOLON for_update blockcontinue_stmt : CONTINUEfor_update : assignment\n                  | increment_stmtblock : LBRACE program RBRACEstruct_method : FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE\n                     | FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACEstruct_def : TYPE VARIABLE STRUCT LBRACE struct_fields RBRACEstruct_fields : struct_field\n                     | struct_field struct_fieldsstruct_field : VARIABLE type\n                    | typestruct_instance : VARIABLE LBRACE struct_fields_values RBRACEstruct_fields_values : field_value\n                            | field_value COMMA struct_fields_valuesfield_value : VARIABLE COLON expressionswitch_stmt : SWITCH expression LBRACE case_list RBRACE\n                   | SWITCH LBRACE case_list RBRACEcase_list : case_clause\n                 | case_clause case_listcase_clause : CASE expression COLON program\n                   | DEFAULT COLON programmap_declaration : VAR VARIABLE MAP LBRACKET type RBRACKET type\n                       | VARIABLE ASIG MAP LBRACKET type RBRACKET typemake_stmt : VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN\n                 | VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPARENmake_expr : MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN\n                 | MAKE LPAREN LBRACKET RBRACKET type RPARENmap_declaration_values : VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACEmap_kv_pairs : map_kv_pair\n                    | map_kv_pair COMMA map_kv_pairsmap_kv_pair : STRING COLON expressionarray_declaration : VAR VARIABLE LBRACKET NUMBER RBRACKET type\n                         | VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACEarray_values : expression\n                    | expression COMMA array_valuesslice_declaration : VAR VARIABLE LBRACKET RBRACKET type\n                         | VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACEslice_values : expression\n                    | expression COMMA slice_valuesnew_stmt : VARIABLE ASIG NEW LPAREN VARIABLE RPARENbreak_stmt : BREAKincrement_stmt : VARIABLE INCREMENT\n                      | VARIABLE DECREMENT'
    
_lr_action_items = {'PACKAGE':([0,],[2,]),'$end':([1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,39,43,48,49,54,55,56,57,58,59,61,62,70,72,75,76,77,78,79,80,86,93,110,129,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,165,169,172,187,189,190,192,201,205,211,213,228,231,232,239,244,245,249,252,253,257,262,268,269,270,274,281,283,],[0,-1,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-78,-118,-5,-119,-120,-30,-31,-32,-49,-60,-65,-68,-69,-40,-28,-70,-71,-72,-73,-33,-34,-43,-74,-76,-42,-50,-63,-64,-66,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-62,-67,-94,-29,-113,-41,-75,-81,-89,-93,-109,-117,-36,-84,-99,-100,-37,-104,-77,-114,-102,-35,-39,-110,-38,-103,-105,-101,-83,-82,]),'MAIN':([2,],[3,]),'IMPORT':([3,],[5,]),'VAR':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,39,42,48,49,54,55,56,57,58,59,61,62,70,72,75,76,77,78,79,80,86,93,104,110,119,129,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,165,168,169,172,187,189,190,192,201,202,205,211,213,217,228,231,232,239,241,244,245,249,252,253,257,262,268,269,270,274,275,280,281,283,],[30,30,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-78,-118,-3,-119,-120,-30,-31,-32,-49,-60,-65,-68,-69,-40,-28,-70,-71,-72,-73,-33,-34,-43,-74,30,-76,-2,-42,-50,-63,-64,-66,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-62,-67,-94,30,-29,-113,-41,-75,-81,-89,-93,30,-109,-117,-36,30,-84,-99,-100,-37,30,-104,-77,-114,-102,-35,-39,-110,-38,-103,-105,-101,30,30,-83,-82,]),'VARIABLE':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,35,36,37,38,39,40,42,45,46,47,48,49,51,54,55,56,57,58,59,60,61,62,70,72,75,76,77,78,79,80,86,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,111,112,117,119,120,128,129,130,132,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,163,165,168,169,172,182,183,187,188,189,190,191,192,193,196,199,200,201,202,205,208,211,212,213,217,227,228,231,232,233,239,240,241,244,245,249,250,252,253,257,262,263,268,269,270,272,274,275,280,281,283,],[31,31,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,44,-78,52,56,66,67,56,-118,56,-3,56,56,56,-119,-120,91,-30,-31,-32,-49,-60,-65,56,-68,-69,-40,-28,-70,-71,-72,-73,-33,-34,-43,134,135,-74,143,143,56,56,56,56,56,56,56,56,31,154,143,143,-76,56,56,56,-2,56,178,-42,56,56,-50,-63,-64,-66,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-62,-67,197,-94,31,-29,-113,214,215,-41,135,-75,-81,56,-89,154,226,197,-88,-93,31,-109,56,-117,56,-36,31,-87,-84,-99,-100,56,-37,135,31,-104,-77,-114,56,-102,-35,-39,-110,56,-38,-103,-105,56,-101,31,31,-83,-82,]),'FMT':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,39,42,48,49,54,55,56,57,58,59,61,62,70,72,75,76,77,78,79,80,86,93,104,110,119,129,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,165,168,169,172,187,189,190,192,201,202,205,211,213,217,228,231,232,239,241,244,245,249,252,253,257,262,268,269,270,274,275,280,281,283,],[32,32,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-78,-118,-3,-119,-120,-30,-31,-32,-49,-60,-65,-68,-69,-40,-28,-70,-71,-72,-73,-33,-34,-43,-74,32,-76,-2,-42,-50,-63,-64,-66,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-62,-67,-94,32,-29,-113,-41,-75,-81,-89,-93,32,-109,-117,-36,32,-84,-99,-100,-37,32,-104,-77,-114,-102,-35,-39,-110,-38,-103,-105,-101,32,32,-83,-82,]),'CONTINUE':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,39,42,48,49,54,55,56,57,58,59,61,62,70,72,75,76,77,78,79,80,86,93,104,110,119,129,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,165,168,169,172,187,189,190,192,201,202,205,211,213,217,228,231,232,239,241,244,245,249,252,253,257,262,268,269,270,274,275,280,281,283,],[33,33,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-78,-118,-3,-119,-120,-30,-31,-32,-49,-60,-65,-68,-69,-40,-28,-70,-71,-72,-73,-33,-34,-43,-74,33,-76,-2,-42,-50,-63,-64,-66,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-62,-67,-94,33,-29,-113,-41,-75,-81,-89,-93,33,-109,-117,-36,33,-84,-99,-100,-37,33,-104,-77,-114,-102,-35,-39,-110,-38,-103,-105,-101,33,33,-83,-82,]),'FUNC':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,39,42,48,49,54,55,56,57,58,59,61,62,70,72,75,76,77,78,79,80,86,93,104,110,119,129,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,165,168,169,172,187,189,190,192,201,202,205,211,213,217,228,231,232,239,241,244,245,249,252,253,257,262,268,269,270,274,275,280,281,283,],[34,34,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-78,-118,-3,-119,-120,-30,-31,-32,-49,-60,-65,-68,-69,-40,-28,-70,-71,-72,-73,-33,-34,-43,-74,34,-76,-2,-42,-50,-63,-64,-66,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-62,-67,-94,34,-29,-113,-41,-75,-81,-89,-93,34,-109,-117,-36,34,-84,-99,-100,-37,34,-104,-77,-114,-102,-35,-39,-110,-38,-103,-105,-101,34,34,-83,-82,]),'IF':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,39,42,48,49,54,55,56,57,58,59,61,62,70,72,75,76,77,78,79,80,86,93,104,110,119,129,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,165,168,169,172,187,189,190,192,201,202,205,211,213,217,228,231,232,239,241,244,245,249,252,253,257,262,268,269,270,274,275,280,281,283,],[35,35,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-78,-118,-3,-119,-120,-30,-31,-32,-49,-60,-65,-68,-69,-40,-28,-70,-71,-72,-73,-33,-34,-43,-74,35,-76,-2,-42,-50,-63,-64,-66,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-62,-67,-94,35,-29,-113,-41,-75,-81,-89,-93,35,-109,-117,-36,35,-84,-99,-100,-37,35,-104,-77,-114,-102,-35,-39,-110,-38,-103,-105,-101,35,35,-83,-82,]),'FOR':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,39,42,48,49,54,55,56,57,58,59,61,62,70,72,75,76,77,78,79,80,86,93,104,110,119,129,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,165,168,169,172,187,189,190,192,201,202,205,211,213,217,228,231,232,239,241,244,245,249,252,253,257,262,268,269,270,274,275,280,281,283,],[36,36,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-78,-118,-3,-119,-120,-30,-31,-32,-49,-60,-65,-68,-69,-40,-28,-70,-71,-72,-73,-33,-34,-43,-74,36,-76,-2,-42,-50,-63,-64,-66,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-62,-67,-94,36,-29,-113,-41,-75,-81,-89,-93,36,-109,-117,-36,36,-84,-99,-100,-37,36,-104,-77,-114,-102,-35,-39,-110,-38,-103,-105,-101,36,36,-83,-82,]),'TYPE':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,39,42,48,49,54,55,56,57,58,59,61,62,70,72,75,76,77,78,79,80,86,93,104,110,119,129,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,165,168,169,172,187,189,190,192,201,202,205,211,213,217,228,231,232,239,241,244,245,249,252,253,257,262,268,269,270,274,275,280,281,283,],[37,37,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-78,-118,-3,-119,-120,-30,-31,-32,-49,-60,-65,-68,-69,-40,-28,-70,-71,-72,-73,-33,-34,-43,-74,37,-76,-2,-42,-50,-63,-64,-66,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-62,-67,-94,37,-29,-113,-41,-75,-81,-89,-93,37,-109,-117,-36,37,-84,-99,-100,-37,37,-104,-77,-114,-102,-35,-39,-110,-38,-103,-105,-101,37,37,-83,-82,]),'SWITCH':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,39,42,48,49,54,55,56,57,58,59,61,62,70,72,75,76,77,78,79,80,86,93,104,110,119,129,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,165,168,169,172,187,189,190,192,201,202,205,211,213,217,228,231,232,239,241,244,245,249,252,253,257,262,268,269,270,274,275,280,281,283,],[38,38,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-78,-118,-3,-119,-120,-30,-31,-32,-49,-60,-65,-68,-69,-40,-28,-70,-71,-72,-73,-33,-34,-43,-74,38,-76,-2,-42,-50,-63,-64,-66,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-62,-67,-94,38,-29,-113,-41,-75,-81,-89,-93,38,-109,-117,-36,38,-84,-99,-100,-37,38,-104,-77,-114,-102,-35,-39,-110,-38,-103,-105,-101,38,38,-83,-82,]),'BREAK':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,39,42,48,49,54,55,56,57,58,59,61,62,70,72,75,76,77,78,79,80,86,93,104,110,119,129,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,165,168,169,172,187,189,190,192,201,202,205,211,213,217,228,231,232,239,241,244,245,249,252,253,257,262,268,269,270,274,275,280,281,283,],[39,39,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-78,-118,-3,-119,-120,-30,-31,-32,-49,-60,-65,-68,-69,-40,-28,-70,-71,-72,-73,-33,-34,-43,-74,39,-76,-2,-42,-50,-63,-64,-66,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-62,-67,-94,39,-29,-113,-41,-75,-81,-89,-93,39,-109,-117,-36,39,-84,-99,-100,-37,39,-104,-77,-114,-102,-35,-39,-110,-38,-103,-105,-101,39,39,-83,-82,]),'RETURN':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,39,42,48,49,54,55,56,57,58,59,61,62,70,72,75,76,77,78,79,80,86,93,104,110,119,129,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,165,168,169,172,187,189,190,192,201,202,205,211,213,217,228,231,232,239,241,244,245,249,252,253,257,262,268,269,270,274,275,280,281,283,],[40,40,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-78,-118,-3,-119,-120,-30,-31,-32,-49,-60,-65,-68,-69,-40,-28,-70,-71,-72,-73,-33,-34,-43,-74,40,-76,-2,-42,-50,-63,-64,-66,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-62,-67,-94,40,-29,-113,-41,-75,-81,-89,-93,40,-109,-117,-36,40,-84,-99,-100,-37,40,-104,-77,-114,-102,-35,-39,-110,-38,-103,-105,-101,40,40,-83,-82,]),'LPAREN':([5,31,34,35,36,38,40,45,46,47,52,60,63,83,84,88,89,90,94,95,96,97,98,99,100,101,102,103,106,107,111,112,117,120,130,132,191,208,212,215,233,250,263,272,],[41,47,51,60,60,60,60,60,60,60,92,60,109,127,128,131,132,133,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,240,60,60,60,60,]),'STRING':([5,35,36,38,40,41,45,46,47,60,94,95,96,97,98,99,100,101,102,103,106,107,111,112,117,120,130,131,132,191,208,212,233,246,250,263,271,272,],[42,59,59,59,59,71,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,180,59,59,59,59,59,261,59,59,261,59,]),'RBRACE':([7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,39,43,48,49,54,55,56,57,58,59,61,62,70,72,75,76,77,78,79,80,86,93,110,115,116,129,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,157,158,159,164,165,166,169,172,187,189,190,192,198,199,200,201,203,205,211,213,219,220,227,228,229,230,231,232,234,235,239,242,244,245,247,248,249,252,253,256,257,259,260,262,264,268,269,270,273,274,277,278,279,281,282,283,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-78,-118,-5,-119,-120,-30,-31,-32,-49,-60,-65,-68,-69,-40,-28,-70,-71,-72,-73,-33,-34,-43,-74,-76,165,-95,-42,-50,-63,-64,-66,-51,-52,-53,-54,-55,-56,-57,-58,-59,190,192,-90,-61,-62,-67,201,-94,-96,-29,-113,-41,-75,-81,-89,228,-85,-88,-93,-98,-109,-117,-36,-92,-91,-87,-84,-86,-97,-99,-100,249,-115,-37,257,-104,-77,262,-111,-114,-102,-35,268,-39,270,-106,-110,-116,-38,-103,-105,-112,-101,-107,-108,281,-83,283,-82,]),'CASE':([7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,39,43,48,49,54,55,56,57,58,59,61,62,69,70,72,75,76,77,78,79,80,86,93,110,114,116,129,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,165,169,172,187,189,190,192,201,203,205,211,213,228,230,231,232,239,244,245,249,252,253,257,262,268,269,270,274,281,283,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-78,-118,-5,-119,-120,-30,-31,-32,-49,-60,-65,-68,-69,117,-40,-28,-70,-71,-72,-73,-33,-34,-43,-74,-76,117,117,-42,-50,-63,-64,-66,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-62,-67,-94,-29,-113,-41,-75,-81,-89,-93,-98,-109,-117,-36,-84,-97,-99,-100,-37,-104,-77,-114,-102,-35,-39,-110,-38,-103,-105,-101,-83,-82,]),'DEFAULT':([7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,39,43,48,49,54,55,56,57,58,59,61,62,69,70,72,75,76,77,78,79,80,86,93,110,114,116,129,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,165,169,172,187,189,190,192,201,203,205,211,213,228,230,231,232,239,244,245,249,252,253,257,262,268,269,270,274,281,283,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-78,-118,-5,-119,-120,-30,-31,-32,-49,-60,-65,-68,-69,118,-40,-28,-70,-71,-72,-73,-33,-34,-43,-74,-76,118,118,-42,-50,-63,-64,-66,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-62,-67,-94,-29,-113,-41,-75,-81,-89,-93,-98,-109,-117,-36,-84,-97,-99,-100,-37,-104,-77,-114,-102,-35,-39,-110,-38,-103,-105,-101,-83,-82,]),'ASSIGN':([31,66,226,],[45,45,45,]),'ASIG':([31,66,72,75,76,77,78,226,],[46,112,120,-70,-71,-72,-73,112,]),'INCREMENT':([31,226,],[48,48,]),'DECREMENT':([31,226,],[49,49,]),'DOT':([32,],[50,]),'NUMBER':([35,36,38,40,45,46,47,60,74,82,94,95,96,97,98,99,100,101,102,103,106,107,111,112,117,120,130,132,191,208,212,233,250,263,272,],[54,54,54,54,54,54,54,54,122,125,141,141,54,54,54,54,54,54,54,54,141,141,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'FLOAT':([35,36,38,40,45,46,47,60,94,95,96,97,98,99,100,101,102,103,106,107,111,112,117,120,130,132,191,208,212,233,250,263,272,],[55,55,55,55,55,55,55,55,142,142,55,55,55,55,55,55,55,55,142,142,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'MAKE':([35,36,38,40,45,46,47,60,94,95,96,97,98,99,100,101,102,103,106,107,111,112,117,120,130,132,191,208,212,233,250,263,272,],[63,63,63,63,63,83,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'LBRACE':([38,48,49,53,54,55,56,57,58,59,61,62,64,66,68,75,76,77,78,79,80,113,137,139,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,175,186,192,207,216,223,224,225,232,244,266,269,276,],[69,-119,-120,104,-30,-31,105,-49,-60,-65,-68,-69,104,105,114,-70,-71,-72,-73,-33,-34,163,104,104,-50,-63,-64,105,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-62,-67,208,217,-89,233,241,-79,104,-80,246,-104,275,-103,280,]),'MAP':([44,46,109,127,],[73,81,160,176,]),'LBRACKET':([44,46,73,81,109,127,160,176,],[74,82,121,124,161,177,194,209,]),'INT_TYPE':([44,75,76,77,78,121,123,124,126,135,137,163,171,174,185,194,195,197,199,200,204,206,209,210,227,243,251,254,267,],[75,-70,-71,-72,-73,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-88,75,75,75,75,-87,75,75,75,75,]),'FLOAT64_TYPE':([44,75,76,77,78,121,123,124,126,135,137,163,171,174,185,194,195,197,199,200,204,206,209,210,227,243,251,254,267,],[76,-70,-71,-72,-73,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-88,76,76,76,76,-87,76,76,76,76,]),'STRING_TYPE':([44,75,76,77,78,121,123,124,126,135,137,163,171,174,185,194,195,197,199,200,204,206,209,210,227,243,251,254,267,],[77,-70,-71,-72,-73,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-88,77,77,77,77,-87,77,77,77,77,]),'BOOL_TYPE':([44,75,76,77,78,121,123,124,126,135,137,163,171,174,185,194,195,197,199,200,204,206,209,210,227,243,251,254,267,],[78,-70,-71,-72,-73,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-88,78,78,78,78,-87,78,78,78,78,]),'NEW':([46,],[84,]),'RPAREN':([47,54,55,56,57,58,59,61,62,71,75,76,77,78,85,87,92,108,134,136,138,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,178,179,181,184,192,214,218,222,237,238,240,244,255,258,265,269,],[86,-30,-31,-32,-49,-60,-65,-68,-69,119,-70,-71,-72,-73,129,-47,137,159,183,185,-44,-50,-63,-64,-66,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-62,-67,211,-48,213,-46,-89,239,-45,244,252,253,254,-104,267,269,274,-103,]),'PRINTF':([50,],[88,]),'PRINTLN':([50,],[89,]),'SCANLN':([50,],[90,]),'PLUS':([53,54,55,56,57,58,59,61,62,64,66,68,70,79,80,87,108,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,162,167,169,181,192,219,235,238,244,248,252,269,274,278,],[94,-30,-31,-32,-49,-60,-65,-68,-69,94,-32,94,94,94,94,94,94,-50,-63,-64,-66,-51,94,94,94,94,94,94,94,94,-61,-62,-67,94,94,94,94,-89,94,94,94,-104,94,-104,-103,-103,94,]),'MINUS':([53,54,55,56,57,58,59,61,62,64,66,68,70,79,80,87,108,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,162,167,169,181,192,219,235,238,244,248,252,269,274,278,],[95,-30,-31,-32,-49,-60,-65,-68,-69,95,-32,95,95,95,95,95,95,-50,-63,-64,-66,-51,95,95,95,95,95,95,95,95,-61,-62,-67,95,95,95,95,-89,95,95,95,-104,95,-104,-103,-103,95,]),'AND':([53,54,55,56,57,58,59,61,62,64,66,68,70,79,80,87,108,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,162,167,169,181,192,219,235,238,244,248,252,269,274,278,],[96,-30,-31,-32,-49,-60,-65,-68,-69,96,-32,96,96,96,96,96,96,-50,-63,-64,-66,-51,96,96,96,96,96,96,96,96,-61,-62,-67,96,96,96,96,-89,96,96,96,-104,96,-104,-103,-103,96,]),'OR':([53,54,55,56,57,58,59,61,62,64,66,68,70,79,80,87,108,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,162,167,169,181,192,219,235,238,244,248,252,269,274,278,],[97,-30,-31,-32,-49,-60,-65,-68,-69,97,-32,97,97,97,97,97,97,-50,-63,-64,-66,-51,97,97,97,97,97,97,97,97,-61,-62,-67,97,97,97,97,-89,97,97,97,-104,97,-104,-103,-103,97,]),'EQ':([53,54,55,56,57,58,59,61,62,64,66,68,70,79,80,87,108,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,162,167,169,181,192,219,235,238,244,248,252,269,274,278,],[98,-30,-31,-32,-49,-60,-65,-68,-69,98,-32,98,98,98,98,98,98,-50,-63,-64,-66,-51,98,98,98,98,98,98,98,98,-61,-62,-67,98,98,98,98,-89,98,98,98,-104,98,-104,-103,-103,98,]),'NE':([53,54,55,56,57,58,59,61,62,64,66,68,70,79,80,87,108,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,162,167,169,181,192,219,235,238,244,248,252,269,274,278,],[99,-30,-31,-32,-49,-60,-65,-68,-69,99,-32,99,99,99,99,99,99,-50,-63,-64,-66,-51,99,99,99,99,99,99,99,99,-61,-62,-67,99,99,99,99,-89,99,99,99,-104,99,-104,-103,-103,99,]),'LT':([53,54,55,56,57,58,59,61,62,64,66,68,70,79,80,87,108,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,162,167,169,181,192,219,235,238,244,248,252,269,274,278,],[100,-30,-31,-32,-49,-60,-65,-68,-69,100,-32,100,100,100,100,100,100,-50,-63,-64,-66,-51,100,100,100,100,100,100,100,100,-61,-62,-67,100,100,100,100,-89,100,100,100,-104,100,-104,-103,-103,100,]),'GT':([53,54,55,56,57,58,59,61,62,64,66,68,70,79,80,87,108,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,162,167,169,181,192,219,235,238,244,248,252,269,274,278,],[101,-30,-31,-32,-49,-60,-65,-68,-69,101,-32,101,101,101,101,101,101,-50,-63,-64,-66,-51,101,101,101,101,101,101,101,101,-61,-62,-67,101,101,101,101,-89,101,101,101,-104,101,-104,-103,-103,101,]),'LE':([53,54,55,56,57,58,59,61,62,64,66,68,70,79,80,87,108,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,162,167,169,181,192,219,235,238,244,248,252,269,274,278,],[102,-30,-31,-32,-49,-60,-65,-68,-69,102,-32,102,102,102,102,102,102,-50,-63,-64,-66,-51,102,102,102,102,102,102,102,102,-61,-62,-67,102,102,102,102,-89,102,102,102,-104,102,-104,-103,-103,102,]),'GE':([53,54,55,56,57,58,59,61,62,64,66,68,70,79,80,87,108,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,162,167,169,181,192,219,235,238,244,248,252,269,274,278,],[103,-30,-31,-32,-49,-60,-65,-68,-69,103,-32,103,103,103,103,103,103,-50,-63,-64,-66,-51,103,103,103,103,103,103,103,103,-61,-62,-67,103,103,103,103,-89,103,103,103,-104,103,-104,-103,-103,103,]),'SEMICOLON':([54,55,56,57,58,59,61,62,65,79,80,140,141,142,143,144,145,146,147,148,149,150,151,152,157,158,159,162,192,244,269,],[-30,-31,-32,-49,-60,-65,-68,-69,111,-33,-34,-50,-63,-64,-66,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-62,-67,196,-89,-104,-103,]),'COMMA':([54,55,56,57,58,59,61,62,75,76,77,78,87,138,140,141,142,143,144,145,146,147,148,149,150,151,152,156,157,158,159,180,184,192,219,235,244,248,260,269,278,],[-30,-31,-32,-49,-60,-65,-68,-69,-70,-71,-72,-73,130,188,-50,-63,-64,-66,-51,-52,-53,-54,-55,-56,-57,-58,-59,193,-61,-62,-67,212,-46,-89,-92,250,-104,263,271,-103,-108,]),'COLON':([54,55,56,57,58,59,61,62,118,140,141,142,143,144,145,146,147,148,149,150,151,152,154,157,158,159,167,192,244,261,269,],[-30,-31,-32,-49,-60,-65,-68,-69,168,-50,-63,-64,-66,-51,-52,-53,-54,-55,-56,-57,-58,-59,191,-61,-62,-67,202,-89,-104,272,-103,]),'TIMES':([54,55,56,57,58,59,61,62,66,140,141,142,143,144,157,158,159,192,244,252,269,274,],[-63,-64,-66,106,-60,-65,-68,-69,-66,106,-63,-64,-66,106,-61,-62,-67,-89,-104,-104,-103,-103,]),'DIVIDE':([54,55,56,57,58,59,61,62,66,140,141,142,143,144,157,158,159,192,244,252,269,274,],[-63,-64,-66,107,-60,-65,-68,-69,-66,107,-63,-64,-66,107,-61,-62,-67,-89,-104,-104,-103,-103,]),'STRUCT':([67,],[113,]),'RBRACKET':([74,75,76,77,78,82,122,125,161,170,173,177,221,236,],[123,-70,-71,-72,-73,126,171,174,195,204,206,210,243,251,]),'ELSE':([93,190,],[139,-81,]),'AMPER':([133,],[182,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'import_stmt':([3,],[4,]),'program':([4,7,104,168,202,217,241,275,280,],[6,43,153,203,230,242,256,279,282,]),'statement':([4,7,104,168,202,217,241,275,280,],[7,7,7,7,7,7,7,7,7,]),'declaration':([4,7,104,168,202,217,241,275,280,],[8,8,8,8,8,8,8,8,8,]),'assignment':([4,7,36,104,168,196,202,217,241,275,280,],[9,9,65,9,9,223,9,9,9,9,9,]),'print_stmt':([4,7,104,168,202,217,241,275,280,],[10,10,10,10,10,10,10,10,10,]),'input_stmt':([4,7,104,168,202,217,241,275,280,],[11,11,11,11,11,11,11,11,11,]),'continue_stmt':([4,7,104,168,202,217,241,275,280,],[12,12,12,12,12,12,12,12,12,]),'struct_method':([4,7,104,168,202,217,241,275,280,],[13,13,13,13,13,13,13,13,13,]),'func_def':([4,7,104,168,202,217,241,275,280,],[14,14,14,14,14,14,14,14,14,]),'func_no_params':([4,7,104,168,202,217,241,275,280,],[15,15,15,15,15,15,15,15,15,]),'func_call':([4,7,104,168,202,217,241,275,280,],[16,16,16,16,16,16,16,16,16,]),'if_stmt':([4,7,104,168,202,217,241,275,280,],[17,17,17,17,17,17,17,17,17,]),'for_stmt':([4,7,104,168,202,217,241,275,280,],[18,18,18,18,18,18,18,18,18,]),'struct_def':([4,7,104,168,202,217,241,275,280,],[19,19,19,19,19,19,19,19,19,]),'switch_stmt':([4,7,104,168,202,217,241,275,280,],[20,20,20,20,20,20,20,20,20,]),'map_declaration':([4,7,104,168,202,217,241,275,280,],[21,21,21,21,21,21,21,21,21,]),'map_declaration_values':([4,7,104,168,202,217,241,275,280,],[22,22,22,22,22,22,22,22,22,]),'array_declaration':([4,7,104,168,202,217,241,275,280,],[23,23,23,23,23,23,23,23,23,]),'slice_declaration':([4,7,104,168,202,217,241,275,280,],[24,24,24,24,24,24,24,24,24,]),'make_stmt':([4,7,104,168,202,217,241,275,280,],[25,25,25,25,25,25,25,25,25,]),'new_stmt':([4,7,104,168,202,217,241,275,280,],[26,26,26,26,26,26,26,26,26,]),'break_stmt':([4,7,104,168,202,217,241,275,280,],[27,27,27,27,27,27,27,27,27,]),'increment_stmt':([4,7,104,168,196,202,217,241,275,280,],[28,28,28,28,225,28,28,28,28,28,]),'return_stmt':([4,7,104,168,202,217,241,275,280,],[29,29,29,29,29,29,29,29,29,]),'expression':([35,36,38,40,45,46,47,60,96,97,98,99,100,101,102,103,111,112,117,120,130,132,191,208,212,233,250,263,272,],[53,64,68,70,79,80,87,108,145,146,147,148,149,150,151,152,162,80,167,169,87,181,219,235,238,248,235,248,278,]),'term':([35,36,38,40,45,46,47,60,94,95,96,97,98,99,100,101,102,103,111,112,117,120,130,132,191,208,212,233,250,263,272,],[57,57,57,57,57,57,57,57,140,144,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'factor':([35,36,38,40,45,46,47,60,94,95,96,97,98,99,100,101,102,103,106,107,111,112,117,120,130,132,191,208,212,233,250,263,272,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,157,158,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'make_expr':([35,36,38,40,45,46,47,60,94,95,96,97,98,99,100,101,102,103,106,107,111,112,117,120,130,132,191,208,212,233,250,263,272,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'struct_instance':([35,36,38,40,45,46,47,60,94,95,96,97,98,99,100,101,102,103,106,107,111,112,117,120,130,132,191,208,212,233,250,263,272,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'type':([44,121,123,124,126,135,137,163,171,174,185,194,195,197,199,204,206,209,210,243,251,254,267,],[72,170,172,173,175,184,186,200,205,207,216,221,222,227,200,231,232,236,237,258,265,266,276,]),'arg_list':([47,130,],[85,179,]),'block':([53,64,137,139,224,],[93,110,187,189,245,]),'case_list':([69,114,116,],[115,164,166,]),'case_clause':([69,114,116,],[116,116,116,]),'param_list':([92,188,240,],[136,218,255,]),'param':([92,188,240,],[138,138,138,]),'struct_fields_values':([105,193,],[155,220,]),'field_value':([105,193,],[156,156,]),'struct_fields':([163,199,],[198,229,]),'struct_field':([163,199,],[199,199,]),'for_update':([196,],[224,]),'slice_values':([208,250,],[234,264,]),'array_values':([233,263,],[247,273,]),'map_kv_pairs':([246,271,],[259,277,]),'map_kv_pair':([246,271,],[260,260,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> PACKAGE MAIN import_stmt program','start',4,'p_start','parser.py',62),
  ('import_stmt -> IMPORT LPAREN STRING RPAREN','import_stmt',4,'p_import_function','parser.py',67),
  ('import_stmt -> IMPORT STRING','import_stmt',2,'p_import_function','parser.py',68),
  ('program -> statement','program',1,'p_program','parser.py',72),
  ('program -> statement program','program',2,'p_program','parser.py',73),
  ('statement -> declaration','statement',1,'p_statement','parser.py',78),
  ('statement -> assignment','statement',1,'p_statement','parser.py',79),
  ('statement -> print_stmt','statement',1,'p_statement','parser.py',80),
  ('statement -> input_stmt','statement',1,'p_statement','parser.py',81),
  ('statement -> continue_stmt','statement',1,'p_statement','parser.py',82),
  ('statement -> struct_method','statement',1,'p_statement','parser.py',83),
  ('statement -> func_def','statement',1,'p_statement','parser.py',84),
  ('statement -> func_no_params','statement',1,'p_statement','parser.py',85),
  ('statement -> func_call','statement',1,'p_statement','parser.py',86),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',87),
  ('statement -> for_stmt','statement',1,'p_statement','parser.py',88),
  ('statement -> struct_def','statement',1,'p_statement','parser.py',89),
  ('statement -> switch_stmt','statement',1,'p_statement','parser.py',90),
  ('statement -> map_declaration','statement',1,'p_statement','parser.py',91),
  ('statement -> map_declaration_values','statement',1,'p_statement','parser.py',92),
  ('statement -> array_declaration','statement',1,'p_statement','parser.py',93),
  ('statement -> slice_declaration','statement',1,'p_statement','parser.py',94),
  ('statement -> make_stmt','statement',1,'p_statement','parser.py',95),
  ('statement -> new_stmt','statement',1,'p_statement','parser.py',96),
  ('statement -> break_stmt','statement',1,'p_statement','parser.py',97),
  ('statement -> increment_stmt','statement',1,'p_statement','parser.py',98),
  ('statement -> return_stmt','statement',1,'p_statement','parser.py',99),
  ('declaration -> VAR VARIABLE type','declaration',3,'p_declaration','parser.py',105),
  ('declaration -> VAR VARIABLE type ASIG expression','declaration',5,'p_declaration','parser.py',106),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',129),
  ('expression -> FLOAT','expression',1,'p_expression_float','parser.py',133),
  ('expression -> VARIABLE','expression',1,'p_expression_variable','parser.py',137),
  ('assignment -> VARIABLE ASSIGN expression','assignment',3,'p_assignment','parser.py',149),
  ('assignment -> VARIABLE ASIG expression','assignment',3,'p_assignment','parser.py',150),
  ('print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN','print_stmt',8,'p_print_stmt','parser.py',167),
  ('print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN','print_stmt',6,'p_print_stmt','parser.py',168),
  ('input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN','input_stmt',7,'p_input_stmt','parser.py',173),
  ('func_def -> FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE','func_def',9,'p_func_def','parser.py',178),
  ('func_def -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE','func_def',8,'p_func_def','parser.py',179),
  ('return_stmt -> RETURN expression','return_stmt',2,'p_return_stmt','parser.py',187),
  ('func_no_params -> FUNC VARIABLE LPAREN RPAREN block','func_no_params',5,'p_func_def_no_params','parser.py',204),
  ('func_call -> VARIABLE LPAREN arg_list RPAREN','func_call',4,'p_func_call','parser.py',210),
  ('func_call -> VARIABLE LPAREN RPAREN','func_call',3,'p_func_call','parser.py',211),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',216),
  ('param_list -> param COMMA param_list','param_list',3,'p_param_list','parser.py',217),
  ('param -> VARIABLE type','param',2,'p_param','parser.py',221),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',226),
  ('arg_list -> expression COMMA arg_list','arg_list',3,'p_arg_list','parser.py',227),
  ('expression -> term','expression',1,'p_expression','parser.py',232),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',233),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',234),
  ('expression -> expression AND expression','expression',3,'p_expression','parser.py',235),
  ('expression -> expression OR expression','expression',3,'p_expression','parser.py',236),
  ('expression -> expression EQ expression','expression',3,'p_expression','parser.py',237),
  ('expression -> expression NE expression','expression',3,'p_expression','parser.py',238),
  ('expression -> expression LT expression','expression',3,'p_expression','parser.py',239),
  ('expression -> expression GT expression','expression',3,'p_expression','parser.py',240),
  ('expression -> expression LE expression','expression',3,'p_expression','parser.py',241),
  ('expression -> expression GE expression','expression',3,'p_expression','parser.py',242),
  ('term -> factor','term',1,'p_term','parser.py',260),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',261),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',262),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',278),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',279),
  ('factor -> STRING','factor',1,'p_factor','parser.py',280),
  ('factor -> VARIABLE','factor',1,'p_factor','parser.py',281),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',282),
  ('factor -> make_expr','factor',1,'p_factor','parser.py',283),
  ('factor -> struct_instance','factor',1,'p_factor','parser.py',284),
  ('type -> INT_TYPE','type',1,'p_type','parser.py',303),
  ('type -> FLOAT64_TYPE','type',1,'p_type','parser.py',304),
  ('type -> STRING_TYPE','type',1,'p_type','parser.py',305),
  ('type -> BOOL_TYPE','type',1,'p_type','parser.py',306),
  ('if_stmt -> IF expression block','if_stmt',3,'p_if_stmt','parser.py',311),
  ('if_stmt -> IF expression block ELSE block','if_stmt',5,'p_if_stmt','parser.py',312),
  ('for_stmt -> FOR expression block','for_stmt',3,'p_for_stmt','parser.py',317),
  ('for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block','for_stmt',7,'p_for_stmt','parser.py',318),
  ('continue_stmt -> CONTINUE','continue_stmt',1,'p_continue_stmt','parser.py',324),
  ('for_update -> assignment','for_update',1,'p_for_update','parser.py',330),
  ('for_update -> increment_stmt','for_update',1,'p_for_update','parser.py',331),
  ('block -> LBRACE program RBRACE','block',3,'p_block','parser.py',336),
  ('struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE','struct_method',13,'p_struct_method','parser.py',341),
  ('struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE','struct_method',12,'p_struct_method','parser.py',342),
  ('struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE','struct_def',6,'p_struct_def','parser.py',347),
  ('struct_fields -> struct_field','struct_fields',1,'p_struct_fields','parser.py',352),
  ('struct_fields -> struct_field struct_fields','struct_fields',2,'p_struct_fields','parser.py',353),
  ('struct_field -> VARIABLE type','struct_field',2,'p_struct_field','parser.py',358),
  ('struct_field -> type','struct_field',1,'p_struct_field','parser.py',359),
  ('struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE','struct_instance',4,'p_struct_instance','parser.py',364),
  ('struct_fields_values -> field_value','struct_fields_values',1,'p_struct_fields_values','parser.py',368),
  ('struct_fields_values -> field_value COMMA struct_fields_values','struct_fields_values',3,'p_struct_fields_values','parser.py',369),
  ('field_value -> VARIABLE COLON expression','field_value',3,'p_field_value','parser.py',373),
  ('switch_stmt -> SWITCH expression LBRACE case_list RBRACE','switch_stmt',5,'p_switch_stmt','parser.py',377),
  ('switch_stmt -> SWITCH LBRACE case_list RBRACE','switch_stmt',4,'p_switch_stmt','parser.py',378),
  ('case_list -> case_clause','case_list',1,'p_case_list','parser.py',382),
  ('case_list -> case_clause case_list','case_list',2,'p_case_list','parser.py',383),
  ('case_clause -> CASE expression COLON program','case_clause',4,'p_case_clause','parser.py',387),
  ('case_clause -> DEFAULT COLON program','case_clause',3,'p_case_clause','parser.py',388),
  ('map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type','map_declaration',7,'p_map_declaration','parser.py',394),
  ('map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type','map_declaration',7,'p_map_declaration','parser.py',395),
  ('make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN','make_stmt',10,'p_make_stmt','parser.py',400),
  ('make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN','make_stmt',8,'p_make_stmt','parser.py',401),
  ('make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN','make_expr',8,'p_make_expr','parser.py',405),
  ('make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN','make_expr',6,'p_make_expr','parser.py',406),
  ('map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE','map_declaration_values',10,'p_map_literal_declaration','parser.py',412),
  ('map_kv_pairs -> map_kv_pair','map_kv_pairs',1,'p_map_kv_pairs','parser.py',416),
  ('map_kv_pairs -> map_kv_pair COMMA map_kv_pairs','map_kv_pairs',3,'p_map_kv_pairs','parser.py',417),
  ('map_kv_pair -> STRING COLON expression','map_kv_pair',3,'p_map_kv_pair','parser.py',421),
  ('array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type','array_declaration',6,'p_array_declaration','parser.py',426),
  ('array_declaration -> VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE','array_declaration',9,'p_array_declaration','parser.py',427),
  ('array_values -> expression','array_values',1,'p_array_values','parser.py',431),
  ('array_values -> expression COMMA array_values','array_values',3,'p_array_values','parser.py',432),
  ('slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type','slice_declaration',5,'p_slice_declaration','parser.py',437),
  ('slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE','slice_declaration',8,'p_slice_declaration','parser.py',438),
  ('slice_values -> expression','slice_values',1,'p_slice_values','parser.py',442),
  ('slice_values -> expression COMMA slice_values','slice_values',3,'p_slice_values','parser.py',443),
  ('new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN','new_stmt',6,'p_new_stmt','parser.py',448),
  ('break_stmt -> BREAK','break_stmt',1,'p_break_stmt','parser.py',453),
  ('increment_stmt -> VARIABLE INCREMENT','increment_stmt',2,'p_increment_stmt','parser.py',460),
  ('increment_stmt -> VARIABLE DECREMENT','increment_stmt',2,'p_increment_stmt','parser.py',461),
]
