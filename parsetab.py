
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPER AND ASIG ASSIGN BOOL_TYPE BREAK CASE COLON COMMA DECREMENT DEFAULT DIVIDE DOT ELSE EQ FALSE FLOAT FLOAT64_TYPE FMT FOR FUNC FUNCNAME GE GT IF IMPORT INCREMENT INT_TYPE LBRACE LBRACKET LE LPAREN LT MAKE MAP MINUS MOD NE NEW NUMBER OR PACKAGE PLUS PRINT PRINTF PRINTLN RANGE RBRACE RBRACKET RETURN RPAREN SCANLN SEMICOLON STRING STRING_TYPE STRUCT SWITCH TIMES TRUE TYPE UINT VAR VARIABLEprogram : statement\n               | statement programstatement : declaration\n                 | assignment\n                 | print_stmt\n                 | input_stmt\n                 | struct_method\n                 | func_def\n                 | func_no_params\n                 | func_call\n                 | if_stmt\n                 | for_stmt\n                 | struct_def\n                 | switch_stmt\n                 | map_declaration\n                 | array_declaration\n                 | slice_declaration\n                 | make_stmt\n                 | new_stmt\n                 | break_stmt\n                 | increment_stmtdeclaration : VAR VARIABLE type\n                   | VAR VARIABLE type ASIG expressionexpression : NUMBERexpression : FLOATexpression : VARIABLEassignment : VARIABLE ASSIGN expression\n                  | VARIABLE ASIG expressionprint_stmt : FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN\n                  | FMT DOT PRINTLN LPAREN expression RPARENinput_stmt : FMT DOT SCANLN LPAREN AMPER VARIABLE RPARENfunc_def : FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE\n                | FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACEfunc_no_params : FUNC VARIABLE LPAREN RPAREN blockfunc_call : VARIABLE LPAREN arg_list RPAREN\n                 | VARIABLE LPAREN RPARENparam_list : param\n                  | param COMMA param_listparam : VARIABLE typearg_list : expression\n                | expression COMMA arg_listexpression : term\n                  | expression PLUS term\n                  | expression MINUS term\n                  | expression AND expression\n                  | expression OR expression\n                  | expression EQ expression\n                  | expression NE expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression LE expression\n                  | expression GE expressionterm : factor\n            | term TIMES factor\n            | term DIVIDE factorfactor : NUMBER\n              | FLOAT\n              | STRING\n              | VARIABLE\n              | LPAREN expression RPAREN\n              | make_expr\n              | struct_instancetype : INT_TYPE\n            | FLOAT64_TYPE\n            | STRING_TYPE\n            | BOOL_TYPEif_stmt : IF expression block\n               | IF expression block ELSE blockfor_stmt : FOR expression block\n                | FOR assignment SEMICOLON expression SEMICOLON for_update blockfor_update : assignment\n                  | increment_stmtblock : LBRACE program RBRACEstruct_method : FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE\n                     | FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACEstruct_def : TYPE VARIABLE STRUCT LBRACE struct_fields RBRACEstruct_fields : struct_field\n                     | struct_field struct_fieldsstruct_field : VARIABLE type\n                    | typestruct_instance : VARIABLE LBRACE struct_fields_values RBRACEstruct_fields_values : field_value\n                            | field_value COMMA struct_fields_valuesfield_value : VARIABLE COLON expressionswitch_stmt : SWITCH expression LBRACE case_list RBRACE\n                   | SWITCH LBRACE case_list RBRACEcase_list : case_clause\n                 | case_clause case_listcase_clause : CASE expression COLON program\n                   | DEFAULT COLON programmap_declaration : VAR VARIABLE MAP LBRACKET type RBRACKET type\n                       | VARIABLE ASIG MAP LBRACKET type RBRACKET typemake_stmt : VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN\n                 | VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPARENmake_expr : MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN\n                 | MAKE LPAREN LBRACKET RBRACKET type RPARENarray_declaration : VAR VARIABLE LBRACKET NUMBER RBRACKET type\n                         | VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACEarray_values : expression\n                    | expression COMMA array_valuesslice_declaration : VAR VARIABLE LBRACKET RBRACKET type\n                         | VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACEslice_values : expression\n                    | expression COMMA slice_valuesnew_stmt : VARIABLE ASIG NEW LPAREN VARIABLE RPARENbreak_stmt : BREAKincrement_stmt : VARIABLE INCREMENT\n                      | VARIABLE DECREMENT'
    
_lr_action_items = {'VAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,30,36,37,42,43,44,45,46,47,49,50,58,61,62,63,64,65,66,72,79,90,96,114,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,150,153,154,157,172,174,175,177,186,187,190,196,198,202,213,216,217,224,226,229,230,233,236,237,241,243,249,250,252,253,256,257,259,],[22,22,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-106,-107,-108,-24,-25,-26,-42,-53,-58,-61,-62,-22,-63,-64,-65,-66,-27,-28,-36,-67,22,-69,-35,-43,-56,-57,-59,-44,-45,-46,-47,-48,-49,-50,-51,-52,-54,-55,-60,-86,22,-23,-101,-34,-68,-73,-81,-85,22,-97,-105,-30,22,-76,-91,-92,-31,22,-96,-70,-102,-94,-29,-33,-98,-32,-95,-93,22,22,-75,-74,]),'VARIABLE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,25,26,27,28,29,30,33,34,35,36,37,39,42,43,44,45,46,47,48,49,50,58,61,62,63,64,65,66,72,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,96,97,98,103,105,113,114,115,117,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,148,150,153,154,157,167,168,172,173,174,175,176,177,178,181,184,185,186,187,190,193,196,197,198,202,212,213,216,217,218,224,225,226,229,230,233,234,236,237,241,243,244,249,250,252,253,256,257,259,],[23,23,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,32,40,44,54,55,44,-106,44,44,44,-107,-108,77,-24,-25,-26,-42,-53,-58,44,-61,-62,-22,-63,-64,-65,-66,-27,-28,-36,119,120,-67,128,128,44,44,44,44,44,44,44,44,23,139,128,128,-69,44,44,44,44,163,-35,44,44,-43,-56,-57,-59,-44,-45,-46,-47,-48,-49,-50,-51,-52,-54,-55,-60,182,-86,23,-23,-101,199,200,-34,120,-68,-73,44,-81,139,211,182,-80,-85,23,-97,44,-105,44,-30,23,-79,-76,-91,-92,44,-31,120,23,-96,-70,-102,44,-94,-29,-33,-98,44,-32,-95,-93,23,23,-75,-74,]),'FMT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,30,36,37,42,43,44,45,46,47,49,50,58,61,62,63,64,65,66,72,79,90,96,114,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,150,153,154,157,172,174,175,177,186,187,190,196,198,202,213,216,217,224,226,229,230,233,236,237,241,243,249,250,252,253,256,257,259,],[24,24,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-106,-107,-108,-24,-25,-26,-42,-53,-58,-61,-62,-22,-63,-64,-65,-66,-27,-28,-36,-67,24,-69,-35,-43,-56,-57,-59,-44,-45,-46,-47,-48,-49,-50,-51,-52,-54,-55,-60,-86,24,-23,-101,-34,-68,-73,-81,-85,24,-97,-105,-30,24,-76,-91,-92,-31,24,-96,-70,-102,-94,-29,-33,-98,-32,-95,-93,24,24,-75,-74,]),'FUNC':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,30,36,37,42,43,44,45,46,47,49,50,58,61,62,63,64,65,66,72,79,90,96,114,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,150,153,154,157,172,174,175,177,186,187,190,196,198,202,213,216,217,224,226,229,230,233,236,237,241,243,249,250,252,253,256,257,259,],[25,25,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-106,-107,-108,-24,-25,-26,-42,-53,-58,-61,-62,-22,-63,-64,-65,-66,-27,-28,-36,-67,25,-69,-35,-43,-56,-57,-59,-44,-45,-46,-47,-48,-49,-50,-51,-52,-54,-55,-60,-86,25,-23,-101,-34,-68,-73,-81,-85,25,-97,-105,-30,25,-76,-91,-92,-31,25,-96,-70,-102,-94,-29,-33,-98,-32,-95,-93,25,25,-75,-74,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,30,36,37,42,43,44,45,46,47,49,50,58,61,62,63,64,65,66,72,79,90,96,114,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,150,153,154,157,172,174,175,177,186,187,190,196,198,202,213,216,217,224,226,229,230,233,236,237,241,243,249,250,252,253,256,257,259,],[26,26,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-106,-107,-108,-24,-25,-26,-42,-53,-58,-61,-62,-22,-63,-64,-65,-66,-27,-28,-36,-67,26,-69,-35,-43,-56,-57,-59,-44,-45,-46,-47,-48,-49,-50,-51,-52,-54,-55,-60,-86,26,-23,-101,-34,-68,-73,-81,-85,26,-97,-105,-30,26,-76,-91,-92,-31,26,-96,-70,-102,-94,-29,-33,-98,-32,-95,-93,26,26,-75,-74,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,30,36,37,42,43,44,45,46,47,49,50,58,61,62,63,64,65,66,72,79,90,96,114,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,150,153,154,157,172,174,175,177,186,187,190,196,198,202,213,216,217,224,226,229,230,233,236,237,241,243,249,250,252,253,256,257,259,],[27,27,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-106,-107,-108,-24,-25,-26,-42,-53,-58,-61,-62,-22,-63,-64,-65,-66,-27,-28,-36,-67,27,-69,-35,-43,-56,-57,-59,-44,-45,-46,-47,-48,-49,-50,-51,-52,-54,-55,-60,-86,27,-23,-101,-34,-68,-73,-81,-85,27,-97,-105,-30,27,-76,-91,-92,-31,27,-96,-70,-102,-94,-29,-33,-98,-32,-95,-93,27,27,-75,-74,]),'TYPE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,30,36,37,42,43,44,45,46,47,49,50,58,61,62,63,64,65,66,72,79,90,96,114,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,150,153,154,157,172,174,175,177,186,187,190,196,198,202,213,216,217,224,226,229,230,233,236,237,241,243,249,250,252,253,256,257,259,],[28,28,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-106,-107,-108,-24,-25,-26,-42,-53,-58,-61,-62,-22,-63,-64,-65,-66,-27,-28,-36,-67,28,-69,-35,-43,-56,-57,-59,-44,-45,-46,-47,-48,-49,-50,-51,-52,-54,-55,-60,-86,28,-23,-101,-34,-68,-73,-81,-85,28,-97,-105,-30,28,-76,-91,-92,-31,28,-96,-70,-102,-94,-29,-33,-98,-32,-95,-93,28,28,-75,-74,]),'SWITCH':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,30,36,37,42,43,44,45,46,47,49,50,58,61,62,63,64,65,66,72,79,90,96,114,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,150,153,154,157,172,174,175,177,186,187,190,196,198,202,213,216,217,224,226,229,230,233,236,237,241,243,249,250,252,253,256,257,259,],[29,29,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-106,-107,-108,-24,-25,-26,-42,-53,-58,-61,-62,-22,-63,-64,-65,-66,-27,-28,-36,-67,29,-69,-35,-43,-56,-57,-59,-44,-45,-46,-47,-48,-49,-50,-51,-52,-54,-55,-60,-86,29,-23,-101,-34,-68,-73,-81,-85,29,-97,-105,-30,29,-76,-91,-92,-31,29,-96,-70,-102,-94,-29,-33,-98,-32,-95,-93,29,29,-75,-74,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,30,36,37,42,43,44,45,46,47,49,50,58,61,62,63,64,65,66,72,79,90,96,114,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,150,153,154,157,172,174,175,177,186,187,190,196,198,202,213,216,217,224,226,229,230,233,236,237,241,243,249,250,252,253,256,257,259,],[30,30,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-106,-107,-108,-24,-25,-26,-42,-53,-58,-61,-62,-22,-63,-64,-65,-66,-27,-28,-36,-67,30,-69,-35,-43,-56,-57,-59,-44,-45,-46,-47,-48,-49,-50,-51,-52,-54,-55,-60,-86,30,-23,-101,-34,-68,-73,-81,-85,30,-97,-105,-30,30,-76,-91,-92,-31,30,-96,-70,-102,-94,-29,-33,-98,-32,-95,-93,30,30,-75,-74,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,30,31,36,37,42,43,44,45,46,47,49,50,58,61,62,63,64,65,66,72,79,96,114,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,150,154,157,172,174,175,177,186,190,196,198,213,216,217,224,229,230,233,236,237,241,243,249,250,252,257,259,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-106,-2,-107,-108,-24,-25,-26,-42,-53,-58,-61,-62,-22,-63,-64,-65,-66,-27,-28,-36,-67,-69,-35,-43,-56,-57,-59,-44,-45,-46,-47,-48,-49,-50,-51,-52,-54,-55,-60,-86,-23,-101,-34,-68,-73,-81,-85,-97,-105,-30,-76,-91,-92,-31,-96,-70,-102,-94,-29,-33,-98,-32,-95,-93,-75,-74,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,30,31,36,37,42,43,44,45,46,47,49,50,58,61,62,63,64,65,66,72,79,96,101,102,114,125,126,127,128,129,130,131,132,133,134,135,136,137,138,140,141,142,143,144,149,150,151,154,157,172,174,175,177,183,184,185,186,188,190,196,198,204,205,212,213,214,215,216,217,219,220,224,227,229,230,231,232,233,236,237,240,241,243,245,249,250,251,252,255,257,258,259,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-106,-2,-107,-108,-24,-25,-26,-42,-53,-58,-61,-62,-22,-63,-64,-65,-66,-27,-28,-36,-67,-69,150,-87,-35,-43,-56,-57,-59,-44,-45,-46,-47,-48,-49,-50,-51,-52,175,177,-82,-54,-55,-60,186,-86,-88,-23,-101,-34,-68,-73,-81,213,-77,-80,-85,-90,-97,-105,-30,-84,-83,-79,-76,-78,-89,-91,-92,233,-103,-31,241,-96,-70,243,-99,-102,-94,-29,249,-33,-98,-104,-32,-95,-100,-93,257,-75,259,-74,]),'CASE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,30,31,36,37,42,43,44,45,46,47,49,50,57,58,61,62,63,64,65,66,72,79,96,100,102,114,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,150,154,157,172,174,175,177,186,188,190,196,198,213,215,216,217,224,229,230,233,236,237,241,243,249,250,252,257,259,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-106,-2,-107,-108,-24,-25,-26,-42,-53,-58,-61,-62,103,-22,-63,-64,-65,-66,-27,-28,-36,-67,-69,103,103,-35,-43,-56,-57,-59,-44,-45,-46,-47,-48,-49,-50,-51,-52,-54,-55,-60,-86,-23,-101,-34,-68,-73,-81,-85,-90,-97,-105,-30,-76,-89,-91,-92,-31,-96,-70,-102,-94,-29,-33,-98,-32,-95,-93,-75,-74,]),'DEFAULT':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,30,31,36,37,42,43,44,45,46,47,49,50,57,58,61,62,63,64,65,66,72,79,96,100,102,114,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,150,154,157,172,174,175,177,186,188,190,196,198,213,215,216,217,224,229,230,233,236,237,241,243,249,250,252,257,259,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-106,-2,-107,-108,-24,-25,-26,-42,-53,-58,-61,-62,104,-22,-63,-64,-65,-66,-27,-28,-36,-67,-69,104,104,-35,-43,-56,-57,-59,-44,-45,-46,-47,-48,-49,-50,-51,-52,-54,-55,-60,-86,-23,-101,-34,-68,-73,-81,-85,-90,-97,-105,-30,-76,-89,-91,-92,-31,-96,-70,-102,-94,-29,-33,-98,-32,-95,-93,-75,-74,]),'ASSIGN':([23,54,211,],[33,33,33,]),'ASIG':([23,54,58,61,62,63,64,211,],[34,98,105,-63,-64,-65,-66,98,]),'LPAREN':([23,25,26,27,29,33,34,35,40,48,51,69,70,74,75,76,80,81,82,83,84,85,86,87,88,89,92,93,97,98,103,105,115,117,176,193,197,200,218,234,244,],[35,39,48,48,48,48,48,48,78,48,95,112,113,116,117,118,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,225,48,48,48,]),'INCREMENT':([23,211,],[36,36,]),'DECREMENT':([23,211,],[37,37,]),'DOT':([24,],[38,]),'NUMBER':([26,27,29,33,34,35,48,60,68,80,81,82,83,84,85,86,87,88,89,92,93,97,98,103,105,115,117,176,193,197,218,234,244,],[42,42,42,42,42,42,42,107,110,126,126,42,42,42,42,42,42,42,42,126,126,42,42,42,42,42,42,42,42,42,42,42,42,]),'FLOAT':([26,27,29,33,34,35,48,80,81,82,83,84,85,86,87,88,89,92,93,97,98,103,105,115,117,176,193,197,218,234,244,],[43,43,43,43,43,43,43,127,127,43,43,43,43,43,43,43,43,127,127,43,43,43,43,43,43,43,43,43,43,43,43,]),'STRING':([26,27,29,33,34,35,48,80,81,82,83,84,85,86,87,88,89,92,93,97,98,103,105,115,116,117,176,193,197,218,234,244,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,165,47,47,47,47,47,47,47,]),'MAKE':([26,27,29,33,34,35,48,80,81,82,83,84,85,86,87,88,89,92,93,97,98,103,105,115,117,176,193,197,218,234,244,],[51,51,51,51,69,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'LBRACE':([29,36,37,41,42,43,44,45,46,47,49,50,52,54,56,61,62,63,64,65,66,99,122,124,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,160,171,177,192,201,208,209,210,229,247,250,254,],[57,-107,-108,90,-24,-25,91,-42,-53,-58,-61,-62,90,91,100,-63,-64,-65,-66,-27,-28,148,90,90,-43,-56,-57,91,-44,-45,-46,-47,-48,-49,-50,-51,-52,-54,-55,-60,193,202,-81,218,226,-71,90,-72,-96,253,-95,256,]),'MAP':([32,34,95,112,],[59,67,145,161,]),'LBRACKET':([32,34,59,67,95,112,145,161,],[60,68,106,109,146,162,179,194,]),'INT_TYPE':([32,61,62,63,64,106,108,109,111,120,122,148,156,159,170,179,180,182,184,185,189,191,194,195,212,228,235,238,248,],[61,-63,-64,-65,-66,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-80,61,61,61,61,-79,61,61,61,61,]),'FLOAT64_TYPE':([32,61,62,63,64,106,108,109,111,120,122,148,156,159,170,179,180,182,184,185,189,191,194,195,212,228,235,238,248,],[62,-63,-64,-65,-66,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-80,62,62,62,62,-79,62,62,62,62,]),'STRING_TYPE':([32,61,62,63,64,106,108,109,111,120,122,148,156,159,170,179,180,182,184,185,189,191,194,195,212,228,235,238,248,],[63,-63,-64,-65,-66,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-80,63,63,63,63,-79,63,63,63,63,]),'BOOL_TYPE':([32,61,62,63,64,106,108,109,111,120,122,148,156,159,170,179,180,182,184,185,189,191,194,195,212,228,235,238,248,],[64,-63,-64,-65,-66,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-80,64,64,64,64,-79,64,64,64,64,]),'NEW':([34,],[70,]),'RPAREN':([35,42,43,44,45,46,47,49,50,61,62,63,64,71,73,78,94,119,121,123,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,163,164,166,169,177,199,203,207,222,223,225,229,239,242,246,250,],[72,-24,-25,-26,-42,-53,-58,-61,-62,-63,-64,-65,-66,114,-40,122,144,168,170,-37,-43,-56,-57,-59,-44,-45,-46,-47,-48,-49,-50,-51,-52,-54,-55,-60,196,-41,198,-39,-81,224,-38,229,236,237,238,-96,248,250,252,-95,]),'PRINTF':([38,],[74,]),'PRINTLN':([38,],[75,]),'SCANLN':([38,],[76,]),'PLUS':([41,42,43,44,45,46,47,49,50,52,54,56,65,66,73,94,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,147,152,154,166,177,204,220,223,229,232,236,250,252,],[80,-24,-25,-26,-42,-53,-58,-61,-62,80,-26,80,80,80,80,80,-43,-56,-57,-59,-44,80,80,80,80,80,80,80,80,-54,-55,-60,80,80,80,80,-81,80,80,80,-96,80,-96,-95,-95,]),'MINUS':([41,42,43,44,45,46,47,49,50,52,54,56,65,66,73,94,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,147,152,154,166,177,204,220,223,229,232,236,250,252,],[81,-24,-25,-26,-42,-53,-58,-61,-62,81,-26,81,81,81,81,81,-43,-56,-57,-59,-44,81,81,81,81,81,81,81,81,-54,-55,-60,81,81,81,81,-81,81,81,81,-96,81,-96,-95,-95,]),'AND':([41,42,43,44,45,46,47,49,50,52,54,56,65,66,73,94,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,147,152,154,166,177,204,220,223,229,232,236,250,252,],[82,-24,-25,-26,-42,-53,-58,-61,-62,82,-26,82,82,82,82,82,-43,-56,-57,-59,-44,82,82,82,82,82,82,82,82,-54,-55,-60,82,82,82,82,-81,82,82,82,-96,82,-96,-95,-95,]),'OR':([41,42,43,44,45,46,47,49,50,52,54,56,65,66,73,94,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,147,152,154,166,177,204,220,223,229,232,236,250,252,],[83,-24,-25,-26,-42,-53,-58,-61,-62,83,-26,83,83,83,83,83,-43,-56,-57,-59,-44,83,83,83,83,83,83,83,83,-54,-55,-60,83,83,83,83,-81,83,83,83,-96,83,-96,-95,-95,]),'EQ':([41,42,43,44,45,46,47,49,50,52,54,56,65,66,73,94,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,147,152,154,166,177,204,220,223,229,232,236,250,252,],[84,-24,-25,-26,-42,-53,-58,-61,-62,84,-26,84,84,84,84,84,-43,-56,-57,-59,-44,84,84,84,84,84,84,84,84,-54,-55,-60,84,84,84,84,-81,84,84,84,-96,84,-96,-95,-95,]),'NE':([41,42,43,44,45,46,47,49,50,52,54,56,65,66,73,94,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,147,152,154,166,177,204,220,223,229,232,236,250,252,],[85,-24,-25,-26,-42,-53,-58,-61,-62,85,-26,85,85,85,85,85,-43,-56,-57,-59,-44,85,85,85,85,85,85,85,85,-54,-55,-60,85,85,85,85,-81,85,85,85,-96,85,-96,-95,-95,]),'LT':([41,42,43,44,45,46,47,49,50,52,54,56,65,66,73,94,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,147,152,154,166,177,204,220,223,229,232,236,250,252,],[86,-24,-25,-26,-42,-53,-58,-61,-62,86,-26,86,86,86,86,86,-43,-56,-57,-59,-44,86,86,86,86,86,86,86,86,-54,-55,-60,86,86,86,86,-81,86,86,86,-96,86,-96,-95,-95,]),'GT':([41,42,43,44,45,46,47,49,50,52,54,56,65,66,73,94,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,147,152,154,166,177,204,220,223,229,232,236,250,252,],[87,-24,-25,-26,-42,-53,-58,-61,-62,87,-26,87,87,87,87,87,-43,-56,-57,-59,-44,87,87,87,87,87,87,87,87,-54,-55,-60,87,87,87,87,-81,87,87,87,-96,87,-96,-95,-95,]),'LE':([41,42,43,44,45,46,47,49,50,52,54,56,65,66,73,94,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,147,152,154,166,177,204,220,223,229,232,236,250,252,],[88,-24,-25,-26,-42,-53,-58,-61,-62,88,-26,88,88,88,88,88,-43,-56,-57,-59,-44,88,88,88,88,88,88,88,88,-54,-55,-60,88,88,88,88,-81,88,88,88,-96,88,-96,-95,-95,]),'GE':([41,42,43,44,45,46,47,49,50,52,54,56,65,66,73,94,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,147,152,154,166,177,204,220,223,229,232,236,250,252,],[89,-24,-25,-26,-42,-53,-58,-61,-62,89,-26,89,89,89,89,89,-43,-56,-57,-59,-44,89,89,89,89,89,89,89,89,-54,-55,-60,89,89,89,89,-81,89,89,89,-96,89,-96,-95,-95,]),'SEMICOLON':([42,43,44,45,46,47,49,50,53,65,66,125,126,127,128,129,130,131,132,133,134,135,136,137,142,143,144,147,177,229,250,],[-24,-25,-26,-42,-53,-58,-61,-62,97,-27,-28,-43,-56,-57,-59,-44,-45,-46,-47,-48,-49,-50,-51,-52,-54,-55,-60,181,-81,-96,-95,]),'COMMA':([42,43,44,45,46,47,49,50,61,62,63,64,73,123,125,126,127,128,129,130,131,132,133,134,135,136,137,141,142,143,144,165,169,177,204,220,229,232,250,],[-24,-25,-26,-42,-53,-58,-61,-62,-63,-64,-65,-66,115,173,-43,-56,-57,-59,-44,-45,-46,-47,-48,-49,-50,-51,-52,178,-54,-55,-60,197,-39,-81,-84,234,-96,244,-95,]),'COLON':([42,43,44,45,46,47,49,50,104,125,126,127,128,129,130,131,132,133,134,135,136,137,139,142,143,144,152,177,229,250,],[-24,-25,-26,-42,-53,-58,-61,-62,153,-43,-56,-57,-59,-44,-45,-46,-47,-48,-49,-50,-51,-52,176,-54,-55,-60,187,-81,-96,-95,]),'TIMES':([42,43,44,45,46,47,49,50,54,125,126,127,128,129,142,143,144,177,229,236,250,252,],[-56,-57,-59,92,-53,-58,-61,-62,-59,92,-56,-57,-59,92,-54,-55,-60,-81,-96,-96,-95,-95,]),'DIVIDE':([42,43,44,45,46,47,49,50,54,125,126,127,128,129,142,143,144,177,229,236,250,252,],[-56,-57,-59,93,-53,-58,-61,-62,-59,93,-56,-57,-59,93,-54,-55,-60,-81,-96,-96,-95,-95,]),'STRUCT':([55,],[99,]),'RBRACKET':([60,61,62,63,64,68,107,110,146,155,158,162,206,221,],[108,-63,-64,-65,-66,111,156,159,180,189,191,195,228,235,]),'ELSE':([79,175,],[124,-73,]),'AMPER':([118,],[167,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,90,153,187,202,226,253,256,],[1,31,138,188,215,227,240,255,258,]),'statement':([0,2,90,153,187,202,226,253,256,],[2,2,2,2,2,2,2,2,2,]),'declaration':([0,2,90,153,187,202,226,253,256,],[3,3,3,3,3,3,3,3,3,]),'assignment':([0,2,27,90,153,181,187,202,226,253,256,],[4,4,53,4,4,208,4,4,4,4,4,]),'print_stmt':([0,2,90,153,187,202,226,253,256,],[5,5,5,5,5,5,5,5,5,]),'input_stmt':([0,2,90,153,187,202,226,253,256,],[6,6,6,6,6,6,6,6,6,]),'struct_method':([0,2,90,153,187,202,226,253,256,],[7,7,7,7,7,7,7,7,7,]),'func_def':([0,2,90,153,187,202,226,253,256,],[8,8,8,8,8,8,8,8,8,]),'func_no_params':([0,2,90,153,187,202,226,253,256,],[9,9,9,9,9,9,9,9,9,]),'func_call':([0,2,90,153,187,202,226,253,256,],[10,10,10,10,10,10,10,10,10,]),'if_stmt':([0,2,90,153,187,202,226,253,256,],[11,11,11,11,11,11,11,11,11,]),'for_stmt':([0,2,90,153,187,202,226,253,256,],[12,12,12,12,12,12,12,12,12,]),'struct_def':([0,2,90,153,187,202,226,253,256,],[13,13,13,13,13,13,13,13,13,]),'switch_stmt':([0,2,90,153,187,202,226,253,256,],[14,14,14,14,14,14,14,14,14,]),'map_declaration':([0,2,90,153,187,202,226,253,256,],[15,15,15,15,15,15,15,15,15,]),'array_declaration':([0,2,90,153,187,202,226,253,256,],[16,16,16,16,16,16,16,16,16,]),'slice_declaration':([0,2,90,153,187,202,226,253,256,],[17,17,17,17,17,17,17,17,17,]),'make_stmt':([0,2,90,153,187,202,226,253,256,],[18,18,18,18,18,18,18,18,18,]),'new_stmt':([0,2,90,153,187,202,226,253,256,],[19,19,19,19,19,19,19,19,19,]),'break_stmt':([0,2,90,153,187,202,226,253,256,],[20,20,20,20,20,20,20,20,20,]),'increment_stmt':([0,2,90,153,181,187,202,226,253,256,],[21,21,21,21,210,21,21,21,21,21,]),'expression':([26,27,29,33,34,35,48,82,83,84,85,86,87,88,89,97,98,103,105,115,117,176,193,197,218,234,244,],[41,52,56,65,66,73,94,130,131,132,133,134,135,136,137,147,66,152,154,73,166,204,220,223,232,220,232,]),'term':([26,27,29,33,34,35,48,80,81,82,83,84,85,86,87,88,89,97,98,103,105,115,117,176,193,197,218,234,244,],[45,45,45,45,45,45,45,125,129,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'factor':([26,27,29,33,34,35,48,80,81,82,83,84,85,86,87,88,89,92,93,97,98,103,105,115,117,176,193,197,218,234,244,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,142,143,46,46,46,46,46,46,46,46,46,46,46,46,]),'make_expr':([26,27,29,33,34,35,48,80,81,82,83,84,85,86,87,88,89,92,93,97,98,103,105,115,117,176,193,197,218,234,244,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'struct_instance':([26,27,29,33,34,35,48,80,81,82,83,84,85,86,87,88,89,92,93,97,98,103,105,115,117,176,193,197,218,234,244,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'type':([32,106,108,109,111,120,122,148,156,159,170,179,180,182,184,189,191,194,195,228,235,238,248,],[58,155,157,158,160,169,171,185,190,192,201,206,207,212,185,216,217,221,222,242,246,247,254,]),'arg_list':([35,115,],[71,164,]),'block':([41,52,122,124,209,],[79,96,172,174,230,]),'case_list':([57,100,102,],[101,149,151,]),'case_clause':([57,100,102,],[102,102,102,]),'param_list':([78,173,225,],[121,203,239,]),'param':([78,173,225,],[123,123,123,]),'struct_fields_values':([91,178,],[140,205,]),'field_value':([91,178,],[141,141,]),'struct_fields':([148,184,],[183,214,]),'struct_field':([148,184,],[184,184,]),'for_update':([181,],[209,]),'slice_values':([193,234,],[219,245,]),'array_values':([218,244,],[231,251,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','parser.py',50),
  ('program -> statement program','program',2,'p_program','parser.py',51),
  ('statement -> declaration','statement',1,'p_statement','parser.py',56),
  ('statement -> assignment','statement',1,'p_statement','parser.py',57),
  ('statement -> print_stmt','statement',1,'p_statement','parser.py',58),
  ('statement -> input_stmt','statement',1,'p_statement','parser.py',59),
  ('statement -> struct_method','statement',1,'p_statement','parser.py',60),
  ('statement -> func_def','statement',1,'p_statement','parser.py',61),
  ('statement -> func_no_params','statement',1,'p_statement','parser.py',62),
  ('statement -> func_call','statement',1,'p_statement','parser.py',63),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',64),
  ('statement -> for_stmt','statement',1,'p_statement','parser.py',65),
  ('statement -> struct_def','statement',1,'p_statement','parser.py',66),
  ('statement -> switch_stmt','statement',1,'p_statement','parser.py',67),
  ('statement -> map_declaration','statement',1,'p_statement','parser.py',68),
  ('statement -> array_declaration','statement',1,'p_statement','parser.py',69),
  ('statement -> slice_declaration','statement',1,'p_statement','parser.py',70),
  ('statement -> make_stmt','statement',1,'p_statement','parser.py',71),
  ('statement -> new_stmt','statement',1,'p_statement','parser.py',72),
  ('statement -> break_stmt','statement',1,'p_statement','parser.py',73),
  ('statement -> increment_stmt','statement',1,'p_statement','parser.py',74),
  ('declaration -> VAR VARIABLE type','declaration',3,'p_declaration','parser.py',80),
  ('declaration -> VAR VARIABLE type ASIG expression','declaration',5,'p_declaration','parser.py',81),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',104),
  ('expression -> FLOAT','expression',1,'p_expression_float','parser.py',108),
  ('expression -> VARIABLE','expression',1,'p_expression_variable','parser.py',112),
  ('assignment -> VARIABLE ASSIGN expression','assignment',3,'p_assignment','parser.py',124),
  ('assignment -> VARIABLE ASIG expression','assignment',3,'p_assignment','parser.py',125),
  ('print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN','print_stmt',8,'p_print_stmt','parser.py',142),
  ('print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN','print_stmt',6,'p_print_stmt','parser.py',143),
  ('input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN','input_stmt',7,'p_input_stmt','parser.py',148),
  ('func_def -> FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE','func_def',9,'p_func_def','parser.py',153),
  ('func_def -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE','func_def',8,'p_func_def','parser.py',154),
  ('func_no_params -> FUNC VARIABLE LPAREN RPAREN block','func_no_params',5,'p_func_def_no_params','parser.py',160),
  ('func_call -> VARIABLE LPAREN arg_list RPAREN','func_call',4,'p_func_call','parser.py',166),
  ('func_call -> VARIABLE LPAREN RPAREN','func_call',3,'p_func_call','parser.py',167),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',172),
  ('param_list -> param COMMA param_list','param_list',3,'p_param_list','parser.py',173),
  ('param -> VARIABLE type','param',2,'p_param','parser.py',177),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',182),
  ('arg_list -> expression COMMA arg_list','arg_list',3,'p_arg_list','parser.py',183),
  ('expression -> term','expression',1,'p_expression','parser.py',188),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',189),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',190),
  ('expression -> expression AND expression','expression',3,'p_expression','parser.py',191),
  ('expression -> expression OR expression','expression',3,'p_expression','parser.py',192),
  ('expression -> expression EQ expression','expression',3,'p_expression','parser.py',193),
  ('expression -> expression NE expression','expression',3,'p_expression','parser.py',194),
  ('expression -> expression LT expression','expression',3,'p_expression','parser.py',195),
  ('expression -> expression GT expression','expression',3,'p_expression','parser.py',196),
  ('expression -> expression LE expression','expression',3,'p_expression','parser.py',197),
  ('expression -> expression GE expression','expression',3,'p_expression','parser.py',198),
  ('term -> factor','term',1,'p_term','parser.py',216),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',217),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',218),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',234),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',235),
  ('factor -> STRING','factor',1,'p_factor','parser.py',236),
  ('factor -> VARIABLE','factor',1,'p_factor','parser.py',237),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',238),
  ('factor -> make_expr','factor',1,'p_factor','parser.py',239),
  ('factor -> struct_instance','factor',1,'p_factor','parser.py',240),
  ('type -> INT_TYPE','type',1,'p_type','parser.py',259),
  ('type -> FLOAT64_TYPE','type',1,'p_type','parser.py',260),
  ('type -> STRING_TYPE','type',1,'p_type','parser.py',261),
  ('type -> BOOL_TYPE','type',1,'p_type','parser.py',262),
  ('if_stmt -> IF expression block','if_stmt',3,'p_if_stmt','parser.py',267),
  ('if_stmt -> IF expression block ELSE block','if_stmt',5,'p_if_stmt','parser.py',268),
  ('for_stmt -> FOR expression block','for_stmt',3,'p_for_stmt','parser.py',273),
  ('for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block','for_stmt',7,'p_for_stmt','parser.py',274),
  ('for_update -> assignment','for_update',1,'p_for_update','parser.py',278),
  ('for_update -> increment_stmt','for_update',1,'p_for_update','parser.py',279),
  ('block -> LBRACE program RBRACE','block',3,'p_block','parser.py',284),
  ('struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE','struct_method',13,'p_struct_method','parser.py',289),
  ('struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE','struct_method',12,'p_struct_method','parser.py',290),
  ('struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE','struct_def',6,'p_struct_def','parser.py',295),
  ('struct_fields -> struct_field','struct_fields',1,'p_struct_fields','parser.py',300),
  ('struct_fields -> struct_field struct_fields','struct_fields',2,'p_struct_fields','parser.py',301),
  ('struct_field -> VARIABLE type','struct_field',2,'p_struct_field','parser.py',306),
  ('struct_field -> type','struct_field',1,'p_struct_field','parser.py',307),
  ('struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE','struct_instance',4,'p_struct_instance','parser.py',312),
  ('struct_fields_values -> field_value','struct_fields_values',1,'p_struct_fields_values','parser.py',316),
  ('struct_fields_values -> field_value COMMA struct_fields_values','struct_fields_values',3,'p_struct_fields_values','parser.py',317),
  ('field_value -> VARIABLE COLON expression','field_value',3,'p_field_value','parser.py',321),
  ('switch_stmt -> SWITCH expression LBRACE case_list RBRACE','switch_stmt',5,'p_switch_stmt','parser.py',325),
  ('switch_stmt -> SWITCH LBRACE case_list RBRACE','switch_stmt',4,'p_switch_stmt','parser.py',326),
  ('case_list -> case_clause','case_list',1,'p_case_list','parser.py',330),
  ('case_list -> case_clause case_list','case_list',2,'p_case_list','parser.py',331),
  ('case_clause -> CASE expression COLON program','case_clause',4,'p_case_clause','parser.py',335),
  ('case_clause -> DEFAULT COLON program','case_clause',3,'p_case_clause','parser.py',336),
  ('map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type','map_declaration',7,'p_map_declaration','parser.py',341),
  ('map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type','map_declaration',7,'p_map_declaration','parser.py',342),
  ('make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN','make_stmt',10,'p_make_stmt','parser.py',347),
  ('make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN','make_stmt',8,'p_make_stmt','parser.py',348),
  ('make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN','make_expr',8,'p_make_expr','parser.py',352),
  ('make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN','make_expr',6,'p_make_expr','parser.py',353),
  ('array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type','array_declaration',6,'p_array_declaration','parser.py',358),
  ('array_declaration -> VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE','array_declaration',9,'p_array_declaration','parser.py',359),
  ('array_values -> expression','array_values',1,'p_array_values','parser.py',363),
  ('array_values -> expression COMMA array_values','array_values',3,'p_array_values','parser.py',364),
  ('slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type','slice_declaration',5,'p_slice_declaration','parser.py',369),
  ('slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE','slice_declaration',8,'p_slice_declaration','parser.py',370),
  ('slice_values -> expression','slice_values',1,'p_slice_values','parser.py',374),
  ('slice_values -> expression COMMA slice_values','slice_values',3,'p_slice_values','parser.py',375),
  ('new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN','new_stmt',6,'p_new_stmt','parser.py',380),
  ('break_stmt -> BREAK','break_stmt',1,'p_break_stmt','parser.py',385),
  ('increment_stmt -> VARIABLE INCREMENT','increment_stmt',2,'p_increment_stmt','parser.py',390),
  ('increment_stmt -> VARIABLE DECREMENT','increment_stmt',2,'p_increment_stmt','parser.py',391),
]
