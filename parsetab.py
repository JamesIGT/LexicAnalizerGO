
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'startAMPER AND ASIG ASSIGN BOOL_TYPE BREAK CASE COLON COMMA CONTINUE DECREMENT DEFAULT DIVIDE DOT ELSE EQ FALSE FLOAT FLOAT64_TYPE FMT FOR FUNC GE GT IF IMPORT INCREMENT INT_TYPE LBRACE LBRACKET LE LPAREN LT MAKE MAP MINUS MOD NE NEW NOT NUMBER OR PACKAGE PLUS PRINT PRINTF PRINTLN RANGE RBRACE RBRACKET RETURN RPAREN SCANLN SEMICOLON STRING STRING_TYPE STRUCT SWITCH TIMES TRUE TYPE UINT VAR VARIABLEstart : PACKAGE VARIABLE import_stmt programimport_stmt : IMPORT LPAREN STRING RPAREN\n                    | IMPORT STRINGprogram : statement\n               | statement programstatement : declaration\n                 | assignment\n                 | print_stmt\n                 | input_stmt\n                 | continue_stmt\n                 | struct_method\n                 | func_def\n                 | func_no_params\n                 | func_call\n                 | if_stmt\n                 | for_stmt\n                 | struct_def\n                 | switch_stmt\n                 | map_declaration\n                 | map_declaration_values\n                 | array_declaration\n                 | array_literal\n                 | slice_declaration\n                 | make_stmt\n                 | new_stmt\n                 | break_stmt\n                 | increment_stmt\n                 | return_stmtdeclaration : VAR VARIABLE type \n                   | VAR VARIABLE type ASIG expression\n                   | VAR VARIABLE type ASSIGN expressionexpression : NUMBERexpression : FLOATexpression : VARIABLEassignment : VARIABLE ASSIGN expression\n                  | VARIABLE ASIG expressionprint_stmt : FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN\n                  | FMT DOT PRINTLN LPAREN expression RPARENinput_stmt : FMT DOT SCANLN LPAREN AMPER VARIABLE RPARENfunc_def : func_header func_bodyfunc_header : FUNC VARIABLE LPAREN param_list RPAREN typefunc_body : LBRACE program RBRACEreturn_stmt : RETURN expressionfunc_no_params : FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACEfunc_no_params : FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACEfunc_call : VARIABLE LPAREN arg_list RPAREN\n                 | VARIABLE LPAREN RPARENparam_list : param\n                  | param COMMA param_listparam : VARIABLE typearg_list : expression\n                | expression COMMA arg_listexpression : term\n                  | expression PLUS term\n                  | expression MINUS term\n                  | expression AND expression\n                  | expression OR expression\n                  | expression EQ expression\n                  | expression NE expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression LE expression\n                  | expression GE expressionterm : factor\n            | term TIMES factor\n            | term DIVIDE factorterm : VARIABLEfactor : NUMBER\n              | FLOAT\n              | STRING\n              | VARIABLE\n              | TRUE\n              | FALSE\n              | LPAREN expression RPAREN\n              | make_expr\n              | struct_instance\n              | func_calltype : INT_TYPE\n            | FLOAT64_TYPE\n            | STRING_TYPE\n            | BOOL_TYPEif_stmt : IF expression block\n               | IF expression block ELSE blockfor_stmt : FOR expression block\n                | FOR assignment SEMICOLON expression SEMICOLON for_update blockcontinue_stmt : CONTINUEfor_update : assignment\n                  | increment_stmtblock : LBRACE program RBRACEstruct_method : FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE\n                     | FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACEstruct_def : TYPE VARIABLE STRUCT LBRACE struct_fields RBRACEstruct_fields : struct_field\n                     | struct_field struct_fieldsstruct_field : VARIABLE type\n                    | typestruct_instance : VARIABLE LBRACE struct_fields_values RBRACEstruct_fields_values : field_value\n                            | field_value COMMA struct_fields_valuesfield_value : VARIABLE COLON expressionswitch_stmt : SWITCH expression LBRACE case_list RBRACE\n                   | SWITCH LBRACE case_list RBRACEcase_list : case_clause\n                 | case_clause case_listcase_clause : CASE expression COLON program\n                   | DEFAULT COLON programmap_declaration : VAR VARIABLE MAP LBRACKET type RBRACKET type\n                       | VARIABLE ASIG MAP LBRACKET type RBRACKET typemake_stmt : VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN\n                 | VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPARENmake_expr : MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN\n                 | MAKE LPAREN LBRACKET RBRACKET type RPARENmap_declaration_values : VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACEmap_kv_pairs : map_kv_pair\n                    | map_kv_pair COMMA map_kv_pairsmap_kv_pair : STRING COLON expressionarray_declaration : VAR VARIABLE LBRACKET NUMBER RBRACKET type\n                         | VAR VARIABLE ASSIGN array_literalarray_literal : LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACEarray_values : expression\n                    | expression COMMA array_valuesslice_declaration : VAR VARIABLE LBRACKET RBRACKET type\n                         | VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACEslice_values : expression\n                    | expression COMMA slice_valuesnew_stmt : VARIABLE ASIG NEW LPAREN VARIABLE RPARENbreak_stmt : BREAKincrement_stmt : VARIABLE INCREMENT\n                      | VARIABLE DECREMENT'
    
_lr_action_items = {'PACKAGE':([0,],[2,]),'$end':([1,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,49,50,51,56,59,60,61,62,63,64,65,66,68,69,70,79,81,82,88,90,94,95,96,97,104,121,136,140,152,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,180,191,192,195,205,206,208,217,225,227,229,245,250,255,257,260,262,263,264,267,270,271,274,284,285,288,295,297,],[0,-1,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-86,-127,-128,-129,-5,-40,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,-43,-35,-36,-47,-29,-78,-79,-80,-81,-82,-84,-46,-118,-42,-54,-67,-68,-69,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-71,-66,-74,-102,-30,-31,-122,-83,-89,-97,-101,-126,-117,-38,-92,-108,-107,-39,-45,-112,-85,-119,-123,-110,-37,-44,-111,-113,-109,-91,-90,]),'VARIABLE':([2,4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,35,37,38,39,40,42,43,45,46,47,48,49,50,54,56,57,59,60,61,62,63,64,65,66,67,68,69,70,79,81,82,88,90,94,95,96,97,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,123,128,131,135,136,137,138,139,140,145,152,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,178,180,183,191,192,195,198,199,202,204,205,206,207,208,209,212,215,216,217,218,220,222,225,227,228,229,232,244,245,250,255,257,258,260,262,263,264,265,267,268,270,271,274,284,285,287,288,289,294,295,297,],[3,6,6,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,52,-86,55,61,74,75,61,-127,61,-3,61,61,61,-128,-129,101,-40,6,-32,-33,-34,-53,-64,-70,-72,-73,61,-75,-76,-77,-43,-35,-36,-47,-29,-78,-79,-80,-81,147,148,-82,155,155,61,61,61,61,61,61,61,61,6,168,172,172,-84,61,61,61,-2,189,-46,61,61,61,-118,61,-42,-54,-67,-68,-69,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-71,-66,-74,213,-102,6,-30,-31,-122,230,231,6,148,-83,-89,61,-97,168,243,213,-96,-101,6,61,61,-126,-117,61,-38,6,-95,-92,-108,-107,-39,148,-45,-112,-85,-119,61,-123,61,-110,-37,-44,-111,-113,61,-109,6,6,-91,-90,]),'IMPORT':([3,],[5,]),'VAR':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,45,49,50,56,57,59,60,61,62,63,64,65,66,68,69,70,79,81,82,88,90,94,95,96,97,104,115,121,131,136,140,152,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,180,183,191,192,195,202,205,206,208,217,218,225,227,229,232,245,250,255,257,260,262,263,264,267,270,271,274,284,285,288,289,294,295,297,],[32,32,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-86,-127,-3,-128,-129,-40,32,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,-43,-35,-36,-47,-29,-78,-79,-80,-81,-82,32,-84,-2,-46,-118,-42,-54,-67,-68,-69,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-71,-66,-74,-102,32,-30,-31,-122,32,-83,-89,-97,-101,32,-126,-117,-38,32,-92,-108,-107,-39,-45,-112,-85,-119,-123,-110,-37,-44,-111,-113,-109,32,32,-91,-90,]),'FMT':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,45,49,50,56,57,59,60,61,62,63,64,65,66,68,69,70,79,81,82,88,90,94,95,96,97,104,115,121,131,136,140,152,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,180,183,191,192,195,202,205,206,208,217,218,225,227,229,232,245,250,255,257,260,262,263,264,267,270,271,274,284,285,288,289,294,295,297,],[33,33,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-86,-127,-3,-128,-129,-40,33,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,-43,-35,-36,-47,-29,-78,-79,-80,-81,-82,33,-84,-2,-46,-118,-42,-54,-67,-68,-69,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-71,-66,-74,-102,33,-30,-31,-122,33,-83,-89,-97,-101,33,-126,-117,-38,33,-92,-108,-107,-39,-45,-112,-85,-119,-123,-110,-37,-44,-111,-113,-109,33,33,-91,-90,]),'CONTINUE':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,45,49,50,56,57,59,60,61,62,63,64,65,66,68,69,70,79,81,82,88,90,94,95,96,97,104,115,121,131,136,140,152,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,180,183,191,192,195,202,205,206,208,217,218,225,227,229,232,245,250,255,257,260,262,263,264,267,270,271,274,284,285,288,289,294,295,297,],[34,34,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-86,-127,-3,-128,-129,-40,34,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,-43,-35,-36,-47,-29,-78,-79,-80,-81,-82,34,-84,-2,-46,-118,-42,-54,-67,-68,-69,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-71,-66,-74,-102,34,-30,-31,-122,34,-83,-89,-97,-101,34,-126,-117,-38,34,-92,-108,-107,-39,-45,-112,-85,-119,-123,-110,-37,-44,-111,-113,-109,34,34,-91,-90,]),'FUNC':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,45,49,50,56,57,59,60,61,62,63,64,65,66,68,69,70,79,81,82,88,90,94,95,96,97,104,115,121,131,136,140,152,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,180,183,191,192,195,202,205,206,208,217,218,225,227,229,232,245,250,255,257,260,262,263,264,267,270,271,274,284,285,288,289,294,295,297,],[35,35,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-86,-127,-3,-128,-129,-40,35,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,-43,-35,-36,-47,-29,-78,-79,-80,-81,-82,35,-84,-2,-46,-118,-42,-54,-67,-68,-69,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-71,-66,-74,-102,35,-30,-31,-122,35,-83,-89,-97,-101,35,-126,-117,-38,35,-92,-108,-107,-39,-45,-112,-85,-119,-123,-110,-37,-44,-111,-113,-109,35,35,-91,-90,]),'IF':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,45,49,50,56,57,59,60,61,62,63,64,65,66,68,69,70,79,81,82,88,90,94,95,96,97,104,115,121,131,136,140,152,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,180,183,191,192,195,202,205,206,208,217,218,225,227,229,232,245,250,255,257,260,262,263,264,267,270,271,274,284,285,288,289,294,295,297,],[37,37,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-86,-127,-3,-128,-129,-40,37,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,-43,-35,-36,-47,-29,-78,-79,-80,-81,-82,37,-84,-2,-46,-118,-42,-54,-67,-68,-69,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-71,-66,-74,-102,37,-30,-31,-122,37,-83,-89,-97,-101,37,-126,-117,-38,37,-92,-108,-107,-39,-45,-112,-85,-119,-123,-110,-37,-44,-111,-113,-109,37,37,-91,-90,]),'FOR':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,45,49,50,56,57,59,60,61,62,63,64,65,66,68,69,70,79,81,82,88,90,94,95,96,97,104,115,121,131,136,140,152,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,180,183,191,192,195,202,205,206,208,217,218,225,227,229,232,245,250,255,257,260,262,263,264,267,270,271,274,284,285,288,289,294,295,297,],[38,38,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-86,-127,-3,-128,-129,-40,38,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,-43,-35,-36,-47,-29,-78,-79,-80,-81,-82,38,-84,-2,-46,-118,-42,-54,-67,-68,-69,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-71,-66,-74,-102,38,-30,-31,-122,38,-83,-89,-97,-101,38,-126,-117,-38,38,-92,-108,-107,-39,-45,-112,-85,-119,-123,-110,-37,-44,-111,-113,-109,38,38,-91,-90,]),'TYPE':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,45,49,50,56,57,59,60,61,62,63,64,65,66,68,69,70,79,81,82,88,90,94,95,96,97,104,115,121,131,136,140,152,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,180,183,191,192,195,202,205,206,208,217,218,225,227,229,232,245,250,255,257,260,262,263,264,267,270,271,274,284,285,288,289,294,295,297,],[39,39,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-86,-127,-3,-128,-129,-40,39,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,-43,-35,-36,-47,-29,-78,-79,-80,-81,-82,39,-84,-2,-46,-118,-42,-54,-67,-68,-69,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-71,-66,-74,-102,39,-30,-31,-122,39,-83,-89,-97,-101,39,-126,-117,-38,39,-92,-108,-107,-39,-45,-112,-85,-119,-123,-110,-37,-44,-111,-113,-109,39,39,-91,-90,]),'SWITCH':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,45,49,50,56,57,59,60,61,62,63,64,65,66,68,69,70,79,81,82,88,90,94,95,96,97,104,115,121,131,136,140,152,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,180,183,191,192,195,202,205,206,208,217,218,225,227,229,232,245,250,255,257,260,262,263,264,267,270,271,274,284,285,288,289,294,295,297,],[40,40,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-86,-127,-3,-128,-129,-40,40,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,-43,-35,-36,-47,-29,-78,-79,-80,-81,-82,40,-84,-2,-46,-118,-42,-54,-67,-68,-69,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-71,-66,-74,-102,40,-30,-31,-122,40,-83,-89,-97,-101,40,-126,-117,-38,40,-92,-108,-107,-39,-45,-112,-85,-119,-123,-110,-37,-44,-111,-113,-109,40,40,-91,-90,]),'LBRACKET':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,45,47,49,50,52,56,57,59,60,61,62,63,64,65,66,68,69,70,79,81,82,83,88,90,91,92,94,95,96,97,104,115,120,121,131,134,136,140,152,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,175,180,183,187,191,192,195,202,205,206,208,217,218,225,227,229,232,245,250,255,257,260,262,263,264,267,270,271,274,284,285,288,289,294,295,297,],[41,41,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-86,-127,-3,84,-128,-129,93,-40,41,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,-43,-35,-36,132,-47,-29,41,141,-78,-79,-80,-81,-82,41,176,-84,-2,188,-46,-118,-42,-54,-67,-68,-69,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-71,-66,-74,210,-102,41,223,-30,-31,-122,41,-83,-89,-97,-101,41,-126,-117,-38,41,-92,-108,-107,-39,-45,-112,-85,-119,-123,-110,-37,-44,-111,-113,-109,41,41,-91,-90,]),'BREAK':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,45,49,50,56,57,59,60,61,62,63,64,65,66,68,69,70,79,81,82,88,90,94,95,96,97,104,115,121,131,136,140,152,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,180,183,191,192,195,202,205,206,208,217,218,225,227,229,232,245,250,255,257,260,262,263,264,267,270,271,274,284,285,288,289,294,295,297,],[42,42,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-86,-127,-3,-128,-129,-40,42,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,-43,-35,-36,-47,-29,-78,-79,-80,-81,-82,42,-84,-2,-46,-118,-42,-54,-67,-68,-69,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-71,-66,-74,-102,42,-30,-31,-122,42,-83,-89,-97,-101,42,-126,-117,-38,42,-92,-108,-107,-39,-45,-112,-85,-119,-123,-110,-37,-44,-111,-113,-109,42,42,-91,-90,]),'RETURN':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,45,49,50,56,57,59,60,61,62,63,64,65,66,68,69,70,79,81,82,88,90,94,95,96,97,104,115,121,131,136,140,152,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,180,183,191,192,195,202,205,206,208,217,218,225,227,229,232,245,250,255,257,260,262,263,264,267,270,271,274,284,285,288,289,294,295,297,],[43,43,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-86,-127,-3,-128,-129,-40,43,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,-43,-35,-36,-47,-29,-78,-79,-80,-81,-82,43,-84,-2,-46,-118,-42,-54,-67,-68,-69,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-71,-66,-74,-102,43,-30,-31,-122,43,-83,-89,-97,-101,43,-126,-117,-38,43,-92,-108,-107,-39,-45,-112,-85,-119,-123,-110,-37,-44,-111,-113,-109,43,43,-91,-90,]),'LPAREN':([5,6,35,37,38,40,43,46,47,48,55,61,67,71,74,85,86,98,99,100,105,106,107,108,109,110,111,112,113,114,117,118,122,123,128,137,138,139,145,155,172,207,220,222,228,231,265,268,287,],[44,48,54,67,67,67,67,67,67,67,102,48,67,120,48,134,135,144,145,146,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,48,48,67,67,67,67,258,67,67,67,]),'STRING':([5,37,38,40,43,44,46,47,48,67,105,106,107,108,109,110,111,112,113,114,117,118,122,123,128,137,138,139,144,145,207,220,222,228,265,266,268,286,287,],[45,64,64,64,64,80,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,196,64,64,64,64,64,64,279,64,279,64,]),'ASSIGN':([6,52,74,90,94,95,96,97,243,],[46,91,46,139,-78,-79,-80,-81,46,]),'ASIG':([6,74,90,94,95,96,97,243,],[47,123,138,-78,-79,-80,-81,123,]),'INCREMENT':([6,243,],[49,49,]),'DECREMENT':([6,243,],[50,50,]),'RBRACE':([8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,49,50,51,56,59,60,61,62,63,64,65,66,68,69,70,79,81,82,88,90,94,95,96,97,103,104,121,126,127,136,140,152,154,155,156,157,158,159,160,161,162,163,164,165,166,167,169,170,171,172,173,174,179,180,181,191,192,195,205,206,208,214,215,216,217,219,225,227,229,233,236,237,244,245,246,247,248,249,250,251,252,255,257,259,260,262,263,264,267,270,271,274,276,277,278,280,284,285,288,291,292,293,295,296,297,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-86,-127,-128,-129,-5,-40,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,-43,-35,-36,-47,-29,-78,-79,-80,-81,152,-82,-84,180,-103,-46,-118,-42,-54,-67,-68,-69,-55,-56,-57,-58,-59,-60,-61,-62,-63,206,208,-98,-65,-71,-66,-74,217,-102,-104,-30,-31,-122,-83,-89,-97,245,-93,-96,-101,-106,-126,-117,-38,260,-100,-99,-95,-92,-94,-105,264,-120,-108,267,-124,-107,-39,274,-45,-112,-85,-119,-123,-110,-37,-44,-121,285,-114,-125,-111,-113,-109,-115,-116,295,-91,297,-90,]),'CASE':([8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,49,50,51,56,59,60,61,62,63,64,65,66,68,69,70,77,79,81,82,88,90,94,95,96,97,104,121,125,127,136,140,152,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,180,191,192,195,205,206,208,217,219,225,227,229,245,247,250,255,257,260,262,263,264,267,270,271,274,284,285,288,295,297,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-86,-127,-128,-129,-5,-40,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,128,-43,-35,-36,-47,-29,-78,-79,-80,-81,-82,-84,128,128,-46,-118,-42,-54,-67,-68,-69,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-71,-66,-74,-102,-30,-31,-122,-83,-89,-97,-101,-106,-126,-117,-38,-92,-105,-108,-107,-39,-45,-112,-85,-119,-123,-110,-37,-44,-111,-113,-109,-91,-90,]),'DEFAULT':([8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,49,50,51,56,59,60,61,62,63,64,65,66,68,69,70,77,79,81,82,88,90,94,95,96,97,104,121,125,127,136,140,152,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,180,191,192,195,205,206,208,217,219,225,227,229,245,247,250,255,257,260,262,263,264,267,270,271,274,284,285,288,295,297,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-86,-127,-128,-129,-5,-40,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,129,-43,-35,-36,-47,-29,-78,-79,-80,-81,-82,-84,129,129,-46,-118,-42,-54,-67,-68,-69,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-71,-66,-74,-102,-30,-31,-122,-83,-89,-97,-101,-106,-126,-117,-38,-92,-105,-108,-107,-39,-45,-112,-85,-119,-123,-110,-37,-44,-111,-113,-109,-91,-90,]),'DOT':([33,],[53,]),'LBRACE':([36,40,49,50,58,59,60,61,62,63,64,65,66,68,69,70,72,74,76,81,82,88,94,95,96,97,124,136,149,153,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,184,186,201,208,234,240,241,242,250,262,282,284,290,],[57,77,-128,-129,115,-32,-33,116,-53,-64,-70,-72,-73,-75,-76,-77,115,116,125,-35,-36,-47,-78,-79,-80,-81,178,-46,202,115,-54,116,-68,-69,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,116,-66,-74,220,222,232,-97,-41,-87,115,-88,266,-112,289,-111,294,]),'NUMBER':([37,38,40,41,43,46,47,48,67,93,105,106,107,108,109,110,111,112,113,114,117,118,122,123,128,137,138,139,145,207,220,222,228,265,268,287,],[59,59,59,78,59,59,59,59,59,142,156,156,59,59,59,59,59,59,59,59,156,156,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'FLOAT':([37,38,40,43,46,47,48,67,105,106,107,108,109,110,111,112,113,114,117,118,122,123,128,137,138,139,145,207,220,222,228,265,268,287,],[60,60,60,60,60,60,60,60,157,157,60,60,60,60,60,60,60,60,157,157,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'TRUE':([37,38,40,43,46,47,48,67,105,106,107,108,109,110,111,112,113,114,117,118,122,123,128,137,138,139,145,207,220,222,228,265,268,287,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'FALSE':([37,38,40,43,46,47,48,67,105,106,107,108,109,110,111,112,113,114,117,118,122,123,128,137,138,139,145,207,220,222,228,265,268,287,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'MAKE':([37,38,40,43,46,47,48,67,105,106,107,108,109,110,111,112,113,114,117,118,122,123,128,137,138,139,145,207,220,222,228,265,268,287,],[71,71,71,71,71,85,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'MAP':([47,52,120,134,],[83,92,175,187,]),'NEW':([47,],[86,]),'RPAREN':([48,59,60,61,62,63,64,65,66,68,69,70,80,87,88,89,94,95,96,97,102,119,136,147,150,151,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,189,190,197,200,208,230,235,239,254,256,258,262,273,275,281,284,],[88,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,131,136,-47,-51,-78,-79,-80,-81,149,174,-46,199,203,-48,-54,-67,-68,-69,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-71,-66,-74,225,-52,229,-50,-97,257,-49,262,270,271,272,-112,283,284,288,-111,]),'INT_TYPE':([52,94,95,96,97,130,132,133,141,143,148,149,178,194,203,210,211,213,215,216,221,223,224,226,244,261,269,272,283,],[94,-78,-79,-80,-81,94,94,94,94,94,94,94,94,94,94,94,94,94,94,-96,94,94,94,94,-95,94,94,94,94,]),'FLOAT64_TYPE':([52,94,95,96,97,130,132,133,141,143,148,149,178,194,203,210,211,213,215,216,221,223,224,226,244,261,269,272,283,],[95,-78,-79,-80,-81,95,95,95,95,95,95,95,95,95,95,95,95,95,95,-96,95,95,95,95,-95,95,95,95,95,]),'STRING_TYPE':([52,94,95,96,97,130,132,133,141,143,148,149,178,194,203,210,211,213,215,216,221,223,224,226,244,261,269,272,283,],[96,-78,-79,-80,-81,96,96,96,96,96,96,96,96,96,96,96,96,96,96,-96,96,96,96,96,-95,96,96,96,96,]),'BOOL_TYPE':([52,94,95,96,97,130,132,133,141,143,148,149,178,194,203,210,211,213,215,216,221,223,224,226,244,261,269,272,283,],[97,-78,-79,-80,-81,97,97,97,97,97,97,97,97,97,97,97,97,97,97,-96,97,97,97,97,-95,97,97,97,97,]),'PRINTF':([53,],[98,]),'PRINTLN':([53,],[99,]),'SCANLN':([53,],[100,]),'PLUS':([58,59,60,61,62,63,64,65,66,68,69,70,72,74,76,79,81,82,88,89,119,136,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,177,182,191,192,197,208,236,249,252,256,262,270,284,288,292,],[105,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,105,-34,105,105,105,105,-47,105,105,-46,-54,-67,-68,-69,-55,105,105,105,105,105,105,105,105,-65,-71,-66,-74,105,105,105,105,105,-97,105,105,105,105,-112,-112,-111,-111,105,]),'MINUS':([58,59,60,61,62,63,64,65,66,68,69,70,72,74,76,79,81,82,88,89,119,136,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,177,182,191,192,197,208,236,249,252,256,262,270,284,288,292,],[106,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,106,-34,106,106,106,106,-47,106,106,-46,-54,-67,-68,-69,-55,106,106,106,106,106,106,106,106,-65,-71,-66,-74,106,106,106,106,106,-97,106,106,106,106,-112,-112,-111,-111,106,]),'AND':([58,59,60,61,62,63,64,65,66,68,69,70,72,74,76,79,81,82,88,89,119,136,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,177,182,191,192,197,208,236,249,252,256,262,270,284,288,292,],[107,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,107,-34,107,107,107,107,-47,107,107,-46,-54,-67,-68,-69,-55,107,107,107,107,107,107,107,107,-65,-71,-66,-74,107,107,107,107,107,-97,107,107,107,107,-112,-112,-111,-111,107,]),'OR':([58,59,60,61,62,63,64,65,66,68,69,70,72,74,76,79,81,82,88,89,119,136,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,177,182,191,192,197,208,236,249,252,256,262,270,284,288,292,],[108,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,108,-34,108,108,108,108,-47,108,108,-46,-54,-67,-68,-69,-55,108,108,108,108,108,108,108,108,-65,-71,-66,-74,108,108,108,108,108,-97,108,108,108,108,-112,-112,-111,-111,108,]),'EQ':([58,59,60,61,62,63,64,65,66,68,69,70,72,74,76,79,81,82,88,89,119,136,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,177,182,191,192,197,208,236,249,252,256,262,270,284,288,292,],[109,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,109,-34,109,109,109,109,-47,109,109,-46,-54,-67,-68,-69,-55,109,109,109,109,109,109,109,109,-65,-71,-66,-74,109,109,109,109,109,-97,109,109,109,109,-112,-112,-111,-111,109,]),'NE':([58,59,60,61,62,63,64,65,66,68,69,70,72,74,76,79,81,82,88,89,119,136,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,177,182,191,192,197,208,236,249,252,256,262,270,284,288,292,],[110,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,110,-34,110,110,110,110,-47,110,110,-46,-54,-67,-68,-69,-55,110,110,110,110,110,110,110,110,-65,-71,-66,-74,110,110,110,110,110,-97,110,110,110,110,-112,-112,-111,-111,110,]),'LT':([58,59,60,61,62,63,64,65,66,68,69,70,72,74,76,79,81,82,88,89,119,136,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,177,182,191,192,197,208,236,249,252,256,262,270,284,288,292,],[111,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,111,-34,111,111,111,111,-47,111,111,-46,-54,-67,-68,-69,-55,111,111,111,111,111,111,111,111,-65,-71,-66,-74,111,111,111,111,111,-97,111,111,111,111,-112,-112,-111,-111,111,]),'GT':([58,59,60,61,62,63,64,65,66,68,69,70,72,74,76,79,81,82,88,89,119,136,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,177,182,191,192,197,208,236,249,252,256,262,270,284,288,292,],[112,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,112,-34,112,112,112,112,-47,112,112,-46,-54,-67,-68,-69,-55,112,112,112,112,112,112,112,112,-65,-71,-66,-74,112,112,112,112,112,-97,112,112,112,112,-112,-112,-111,-111,112,]),'LE':([58,59,60,61,62,63,64,65,66,68,69,70,72,74,76,79,81,82,88,89,119,136,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,177,182,191,192,197,208,236,249,252,256,262,270,284,288,292,],[113,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,113,-34,113,113,113,113,-47,113,113,-46,-54,-67,-68,-69,-55,113,113,113,113,113,113,113,113,-65,-71,-66,-74,113,113,113,113,113,-97,113,113,113,113,-112,-112,-111,-111,113,]),'GE':([58,59,60,61,62,63,64,65,66,68,69,70,72,74,76,79,81,82,88,89,119,136,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,177,182,191,192,197,208,236,249,252,256,262,270,284,288,292,],[114,-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,114,-34,114,114,114,114,-47,114,114,-46,-54,-67,-68,-69,-55,114,114,114,114,114,114,114,114,-65,-71,-66,-74,114,114,114,114,114,-97,114,114,114,114,-112,-112,-111,-111,114,]),'SEMICOLON':([59,60,61,62,63,64,65,66,68,69,70,73,81,82,88,136,154,155,156,157,158,159,160,161,162,163,164,165,166,171,172,173,174,177,208,262,284,],[-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,122,-35,-36,-47,-46,-54,-67,-68,-69,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-71,-66,-74,212,-97,-112,-111,]),'COMMA':([59,60,61,62,63,64,65,66,68,69,70,88,89,94,95,96,97,136,151,154,155,156,157,158,159,160,161,162,163,164,165,166,170,171,172,173,174,196,200,208,236,249,252,262,278,284,292,],[-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,-47,137,-78,-79,-80,-81,-46,204,-54,-67,-68,-69,-55,-56,-57,-58,-59,-60,-61,-62,-63,209,-65,-71,-66,-74,228,-50,-97,-100,265,268,-112,286,-111,-116,]),'COLON':([59,60,61,62,63,64,65,66,68,69,70,88,129,136,154,155,156,157,158,159,160,161,162,163,164,165,166,168,171,172,173,174,182,208,262,279,284,],[-32,-33,-34,-53,-64,-70,-72,-73,-75,-76,-77,-47,183,-46,-54,-67,-68,-69,-55,-56,-57,-58,-59,-60,-61,-62,-63,207,-65,-71,-66,-74,218,-97,-112,287,-111,]),'TIMES':([59,60,61,62,63,64,65,66,68,69,70,74,88,136,154,155,156,157,158,171,172,173,174,208,262,270,284,288,],[-68,-69,-67,117,-64,-70,-72,-73,-75,-76,-77,-67,-47,-46,117,-67,-68,-69,117,-65,-71,-66,-74,-97,-112,-112,-111,-111,]),'DIVIDE':([59,60,61,62,63,64,65,66,68,69,70,74,88,136,154,155,156,157,158,171,172,173,174,208,262,270,284,288,],[-68,-69,-67,118,-64,-70,-72,-73,-75,-76,-77,-67,-47,-46,118,-67,-68,-69,118,-65,-71,-66,-74,-97,-112,-112,-111,-111,]),'STRUCT':([75,],[124,]),'RBRACKET':([78,84,93,94,95,96,97,142,176,185,188,193,238,253,],[130,133,143,-78,-79,-80,-81,194,211,221,224,226,261,269,]),'ELSE':([104,206,],[153,-89,]),'AMPER':([146,],[198,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'import_stmt':([3,],[4,]),'program':([4,8,57,115,183,202,218,232,289,294,],[7,51,103,167,219,233,247,259,293,296,]),'statement':([4,8,57,115,183,202,218,232,289,294,],[8,8,8,8,8,8,8,8,8,8,]),'declaration':([4,8,57,115,183,202,218,232,289,294,],[9,9,9,9,9,9,9,9,9,9,]),'assignment':([4,8,38,57,115,183,202,212,218,232,289,294,],[10,10,73,10,10,10,10,240,10,10,10,10,]),'print_stmt':([4,8,57,115,183,202,218,232,289,294,],[11,11,11,11,11,11,11,11,11,11,]),'input_stmt':([4,8,57,115,183,202,218,232,289,294,],[12,12,12,12,12,12,12,12,12,12,]),'continue_stmt':([4,8,57,115,183,202,218,232,289,294,],[13,13,13,13,13,13,13,13,13,13,]),'struct_method':([4,8,57,115,183,202,218,232,289,294,],[14,14,14,14,14,14,14,14,14,14,]),'func_def':([4,8,57,115,183,202,218,232,289,294,],[15,15,15,15,15,15,15,15,15,15,]),'func_no_params':([4,8,57,115,183,202,218,232,289,294,],[16,16,16,16,16,16,16,16,16,16,]),'func_call':([4,8,37,38,40,43,46,47,48,57,67,105,106,107,108,109,110,111,112,113,114,115,117,118,122,123,128,137,138,139,145,183,202,207,218,220,222,228,232,265,268,287,289,294,],[17,17,70,70,70,70,70,70,70,17,70,70,70,70,70,70,70,70,70,70,70,17,70,70,70,70,70,70,70,70,70,17,17,70,17,70,70,70,17,70,70,70,17,17,]),'if_stmt':([4,8,57,115,183,202,218,232,289,294,],[18,18,18,18,18,18,18,18,18,18,]),'for_stmt':([4,8,57,115,183,202,218,232,289,294,],[19,19,19,19,19,19,19,19,19,19,]),'struct_def':([4,8,57,115,183,202,218,232,289,294,],[20,20,20,20,20,20,20,20,20,20,]),'switch_stmt':([4,8,57,115,183,202,218,232,289,294,],[21,21,21,21,21,21,21,21,21,21,]),'map_declaration':([4,8,57,115,183,202,218,232,289,294,],[22,22,22,22,22,22,22,22,22,22,]),'map_declaration_values':([4,8,57,115,183,202,218,232,289,294,],[23,23,23,23,23,23,23,23,23,23,]),'array_declaration':([4,8,57,115,183,202,218,232,289,294,],[24,24,24,24,24,24,24,24,24,24,]),'array_literal':([4,8,57,91,115,183,202,218,232,289,294,],[25,25,25,140,25,25,25,25,25,25,25,]),'slice_declaration':([4,8,57,115,183,202,218,232,289,294,],[26,26,26,26,26,26,26,26,26,26,]),'make_stmt':([4,8,57,115,183,202,218,232,289,294,],[27,27,27,27,27,27,27,27,27,27,]),'new_stmt':([4,8,57,115,183,202,218,232,289,294,],[28,28,28,28,28,28,28,28,28,28,]),'break_stmt':([4,8,57,115,183,202,218,232,289,294,],[29,29,29,29,29,29,29,29,29,29,]),'increment_stmt':([4,8,57,115,183,202,212,218,232,289,294,],[30,30,30,30,30,30,242,30,30,30,30,]),'return_stmt':([4,8,57,115,183,202,218,232,289,294,],[31,31,31,31,31,31,31,31,31,31,]),'func_header':([4,8,57,115,183,202,218,232,289,294,],[36,36,36,36,36,36,36,36,36,36,]),'func_body':([36,],[56,]),'expression':([37,38,40,43,46,47,48,67,107,108,109,110,111,112,113,114,122,123,128,137,138,139,145,207,220,222,228,265,268,287,],[58,72,76,79,81,82,89,119,159,160,161,162,163,164,165,166,177,82,182,89,191,192,197,236,249,252,256,249,252,292,]),'term':([37,38,40,43,46,47,48,67,105,106,107,108,109,110,111,112,113,114,122,123,128,137,138,139,145,207,220,222,228,265,268,287,],[62,62,62,62,62,62,62,62,154,158,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'factor':([37,38,40,43,46,47,48,67,105,106,107,108,109,110,111,112,113,114,117,118,122,123,128,137,138,139,145,207,220,222,228,265,268,287,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,171,173,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'make_expr':([37,38,40,43,46,47,48,67,105,106,107,108,109,110,111,112,113,114,117,118,122,123,128,137,138,139,145,207,220,222,228,265,268,287,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'struct_instance':([37,38,40,43,46,47,48,67,105,106,107,108,109,110,111,112,113,114,117,118,122,123,128,137,138,139,145,207,220,222,228,265,268,287,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'arg_list':([48,137,],[87,190,]),'type':([52,130,132,133,141,143,148,149,178,194,203,210,211,213,215,221,223,224,226,261,269,272,283,],[90,184,185,186,193,195,200,201,216,227,234,238,239,244,216,250,253,254,255,275,281,282,290,]),'block':([58,72,153,241,],[104,121,205,263,]),'case_list':([77,125,127,],[126,179,181,]),'case_clause':([77,125,127,],[127,127,127,]),'param_list':([102,204,258,],[150,235,273,]),'param':([102,204,258,],[151,151,151,]),'struct_fields_values':([116,209,],[169,237,]),'field_value':([116,209,],[170,170,]),'struct_fields':([178,215,],[214,246,]),'struct_field':([178,215,],[215,215,]),'for_update':([212,],[241,]),'array_values':([220,265,],[248,276,]),'slice_values':([222,268,],[251,280,]),'map_kv_pairs':([266,286,],[277,291,]),'map_kv_pair':([266,286,],[278,278,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> PACKAGE VARIABLE import_stmt program','start',4,'p_start','parser.py',65),
  ('import_stmt -> IMPORT LPAREN STRING RPAREN','import_stmt',4,'p_import_function','parser.py',71),
  ('import_stmt -> IMPORT STRING','import_stmt',2,'p_import_function','parser.py',72),
  ('program -> statement','program',1,'p_program','parser.py',76),
  ('program -> statement program','program',2,'p_program','parser.py',77),
  ('statement -> declaration','statement',1,'p_statement','parser.py',82),
  ('statement -> assignment','statement',1,'p_statement','parser.py',83),
  ('statement -> print_stmt','statement',1,'p_statement','parser.py',84),
  ('statement -> input_stmt','statement',1,'p_statement','parser.py',85),
  ('statement -> continue_stmt','statement',1,'p_statement','parser.py',86),
  ('statement -> struct_method','statement',1,'p_statement','parser.py',87),
  ('statement -> func_def','statement',1,'p_statement','parser.py',88),
  ('statement -> func_no_params','statement',1,'p_statement','parser.py',89),
  ('statement -> func_call','statement',1,'p_statement','parser.py',90),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',91),
  ('statement -> for_stmt','statement',1,'p_statement','parser.py',92),
  ('statement -> struct_def','statement',1,'p_statement','parser.py',93),
  ('statement -> switch_stmt','statement',1,'p_statement','parser.py',94),
  ('statement -> map_declaration','statement',1,'p_statement','parser.py',95),
  ('statement -> map_declaration_values','statement',1,'p_statement','parser.py',96),
  ('statement -> array_declaration','statement',1,'p_statement','parser.py',97),
  ('statement -> array_literal','statement',1,'p_statement','parser.py',98),
  ('statement -> slice_declaration','statement',1,'p_statement','parser.py',99),
  ('statement -> make_stmt','statement',1,'p_statement','parser.py',100),
  ('statement -> new_stmt','statement',1,'p_statement','parser.py',101),
  ('statement -> break_stmt','statement',1,'p_statement','parser.py',102),
  ('statement -> increment_stmt','statement',1,'p_statement','parser.py',103),
  ('statement -> return_stmt','statement',1,'p_statement','parser.py',104),
  ('declaration -> VAR VARIABLE type','declaration',3,'p_declaration','parser.py',110),
  ('declaration -> VAR VARIABLE type ASIG expression','declaration',5,'p_declaration','parser.py',111),
  ('declaration -> VAR VARIABLE type ASSIGN expression','declaration',5,'p_declaration','parser.py',112),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',135),
  ('expression -> FLOAT','expression',1,'p_expression_float','parser.py',139),
  ('expression -> VARIABLE','expression',1,'p_expression_variable','parser.py',143),
  ('assignment -> VARIABLE ASSIGN expression','assignment',3,'p_assignment','parser.py',157),
  ('assignment -> VARIABLE ASIG expression','assignment',3,'p_assignment','parser.py',158),
  ('print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN','print_stmt',8,'p_print_stmt','parser.py',179),
  ('print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN','print_stmt',6,'p_print_stmt','parser.py',180),
  ('input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN','input_stmt',7,'p_input_stmt','parser.py',191),
  ('func_def -> func_header func_body','func_def',2,'p_func_def','parser.py',196),
  ('func_header -> FUNC VARIABLE LPAREN param_list RPAREN type','func_header',6,'p_func_header','parser.py',200),
  ('func_body -> LBRACE program RBRACE','func_body',3,'p_func_body','parser.py',210),
  ('return_stmt -> RETURN expression','return_stmt',2,'p_return_stmt','parser.py',216),
  ('func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE','func_no_params',8,'p_func_def_no_params','parser.py',239),
  ('func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE','func_no_params',7,'p_func_def_no_params_void','parser.py',245),
  ('func_call -> VARIABLE LPAREN arg_list RPAREN','func_call',4,'p_func_call','parser.py',250),
  ('func_call -> VARIABLE LPAREN RPAREN','func_call',3,'p_func_call','parser.py',251),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',292),
  ('param_list -> param COMMA param_list','param_list',3,'p_param_list','parser.py',293),
  ('param -> VARIABLE type','param',2,'p_param','parser.py',302),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',316),
  ('arg_list -> expression COMMA arg_list','arg_list',3,'p_arg_list','parser.py',317),
  ('expression -> term','expression',1,'p_expression','parser.py',327),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',328),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',329),
  ('expression -> expression AND expression','expression',3,'p_expression','parser.py',330),
  ('expression -> expression OR expression','expression',3,'p_expression','parser.py',331),
  ('expression -> expression EQ expression','expression',3,'p_expression','parser.py',332),
  ('expression -> expression NE expression','expression',3,'p_expression','parser.py',333),
  ('expression -> expression LT expression','expression',3,'p_expression','parser.py',334),
  ('expression -> expression GT expression','expression',3,'p_expression','parser.py',335),
  ('expression -> expression LE expression','expression',3,'p_expression','parser.py',336),
  ('expression -> expression GE expression','expression',3,'p_expression','parser.py',337),
  ('term -> factor','term',1,'p_term','parser.py',367),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',368),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',369),
  ('term -> VARIABLE','term',1,'p_term_variable','parser.py',384),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',395),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',396),
  ('factor -> STRING','factor',1,'p_factor','parser.py',397),
  ('factor -> VARIABLE','factor',1,'p_factor','parser.py',398),
  ('factor -> TRUE','factor',1,'p_factor','parser.py',399),
  ('factor -> FALSE','factor',1,'p_factor','parser.py',400),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',401),
  ('factor -> make_expr','factor',1,'p_factor','parser.py',402),
  ('factor -> struct_instance','factor',1,'p_factor','parser.py',403),
  ('factor -> func_call','factor',1,'p_factor','parser.py',404),
  ('type -> INT_TYPE','type',1,'p_type','parser.py',428),
  ('type -> FLOAT64_TYPE','type',1,'p_type','parser.py',429),
  ('type -> STRING_TYPE','type',1,'p_type','parser.py',430),
  ('type -> BOOL_TYPE','type',1,'p_type','parser.py',431),
  ('if_stmt -> IF expression block','if_stmt',3,'p_if_stmt','parser.py',436),
  ('if_stmt -> IF expression block ELSE block','if_stmt',5,'p_if_stmt','parser.py',437),
  ('for_stmt -> FOR expression block','for_stmt',3,'p_for_stmt','parser.py',446),
  ('for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block','for_stmt',7,'p_for_stmt','parser.py',447),
  ('continue_stmt -> CONTINUE','continue_stmt',1,'p_continue_stmt','parser.py',453),
  ('for_update -> assignment','for_update',1,'p_for_update','parser.py',459),
  ('for_update -> increment_stmt','for_update',1,'p_for_update','parser.py',460),
  ('block -> LBRACE program RBRACE','block',3,'p_block','parser.py',465),
  ('struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE','struct_method',13,'p_struct_method','parser.py',470),
  ('struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE','struct_method',12,'p_struct_method','parser.py',471),
  ('struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE','struct_def',6,'p_struct_def','parser.py',476),
  ('struct_fields -> struct_field','struct_fields',1,'p_struct_fields','parser.py',481),
  ('struct_fields -> struct_field struct_fields','struct_fields',2,'p_struct_fields','parser.py',482),
  ('struct_field -> VARIABLE type','struct_field',2,'p_struct_field','parser.py',487),
  ('struct_field -> type','struct_field',1,'p_struct_field','parser.py',488),
  ('struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE','struct_instance',4,'p_struct_instance','parser.py',493),
  ('struct_fields_values -> field_value','struct_fields_values',1,'p_struct_fields_values','parser.py',497),
  ('struct_fields_values -> field_value COMMA struct_fields_values','struct_fields_values',3,'p_struct_fields_values','parser.py',498),
  ('field_value -> VARIABLE COLON expression','field_value',3,'p_field_value','parser.py',502),
  ('switch_stmt -> SWITCH expression LBRACE case_list RBRACE','switch_stmt',5,'p_switch_stmt','parser.py',506),
  ('switch_stmt -> SWITCH LBRACE case_list RBRACE','switch_stmt',4,'p_switch_stmt','parser.py',507),
  ('case_list -> case_clause','case_list',1,'p_case_list','parser.py',511),
  ('case_list -> case_clause case_list','case_list',2,'p_case_list','parser.py',512),
  ('case_clause -> CASE expression COLON program','case_clause',4,'p_case_clause','parser.py',516),
  ('case_clause -> DEFAULT COLON program','case_clause',3,'p_case_clause','parser.py',517),
  ('map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type','map_declaration',7,'p_map_declaration','parser.py',523),
  ('map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type','map_declaration',7,'p_map_declaration','parser.py',524),
  ('make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN','make_stmt',10,'p_make_stmt','parser.py',529),
  ('make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN','make_stmt',8,'p_make_stmt','parser.py',530),
  ('make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN','make_expr',8,'p_make_expr','parser.py',534),
  ('make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN','make_expr',6,'p_make_expr','parser.py',535),
  ('map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE','map_declaration_values',10,'p_map_literal_declaration','parser.py',547),
  ('map_kv_pairs -> map_kv_pair','map_kv_pairs',1,'p_map_kv_pairs','parser.py',551),
  ('map_kv_pairs -> map_kv_pair COMMA map_kv_pairs','map_kv_pairs',3,'p_map_kv_pairs','parser.py',552),
  ('map_kv_pair -> STRING COLON expression','map_kv_pair',3,'p_map_kv_pair','parser.py',556),
  ('array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type','array_declaration',6,'p_array_declaration','parser.py',561),
  ('array_declaration -> VAR VARIABLE ASSIGN array_literal','array_declaration',4,'p_array_declaration','parser.py',562),
  ('array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE','array_literal',7,'p_array_literal','parser.py',586),
  ('array_values -> expression','array_values',1,'p_array_values','parser.py',602),
  ('array_values -> expression COMMA array_values','array_values',3,'p_array_values','parser.py',603),
  ('slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type','slice_declaration',5,'p_slice_declaration','parser.py',613),
  ('slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE','slice_declaration',8,'p_slice_declaration','parser.py',614),
  ('slice_values -> expression','slice_values',1,'p_slice_values','parser.py',618),
  ('slice_values -> expression COMMA slice_values','slice_values',3,'p_slice_values','parser.py',619),
  ('new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN','new_stmt',6,'p_new_stmt','parser.py',624),
  ('break_stmt -> BREAK','break_stmt',1,'p_break_stmt','parser.py',629),
  ('increment_stmt -> VARIABLE INCREMENT','increment_stmt',2,'p_increment_stmt','parser.py',636),
  ('increment_stmt -> VARIABLE DECREMENT','increment_stmt',2,'p_increment_stmt','parser.py',637),
]
