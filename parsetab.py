
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'startAMPER AND ASIG ASSIGN BOOL_TYPE BREAK CASE COLON COMMA CONTINUE DECREMENT DEFAULT DIVIDE DOT ELSE EQ FALSE FLOAT FLOAT64_TYPE FMT FOR FUNC GE GT IF IMPORT INCREMENT INT_TYPE LBRACE LBRACKET LE LPAREN LT MAIN MAKE MAP MINUS MOD NE NEW NOT NUMBER OR PACKAGE PLUS PRINT PRINTF PRINTLN RANGE RBRACE RBRACKET RETURN RPAREN SCANLN SEMICOLON STRING STRING_TYPE STRUCT SWITCH TIMES TRUE TYPE UINT VAR VARIABLEstart : PACKAGE MAIN import_stmt programimport_stmt : IMPORT LPAREN STRING RPAREN\n                    | IMPORT STRINGprogram : statement\n               | statement programstatement : declaration\n                 | assignment\n                 | print_stmt\n                 | input_stmt\n                 | continue_stmt\n                 | struct_method\n                 | func_def\n                 | func_no_params\n                 | func_call\n                 | if_stmt\n                 | for_stmt\n                 | struct_def\n                 | switch_stmt\n                 | map_declaration\n                 | map_declaration_values\n                 | array_declaration\n                 | array_literal\n                 | slice_declaration\n                 | make_stmt\n                 | new_stmt\n                 | break_stmt\n                 | increment_stmt\n                 | return_stmtdeclaration : VAR VARIABLE type \n                   | VAR VARIABLE type ASIG expression\n                   | VAR VARIABLE type ASSIGN expressionexpression : NUMBERexpression : FLOATexpression : VARIABLEassignment : VARIABLE ASSIGN expression\n                  | VARIABLE ASIG expressionprint_stmt : FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN\n                  | FMT DOT PRINTLN LPAREN expression RPARENinput_stmt : FMT DOT SCANLN LPAREN AMPER VARIABLE RPARENfunc_def : func_header func_bodyfunc_header : FUNC VARIABLE LPAREN param_list RPAREN typefunc_body : LBRACE program RBRACEreturn_stmt : RETURN expressionfunc_no_params : FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACEfunc_no_params : FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACEfunc_call : VARIABLE LPAREN arg_list RPAREN\n                 | VARIABLE LPAREN RPARENparam_list : param\n                  | param COMMA param_listparam : VARIABLE typearg_list : expression\n                | expression COMMA arg_listexpression : term\n                  | expression PLUS term\n                  | expression MINUS term\n                  | expression AND expression\n                  | expression OR expression\n                  | expression EQ expression\n                  | expression NE expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression LE expression\n                  | expression GE expressionterm : factor\n            | term TIMES factor\n            | term DIVIDE factorfactor : NUMBER\n              | FLOAT\n              | STRING\n              | VARIABLE\n              | TRUE\n              | FALSE\n              | LPAREN expression RPAREN\n              | make_expr\n              | struct_instancetype : INT_TYPE\n            | FLOAT64_TYPE\n            | STRING_TYPE\n            | BOOL_TYPEif_stmt : IF expression block\n               | IF expression block ELSE blockfor_stmt : FOR expression block\n                | FOR assignment SEMICOLON expression SEMICOLON for_update blockcontinue_stmt : CONTINUEfor_update : assignment\n                  | increment_stmtblock : LBRACE program RBRACEstruct_method : FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE\n                     | FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACEstruct_def : TYPE VARIABLE STRUCT LBRACE struct_fields RBRACEstruct_fields : struct_field\n                     | struct_field struct_fieldsstruct_field : VARIABLE type\n                    | typestruct_instance : VARIABLE LBRACE struct_fields_values RBRACEstruct_fields_values : field_value\n                            | field_value COMMA struct_fields_valuesfield_value : VARIABLE COLON expressionswitch_stmt : SWITCH expression LBRACE case_list RBRACE\n                   | SWITCH LBRACE case_list RBRACEcase_list : case_clause\n                 | case_clause case_listcase_clause : CASE expression COLON program\n                   | DEFAULT COLON programmap_declaration : VAR VARIABLE MAP LBRACKET type RBRACKET type\n                       | VARIABLE ASIG MAP LBRACKET type RBRACKET typemake_stmt : VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN\n                 | VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPARENmake_expr : MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN\n                 | MAKE LPAREN LBRACKET RBRACKET type RPARENmap_declaration_values : VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACEmap_kv_pairs : map_kv_pair\n                    | map_kv_pair COMMA map_kv_pairsmap_kv_pair : STRING COLON expressionarray_declaration : VAR VARIABLE LBRACKET NUMBER RBRACKET type\n                         | VAR VARIABLE ASSIGN array_literalarray_literal : LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACEarray_values : expression\n                    | expression COMMA array_valuesslice_declaration : VAR VARIABLE LBRACKET RBRACKET type\n                         | VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACEslice_values : expression\n                    | expression COMMA slice_valuesnew_stmt : VARIABLE ASIG NEW LPAREN VARIABLE RPARENbreak_stmt : BREAKincrement_stmt : VARIABLE INCREMENT\n                      | VARIABLE DECREMENT'
    
_lr_action_items = {'PACKAGE':([0,],[2,]),'$end':([1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,42,46,51,52,56,59,60,61,62,63,64,65,66,68,69,78,80,84,85,86,87,88,89,95,103,120,133,141,151,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,178,183,184,187,203,204,206,215,220,225,227,243,248,249,255,258,260,261,262,265,268,269,272,282,283,286,293,295,],[0,-1,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-84,-125,-5,-126,-127,-40,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,-43,-29,-76,-77,-78,-79,-35,-36,-47,-80,-82,-116,-46,-42,-54,-67,-68,-70,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-66,-73,-100,-30,-31,-120,-81,-87,-95,-99,-115,-124,-38,-90,-105,-106,-39,-45,-110,-83,-117,-121,-108,-37,-44,-109,-111,-107,-89,-88,]),'MAIN':([2,],[3,]),'IMPORT':([3,],[5,]),'VAR':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,42,45,51,52,56,57,59,60,61,62,63,64,65,66,68,69,78,80,84,85,86,87,88,89,95,103,114,120,130,133,141,151,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,178,181,183,184,187,200,203,204,206,215,216,220,225,227,230,243,248,249,255,258,260,261,262,265,268,269,272,282,283,286,287,292,293,295,],[31,31,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-84,-125,-3,-126,-127,-40,31,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,-43,-29,-76,-77,-78,-79,-35,-36,-47,-80,31,-82,-2,-116,-46,-42,-54,-67,-68,-70,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-66,-73,-100,31,-30,-31,-120,31,-81,-87,-95,-99,31,-115,-124,-38,31,-90,-105,-106,-39,-45,-110,-83,-117,-121,-108,-37,-44,-109,-111,-107,31,31,-89,-88,]),'VARIABLE':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,35,37,38,39,40,42,43,45,48,49,50,51,52,54,56,57,59,60,61,62,63,64,65,66,67,68,69,78,80,84,85,86,87,88,89,95,100,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,127,130,131,132,133,140,141,142,144,151,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,176,178,181,183,184,187,196,197,200,202,203,204,205,206,207,210,213,214,215,216,218,220,222,225,226,227,230,242,243,248,249,255,256,258,260,261,262,263,265,266,268,269,272,282,283,285,286,287,292,293,295,],[32,32,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,47,-84,55,61,73,74,61,-125,61,-3,61,61,61,-126,-127,100,-40,32,-32,-33,-34,-53,-64,-69,-71,-72,61,-74,-75,-43,-29,-76,-77,-78,-79,-35,-36,-47,146,147,-80,156,156,61,61,61,61,61,61,61,61,32,167,156,156,-82,61,61,61,-2,61,61,-116,192,-46,61,61,-42,-54,-67,-68,-70,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-66,-73,211,-100,32,-30,-31,-120,228,229,32,147,-81,-87,61,-95,167,241,211,-94,-99,32,61,-115,61,-124,61,-38,32,-93,-90,-105,-106,-39,147,-45,-110,-83,-117,61,-121,61,-108,-37,-44,-109,-111,61,-107,32,32,-89,-88,]),'FMT':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,42,45,51,52,56,57,59,60,61,62,63,64,65,66,68,69,78,80,84,85,86,87,88,89,95,103,114,120,130,133,141,151,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,178,181,183,184,187,200,203,204,206,215,216,220,225,227,230,243,248,249,255,258,260,261,262,265,268,269,272,282,283,286,287,292,293,295,],[33,33,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-84,-125,-3,-126,-127,-40,33,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,-43,-29,-76,-77,-78,-79,-35,-36,-47,-80,33,-82,-2,-116,-46,-42,-54,-67,-68,-70,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-66,-73,-100,33,-30,-31,-120,33,-81,-87,-95,-99,33,-115,-124,-38,33,-90,-105,-106,-39,-45,-110,-83,-117,-121,-108,-37,-44,-109,-111,-107,33,33,-89,-88,]),'CONTINUE':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,42,45,51,52,56,57,59,60,61,62,63,64,65,66,68,69,78,80,84,85,86,87,88,89,95,103,114,120,130,133,141,151,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,178,181,183,184,187,200,203,204,206,215,216,220,225,227,230,243,248,249,255,258,260,261,262,265,268,269,272,282,283,286,287,292,293,295,],[34,34,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-84,-125,-3,-126,-127,-40,34,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,-43,-29,-76,-77,-78,-79,-35,-36,-47,-80,34,-82,-2,-116,-46,-42,-54,-67,-68,-70,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-66,-73,-100,34,-30,-31,-120,34,-81,-87,-95,-99,34,-115,-124,-38,34,-90,-105,-106,-39,-45,-110,-83,-117,-121,-108,-37,-44,-109,-111,-107,34,34,-89,-88,]),'FUNC':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,42,45,51,52,56,57,59,60,61,62,63,64,65,66,68,69,78,80,84,85,86,87,88,89,95,103,114,120,130,133,141,151,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,178,181,183,184,187,200,203,204,206,215,216,220,225,227,230,243,248,249,255,258,260,261,262,265,268,269,272,282,283,286,287,292,293,295,],[35,35,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-84,-125,-3,-126,-127,-40,35,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,-43,-29,-76,-77,-78,-79,-35,-36,-47,-80,35,-82,-2,-116,-46,-42,-54,-67,-68,-70,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-66,-73,-100,35,-30,-31,-120,35,-81,-87,-95,-99,35,-115,-124,-38,35,-90,-105,-106,-39,-45,-110,-83,-117,-121,-108,-37,-44,-109,-111,-107,35,35,-89,-88,]),'IF':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,42,45,51,52,56,57,59,60,61,62,63,64,65,66,68,69,78,80,84,85,86,87,88,89,95,103,114,120,130,133,141,151,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,178,181,183,184,187,200,203,204,206,215,216,220,225,227,230,243,248,249,255,258,260,261,262,265,268,269,272,282,283,286,287,292,293,295,],[37,37,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-84,-125,-3,-126,-127,-40,37,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,-43,-29,-76,-77,-78,-79,-35,-36,-47,-80,37,-82,-2,-116,-46,-42,-54,-67,-68,-70,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-66,-73,-100,37,-30,-31,-120,37,-81,-87,-95,-99,37,-115,-124,-38,37,-90,-105,-106,-39,-45,-110,-83,-117,-121,-108,-37,-44,-109,-111,-107,37,37,-89,-88,]),'FOR':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,42,45,51,52,56,57,59,60,61,62,63,64,65,66,68,69,78,80,84,85,86,87,88,89,95,103,114,120,130,133,141,151,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,178,181,183,184,187,200,203,204,206,215,216,220,225,227,230,243,248,249,255,258,260,261,262,265,268,269,272,282,283,286,287,292,293,295,],[38,38,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-84,-125,-3,-126,-127,-40,38,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,-43,-29,-76,-77,-78,-79,-35,-36,-47,-80,38,-82,-2,-116,-46,-42,-54,-67,-68,-70,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-66,-73,-100,38,-30,-31,-120,38,-81,-87,-95,-99,38,-115,-124,-38,38,-90,-105,-106,-39,-45,-110,-83,-117,-121,-108,-37,-44,-109,-111,-107,38,38,-89,-88,]),'TYPE':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,42,45,51,52,56,57,59,60,61,62,63,64,65,66,68,69,78,80,84,85,86,87,88,89,95,103,114,120,130,133,141,151,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,178,181,183,184,187,200,203,204,206,215,216,220,225,227,230,243,248,249,255,258,260,261,262,265,268,269,272,282,283,286,287,292,293,295,],[39,39,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-84,-125,-3,-126,-127,-40,39,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,-43,-29,-76,-77,-78,-79,-35,-36,-47,-80,39,-82,-2,-116,-46,-42,-54,-67,-68,-70,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-66,-73,-100,39,-30,-31,-120,39,-81,-87,-95,-99,39,-115,-124,-38,39,-90,-105,-106,-39,-45,-110,-83,-117,-121,-108,-37,-44,-109,-111,-107,39,39,-89,-88,]),'SWITCH':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,42,45,51,52,56,57,59,60,61,62,63,64,65,66,68,69,78,80,84,85,86,87,88,89,95,103,114,120,130,133,141,151,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,178,181,183,184,187,200,203,204,206,215,216,220,225,227,230,243,248,249,255,258,260,261,262,265,268,269,272,282,283,286,287,292,293,295,],[40,40,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-84,-125,-3,-126,-127,-40,40,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,-43,-29,-76,-77,-78,-79,-35,-36,-47,-80,40,-82,-2,-116,-46,-42,-54,-67,-68,-70,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-66,-73,-100,40,-30,-31,-120,40,-81,-87,-95,-99,40,-115,-124,-38,40,-90,-105,-106,-39,-45,-110,-83,-117,-121,-108,-37,-44,-109,-111,-107,40,40,-89,-88,]),'LBRACKET':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,42,45,47,49,51,52,56,57,59,60,61,62,63,64,65,66,68,69,78,80,81,82,84,85,86,87,88,89,90,95,103,114,119,120,130,133,139,141,151,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,173,178,181,183,184,187,190,200,203,204,206,215,216,220,225,227,230,243,248,249,255,258,260,261,262,265,268,269,272,282,283,286,287,292,293,295,],[41,41,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-84,-125,-3,83,91,-126,-127,-40,41,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,-43,-29,41,134,-76,-77,-78,-79,-35,-36,137,-47,-80,41,174,-82,-2,-116,191,-46,-42,-54,-67,-68,-70,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-66,-73,208,-100,41,-30,-31,-120,223,41,-81,-87,-95,-99,41,-115,-124,-38,41,-90,-105,-106,-39,-45,-110,-83,-117,-121,-108,-37,-44,-109,-111,-107,41,41,-89,-88,]),'BREAK':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,42,45,51,52,56,57,59,60,61,62,63,64,65,66,68,69,78,80,84,85,86,87,88,89,95,103,114,120,130,133,141,151,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,178,181,183,184,187,200,203,204,206,215,216,220,225,227,230,243,248,249,255,258,260,261,262,265,268,269,272,282,283,286,287,292,293,295,],[42,42,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-84,-125,-3,-126,-127,-40,42,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,-43,-29,-76,-77,-78,-79,-35,-36,-47,-80,42,-82,-2,-116,-46,-42,-54,-67,-68,-70,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-66,-73,-100,42,-30,-31,-120,42,-81,-87,-95,-99,42,-115,-124,-38,42,-90,-105,-106,-39,-45,-110,-83,-117,-121,-108,-37,-44,-109,-111,-107,42,42,-89,-88,]),'RETURN':([4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,42,45,51,52,56,57,59,60,61,62,63,64,65,66,68,69,78,80,84,85,86,87,88,89,95,103,114,120,130,133,141,151,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,178,181,183,184,187,200,203,204,206,215,216,220,225,227,230,243,248,249,255,258,260,261,262,265,268,269,272,282,283,286,287,292,293,295,],[43,43,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-84,-125,-3,-126,-127,-40,43,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,-43,-29,-76,-77,-78,-79,-35,-36,-47,-80,43,-82,-2,-116,-46,-42,-54,-67,-68,-70,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-66,-73,-100,43,-30,-31,-120,43,-81,-87,-95,-99,43,-115,-124,-38,43,-90,-105,-106,-39,-45,-110,-83,-117,-121,-108,-37,-44,-109,-111,-107,43,43,-89,-88,]),'LPAREN':([5,32,35,37,38,40,43,48,49,50,55,67,70,92,93,97,98,99,104,105,106,107,108,109,110,111,112,113,116,117,121,122,127,131,132,142,144,205,218,222,226,229,263,266,285,],[44,50,54,67,67,67,67,67,67,67,101,67,119,139,140,143,144,145,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,256,67,67,67,]),'STRING':([5,37,38,40,43,44,48,49,50,67,104,105,106,107,108,109,110,111,112,113,116,117,121,122,127,131,132,142,143,144,205,218,222,226,263,264,266,284,285,],[45,64,64,64,64,79,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,194,64,64,64,64,64,64,277,64,277,64,]),'RBRACE':([7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,42,46,51,52,56,59,60,61,62,63,64,65,66,68,69,78,80,84,85,86,87,88,89,95,102,103,120,125,126,133,141,151,153,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,170,171,172,177,178,179,183,184,187,203,204,206,212,213,214,215,217,220,225,227,231,234,235,242,243,244,245,246,247,248,249,250,251,255,257,258,260,261,262,265,268,269,272,274,275,276,278,282,283,286,289,290,291,293,294,295,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-84,-125,-5,-126,-127,-40,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,-43,-29,-76,-77,-78,-79,-35,-36,-47,151,-80,-82,178,-101,-116,-46,-42,-54,-67,-68,-70,-55,-56,-57,-58,-59,-60,-61,-62,-63,204,206,-96,-65,-66,-73,215,-100,-102,-30,-31,-120,-81,-87,-95,243,-91,-94,-99,-104,-115,-124,-38,258,-98,-97,-93,-90,-92,-103,262,-118,-105,-106,265,-122,-39,272,-45,-110,-83,-117,-121,-108,-37,-44,-119,283,-112,-123,-109,-111,-107,-113,-114,293,-89,295,-88,]),'CASE':([7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,42,46,51,52,56,59,60,61,62,63,64,65,66,68,69,76,78,80,84,85,86,87,88,89,95,103,120,124,126,133,141,151,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,178,183,184,187,203,204,206,215,217,220,225,227,243,245,248,249,255,258,260,261,262,265,268,269,272,282,283,286,293,295,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-84,-125,-5,-126,-127,-40,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,127,-43,-29,-76,-77,-78,-79,-35,-36,-47,-80,-82,127,127,-116,-46,-42,-54,-67,-68,-70,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-66,-73,-100,-30,-31,-120,-81,-87,-95,-99,-104,-115,-124,-38,-90,-103,-105,-106,-39,-45,-110,-83,-117,-121,-108,-37,-44,-109,-111,-107,-89,-88,]),'DEFAULT':([7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,34,42,46,51,52,56,59,60,61,62,63,64,65,66,68,69,76,78,80,84,85,86,87,88,89,95,103,120,124,126,133,141,151,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,178,183,184,187,203,204,206,215,217,220,225,227,243,245,248,249,255,258,260,261,262,265,268,269,272,282,283,286,293,295,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-84,-125,-5,-126,-127,-40,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,128,-43,-29,-76,-77,-78,-79,-35,-36,-47,-80,-82,128,128,-116,-46,-42,-54,-67,-68,-70,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-66,-73,-100,-30,-31,-120,-81,-87,-95,-99,-104,-115,-124,-38,-90,-103,-105,-106,-39,-45,-110,-83,-117,-121,-108,-37,-44,-109,-111,-107,-89,-88,]),'ASSIGN':([32,47,73,80,84,85,86,87,241,],[48,81,48,132,-76,-77,-78,-79,48,]),'ASIG':([32,73,80,84,85,86,87,241,],[49,122,131,-76,-77,-78,-79,122,]),'INCREMENT':([32,241,],[51,51,]),'DECREMENT':([32,241,],[52,52,]),'DOT':([33,],[53,]),'LBRACE':([36,40,51,52,58,59,60,61,62,63,64,65,66,68,69,71,73,75,84,85,86,87,88,89,123,148,152,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,182,189,199,206,232,238,239,240,249,260,280,282,288,],[57,76,-126,-127,114,-32,-33,115,-53,-64,-69,-71,-72,-74,-75,114,115,124,-76,-77,-78,-79,-35,-36,176,200,114,-54,-67,-68,115,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-66,-73,218,222,230,-95,-41,-85,114,-86,264,-110,287,-109,292,]),'NUMBER':([37,38,40,41,43,48,49,50,67,83,104,105,106,107,108,109,110,111,112,113,116,117,121,122,127,131,132,142,144,205,218,222,226,263,266,285,],[59,59,59,77,59,59,59,59,59,135,154,154,59,59,59,59,59,59,59,59,154,154,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'FLOAT':([37,38,40,43,48,49,50,67,104,105,106,107,108,109,110,111,112,113,116,117,121,122,127,131,132,142,144,205,218,222,226,263,266,285,],[60,60,60,60,60,60,60,60,155,155,60,60,60,60,60,60,60,60,155,155,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'TRUE':([37,38,40,43,48,49,50,67,104,105,106,107,108,109,110,111,112,113,116,117,121,122,127,131,132,142,144,205,218,222,226,263,266,285,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'FALSE':([37,38,40,43,48,49,50,67,104,105,106,107,108,109,110,111,112,113,116,117,121,122,127,131,132,142,144,205,218,222,226,263,266,285,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'MAKE':([37,38,40,43,48,49,50,67,104,105,106,107,108,109,110,111,112,113,116,117,121,122,127,131,132,142,144,205,218,222,226,263,266,285,],[70,70,70,70,70,92,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'MAP':([47,49,119,139,],[82,90,173,190,]),'INT_TYPE':([47,84,85,86,87,129,134,136,137,138,147,148,176,186,201,208,209,211,213,214,219,221,223,224,242,259,267,270,281,],[84,-76,-77,-78,-79,84,84,84,84,84,84,84,84,84,84,84,84,84,84,-94,84,84,84,84,-93,84,84,84,84,]),'FLOAT64_TYPE':([47,84,85,86,87,129,134,136,137,138,147,148,176,186,201,208,209,211,213,214,219,221,223,224,242,259,267,270,281,],[85,-76,-77,-78,-79,85,85,85,85,85,85,85,85,85,85,85,85,85,85,-94,85,85,85,85,-93,85,85,85,85,]),'STRING_TYPE':([47,84,85,86,87,129,134,136,137,138,147,148,176,186,201,208,209,211,213,214,219,221,223,224,242,259,267,270,281,],[86,-76,-77,-78,-79,86,86,86,86,86,86,86,86,86,86,86,86,86,86,-94,86,86,86,86,-93,86,86,86,86,]),'BOOL_TYPE':([47,84,85,86,87,129,134,136,137,138,147,148,176,186,201,208,209,211,213,214,219,221,223,224,242,259,267,270,281,],[87,-76,-77,-78,-79,87,87,87,87,87,87,87,87,87,87,87,87,87,87,-94,87,87,87,87,-93,87,87,87,87,]),'NEW':([49,],[93,]),'RPAREN':([50,59,60,61,62,63,64,65,66,68,69,79,84,85,86,87,94,96,101,118,146,149,150,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,192,193,195,198,206,228,233,237,253,254,256,260,271,273,279,282,],[95,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,130,-76,-77,-78,-79,141,-51,148,172,197,201,-48,-54,-67,-68,-70,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-66,-73,225,-52,227,-50,-95,255,-49,260,268,269,270,-110,281,282,286,-109,]),'PRINTF':([53,],[97,]),'PRINTLN':([53,],[98,]),'SCANLN':([53,],[99,]),'PLUS':([58,59,60,61,62,63,64,65,66,68,69,71,73,75,78,88,89,96,118,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,175,180,183,184,195,206,234,247,251,254,260,268,282,286,290,],[104,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,104,-34,104,104,104,104,104,104,-54,-67,-68,-70,-55,104,104,104,104,104,104,104,104,-65,-66,-73,104,104,104,104,104,-95,104,104,104,104,-110,-110,-109,-109,104,]),'MINUS':([58,59,60,61,62,63,64,65,66,68,69,71,73,75,78,88,89,96,118,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,175,180,183,184,195,206,234,247,251,254,260,268,282,286,290,],[105,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,105,-34,105,105,105,105,105,105,-54,-67,-68,-70,-55,105,105,105,105,105,105,105,105,-65,-66,-73,105,105,105,105,105,-95,105,105,105,105,-110,-110,-109,-109,105,]),'AND':([58,59,60,61,62,63,64,65,66,68,69,71,73,75,78,88,89,96,118,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,175,180,183,184,195,206,234,247,251,254,260,268,282,286,290,],[106,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,106,-34,106,106,106,106,106,106,-54,-67,-68,-70,-55,106,106,106,106,106,106,106,106,-65,-66,-73,106,106,106,106,106,-95,106,106,106,106,-110,-110,-109,-109,106,]),'OR':([58,59,60,61,62,63,64,65,66,68,69,71,73,75,78,88,89,96,118,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,175,180,183,184,195,206,234,247,251,254,260,268,282,286,290,],[107,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,107,-34,107,107,107,107,107,107,-54,-67,-68,-70,-55,107,107,107,107,107,107,107,107,-65,-66,-73,107,107,107,107,107,-95,107,107,107,107,-110,-110,-109,-109,107,]),'EQ':([58,59,60,61,62,63,64,65,66,68,69,71,73,75,78,88,89,96,118,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,175,180,183,184,195,206,234,247,251,254,260,268,282,286,290,],[108,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,108,-34,108,108,108,108,108,108,-54,-67,-68,-70,-55,108,108,108,108,108,108,108,108,-65,-66,-73,108,108,108,108,108,-95,108,108,108,108,-110,-110,-109,-109,108,]),'NE':([58,59,60,61,62,63,64,65,66,68,69,71,73,75,78,88,89,96,118,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,175,180,183,184,195,206,234,247,251,254,260,268,282,286,290,],[109,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,109,-34,109,109,109,109,109,109,-54,-67,-68,-70,-55,109,109,109,109,109,109,109,109,-65,-66,-73,109,109,109,109,109,-95,109,109,109,109,-110,-110,-109,-109,109,]),'LT':([58,59,60,61,62,63,64,65,66,68,69,71,73,75,78,88,89,96,118,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,175,180,183,184,195,206,234,247,251,254,260,268,282,286,290,],[110,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,110,-34,110,110,110,110,110,110,-54,-67,-68,-70,-55,110,110,110,110,110,110,110,110,-65,-66,-73,110,110,110,110,110,-95,110,110,110,110,-110,-110,-109,-109,110,]),'GT':([58,59,60,61,62,63,64,65,66,68,69,71,73,75,78,88,89,96,118,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,175,180,183,184,195,206,234,247,251,254,260,268,282,286,290,],[111,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,111,-34,111,111,111,111,111,111,-54,-67,-68,-70,-55,111,111,111,111,111,111,111,111,-65,-66,-73,111,111,111,111,111,-95,111,111,111,111,-110,-110,-109,-109,111,]),'LE':([58,59,60,61,62,63,64,65,66,68,69,71,73,75,78,88,89,96,118,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,175,180,183,184,195,206,234,247,251,254,260,268,282,286,290,],[112,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,112,-34,112,112,112,112,112,112,-54,-67,-68,-70,-55,112,112,112,112,112,112,112,112,-65,-66,-73,112,112,112,112,112,-95,112,112,112,112,-110,-110,-109,-109,112,]),'GE':([58,59,60,61,62,63,64,65,66,68,69,71,73,75,78,88,89,96,118,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,175,180,183,184,195,206,234,247,251,254,260,268,282,286,290,],[113,-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,113,-34,113,113,113,113,113,113,-54,-67,-68,-70,-55,113,113,113,113,113,113,113,113,-65,-66,-73,113,113,113,113,113,-95,113,113,113,113,-110,-110,-109,-109,113,]),'SEMICOLON':([59,60,61,62,63,64,65,66,68,69,72,88,89,153,154,155,156,157,158,159,160,161,162,163,164,165,170,171,172,175,206,260,282,],[-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,121,-35,-36,-54,-67,-68,-70,-55,-56,-57,-58,-59,-60,-61,-62,-63,-65,-66,-73,210,-95,-110,-109,]),'COMMA':([59,60,61,62,63,64,65,66,68,69,84,85,86,87,96,150,153,154,155,156,157,158,159,160,161,162,163,164,165,169,170,171,172,194,198,206,234,247,251,260,276,282,290,],[-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,-76,-77,-78,-79,142,202,-54,-67,-68,-70,-55,-56,-57,-58,-59,-60,-61,-62,-63,207,-65,-66,-73,226,-50,-95,-98,263,266,-110,284,-109,-114,]),'COLON':([59,60,61,62,63,64,65,66,68,69,128,153,154,155,156,157,158,159,160,161,162,163,164,165,167,170,171,172,180,206,260,277,282,],[-32,-33,-34,-53,-64,-69,-71,-72,-74,-75,181,-54,-67,-68,-70,-55,-56,-57,-58,-59,-60,-61,-62,-63,205,-65,-66,-73,216,-95,-110,285,-109,]),'TIMES':([59,60,61,62,63,64,65,66,68,69,73,153,154,155,156,157,170,171,172,206,260,268,282,286,],[-67,-68,-70,116,-64,-69,-71,-72,-74,-75,-70,116,-67,-68,-70,116,-65,-66,-73,-95,-110,-110,-109,-109,]),'DIVIDE':([59,60,61,62,63,64,65,66,68,69,73,153,154,155,156,157,170,171,172,206,260,268,282,286,],[-67,-68,-70,117,-64,-69,-71,-72,-74,-75,-70,117,-67,-68,-70,117,-65,-66,-73,-95,-110,-110,-109,-109,]),'STRUCT':([74,],[123,]),'RBRACKET':([77,83,84,85,86,87,91,135,174,185,188,191,236,252,],[129,136,-76,-77,-78,-79,138,186,209,219,221,224,259,267,]),'ELSE':([103,204,],[152,-87,]),'AMPER':([145,],[196,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'import_stmt':([3,],[4,]),'program':([4,7,57,114,181,200,216,230,287,292,],[6,46,102,166,217,231,245,257,291,294,]),'statement':([4,7,57,114,181,200,216,230,287,292,],[7,7,7,7,7,7,7,7,7,7,]),'declaration':([4,7,57,114,181,200,216,230,287,292,],[8,8,8,8,8,8,8,8,8,8,]),'assignment':([4,7,38,57,114,181,200,210,216,230,287,292,],[9,9,72,9,9,9,9,238,9,9,9,9,]),'print_stmt':([4,7,57,114,181,200,216,230,287,292,],[10,10,10,10,10,10,10,10,10,10,]),'input_stmt':([4,7,57,114,181,200,216,230,287,292,],[11,11,11,11,11,11,11,11,11,11,]),'continue_stmt':([4,7,57,114,181,200,216,230,287,292,],[12,12,12,12,12,12,12,12,12,12,]),'struct_method':([4,7,57,114,181,200,216,230,287,292,],[13,13,13,13,13,13,13,13,13,13,]),'func_def':([4,7,57,114,181,200,216,230,287,292,],[14,14,14,14,14,14,14,14,14,14,]),'func_no_params':([4,7,57,114,181,200,216,230,287,292,],[15,15,15,15,15,15,15,15,15,15,]),'func_call':([4,7,57,114,181,200,216,230,287,292,],[16,16,16,16,16,16,16,16,16,16,]),'if_stmt':([4,7,57,114,181,200,216,230,287,292,],[17,17,17,17,17,17,17,17,17,17,]),'for_stmt':([4,7,57,114,181,200,216,230,287,292,],[18,18,18,18,18,18,18,18,18,18,]),'struct_def':([4,7,57,114,181,200,216,230,287,292,],[19,19,19,19,19,19,19,19,19,19,]),'switch_stmt':([4,7,57,114,181,200,216,230,287,292,],[20,20,20,20,20,20,20,20,20,20,]),'map_declaration':([4,7,57,114,181,200,216,230,287,292,],[21,21,21,21,21,21,21,21,21,21,]),'map_declaration_values':([4,7,57,114,181,200,216,230,287,292,],[22,22,22,22,22,22,22,22,22,22,]),'array_declaration':([4,7,57,114,181,200,216,230,287,292,],[23,23,23,23,23,23,23,23,23,23,]),'array_literal':([4,7,57,81,114,181,200,216,230,287,292,],[24,24,24,133,24,24,24,24,24,24,24,]),'slice_declaration':([4,7,57,114,181,200,216,230,287,292,],[25,25,25,25,25,25,25,25,25,25,]),'make_stmt':([4,7,57,114,181,200,216,230,287,292,],[26,26,26,26,26,26,26,26,26,26,]),'new_stmt':([4,7,57,114,181,200,216,230,287,292,],[27,27,27,27,27,27,27,27,27,27,]),'break_stmt':([4,7,57,114,181,200,216,230,287,292,],[28,28,28,28,28,28,28,28,28,28,]),'increment_stmt':([4,7,57,114,181,200,210,216,230,287,292,],[29,29,29,29,29,29,240,29,29,29,29,]),'return_stmt':([4,7,57,114,181,200,216,230,287,292,],[30,30,30,30,30,30,30,30,30,30,]),'func_header':([4,7,57,114,181,200,216,230,287,292,],[36,36,36,36,36,36,36,36,36,36,]),'func_body':([36,],[56,]),'expression':([37,38,40,43,48,49,50,67,106,107,108,109,110,111,112,113,121,122,127,131,132,142,144,205,218,222,226,263,266,285,],[58,71,75,78,88,89,96,118,158,159,160,161,162,163,164,165,175,89,180,183,184,96,195,234,247,251,254,247,251,290,]),'term':([37,38,40,43,48,49,50,67,104,105,106,107,108,109,110,111,112,113,121,122,127,131,132,142,144,205,218,222,226,263,266,285,],[62,62,62,62,62,62,62,62,153,157,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'factor':([37,38,40,43,48,49,50,67,104,105,106,107,108,109,110,111,112,113,116,117,121,122,127,131,132,142,144,205,218,222,226,263,266,285,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,170,171,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'make_expr':([37,38,40,43,48,49,50,67,104,105,106,107,108,109,110,111,112,113,116,117,121,122,127,131,132,142,144,205,218,222,226,263,266,285,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'struct_instance':([37,38,40,43,48,49,50,67,104,105,106,107,108,109,110,111,112,113,116,117,121,122,127,131,132,142,144,205,218,222,226,263,266,285,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'type':([47,129,134,136,137,138,147,148,176,186,201,208,209,211,213,219,221,223,224,259,267,270,281,],[80,182,185,187,188,189,198,199,214,220,232,236,237,242,214,248,249,252,253,273,279,280,288,]),'arg_list':([50,142,],[94,193,]),'block':([58,71,152,239,],[103,120,203,261,]),'case_list':([76,124,126,],[125,177,179,]),'case_clause':([76,124,126,],[126,126,126,]),'param_list':([101,202,256,],[149,233,271,]),'param':([101,202,256,],[150,150,150,]),'struct_fields_values':([115,207,],[168,235,]),'field_value':([115,207,],[169,169,]),'struct_fields':([176,213,],[212,244,]),'struct_field':([176,213,],[213,213,]),'for_update':([210,],[239,]),'array_values':([218,263,],[246,274,]),'slice_values':([222,266,],[250,278,]),'map_kv_pairs':([264,284,],[275,289,]),'map_kv_pair':([264,284,],[276,276,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> PACKAGE MAIN import_stmt program','start',4,'p_start','parser.py',65),
  ('import_stmt -> IMPORT LPAREN STRING RPAREN','import_stmt',4,'p_import_function','parser.py',70),
  ('import_stmt -> IMPORT STRING','import_stmt',2,'p_import_function','parser.py',71),
  ('program -> statement','program',1,'p_program','parser.py',75),
  ('program -> statement program','program',2,'p_program','parser.py',76),
  ('statement -> declaration','statement',1,'p_statement','parser.py',81),
  ('statement -> assignment','statement',1,'p_statement','parser.py',82),
  ('statement -> print_stmt','statement',1,'p_statement','parser.py',83),
  ('statement -> input_stmt','statement',1,'p_statement','parser.py',84),
  ('statement -> continue_stmt','statement',1,'p_statement','parser.py',85),
  ('statement -> struct_method','statement',1,'p_statement','parser.py',86),
  ('statement -> func_def','statement',1,'p_statement','parser.py',87),
  ('statement -> func_no_params','statement',1,'p_statement','parser.py',88),
  ('statement -> func_call','statement',1,'p_statement','parser.py',89),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',90),
  ('statement -> for_stmt','statement',1,'p_statement','parser.py',91),
  ('statement -> struct_def','statement',1,'p_statement','parser.py',92),
  ('statement -> switch_stmt','statement',1,'p_statement','parser.py',93),
  ('statement -> map_declaration','statement',1,'p_statement','parser.py',94),
  ('statement -> map_declaration_values','statement',1,'p_statement','parser.py',95),
  ('statement -> array_declaration','statement',1,'p_statement','parser.py',96),
  ('statement -> array_literal','statement',1,'p_statement','parser.py',97),
  ('statement -> slice_declaration','statement',1,'p_statement','parser.py',98),
  ('statement -> make_stmt','statement',1,'p_statement','parser.py',99),
  ('statement -> new_stmt','statement',1,'p_statement','parser.py',100),
  ('statement -> break_stmt','statement',1,'p_statement','parser.py',101),
  ('statement -> increment_stmt','statement',1,'p_statement','parser.py',102),
  ('statement -> return_stmt','statement',1,'p_statement','parser.py',103),
  ('declaration -> VAR VARIABLE type','declaration',3,'p_declaration','parser.py',109),
  ('declaration -> VAR VARIABLE type ASIG expression','declaration',5,'p_declaration','parser.py',110),
  ('declaration -> VAR VARIABLE type ASSIGN expression','declaration',5,'p_declaration','parser.py',111),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',134),
  ('expression -> FLOAT','expression',1,'p_expression_float','parser.py',138),
  ('expression -> VARIABLE','expression',1,'p_expression_variable','parser.py',142),
  ('assignment -> VARIABLE ASSIGN expression','assignment',3,'p_assignment','parser.py',154),
  ('assignment -> VARIABLE ASIG expression','assignment',3,'p_assignment','parser.py',155),
  ('print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN','print_stmt',8,'p_print_stmt','parser.py',172),
  ('print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN','print_stmt',6,'p_print_stmt','parser.py',173),
  ('input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN','input_stmt',7,'p_input_stmt','parser.py',178),
  ('func_def -> func_header func_body','func_def',2,'p_func_def','parser.py',183),
  ('func_header -> FUNC VARIABLE LPAREN param_list RPAREN type','func_header',6,'p_func_header','parser.py',187),
  ('func_body -> LBRACE program RBRACE','func_body',3,'p_func_body','parser.py',197),
  ('return_stmt -> RETURN expression','return_stmt',2,'p_return_stmt','parser.py',203),
  ('func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE','func_no_params',8,'p_func_def_no_params','parser.py',226),
  ('func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE','func_no_params',7,'p_func_def_no_params_void','parser.py',232),
  ('func_call -> VARIABLE LPAREN arg_list RPAREN','func_call',4,'p_func_call','parser.py',238),
  ('func_call -> VARIABLE LPAREN RPAREN','func_call',3,'p_func_call','parser.py',239),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',274),
  ('param_list -> param COMMA param_list','param_list',3,'p_param_list','parser.py',275),
  ('param -> VARIABLE type','param',2,'p_param','parser.py',284),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',298),
  ('arg_list -> expression COMMA arg_list','arg_list',3,'p_arg_list','parser.py',299),
  ('expression -> term','expression',1,'p_expression','parser.py',309),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',310),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',311),
  ('expression -> expression AND expression','expression',3,'p_expression','parser.py',312),
  ('expression -> expression OR expression','expression',3,'p_expression','parser.py',313),
  ('expression -> expression EQ expression','expression',3,'p_expression','parser.py',314),
  ('expression -> expression NE expression','expression',3,'p_expression','parser.py',315),
  ('expression -> expression LT expression','expression',3,'p_expression','parser.py',316),
  ('expression -> expression GT expression','expression',3,'p_expression','parser.py',317),
  ('expression -> expression LE expression','expression',3,'p_expression','parser.py',318),
  ('expression -> expression GE expression','expression',3,'p_expression','parser.py',319),
  ('term -> factor','term',1,'p_term','parser.py',344),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',345),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',346),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',362),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',363),
  ('factor -> STRING','factor',1,'p_factor','parser.py',364),
  ('factor -> VARIABLE','factor',1,'p_factor','parser.py',365),
  ('factor -> TRUE','factor',1,'p_factor','parser.py',366),
  ('factor -> FALSE','factor',1,'p_factor','parser.py',367),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',368),
  ('factor -> make_expr','factor',1,'p_factor','parser.py',369),
  ('factor -> struct_instance','factor',1,'p_factor','parser.py',370),
  ('type -> INT_TYPE','type',1,'p_type','parser.py',394),
  ('type -> FLOAT64_TYPE','type',1,'p_type','parser.py',395),
  ('type -> STRING_TYPE','type',1,'p_type','parser.py',396),
  ('type -> BOOL_TYPE','type',1,'p_type','parser.py',397),
  ('if_stmt -> IF expression block','if_stmt',3,'p_if_stmt','parser.py',402),
  ('if_stmt -> IF expression block ELSE block','if_stmt',5,'p_if_stmt','parser.py',403),
  ('for_stmt -> FOR expression block','for_stmt',3,'p_for_stmt','parser.py',412),
  ('for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block','for_stmt',7,'p_for_stmt','parser.py',413),
  ('continue_stmt -> CONTINUE','continue_stmt',1,'p_continue_stmt','parser.py',419),
  ('for_update -> assignment','for_update',1,'p_for_update','parser.py',425),
  ('for_update -> increment_stmt','for_update',1,'p_for_update','parser.py',426),
  ('block -> LBRACE program RBRACE','block',3,'p_block','parser.py',431),
  ('struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE','struct_method',13,'p_struct_method','parser.py',436),
  ('struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE','struct_method',12,'p_struct_method','parser.py',437),
  ('struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE','struct_def',6,'p_struct_def','parser.py',442),
  ('struct_fields -> struct_field','struct_fields',1,'p_struct_fields','parser.py',447),
  ('struct_fields -> struct_field struct_fields','struct_fields',2,'p_struct_fields','parser.py',448),
  ('struct_field -> VARIABLE type','struct_field',2,'p_struct_field','parser.py',453),
  ('struct_field -> type','struct_field',1,'p_struct_field','parser.py',454),
  ('struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE','struct_instance',4,'p_struct_instance','parser.py',459),
  ('struct_fields_values -> field_value','struct_fields_values',1,'p_struct_fields_values','parser.py',463),
  ('struct_fields_values -> field_value COMMA struct_fields_values','struct_fields_values',3,'p_struct_fields_values','parser.py',464),
  ('field_value -> VARIABLE COLON expression','field_value',3,'p_field_value','parser.py',468),
  ('switch_stmt -> SWITCH expression LBRACE case_list RBRACE','switch_stmt',5,'p_switch_stmt','parser.py',472),
  ('switch_stmt -> SWITCH LBRACE case_list RBRACE','switch_stmt',4,'p_switch_stmt','parser.py',473),
  ('case_list -> case_clause','case_list',1,'p_case_list','parser.py',477),
  ('case_list -> case_clause case_list','case_list',2,'p_case_list','parser.py',478),
  ('case_clause -> CASE expression COLON program','case_clause',4,'p_case_clause','parser.py',482),
  ('case_clause -> DEFAULT COLON program','case_clause',3,'p_case_clause','parser.py',483),
  ('map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type','map_declaration',7,'p_map_declaration','parser.py',489),
  ('map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type','map_declaration',7,'p_map_declaration','parser.py',490),
  ('make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN','make_stmt',10,'p_make_stmt','parser.py',495),
  ('make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN','make_stmt',8,'p_make_stmt','parser.py',496),
  ('make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN','make_expr',8,'p_make_expr','parser.py',500),
  ('make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN','make_expr',6,'p_make_expr','parser.py',501),
  ('map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE','map_declaration_values',10,'p_map_literal_declaration','parser.py',513),
  ('map_kv_pairs -> map_kv_pair','map_kv_pairs',1,'p_map_kv_pairs','parser.py',517),
  ('map_kv_pairs -> map_kv_pair COMMA map_kv_pairs','map_kv_pairs',3,'p_map_kv_pairs','parser.py',518),
  ('map_kv_pair -> STRING COLON expression','map_kv_pair',3,'p_map_kv_pair','parser.py',522),
  ('array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type','array_declaration',6,'p_array_declaration','parser.py',527),
  ('array_declaration -> VAR VARIABLE ASSIGN array_literal','array_declaration',4,'p_array_declaration','parser.py',528),
  ('array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE','array_literal',7,'p_array_literal','parser.py',552),
  ('array_values -> expression','array_values',1,'p_array_values','parser.py',568),
  ('array_values -> expression COMMA array_values','array_values',3,'p_array_values','parser.py',569),
  ('slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type','slice_declaration',5,'p_slice_declaration','parser.py',579),
  ('slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE','slice_declaration',8,'p_slice_declaration','parser.py',580),
  ('slice_values -> expression','slice_values',1,'p_slice_values','parser.py',584),
  ('slice_values -> expression COMMA slice_values','slice_values',3,'p_slice_values','parser.py',585),
  ('new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN','new_stmt',6,'p_new_stmt','parser.py',590),
  ('break_stmt -> BREAK','break_stmt',1,'p_break_stmt','parser.py',595),
  ('increment_stmt -> VARIABLE INCREMENT','increment_stmt',2,'p_increment_stmt','parser.py',602),
  ('increment_stmt -> VARIABLE DECREMENT','increment_stmt',2,'p_increment_stmt','parser.py',603),
]
