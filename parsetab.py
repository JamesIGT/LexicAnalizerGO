
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPER AND APPEND ASSIGN BOOL_TYPE BREAK CASE CHAR COLON COMMA CONTAINSRUNE CONTINUE DECREMENT DEFAULT DIVIDE DOT ELSE EQ FALSE FLOAT64_TYPE FOR FUNC FUNCNAME GE GT IF IMPORT INCREMENT INT_TYPE ISDIGIT ISLETTER LBRACE LBRACKET LE LENGTH LPAREN LT MAIN MAP MINUS MOD NE NUMBER OR PACKAGE PLUS PRINTF PRINTLN RANGE RBRACE RBRACKET RETURN RPAREN RUNES SEMICOLON STRING STRINGS STRING_TYPE STRUCT SWITCH TIMES TOLOWER TRUE TYPE UNICODE VAR VARIABLEprogram : PACKAGE MAIN imports declarations main_functionimports : IMPORT LPAREN import_list RPARENimport_list : import_list STRING\n                   | STRINGmain_function : FUNC MAIN LPAREN RPAREN blockblock : LBRACE statements RBRACEstatements : statements statement\n                  | statementstatement : VARIABLE ASSIGN expression SEMICOLON\n                 | function_call SEMICOLON\n                 | for_loop\n                 | if_statement\n                 | declarationfor_loop : FOR expression blockif_statement : IF expression block\n                    | IF expression block ELSE blockfunction_call : VARIABLE DOT VARIABLE LPAREN arguments RPAREN\n                     | VARIABLE LPAREN arguments RPARENarguments : arguments COMMA expression\n                 | expression\n                 | emptyexpression : STRING\n                  | NUMBER\n                  | VARIABLE\n                  | VARIABLE DOT VARIABLE\n                  | VARIABLE LBRACKET expression RBRACKET\n                  | expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression EQ expression\n                  | expression NE expression\n                  | expression AND expression\n                  | expression OR expression\n                  | LPAREN expression RPARENdeclarations : declarations declaration\n                    | declarationdeclaration : type_struct\n                   | VAR VARIABLE ASSIGN expression SEMICOLON\n                   | FUNC receiver VARIABLE LPAREN params RPAREN blockreceiver : LPAREN VARIABLE TIMES VARIABLE RPARENtype_struct : TYPE VARIABLE STRUCT LBRACE struct_fields RBRACEstruct_fields : struct_fields type VARIABLE\n                     | type VARIABLEparams : params COMMA param\n              | param\n              | emptyparam : VARIABLE typetype : STRING_TYPE\n            | INT_TYPE\n            | BOOL_TYPE\n            | FLOAT64_TYPEempty :'
    
_lr_action_items = {'PACKAGE':([0,],[2,]),'$end':([1,13,62,95,],[0,-1,-5,-6,]),'MAIN':([2,15,],[3,22,]),'IMPORT':([3,],[5,]),'VAR':([4,6,7,8,14,27,41,63,79,82,83,86,87,88,92,95,96,100,108,109,110,117,],[9,9,-37,-38,-36,-2,-39,9,-42,9,-8,-11,-12,-13,-40,-6,-7,-10,-14,-15,-9,-16,]),'FUNC':([4,6,7,8,14,27,41,63,79,82,83,86,87,88,92,95,96,100,108,109,110,117,],[10,15,-37,-38,-36,-2,-39,10,-42,10,-8,-11,-12,-13,-40,-6,-7,-10,-14,-15,-9,-16,]),'TYPE':([4,6,7,8,14,27,41,63,79,82,83,86,87,88,92,95,96,100,108,109,110,117,],[11,11,-37,-38,-36,-2,-39,11,-42,11,-8,-11,-12,-13,-40,-6,-7,-10,-14,-15,-9,-16,]),'LPAREN':([5,10,15,22,23,24,34,40,42,43,44,45,46,47,48,49,84,89,90,97,99,104,111,113,],[12,18,18,29,34,35,34,34,34,34,34,34,34,34,34,34,99,34,34,34,34,111,34,34,]),'RBRACE':([8,41,56,79,81,82,83,86,87,88,92,94,95,96,100,108,109,110,117,],[-38,-39,79,-42,-44,95,-8,-11,-12,-13,-40,-43,-6,-7,-10,-14,-15,-9,-16,]),'VARIABLE':([8,9,11,17,18,23,34,35,36,39,40,41,42,43,44,45,46,47,48,49,57,58,59,60,61,63,77,78,79,80,82,83,86,87,88,89,90,92,95,96,97,98,99,100,108,109,110,111,113,117,],[-38,16,19,24,25,30,30,51,55,64,30,-39,30,30,30,30,30,30,30,30,81,-49,-50,-51,-52,84,51,-41,-42,94,84,-8,-11,-12,-13,30,30,-40,-6,-7,30,104,30,-10,-14,-15,-9,30,30,-16,]),'FOR':([8,41,63,79,82,83,86,87,88,92,95,96,100,108,109,110,117,],[-38,-39,89,-42,89,-8,-11,-12,-13,-40,-6,-7,-10,-14,-15,-9,-16,]),'IF':([8,41,63,79,82,83,86,87,88,92,95,96,100,108,109,110,117,],[-38,-39,90,-42,90,-8,-11,-12,-13,-40,-6,-7,-10,-14,-15,-9,-16,]),'STRING':([12,20,21,23,28,34,40,42,43,44,45,46,47,48,49,89,90,97,99,111,113,],[21,28,-4,32,-3,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'ASSIGN':([16,84,],[23,97,]),'STRUCT':([19,],[26,]),'RPAREN':([20,21,28,29,30,32,33,35,50,52,53,54,55,58,59,60,61,64,66,67,68,69,70,71,72,73,74,75,91,93,99,105,106,107,111,115,116,],[27,-4,-3,38,-24,-22,-23,-53,74,76,-46,-47,78,-49,-50,-51,-52,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-48,-26,-45,-53,112,-20,-21,-53,118,-19,]),'NUMBER':([23,34,40,42,43,44,45,46,47,48,49,89,90,97,99,111,113,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'TIMES':([25,30,31,32,33,50,64,65,66,67,68,69,70,71,72,73,74,91,101,102,103,106,116,],[36,-24,44,-22,-23,44,-25,44,44,44,44,44,44,44,44,44,-35,-26,44,44,44,44,44,]),'LBRACE':([26,30,32,33,38,64,66,67,68,69,70,71,72,73,74,76,91,101,102,114,],[37,-24,-22,-23,63,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,63,-26,63,63,63,]),'SEMICOLON':([30,31,32,33,64,66,67,68,69,70,71,72,73,74,85,91,103,112,118,],[-24,41,-22,-23,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,100,-26,110,-18,-17,]),'PLUS':([30,31,32,33,50,64,65,66,67,68,69,70,71,72,73,74,91,101,102,103,106,116,],[-24,42,-22,-23,42,-25,42,42,42,42,42,42,42,42,42,-35,-26,42,42,42,42,42,]),'MINUS':([30,31,32,33,50,64,65,66,67,68,69,70,71,72,73,74,91,101,102,103,106,116,],[-24,43,-22,-23,43,-25,43,43,43,43,43,43,43,43,43,-35,-26,43,43,43,43,43,]),'DIVIDE':([30,31,32,33,50,64,65,66,67,68,69,70,71,72,73,74,91,101,102,103,106,116,],[-24,45,-22,-23,45,-25,45,45,45,45,45,45,45,45,45,-35,-26,45,45,45,45,45,]),'EQ':([30,31,32,33,50,64,65,66,67,68,69,70,71,72,73,74,91,101,102,103,106,116,],[-24,46,-22,-23,46,-25,46,46,46,46,46,46,46,46,46,-35,-26,46,46,46,46,46,]),'NE':([30,31,32,33,50,64,65,66,67,68,69,70,71,72,73,74,91,101,102,103,106,116,],[-24,47,-22,-23,47,-25,47,47,47,47,47,47,47,47,47,-35,-26,47,47,47,47,47,]),'AND':([30,31,32,33,50,64,65,66,67,68,69,70,71,72,73,74,91,101,102,103,106,116,],[-24,48,-22,-23,48,-25,48,48,48,48,48,48,48,48,48,-35,-26,48,48,48,48,48,]),'OR':([30,31,32,33,50,64,65,66,67,68,69,70,71,72,73,74,91,101,102,103,106,116,],[-24,49,-22,-23,49,-25,49,49,49,49,49,49,49,49,49,-35,-26,49,49,49,49,49,]),'RBRACKET':([30,32,33,64,65,66,67,68,69,70,71,72,73,74,91,],[-24,-22,-23,-25,91,-27,-28,-29,-30,-31,-32,-33,-34,-35,-26,]),'COMMA':([30,32,33,35,52,53,54,58,59,60,61,64,66,67,68,69,70,71,72,73,74,75,91,93,99,105,106,107,111,115,116,],[-24,-22,-23,-53,77,-46,-47,-49,-50,-51,-52,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-48,-26,-45,-53,113,-20,-21,-53,113,-19,]),'DOT':([30,84,],[39,98,]),'LBRACKET':([30,],[40,]),'STRING_TYPE':([37,51,56,81,94,],[58,58,58,-44,-43,]),'INT_TYPE':([37,51,56,81,94,],[59,59,59,-44,-43,]),'BOOL_TYPE':([37,51,56,81,94,],[60,60,60,-44,-43,]),'FLOAT64_TYPE':([37,51,56,81,94,],[61,61,61,-44,-43,]),'ELSE':([95,109,],[-6,114,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'imports':([3,],[4,]),'declarations':([4,],[6,]),'declaration':([4,6,63,82,],[7,14,88,88,]),'type_struct':([4,6,63,82,],[8,8,8,8,]),'main_function':([6,],[13,]),'receiver':([10,15,],[17,17,]),'import_list':([12,],[20,]),'expression':([23,34,40,42,43,44,45,46,47,48,49,89,90,97,99,111,113,],[31,50,65,66,67,68,69,70,71,72,73,101,102,103,106,106,116,]),'params':([35,],[52,]),'param':([35,77,],[53,93,]),'empty':([35,99,111,],[54,107,107,]),'struct_fields':([37,],[56,]),'type':([37,51,56,],[57,75,80,]),'block':([38,76,101,102,114,],[62,92,108,109,117,]),'statements':([63,],[82,]),'statement':([63,82,],[83,96,]),'function_call':([63,82,],[85,85,]),'for_loop':([63,82,],[86,86,]),'if_statement':([63,82,],[87,87,]),'arguments':([99,111,],[105,115,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PACKAGE MAIN imports declarations main_function','program',5,'p_program','parser.py',24),
  ('imports -> IMPORT LPAREN import_list RPAREN','imports',4,'p_imports','parser.py',28),
  ('import_list -> import_list STRING','import_list',2,'p_import_list','parser.py',32),
  ('import_list -> STRING','import_list',1,'p_import_list','parser.py',33),
  ('main_function -> FUNC MAIN LPAREN RPAREN block','main_function',5,'p_main_function','parser.py',37),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','parser.py',41),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',45),
  ('statements -> statement','statements',1,'p_statements','parser.py',46),
  ('statement -> VARIABLE ASSIGN expression SEMICOLON','statement',4,'p_statement','parser.py',50),
  ('statement -> function_call SEMICOLON','statement',2,'p_statement','parser.py',51),
  ('statement -> for_loop','statement',1,'p_statement','parser.py',52),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',53),
  ('statement -> declaration','statement',1,'p_statement','parser.py',54),
  ('for_loop -> FOR expression block','for_loop',3,'p_for_loop','parser.py',58),
  ('if_statement -> IF expression block','if_statement',3,'p_if_statement','parser.py',62),
  ('if_statement -> IF expression block ELSE block','if_statement',5,'p_if_statement','parser.py',63),
  ('function_call -> VARIABLE DOT VARIABLE LPAREN arguments RPAREN','function_call',6,'p_function_call','parser.py',67),
  ('function_call -> VARIABLE LPAREN arguments RPAREN','function_call',4,'p_function_call','parser.py',68),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments','parser.py',72),
  ('arguments -> expression','arguments',1,'p_arguments','parser.py',73),
  ('arguments -> empty','arguments',1,'p_arguments','parser.py',74),
  ('expression -> STRING','expression',1,'p_expression','parser.py',78),
  ('expression -> NUMBER','expression',1,'p_expression','parser.py',79),
  ('expression -> VARIABLE','expression',1,'p_expression','parser.py',80),
  ('expression -> VARIABLE DOT VARIABLE','expression',3,'p_expression','parser.py',81),
  ('expression -> VARIABLE LBRACKET expression RBRACKET','expression',4,'p_expression','parser.py',82),
  ('expression -> expression PLUS expression','expression',3,'p_expression','parser.py',83),
  ('expression -> expression MINUS expression','expression',3,'p_expression','parser.py',84),
  ('expression -> expression TIMES expression','expression',3,'p_expression','parser.py',85),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','parser.py',86),
  ('expression -> expression EQ expression','expression',3,'p_expression','parser.py',87),
  ('expression -> expression NE expression','expression',3,'p_expression','parser.py',88),
  ('expression -> expression AND expression','expression',3,'p_expression','parser.py',89),
  ('expression -> expression OR expression','expression',3,'p_expression','parser.py',90),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','parser.py',91),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','parser.py',95),
  ('declarations -> declaration','declarations',1,'p_declarations','parser.py',96),
  ('declaration -> type_struct','declaration',1,'p_declaration','parser.py',100),
  ('declaration -> VAR VARIABLE ASSIGN expression SEMICOLON','declaration',5,'p_declaration','parser.py',101),
  ('declaration -> FUNC receiver VARIABLE LPAREN params RPAREN block','declaration',7,'p_declaration','parser.py',102),
  ('receiver -> LPAREN VARIABLE TIMES VARIABLE RPAREN','receiver',5,'p_receiver','parser.py',106),
  ('type_struct -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE','type_struct',6,'p_type_struct','parser.py',110),
  ('struct_fields -> struct_fields type VARIABLE','struct_fields',3,'p_struct_fields','parser.py',114),
  ('struct_fields -> type VARIABLE','struct_fields',2,'p_struct_fields','parser.py',115),
  ('params -> params COMMA param','params',3,'p_params','parser.py',119),
  ('params -> param','params',1,'p_params','parser.py',120),
  ('params -> empty','params',1,'p_params','parser.py',121),
  ('param -> VARIABLE type','param',2,'p_param','parser.py',125),
  ('type -> STRING_TYPE','type',1,'p_type','parser.py',129),
  ('type -> INT_TYPE','type',1,'p_type','parser.py',130),
  ('type -> BOOL_TYPE','type',1,'p_type','parser.py',131),
  ('type -> FLOAT64_TYPE','type',1,'p_type','parser.py',132),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',136),
]
