
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'startAMPER AND ASIG ASSIGN BOOL_TYPE BREAK CASE COLON COMMA CONTINUE DECREMENT DEFAULT DIVIDE DOT ELSE EQ FALSE FLOAT FLOAT64_TYPE FMT FOR FUNC GE GT IF IMPORT INCREMENT INT_TYPE LBRACE LBRACKET LE LPAREN LT MAKE MAP MINUS MOD NE NEW NOT NUMBER OR PACKAGE PLUS PRINT PRINTF PRINTLN RANGE RBRACE RBRACKET RETURN RPAREN SCANLN SEMICOLON STRING STRING_TYPE STRUCT SWITCH TIMES TRUE TYPE UINT VAR VARIABLEstart : PACKAGE VARIABLE import_stmt programimport_stmt : IMPORT LPAREN STRING RPAREN\n                    | IMPORT STRINGprogram : statement\n               | statement programstatement : declaration\n                 | assignment\n                 | print_stmt\n                 | input_stmt\n                 | continue_stmt\n                 | struct_method\n                 | func_def\n                 | func_no_params\n                 | func_call\n                 | if_stmt\n                 | for_stmt\n                 | struct_def\n                 | switch_stmt\n                 | map_declaration\n                 | map_declaration_values\n                 | array_declaration\n                 | array_literal\n                 | slice_declaration\n                 | make_stmt\n                 | new_stmt\n                 | break_stmt\n                 | increment_stmt\n                 | return_stmtdeclaration : VAR VARIABLE type \n                   | VAR VARIABLE type ASIG expression\n                   | VAR VARIABLE type ASSIGN expressiondeclaration : VAR id_list type ASSIGN expr_list\n                   | VAR id_list type ASIG expr_listdeclaration : VAR id_list ASSIGN expr_list\n                   | VAR id_list ASIG expr_listid_list : VARIABLE\n               | VARIABLE COMMA id_listexpr_list : expression\n                 | expression COMMA expr_listdeclaration : VARIABLE ASIG expressionexpression : NUMBERexpression : FLOATexpression : VARIABLEassignment : VARIABLE ASSIGN expression\n                  | VARIABLE ASIG expressionprint_stmt : FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN\n                  | FMT DOT PRINTLN LPAREN expression RPARENinput_stmt : FMT DOT SCANLN LPAREN AMPER VARIABLE RPARENfunc_def : func_header func_bodyfunc_header : FUNC VARIABLE LPAREN param_list RPAREN typefunc_body : LBRACE program RBRACEreturn_stmt : RETURN expressionfunc_no_params : FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACEfunc_no_params : FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACEfunc_call : VARIABLE LPAREN arg_list RPAREN\n                 | VARIABLE LPAREN RPARENparam_list : param\n                  | param COMMA param_listparam : VARIABLE typearg_list : expression\n                | expression COMMA arg_listexpression : term\n                  | expression PLUS term\n                  | expression MINUS term\n                  | expression AND expression\n                  | expression OR expression\n                  | expression EQ expression\n                  | expression NE expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression LE expression\n                  | expression GE expressionterm : factor\n            | term TIMES factor\n            | term DIVIDE factorterm : VARIABLEfactor : NUMBER\n              | FLOAT\n              | STRING\n              | VARIABLE\n              | TRUE\n              | FALSE\n              | LPAREN expression RPAREN\n              | make_expr\n              | struct_instance\n              | func_calltype : INT_TYPE\n            | FLOAT64_TYPE\n            | STRING_TYPE\n            | BOOL_TYPEif_stmt : IF expression block\n               | IF expression block ELSE blockfor_stmt : FOR expression block\n                | FOR assignment SEMICOLON expression SEMICOLON for_update blockcontinue_stmt : CONTINUEfor_update : assignment\n                  | increment_stmtblock : LBRACE program RBRACEstruct_method : FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE\n                     | FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACEstruct_def : TYPE VARIABLE STRUCT LBRACE struct_fields RBRACEstruct_fields : struct_field\n                     | struct_field struct_fieldsstruct_field : VARIABLE type\n                    | typestruct_instance : VARIABLE LBRACE struct_fields_values RBRACEstruct_fields_values : field_value\n                            | field_value COMMA struct_fields_valuesfield_value : VARIABLE COLON expressionswitch_stmt : SWITCH expression LBRACE case_list RBRACE\n                   | SWITCH LBRACE case_list RBRACEcase_list : case_clause\n                 | case_clause case_listcase_clause : CASE expression COLON program\n                   | DEFAULT COLON programmap_declaration : VAR VARIABLE MAP LBRACKET type RBRACKET type\n                       | VARIABLE ASIG MAP LBRACKET type RBRACKET typemake_stmt : VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN\n                 | VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPARENmake_expr : MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN\n                 | MAKE LPAREN LBRACKET RBRACKET type RPARENmap_declaration_values : VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACEmap_kv_pairs : map_kv_pair\n                    | map_kv_pair COMMA map_kv_pairsmap_kv_pair : STRING COLON expressionarray_declaration : VAR VARIABLE LBRACKET NUMBER RBRACKET type\n                         | VAR VARIABLE ASSIGN array_literalarray_literal : LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACEarray_values : expression\n                    | expression COMMA array_valuesslice_declaration : VAR VARIABLE LBRACKET RBRACKET type\n                         | VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACEslice_values : expression\n                    | expression COMMA slice_valuesnew_stmt : VARIABLE ASIG NEW LPAREN VARIABLE RPARENbreak_stmt : BREAKincrement_stmt : VARIABLE INCREMENT\n                      | VARIABLE DECREMENT'
    
_lr_action_items = {'PACKAGE':([0,],[2,]),'$end':([1,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,49,50,51,57,60,61,62,63,64,65,66,67,69,70,71,80,82,87,89,91,96,97,98,99,109,126,141,145,153,154,155,164,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,193,204,205,208,209,210,221,222,224,233,241,243,244,246,262,267,272,274,277,279,280,281,284,287,288,291,301,302,305,312,314,],[0,-1,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-95,-136,-137,-138,-5,-49,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,-52,-40,-44,-56,-29,-87,-88,-89,-90,-91,-93,-55,-127,-34,-38,-35,-51,-63,-76,-77,-78,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-80,-75,-83,-111,-30,-31,-131,-32,-33,-92,-98,-106,-110,-135,-126,-39,-47,-101,-117,-116,-48,-54,-121,-94,-128,-132,-119,-46,-53,-120,-122,-118,-100,-99,]),'VARIABLE':([2,4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,35,37,38,39,40,42,43,45,46,47,48,49,50,55,57,58,60,61,62,63,64,65,66,67,68,69,70,71,80,82,87,89,91,95,96,97,98,99,101,102,106,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,126,127,128,133,136,140,141,142,143,144,145,151,152,153,154,155,157,164,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,191,193,196,204,205,208,209,210,211,214,215,218,220,221,222,223,224,225,228,231,232,233,234,236,238,241,243,244,245,246,249,261,262,267,272,274,275,277,279,280,281,282,284,285,287,288,291,301,302,304,305,306,311,312,314,],[3,6,6,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,52,-95,56,62,75,76,62,-136,62,-3,62,62,62,-137,-138,106,-49,6,-41,-42,-43,-62,-73,-79,-81,-82,62,-84,-85,-86,-52,-40,-44,-56,-29,149,-87,-88,-89,-90,62,62,159,160,-91,167,167,62,62,62,62,62,62,62,62,6,180,184,184,-93,62,62,62,-2,202,-55,62,62,62,-127,62,62,-34,-38,-35,62,-51,-63,-76,-77,-78,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-80,-75,-83,229,-111,6,-30,-31,-131,-32,-33,62,247,248,6,160,-92,-98,62,-106,180,260,229,-105,-110,6,62,62,-135,-126,-39,62,-47,6,-104,-101,-117,-116,-48,160,-54,-121,-94,-128,62,-132,62,-119,-46,-53,-120,-122,62,-118,6,6,-100,-99,]),'IMPORT':([3,],[5,]),'VAR':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,45,49,50,57,58,60,61,62,63,64,65,66,67,69,70,71,80,82,87,89,91,96,97,98,99,109,120,126,136,141,145,153,154,155,164,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,193,196,204,205,208,209,210,218,221,222,224,233,234,241,243,244,246,249,262,267,272,274,277,279,280,281,284,287,288,291,301,302,305,306,311,312,314,],[32,32,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-95,-136,-3,-137,-138,-49,32,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,-52,-40,-44,-56,-29,-87,-88,-89,-90,-91,32,-93,-2,-55,-127,-34,-38,-35,-51,-63,-76,-77,-78,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-80,-75,-83,-111,32,-30,-31,-131,-32,-33,32,-92,-98,-106,-110,32,-135,-126,-39,-47,32,-101,-117,-116,-48,-54,-121,-94,-128,-132,-119,-46,-53,-120,-122,-118,32,32,-100,-99,]),'FMT':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,45,49,50,57,58,60,61,62,63,64,65,66,67,69,70,71,80,82,87,89,91,96,97,98,99,109,120,126,136,141,145,153,154,155,164,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,193,196,204,205,208,209,210,218,221,222,224,233,234,241,243,244,246,249,262,267,272,274,277,279,280,281,284,287,288,291,301,302,305,306,311,312,314,],[33,33,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-95,-136,-3,-137,-138,-49,33,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,-52,-40,-44,-56,-29,-87,-88,-89,-90,-91,33,-93,-2,-55,-127,-34,-38,-35,-51,-63,-76,-77,-78,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-80,-75,-83,-111,33,-30,-31,-131,-32,-33,33,-92,-98,-106,-110,33,-135,-126,-39,-47,33,-101,-117,-116,-48,-54,-121,-94,-128,-132,-119,-46,-53,-120,-122,-118,33,33,-100,-99,]),'CONTINUE':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,45,49,50,57,58,60,61,62,63,64,65,66,67,69,70,71,80,82,87,89,91,96,97,98,99,109,120,126,136,141,145,153,154,155,164,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,193,196,204,205,208,209,210,218,221,222,224,233,234,241,243,244,246,249,262,267,272,274,277,279,280,281,284,287,288,291,301,302,305,306,311,312,314,],[34,34,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-95,-136,-3,-137,-138,-49,34,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,-52,-40,-44,-56,-29,-87,-88,-89,-90,-91,34,-93,-2,-55,-127,-34,-38,-35,-51,-63,-76,-77,-78,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-80,-75,-83,-111,34,-30,-31,-131,-32,-33,34,-92,-98,-106,-110,34,-135,-126,-39,-47,34,-101,-117,-116,-48,-54,-121,-94,-128,-132,-119,-46,-53,-120,-122,-118,34,34,-100,-99,]),'FUNC':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,45,49,50,57,58,60,61,62,63,64,65,66,67,69,70,71,80,82,87,89,91,96,97,98,99,109,120,126,136,141,145,153,154,155,164,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,193,196,204,205,208,209,210,218,221,222,224,233,234,241,243,244,246,249,262,267,272,274,277,279,280,281,284,287,288,291,301,302,305,306,311,312,314,],[35,35,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-95,-136,-3,-137,-138,-49,35,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,-52,-40,-44,-56,-29,-87,-88,-89,-90,-91,35,-93,-2,-55,-127,-34,-38,-35,-51,-63,-76,-77,-78,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-80,-75,-83,-111,35,-30,-31,-131,-32,-33,35,-92,-98,-106,-110,35,-135,-126,-39,-47,35,-101,-117,-116,-48,-54,-121,-94,-128,-132,-119,-46,-53,-120,-122,-118,35,35,-100,-99,]),'IF':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,45,49,50,57,58,60,61,62,63,64,65,66,67,69,70,71,80,82,87,89,91,96,97,98,99,109,120,126,136,141,145,153,154,155,164,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,193,196,204,205,208,209,210,218,221,222,224,233,234,241,243,244,246,249,262,267,272,274,277,279,280,281,284,287,288,291,301,302,305,306,311,312,314,],[37,37,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-95,-136,-3,-137,-138,-49,37,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,-52,-40,-44,-56,-29,-87,-88,-89,-90,-91,37,-93,-2,-55,-127,-34,-38,-35,-51,-63,-76,-77,-78,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-80,-75,-83,-111,37,-30,-31,-131,-32,-33,37,-92,-98,-106,-110,37,-135,-126,-39,-47,37,-101,-117,-116,-48,-54,-121,-94,-128,-132,-119,-46,-53,-120,-122,-118,37,37,-100,-99,]),'FOR':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,45,49,50,57,58,60,61,62,63,64,65,66,67,69,70,71,80,82,87,89,91,96,97,98,99,109,120,126,136,141,145,153,154,155,164,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,193,196,204,205,208,209,210,218,221,222,224,233,234,241,243,244,246,249,262,267,272,274,277,279,280,281,284,287,288,291,301,302,305,306,311,312,314,],[38,38,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-95,-136,-3,-137,-138,-49,38,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,-52,-40,-44,-56,-29,-87,-88,-89,-90,-91,38,-93,-2,-55,-127,-34,-38,-35,-51,-63,-76,-77,-78,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-80,-75,-83,-111,38,-30,-31,-131,-32,-33,38,-92,-98,-106,-110,38,-135,-126,-39,-47,38,-101,-117,-116,-48,-54,-121,-94,-128,-132,-119,-46,-53,-120,-122,-118,38,38,-100,-99,]),'TYPE':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,45,49,50,57,58,60,61,62,63,64,65,66,67,69,70,71,80,82,87,89,91,96,97,98,99,109,120,126,136,141,145,153,154,155,164,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,193,196,204,205,208,209,210,218,221,222,224,233,234,241,243,244,246,249,262,267,272,274,277,279,280,281,284,287,288,291,301,302,305,306,311,312,314,],[39,39,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-95,-136,-3,-137,-138,-49,39,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,-52,-40,-44,-56,-29,-87,-88,-89,-90,-91,39,-93,-2,-55,-127,-34,-38,-35,-51,-63,-76,-77,-78,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-80,-75,-83,-111,39,-30,-31,-131,-32,-33,39,-92,-98,-106,-110,39,-135,-126,-39,-47,39,-101,-117,-116,-48,-54,-121,-94,-128,-132,-119,-46,-53,-120,-122,-118,39,39,-100,-99,]),'SWITCH':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,45,49,50,57,58,60,61,62,63,64,65,66,67,69,70,71,80,82,87,89,91,96,97,98,99,109,120,126,136,141,145,153,154,155,164,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,193,196,204,205,208,209,210,218,221,222,224,233,234,241,243,244,246,249,262,267,272,274,277,279,280,281,284,287,288,291,301,302,305,306,311,312,314,],[40,40,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-95,-136,-3,-137,-138,-49,40,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,-52,-40,-44,-56,-29,-87,-88,-89,-90,-91,40,-93,-2,-55,-127,-34,-38,-35,-51,-63,-76,-77,-78,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-80,-75,-83,-111,40,-30,-31,-131,-32,-33,40,-92,-98,-106,-110,40,-135,-126,-39,-47,40,-101,-117,-116,-48,-54,-121,-94,-128,-132,-119,-46,-53,-120,-122,-118,40,40,-100,-99,]),'LBRACKET':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,45,46,49,50,52,57,58,60,61,62,63,64,65,66,67,69,70,71,80,82,83,87,89,91,92,93,96,97,98,99,109,120,125,126,136,139,141,145,153,154,155,164,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,187,193,196,200,204,205,208,209,210,218,221,222,224,233,234,241,243,244,246,249,262,267,272,274,277,279,280,281,284,287,288,291,301,302,305,306,311,312,314,],[41,41,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-95,-136,-3,84,-137,-138,94,-49,41,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,-52,-40,137,-44,-56,-29,41,146,-87,-88,-89,-90,-91,41,188,-93,-2,201,-55,-127,-34,-38,-35,-51,-63,-76,-77,-78,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-80,-75,-83,226,-111,41,239,-30,-31,-131,-32,-33,41,-92,-98,-106,-110,41,-135,-126,-39,-47,41,-101,-117,-116,-48,-54,-121,-94,-128,-132,-119,-46,-53,-120,-122,-118,41,41,-100,-99,]),'BREAK':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,45,49,50,57,58,60,61,62,63,64,65,66,67,69,70,71,80,82,87,89,91,96,97,98,99,109,120,126,136,141,145,153,154,155,164,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,193,196,204,205,208,209,210,218,221,222,224,233,234,241,243,244,246,249,262,267,272,274,277,279,280,281,284,287,288,291,301,302,305,306,311,312,314,],[42,42,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-95,-136,-3,-137,-138,-49,42,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,-52,-40,-44,-56,-29,-87,-88,-89,-90,-91,42,-93,-2,-55,-127,-34,-38,-35,-51,-63,-76,-77,-78,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-80,-75,-83,-111,42,-30,-31,-131,-32,-33,42,-92,-98,-106,-110,42,-135,-126,-39,-47,42,-101,-117,-116,-48,-54,-121,-94,-128,-132,-119,-46,-53,-120,-122,-118,42,42,-100,-99,]),'RETURN':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,45,49,50,57,58,60,61,62,63,64,65,66,67,69,70,71,80,82,87,89,91,96,97,98,99,109,120,126,136,141,145,153,154,155,164,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,193,196,204,205,208,209,210,218,221,222,224,233,234,241,243,244,246,249,262,267,272,274,277,279,280,281,284,287,288,291,301,302,305,306,311,312,314,],[43,43,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-95,-136,-3,-137,-138,-49,43,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,-52,-40,-44,-56,-29,-87,-88,-89,-90,-91,43,-93,-2,-55,-127,-34,-38,-35,-51,-63,-76,-77,-78,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-80,-75,-83,-111,43,-30,-31,-131,-32,-33,43,-92,-98,-106,-110,43,-135,-126,-39,-47,43,-101,-117,-116,-48,-54,-121,-94,-128,-132,-119,-46,-53,-120,-122,-118,43,43,-100,-99,]),'LPAREN':([5,6,35,37,38,40,43,46,47,48,56,62,68,72,75,85,86,101,102,103,104,105,110,111,112,113,114,115,116,117,118,119,122,123,127,128,133,142,143,144,151,152,157,167,184,211,223,236,238,245,248,282,285,304,],[44,48,55,68,68,68,68,68,68,68,107,48,68,125,48,139,140,68,68,156,157,158,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,48,48,68,68,68,68,68,275,68,68,68,]),'STRING':([5,37,38,40,43,44,46,47,48,68,101,102,110,111,112,113,114,115,116,117,118,119,122,123,127,128,133,142,143,144,151,152,156,157,211,223,236,238,245,282,283,285,303,304,],[45,65,65,65,65,81,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,212,65,65,65,65,65,65,65,296,65,296,65,]),'ASIG':([6,52,53,75,91,96,97,98,99,100,149,150,260,],[46,-36,102,128,143,-87,-88,-89,-90,152,-36,-37,128,]),'ASSIGN':([6,52,53,75,91,96,97,98,99,100,149,150,260,],[47,92,101,47,144,-87,-88,-89,-90,151,-36,-37,47,]),'INCREMENT':([6,260,],[49,49,]),'DECREMENT':([6,260,],[50,50,]),'RBRACE':([8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,49,50,51,57,60,61,62,63,64,65,66,67,69,70,71,80,82,87,89,91,96,97,98,99,108,109,126,131,132,141,145,153,154,155,164,166,167,168,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186,192,193,194,204,205,208,209,210,221,222,224,230,231,232,233,235,241,243,244,246,250,253,254,261,262,263,264,265,266,267,268,269,272,274,276,277,279,280,281,284,287,288,291,293,294,295,297,301,302,305,308,309,310,312,313,314,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-95,-136,-137,-138,-5,-49,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,-52,-40,-44,-56,-29,-87,-88,-89,-90,164,-91,-93,193,-112,-55,-127,-34,-38,-35,-51,-63,-76,-77,-78,-64,-65,-66,-67,-68,-69,-70,-71,-72,222,224,-107,-74,-80,-75,-83,233,-111,-113,-30,-31,-131,-32,-33,-92,-98,-106,262,-102,-105,-110,-115,-135,-126,-39,-47,277,-109,-108,-104,-101,-103,-114,281,-129,-117,284,-133,-116,-48,291,-54,-121,-94,-128,-132,-119,-46,-53,-130,302,-123,-134,-120,-122,-118,-124,-125,312,-100,314,-99,]),'CASE':([8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,49,50,51,57,60,61,62,63,64,65,66,67,69,70,71,78,80,82,87,89,91,96,97,98,99,109,126,130,132,141,145,153,154,155,164,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,193,204,205,208,209,210,221,222,224,233,235,241,243,244,246,262,264,267,272,274,277,279,280,281,284,287,288,291,301,302,305,312,314,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-95,-136,-137,-138,-5,-49,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,133,-52,-40,-44,-56,-29,-87,-88,-89,-90,-91,-93,133,133,-55,-127,-34,-38,-35,-51,-63,-76,-77,-78,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-80,-75,-83,-111,-30,-31,-131,-32,-33,-92,-98,-106,-110,-115,-135,-126,-39,-47,-101,-114,-117,-116,-48,-54,-121,-94,-128,-132,-119,-46,-53,-120,-122,-118,-100,-99,]),'DEFAULT':([8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,34,42,49,50,51,57,60,61,62,63,64,65,66,67,69,70,71,78,80,82,87,89,91,96,97,98,99,109,126,130,132,141,145,153,154,155,164,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,193,204,205,208,209,210,221,222,224,233,235,241,243,244,246,262,264,267,272,274,277,279,280,281,284,287,288,291,301,302,305,312,314,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-95,-136,-137,-138,-5,-49,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,134,-52,-40,-44,-56,-29,-87,-88,-89,-90,-91,-93,134,134,-55,-127,-34,-38,-35,-51,-63,-76,-77,-78,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-80,-75,-83,-111,-30,-31,-131,-32,-33,-92,-98,-106,-110,-115,-135,-126,-39,-47,-101,-114,-117,-116,-48,-54,-121,-94,-128,-132,-119,-46,-53,-120,-122,-118,-100,-99,]),'DOT':([33,],[54,]),'LBRACE':([36,40,49,50,59,60,61,62,63,64,65,66,67,69,70,71,73,75,77,87,89,96,97,98,99,129,141,161,165,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,190,197,199,217,224,251,257,258,259,267,279,299,301,307,],[58,78,-137,-138,120,-41,-42,121,-62,-73,-79,-81,-82,-84,-85,-86,120,121,130,-44,-56,-87,-88,-89,-90,191,-55,218,120,-63,121,-77,-78,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,121,-75,-83,-45,236,238,249,-106,-50,-96,120,-97,283,-121,306,-120,311,]),'NUMBER':([37,38,40,41,43,46,47,48,68,94,101,102,110,111,112,113,114,115,116,117,118,119,122,123,127,128,133,142,143,144,151,152,157,211,223,236,238,245,282,285,304,],[60,60,60,79,60,60,60,60,60,147,60,60,168,168,60,60,60,60,60,60,60,60,168,168,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'FLOAT':([37,38,40,43,46,47,48,68,101,102,110,111,112,113,114,115,116,117,118,119,122,123,127,128,133,142,143,144,151,152,157,211,223,236,238,245,282,285,304,],[61,61,61,61,61,61,61,61,61,61,169,169,61,61,61,61,61,61,61,61,169,169,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'TRUE':([37,38,40,43,46,47,48,68,101,102,110,111,112,113,114,115,116,117,118,119,122,123,127,128,133,142,143,144,151,152,157,211,223,236,238,245,282,285,304,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'FALSE':([37,38,40,43,46,47,48,68,101,102,110,111,112,113,114,115,116,117,118,119,122,123,127,128,133,142,143,144,151,152,157,211,223,236,238,245,282,285,304,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'MAKE':([37,38,40,43,46,47,48,68,101,102,110,111,112,113,114,115,116,117,118,119,122,123,127,128,133,142,143,144,151,152,157,211,223,236,238,245,282,285,304,],[72,72,72,72,85,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'MAP':([46,52,125,139,],[83,93,187,200,]),'NEW':([46,],[86,]),'RPAREN':([48,60,61,62,63,64,65,66,67,69,70,71,81,88,89,90,96,97,98,99,107,124,141,159,162,163,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,202,203,213,216,224,247,252,256,271,273,275,279,290,292,298,301,],[89,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,136,141,-56,-60,-87,-88,-89,-90,161,186,-55,215,219,-57,-63,-76,-77,-78,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-80,-75,-83,241,-61,246,-59,-106,274,-58,279,287,288,289,-121,300,301,305,-120,]),'INT_TYPE':([52,53,96,97,98,99,135,137,138,146,148,149,150,160,161,191,207,219,226,227,229,231,232,237,239,240,242,261,278,286,289,300,],[96,96,-87,-88,-89,-90,96,96,96,96,96,-36,-37,96,96,96,96,96,96,96,96,96,-105,96,96,96,96,-104,96,96,96,96,]),'FLOAT64_TYPE':([52,53,96,97,98,99,135,137,138,146,148,149,150,160,161,191,207,219,226,227,229,231,232,237,239,240,242,261,278,286,289,300,],[97,97,-87,-88,-89,-90,97,97,97,97,97,-36,-37,97,97,97,97,97,97,97,97,97,-105,97,97,97,97,-104,97,97,97,97,]),'STRING_TYPE':([52,53,96,97,98,99,135,137,138,146,148,149,150,160,161,191,207,219,226,227,229,231,232,237,239,240,242,261,278,286,289,300,],[98,98,-87,-88,-89,-90,98,98,98,98,98,-36,-37,98,98,98,98,98,98,98,98,98,-105,98,98,98,98,-104,98,98,98,98,]),'BOOL_TYPE':([52,53,96,97,98,99,135,137,138,146,148,149,150,160,161,191,207,219,226,227,229,231,232,237,239,240,242,261,278,286,289,300,],[99,99,-87,-88,-89,-90,99,99,99,99,99,-36,-37,99,99,99,99,99,99,99,99,99,-105,99,99,99,99,-104,99,99,99,99,]),'COMMA':([52,60,61,62,63,64,65,66,67,69,70,71,89,90,96,97,98,99,141,149,154,163,166,167,168,169,170,171,172,173,174,175,176,177,178,182,183,184,185,186,212,216,224,253,266,269,279,295,301,309,],[95,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,-56,142,-87,-88,-89,-90,-55,95,211,220,-63,-76,-77,-78,-64,-65,-66,-67,-68,-69,-70,-71,-72,225,-74,-80,-75,-83,245,-59,-106,-109,282,285,-121,303,-120,-125,]),'PRINTF':([54,],[103,]),'PRINTLN':([54,],[104,]),'SCANLN':([54,],[105,]),'PLUS':([59,60,61,62,63,64,65,66,67,69,70,71,73,75,77,80,82,87,89,90,124,141,154,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,189,190,195,204,205,213,224,253,266,269,273,279,287,301,305,309,],[110,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,110,-43,110,110,110,110,-56,110,110,-55,110,-63,-76,-77,-78,-64,110,110,110,110,110,110,110,110,-74,-80,-75,-83,110,110,110,110,110,110,-106,110,110,110,110,-121,-121,-120,-120,110,]),'MINUS':([59,60,61,62,63,64,65,66,67,69,70,71,73,75,77,80,82,87,89,90,124,141,154,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,189,190,195,204,205,213,224,253,266,269,273,279,287,301,305,309,],[111,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,111,-43,111,111,111,111,-56,111,111,-55,111,-63,-76,-77,-78,-64,111,111,111,111,111,111,111,111,-74,-80,-75,-83,111,111,111,111,111,111,-106,111,111,111,111,-121,-121,-120,-120,111,]),'AND':([59,60,61,62,63,64,65,66,67,69,70,71,73,75,77,80,82,87,89,90,124,141,154,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,189,190,195,204,205,213,224,253,266,269,273,279,287,301,305,309,],[112,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,112,-43,112,112,112,112,-56,112,112,-55,112,-63,-76,-77,-78,-64,112,112,112,112,112,112,112,112,-74,-80,-75,-83,112,112,112,112,112,112,-106,112,112,112,112,-121,-121,-120,-120,112,]),'OR':([59,60,61,62,63,64,65,66,67,69,70,71,73,75,77,80,82,87,89,90,124,141,154,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,189,190,195,204,205,213,224,253,266,269,273,279,287,301,305,309,],[113,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,113,-43,113,113,113,113,-56,113,113,-55,113,-63,-76,-77,-78,-64,113,113,113,113,113,113,113,113,-74,-80,-75,-83,113,113,113,113,113,113,-106,113,113,113,113,-121,-121,-120,-120,113,]),'EQ':([59,60,61,62,63,64,65,66,67,69,70,71,73,75,77,80,82,87,89,90,124,141,154,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,189,190,195,204,205,213,224,253,266,269,273,279,287,301,305,309,],[114,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,114,-43,114,114,114,114,-56,114,114,-55,114,-63,-76,-77,-78,-64,114,114,114,114,114,114,114,114,-74,-80,-75,-83,114,114,114,114,114,114,-106,114,114,114,114,-121,-121,-120,-120,114,]),'NE':([59,60,61,62,63,64,65,66,67,69,70,71,73,75,77,80,82,87,89,90,124,141,154,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,189,190,195,204,205,213,224,253,266,269,273,279,287,301,305,309,],[115,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,115,-43,115,115,115,115,-56,115,115,-55,115,-63,-76,-77,-78,-64,115,115,115,115,115,115,115,115,-74,-80,-75,-83,115,115,115,115,115,115,-106,115,115,115,115,-121,-121,-120,-120,115,]),'LT':([59,60,61,62,63,64,65,66,67,69,70,71,73,75,77,80,82,87,89,90,124,141,154,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,189,190,195,204,205,213,224,253,266,269,273,279,287,301,305,309,],[116,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,116,-43,116,116,116,116,-56,116,116,-55,116,-63,-76,-77,-78,-64,116,116,116,116,116,116,116,116,-74,-80,-75,-83,116,116,116,116,116,116,-106,116,116,116,116,-121,-121,-120,-120,116,]),'GT':([59,60,61,62,63,64,65,66,67,69,70,71,73,75,77,80,82,87,89,90,124,141,154,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,189,190,195,204,205,213,224,253,266,269,273,279,287,301,305,309,],[117,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,117,-43,117,117,117,117,-56,117,117,-55,117,-63,-76,-77,-78,-64,117,117,117,117,117,117,117,117,-74,-80,-75,-83,117,117,117,117,117,117,-106,117,117,117,117,-121,-121,-120,-120,117,]),'LE':([59,60,61,62,63,64,65,66,67,69,70,71,73,75,77,80,82,87,89,90,124,141,154,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,189,190,195,204,205,213,224,253,266,269,273,279,287,301,305,309,],[118,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,118,-43,118,118,118,118,-56,118,118,-55,118,-63,-76,-77,-78,-64,118,118,118,118,118,118,118,118,-74,-80,-75,-83,118,118,118,118,118,118,-106,118,118,118,118,-121,-121,-120,-120,118,]),'GE':([59,60,61,62,63,64,65,66,67,69,70,71,73,75,77,80,82,87,89,90,124,141,154,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,189,190,195,204,205,213,224,253,266,269,273,279,287,301,305,309,],[119,-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,119,-43,119,119,119,119,-56,119,119,-55,119,-63,-76,-77,-78,-64,119,119,119,119,119,119,119,119,-74,-80,-75,-83,119,119,119,119,119,119,-106,119,119,119,119,-121,-121,-120,-120,119,]),'SEMICOLON':([60,61,62,63,64,65,66,67,69,70,71,74,87,89,141,166,167,168,169,170,171,172,173,174,175,176,177,178,183,184,185,186,189,190,224,279,301,],[-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,127,-44,-56,-55,-63,-76,-77,-78,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-80,-75,-83,228,-45,-106,-121,-120,]),'COLON':([60,61,62,63,64,65,66,67,69,70,71,89,134,141,166,167,168,169,170,171,172,173,174,175,176,177,178,180,183,184,185,186,195,224,279,296,301,],[-41,-42,-43,-62,-73,-79,-81,-82,-84,-85,-86,-56,196,-55,-63,-76,-77,-78,-64,-65,-66,-67,-68,-69,-70,-71,-72,223,-74,-80,-75,-83,234,-106,-121,304,-120,]),'TIMES':([60,61,62,63,64,65,66,67,69,70,71,75,89,141,166,167,168,169,170,183,184,185,186,224,279,287,301,305,],[-77,-78,-76,122,-73,-79,-81,-82,-84,-85,-86,-76,-56,-55,122,-76,-77,-78,122,-74,-80,-75,-83,-106,-121,-121,-120,-120,]),'DIVIDE':([60,61,62,63,64,65,66,67,69,70,71,75,89,141,166,167,168,169,170,183,184,185,186,224,279,287,301,305,],[-77,-78,-76,123,-73,-79,-81,-82,-84,-85,-86,-76,-56,-55,123,-76,-77,-78,123,-74,-80,-75,-83,-106,-121,-121,-120,-120,]),'STRUCT':([76,],[129,]),'RBRACKET':([79,84,94,96,97,98,99,147,188,198,201,206,255,270,],[135,138,148,-87,-88,-89,-90,207,227,237,240,242,278,286,]),'ELSE':([109,222,],[165,-98,]),'AMPER':([158,],[214,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'import_stmt':([3,],[4,]),'program':([4,8,58,120,196,218,234,249,306,311,],[7,51,108,179,235,250,264,276,310,313,]),'statement':([4,8,58,120,196,218,234,249,306,311,],[8,8,8,8,8,8,8,8,8,8,]),'declaration':([4,8,58,120,196,218,234,249,306,311,],[9,9,9,9,9,9,9,9,9,9,]),'assignment':([4,8,38,58,120,196,218,228,234,249,306,311,],[10,10,74,10,10,10,10,257,10,10,10,10,]),'print_stmt':([4,8,58,120,196,218,234,249,306,311,],[11,11,11,11,11,11,11,11,11,11,]),'input_stmt':([4,8,58,120,196,218,234,249,306,311,],[12,12,12,12,12,12,12,12,12,12,]),'continue_stmt':([4,8,58,120,196,218,234,249,306,311,],[13,13,13,13,13,13,13,13,13,13,]),'struct_method':([4,8,58,120,196,218,234,249,306,311,],[14,14,14,14,14,14,14,14,14,14,]),'func_def':([4,8,58,120,196,218,234,249,306,311,],[15,15,15,15,15,15,15,15,15,15,]),'func_no_params':([4,8,58,120,196,218,234,249,306,311,],[16,16,16,16,16,16,16,16,16,16,]),'func_call':([4,8,37,38,40,43,46,47,48,58,68,101,102,110,111,112,113,114,115,116,117,118,119,120,122,123,127,128,133,142,143,144,151,152,157,196,211,218,223,234,236,238,245,249,282,285,304,306,311,],[17,17,71,71,71,71,71,71,71,17,71,71,71,71,71,71,71,71,71,71,71,71,71,17,71,71,71,71,71,71,71,71,71,71,71,17,71,17,71,17,71,71,71,17,71,71,71,17,17,]),'if_stmt':([4,8,58,120,196,218,234,249,306,311,],[18,18,18,18,18,18,18,18,18,18,]),'for_stmt':([4,8,58,120,196,218,234,249,306,311,],[19,19,19,19,19,19,19,19,19,19,]),'struct_def':([4,8,58,120,196,218,234,249,306,311,],[20,20,20,20,20,20,20,20,20,20,]),'switch_stmt':([4,8,58,120,196,218,234,249,306,311,],[21,21,21,21,21,21,21,21,21,21,]),'map_declaration':([4,8,58,120,196,218,234,249,306,311,],[22,22,22,22,22,22,22,22,22,22,]),'map_declaration_values':([4,8,58,120,196,218,234,249,306,311,],[23,23,23,23,23,23,23,23,23,23,]),'array_declaration':([4,8,58,120,196,218,234,249,306,311,],[24,24,24,24,24,24,24,24,24,24,]),'array_literal':([4,8,58,92,120,196,218,234,249,306,311,],[25,25,25,145,25,25,25,25,25,25,25,]),'slice_declaration':([4,8,58,120,196,218,234,249,306,311,],[26,26,26,26,26,26,26,26,26,26,]),'make_stmt':([4,8,58,120,196,218,234,249,306,311,],[27,27,27,27,27,27,27,27,27,27,]),'new_stmt':([4,8,58,120,196,218,234,249,306,311,],[28,28,28,28,28,28,28,28,28,28,]),'break_stmt':([4,8,58,120,196,218,234,249,306,311,],[29,29,29,29,29,29,29,29,29,29,]),'increment_stmt':([4,8,58,120,196,218,228,234,249,306,311,],[30,30,30,30,30,30,259,30,30,30,30,]),'return_stmt':([4,8,58,120,196,218,234,249,306,311,],[31,31,31,31,31,31,31,31,31,31,]),'func_header':([4,8,58,120,196,218,234,249,306,311,],[36,36,36,36,36,36,36,36,36,36,]),'id_list':([32,95,],[53,150,]),'func_body':([36,],[57,]),'expression':([37,38,40,43,46,47,48,68,101,102,112,113,114,115,116,117,118,119,127,128,133,142,143,144,151,152,157,211,223,236,238,245,282,285,304,],[59,73,77,80,82,87,90,124,154,154,171,172,173,174,175,176,177,178,189,190,195,90,204,205,154,154,213,154,253,266,269,273,266,269,309,]),'term':([37,38,40,43,46,47,48,68,101,102,110,111,112,113,114,115,116,117,118,119,127,128,133,142,143,144,151,152,157,211,223,236,238,245,282,285,304,],[63,63,63,63,63,63,63,63,63,63,166,170,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'factor':([37,38,40,43,46,47,48,68,101,102,110,111,112,113,114,115,116,117,118,119,122,123,127,128,133,142,143,144,151,152,157,211,223,236,238,245,282,285,304,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,183,185,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'make_expr':([37,38,40,43,46,47,48,68,101,102,110,111,112,113,114,115,116,117,118,119,122,123,127,128,133,142,143,144,151,152,157,211,223,236,238,245,282,285,304,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'struct_instance':([37,38,40,43,46,47,48,68,101,102,110,111,112,113,114,115,116,117,118,119,122,123,127,128,133,142,143,144,151,152,157,211,223,236,238,245,282,285,304,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'arg_list':([48,142,],[88,203,]),'type':([52,53,135,137,138,146,148,160,161,191,207,219,226,227,229,231,237,239,240,242,278,286,289,300,],[91,100,197,198,199,206,208,216,217,232,243,251,255,256,261,232,267,270,271,272,292,298,299,307,]),'block':([59,73,165,258,],[109,126,221,280,]),'case_list':([78,130,132,],[131,192,194,]),'case_clause':([78,130,132,],[132,132,132,]),'expr_list':([101,102,151,152,211,],[153,155,209,210,244,]),'param_list':([107,220,275,],[162,252,290,]),'param':([107,220,275,],[163,163,163,]),'struct_fields_values':([121,225,],[181,254,]),'field_value':([121,225,],[182,182,]),'struct_fields':([191,231,],[230,263,]),'struct_field':([191,231,],[231,231,]),'for_update':([228,],[258,]),'array_values':([236,282,],[265,293,]),'slice_values':([238,285,],[268,297,]),'map_kv_pairs':([283,303,],[294,308,]),'map_kv_pair':([283,303,],[295,295,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> PACKAGE VARIABLE import_stmt program','start',4,'p_start','parser.py',79),
  ('import_stmt -> IMPORT LPAREN STRING RPAREN','import_stmt',4,'p_import_function','parser.py',85),
  ('import_stmt -> IMPORT STRING','import_stmt',2,'p_import_function','parser.py',86),
  ('program -> statement','program',1,'p_program','parser.py',90),
  ('program -> statement program','program',2,'p_program','parser.py',91),
  ('statement -> declaration','statement',1,'p_statement','parser.py',96),
  ('statement -> assignment','statement',1,'p_statement','parser.py',97),
  ('statement -> print_stmt','statement',1,'p_statement','parser.py',98),
  ('statement -> input_stmt','statement',1,'p_statement','parser.py',99),
  ('statement -> continue_stmt','statement',1,'p_statement','parser.py',100),
  ('statement -> struct_method','statement',1,'p_statement','parser.py',101),
  ('statement -> func_def','statement',1,'p_statement','parser.py',102),
  ('statement -> func_no_params','statement',1,'p_statement','parser.py',103),
  ('statement -> func_call','statement',1,'p_statement','parser.py',104),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',105),
  ('statement -> for_stmt','statement',1,'p_statement','parser.py',106),
  ('statement -> struct_def','statement',1,'p_statement','parser.py',107),
  ('statement -> switch_stmt','statement',1,'p_statement','parser.py',108),
  ('statement -> map_declaration','statement',1,'p_statement','parser.py',109),
  ('statement -> map_declaration_values','statement',1,'p_statement','parser.py',110),
  ('statement -> array_declaration','statement',1,'p_statement','parser.py',111),
  ('statement -> array_literal','statement',1,'p_statement','parser.py',112),
  ('statement -> slice_declaration','statement',1,'p_statement','parser.py',113),
  ('statement -> make_stmt','statement',1,'p_statement','parser.py',114),
  ('statement -> new_stmt','statement',1,'p_statement','parser.py',115),
  ('statement -> break_stmt','statement',1,'p_statement','parser.py',116),
  ('statement -> increment_stmt','statement',1,'p_statement','parser.py',117),
  ('statement -> return_stmt','statement',1,'p_statement','parser.py',118),
  ('declaration -> VAR VARIABLE type','declaration',3,'p_declaration','parser.py',124),
  ('declaration -> VAR VARIABLE type ASIG expression','declaration',5,'p_declaration','parser.py',125),
  ('declaration -> VAR VARIABLE type ASSIGN expression','declaration',5,'p_declaration','parser.py',126),
  ('declaration -> VAR id_list type ASSIGN expr_list','declaration',5,'p_declaration_multiple_typed','parser.py',146),
  ('declaration -> VAR id_list type ASIG expr_list','declaration',5,'p_declaration_multiple_typed','parser.py',147),
  ('declaration -> VAR id_list ASSIGN expr_list','declaration',4,'p_declaration_multiple_infer','parser.py',169),
  ('declaration -> VAR id_list ASIG expr_list','declaration',4,'p_declaration_multiple_infer','parser.py',170),
  ('id_list -> VARIABLE','id_list',1,'p_id_list','parser.py',189),
  ('id_list -> VARIABLE COMMA id_list','id_list',3,'p_id_list','parser.py',190),
  ('expr_list -> expression','expr_list',1,'p_expr_list','parser.py',197),
  ('expr_list -> expression COMMA expr_list','expr_list',3,'p_expr_list','parser.py',198),
  ('declaration -> VARIABLE ASIG expression','declaration',3,'p_declaration_short','parser.py',206),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',220),
  ('expression -> FLOAT','expression',1,'p_expression_float','parser.py',224),
  ('expression -> VARIABLE','expression',1,'p_expression_variable','parser.py',228),
  ('assignment -> VARIABLE ASSIGN expression','assignment',3,'p_assignment','parser.py',242),
  ('assignment -> VARIABLE ASIG expression','assignment',3,'p_assignment','parser.py',243),
  ('print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN','print_stmt',8,'p_print_stmt','parser.py',264),
  ('print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN','print_stmt',6,'p_print_stmt','parser.py',265),
  ('input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN','input_stmt',7,'p_input_stmt','parser.py',275),
  ('func_def -> func_header func_body','func_def',2,'p_func_def','parser.py',295),
  ('func_header -> FUNC VARIABLE LPAREN param_list RPAREN type','func_header',6,'p_func_header','parser.py',299),
  ('func_body -> LBRACE program RBRACE','func_body',3,'p_func_body','parser.py',309),
  ('return_stmt -> RETURN expression','return_stmt',2,'p_return_stmt','parser.py',315),
  ('func_no_params -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE','func_no_params',8,'p_func_def_no_params','parser.py',338),
  ('func_no_params -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE','func_no_params',7,'p_func_def_no_params_void','parser.py',344),
  ('func_call -> VARIABLE LPAREN arg_list RPAREN','func_call',4,'p_func_call','parser.py',349),
  ('func_call -> VARIABLE LPAREN RPAREN','func_call',3,'p_func_call','parser.py',350),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',396),
  ('param_list -> param COMMA param_list','param_list',3,'p_param_list','parser.py',397),
  ('param -> VARIABLE type','param',2,'p_param','parser.py',406),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',420),
  ('arg_list -> expression COMMA arg_list','arg_list',3,'p_arg_list','parser.py',421),
  ('expression -> term','expression',1,'p_expression','parser.py',431),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',432),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',433),
  ('expression -> expression AND expression','expression',3,'p_expression','parser.py',434),
  ('expression -> expression OR expression','expression',3,'p_expression','parser.py',435),
  ('expression -> expression EQ expression','expression',3,'p_expression','parser.py',436),
  ('expression -> expression NE expression','expression',3,'p_expression','parser.py',437),
  ('expression -> expression LT expression','expression',3,'p_expression','parser.py',438),
  ('expression -> expression GT expression','expression',3,'p_expression','parser.py',439),
  ('expression -> expression LE expression','expression',3,'p_expression','parser.py',440),
  ('expression -> expression GE expression','expression',3,'p_expression','parser.py',441),
  ('term -> factor','term',1,'p_term','parser.py',471),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',472),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',473),
  ('term -> VARIABLE','term',1,'p_term_variable','parser.py',488),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',499),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',500),
  ('factor -> STRING','factor',1,'p_factor','parser.py',501),
  ('factor -> VARIABLE','factor',1,'p_factor','parser.py',502),
  ('factor -> TRUE','factor',1,'p_factor','parser.py',503),
  ('factor -> FALSE','factor',1,'p_factor','parser.py',504),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',505),
  ('factor -> make_expr','factor',1,'p_factor','parser.py',506),
  ('factor -> struct_instance','factor',1,'p_factor','parser.py',507),
  ('factor -> func_call','factor',1,'p_factor','parser.py',508),
  ('type -> INT_TYPE','type',1,'p_type','parser.py',532),
  ('type -> FLOAT64_TYPE','type',1,'p_type','parser.py',533),
  ('type -> STRING_TYPE','type',1,'p_type','parser.py',534),
  ('type -> BOOL_TYPE','type',1,'p_type','parser.py',535),
  ('if_stmt -> IF expression block','if_stmt',3,'p_if_stmt','parser.py',540),
  ('if_stmt -> IF expression block ELSE block','if_stmt',5,'p_if_stmt','parser.py',541),
  ('for_stmt -> FOR expression block','for_stmt',3,'p_for_stmt','parser.py',550),
  ('for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block','for_stmt',7,'p_for_stmt','parser.py',551),
  ('continue_stmt -> CONTINUE','continue_stmt',1,'p_continue_stmt','parser.py',557),
  ('for_update -> assignment','for_update',1,'p_for_update','parser.py',563),
  ('for_update -> increment_stmt','for_update',1,'p_for_update','parser.py',564),
  ('block -> LBRACE program RBRACE','block',3,'p_block','parser.py',569),
  ('struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE','struct_method',13,'p_struct_method','parser.py',574),
  ('struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE','struct_method',12,'p_struct_method','parser.py',575),
  ('struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE','struct_def',6,'p_struct_def','parser.py',580),
  ('struct_fields -> struct_field','struct_fields',1,'p_struct_fields','parser.py',585),
  ('struct_fields -> struct_field struct_fields','struct_fields',2,'p_struct_fields','parser.py',586),
  ('struct_field -> VARIABLE type','struct_field',2,'p_struct_field','parser.py',591),
  ('struct_field -> type','struct_field',1,'p_struct_field','parser.py',592),
  ('struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE','struct_instance',4,'p_struct_instance','parser.py',597),
  ('struct_fields_values -> field_value','struct_fields_values',1,'p_struct_fields_values','parser.py',601),
  ('struct_fields_values -> field_value COMMA struct_fields_values','struct_fields_values',3,'p_struct_fields_values','parser.py',602),
  ('field_value -> VARIABLE COLON expression','field_value',3,'p_field_value','parser.py',606),
  ('switch_stmt -> SWITCH expression LBRACE case_list RBRACE','switch_stmt',5,'p_switch_stmt','parser.py',610),
  ('switch_stmt -> SWITCH LBRACE case_list RBRACE','switch_stmt',4,'p_switch_stmt','parser.py',611),
  ('case_list -> case_clause','case_list',1,'p_case_list','parser.py',615),
  ('case_list -> case_clause case_list','case_list',2,'p_case_list','parser.py',616),
  ('case_clause -> CASE expression COLON program','case_clause',4,'p_case_clause','parser.py',620),
  ('case_clause -> DEFAULT COLON program','case_clause',3,'p_case_clause','parser.py',621),
  ('map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type','map_declaration',7,'p_map_declaration','parser.py',627),
  ('map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type','map_declaration',7,'p_map_declaration','parser.py',628),
  ('make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN','make_stmt',10,'p_make_stmt','parser.py',633),
  ('make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN','make_stmt',8,'p_make_stmt','parser.py',634),
  ('make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN','make_expr',8,'p_make_expr','parser.py',638),
  ('make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN','make_expr',6,'p_make_expr','parser.py',639),
  ('map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE','map_declaration_values',10,'p_map_literal_declaration','parser.py',651),
  ('map_kv_pairs -> map_kv_pair','map_kv_pairs',1,'p_map_kv_pairs','parser.py',655),
  ('map_kv_pairs -> map_kv_pair COMMA map_kv_pairs','map_kv_pairs',3,'p_map_kv_pairs','parser.py',656),
  ('map_kv_pair -> STRING COLON expression','map_kv_pair',3,'p_map_kv_pair','parser.py',660),
  ('array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type','array_declaration',6,'p_array_declaration','parser.py',665),
  ('array_declaration -> VAR VARIABLE ASSIGN array_literal','array_declaration',4,'p_array_declaration','parser.py',666),
  ('array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE','array_literal',7,'p_array_literal','parser.py',690),
  ('array_values -> expression','array_values',1,'p_array_values','parser.py',706),
  ('array_values -> expression COMMA array_values','array_values',3,'p_array_values','parser.py',707),
  ('slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type','slice_declaration',5,'p_slice_declaration','parser.py',717),
  ('slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE','slice_declaration',8,'p_slice_declaration','parser.py',718),
  ('slice_values -> expression','slice_values',1,'p_slice_values','parser.py',722),
  ('slice_values -> expression COMMA slice_values','slice_values',3,'p_slice_values','parser.py',723),
  ('new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN','new_stmt',6,'p_new_stmt','parser.py',728),
  ('break_stmt -> BREAK','break_stmt',1,'p_break_stmt','parser.py',733),
  ('increment_stmt -> VARIABLE INCREMENT','increment_stmt',2,'p_increment_stmt','parser.py',740),
  ('increment_stmt -> VARIABLE DECREMENT','increment_stmt',2,'p_increment_stmt','parser.py',741),
]
