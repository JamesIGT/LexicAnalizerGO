
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'startAMPER AND ASIG ASSIGN BOOL_TYPE BREAK CASE COLON COMMA CONTINUE DECREMENT DEFAULT DIVIDE DOT ELSE EQ FALSE FLOAT FLOAT64_TYPE FMT FOR FUNC GE GT IF IMPORT INCREMENT INT_TYPE LBRACE LBRACKET LE LPAREN LT MAKE MAP MINUS MOD NE NEW NOT NUMBER OR PACKAGE PLUS PRINT PRINTF PRINTLN RANGE RBRACE RBRACKET RETURN RPAREN SCANLN SEMICOLON STRING STRING_TYPE STRUCT SWITCH TIMES TRUE TYPE UINT VAR VARIABLEstart : PACKAGE VARIABLE import_stmt programimport_stmt : IMPORT LPAREN STRING RPAREN\n                    | IMPORT STRINGprogram : statement\n               | statement programstatement : declaration\n                 | assignment\n                 | print_stmt\n                 | input_stmt\n                 | continue_stmt\n                 | struct_method\n                 | func_def\n                 | func_no_params\n                 | func_no_params_void\n                 | func_with_map\n                 | func_call\n                 | if_stmt\n                 | for_stmt\n                 | struct_def\n                 | switch_stmt\n                 | map_declaration\n                 | map_declaration_values\n                 | array_declaration\n                 | array_literal\n                 | slice_declaration\n                 | make_stmt\n                 | new_stmt\n                 | break_stmt\n                 | increment_stmt\n                 | return_stmtdeclaration : VAR VARIABLE type \n                   | VAR VARIABLE type ASIG expression\n                   | VAR VARIABLE type ASSIGN expressionexpression : NUMBERexpression : FLOATexpression : VARIABLEassignment : VARIABLE ASSIGN expression\n                  | VARIABLE ASIG expression\n                  print_stmt : FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN\n                  | FMT DOT PRINTLN LPAREN expression RPAREN\n                  | FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPARENinput_stmt : FMT DOT SCANLN LPAREN AMPER VARIABLE RPARENfunc_def : func_header func_bodyfunc_header : FUNC VARIABLE LPAREN param_list RPAREN type func_body : LBRACE program RBRACEreturn_stmt : RETURN expressionfunc_with_map : FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type  func_body  func_no_params : func_header_no_params blockfunc_header_no_params : FUNC VARIABLE LPAREN RPAREN typefunc_no_params_void : FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACEfunc_call : VARIABLE LPAREN arg_list RPAREN\n                 | VARIABLE LPAREN RPARENparam_list : param\n                  | param COMMA param_listparam : VARIABLE typearg_list : expression\n                | expression COMMA arg_listexpression : term\n                  | expression PLUS term\n                  | expression MINUS term\n                  | expression AND expression\n                  | expression OR expression\n                  | expression EQ expression\n                  | expression NE expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression LE expression\n                  | expression GE expressionterm : factor\n            | term TIMES factor\n            | term DIVIDE factorterm : VARIABLEfactor : NUMBER\n              | FLOAT\n              | STRING\n              | VARIABLE\n              | TRUE\n              | FALSE\n              | LPAREN expression RPAREN\n              | make_expr\n              | struct_instance\n              | func_calltype : INT_TYPE\n            | FLOAT64_TYPE\n            | STRING_TYPE\n            | BOOL_TYPEif_stmt : IF expression block\n               | IF expression block ELSE blockfor_stmt : FOR expression for_block\n                | FOR assignment SEMICOLON expression SEMICOLON for_update for_blockfor_block : begin_loop block end_loopbegin_loop :end_loop :continue_stmt : CONTINUEfor_update : assignment\n                  | increment_stmtblock : LBRACE program RBRACEstruct_method : FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE\n                     | FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACEstruct_def : TYPE VARIABLE STRUCT LBRACE struct_fields RBRACEstruct_fields : struct_field\n                     | struct_field struct_fieldsstruct_field : VARIABLE type\n                    | typestruct_instance : VARIABLE LBRACE struct_fields_values RBRACEstruct_fields_values : field_value\n                            | field_value COMMA struct_fields_valuesfield_value : VARIABLE COLON expressionswitch_stmt : SWITCH expression LBRACE case_list RBRACE\n                   | SWITCH LBRACE case_list RBRACEcase_list : case_clause\n                 | case_clause case_listcase_clause : CASE expression COLON program\n                   | DEFAULT COLON programmap_declaration : VAR VARIABLE MAP LBRACKET type RBRACKET type\n                       | VARIABLE ASIG MAP LBRACKET type RBRACKET type\n                       | VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE  map_params RBRACEmap_params : map_param\n                    | map_param COMMA map_paramsmap_param : STRING COLON factormake_stmt : VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN\n                 | VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPARENmake_expr : MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN\n                 | MAKE LPAREN LBRACKET RBRACKET type RPARENmap_declaration_values : VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACEmap_kv_pairs : map_kv_pair\n                    | map_kv_pair COMMA map_kv_pairsmap_kv_pair : STRING COLON expressionarray_declaration : VAR VARIABLE LBRACKET NUMBER RBRACKET type\n                         | VAR VARIABLE ASSIGN array_literalarray_literal : LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACEarray_values : expression\n                    | expression COMMA array_valuesslice_declaration : VAR VARIABLE LBRACKET RBRACKET type\n                         | VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACEslice_values : expression\n                    | expression COMMA slice_valuesnew_stmt : VARIABLE ASIG NEW LPAREN VARIABLE RPARENbreak_stmt : BREAKincrement_stmt : VARIABLE INCREMENT\n                      | VARIABLE DECREMENT'
    
_lr_action_items = {'PACKAGE':([0,],[2,]),'$end':([1,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,52,53,54,59,61,65,66,67,68,69,70,71,72,74,75,76,84,86,87,93,95,99,100,101,102,111,127,142,146,158,159,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,184,188,198,199,202,215,217,221,227,234,236,238,257,260,265,268,270,272,275,276,278,281,282,283,299,300,301,305,308,322,325,],[0,-1,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-94,-139,-140,-141,-5,-43,-48,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,-46,-37,-38,-52,-31,-83,-84,-85,-86,-87,-89,-51,-130,-45,-97,-59,-72,-73,-74,-60,-61,-62,-63,-64,-65,-66,-67,-68,-70,-76,-71,-79,-93,-110,-32,-33,-134,-88,-105,-91,-109,-138,-129,-40,-100,-116,-115,-42,-50,-131,-124,-90,-135,-122,-39,-41,-123,-117,-125,-121,-47,-99,-98,]),'VARIABLE':([2,4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,41,42,43,44,45,46,48,49,50,51,52,53,57,59,60,61,62,65,66,67,68,69,70,71,72,73,74,75,76,84,86,87,93,95,99,100,101,102,106,107,111,112,113,114,115,116,117,118,119,120,121,122,123,124,127,129,130,135,137,141,142,143,144,145,146,151,158,159,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,184,186,188,191,198,199,202,206,207,209,213,214,215,216,217,218,221,222,225,226,227,228,231,234,236,237,238,239,256,257,260,265,268,269,270,272,273,275,276,278,279,281,282,283,299,300,301,304,305,306,308,319,320,321,322,325,],[3,6,6,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,55,-94,58,67,80,81,67,-139,67,-3,67,67,67,-140,-141,106,-43,6,-48,6,-34,-35,-36,-58,-69,-75,-77,-78,67,-80,-81,-82,-46,-37,-38,-52,-31,-83,-84,-85,-86,153,154,-87,163,163,67,67,67,67,67,67,67,67,175,179,179,-89,67,67,67,-2,196,-51,67,67,67,-130,67,-45,-97,-59,-72,-73,-74,-60,-61,-62,-63,-64,-65,-66,-67,-68,-70,-76,-71,-79,-93,223,-110,6,-32,-33,-134,240,241,6,154,67,-88,67,-105,175,-91,255,223,-104,-109,6,67,-138,-129,67,-40,267,-103,-100,-116,-115,-42,154,-50,-131,67,-124,-90,-135,67,-122,-39,-41,-123,-117,-125,317,-121,6,-47,6,179,67,-99,-98,]),'IMPORT':([3,],[5,]),'VAR':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,48,52,53,59,60,61,62,65,66,67,68,69,70,71,72,74,75,76,84,86,87,93,95,99,100,101,102,111,127,137,142,146,158,159,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,184,188,191,198,199,202,209,215,217,221,227,228,234,236,238,257,260,265,268,270,272,275,276,278,281,282,283,299,300,301,305,306,308,319,322,325,],[34,34,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-94,-139,-3,-140,-141,-43,34,-48,34,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,-46,-37,-38,-52,-31,-83,-84,-85,-86,-87,-89,-2,-51,-130,-45,-97,-59,-72,-73,-74,-60,-61,-62,-63,-64,-65,-66,-67,-68,-70,-76,-71,-79,-93,-110,34,-32,-33,-134,34,-88,-105,-91,-109,34,-138,-129,-40,-100,-116,-115,-42,-50,-131,-124,-90,-135,-122,-39,-41,-123,-117,-125,-121,34,-47,34,-99,-98,]),'FMT':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,48,52,53,59,60,61,62,65,66,67,68,69,70,71,72,74,75,76,84,86,87,93,95,99,100,101,102,111,127,137,142,146,158,159,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,184,188,191,198,199,202,209,215,217,221,227,228,234,236,238,257,260,265,268,270,272,275,276,278,281,282,283,299,300,301,305,306,308,319,322,325,],[35,35,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-94,-139,-3,-140,-141,-43,35,-48,35,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,-46,-37,-38,-52,-31,-83,-84,-85,-86,-87,-89,-2,-51,-130,-45,-97,-59,-72,-73,-74,-60,-61,-62,-63,-64,-65,-66,-67,-68,-70,-76,-71,-79,-93,-110,35,-32,-33,-134,35,-88,-105,-91,-109,35,-138,-129,-40,-100,-116,-115,-42,-50,-131,-124,-90,-135,-122,-39,-41,-123,-117,-125,-121,35,-47,35,-99,-98,]),'CONTINUE':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,48,52,53,59,60,61,62,65,66,67,68,69,70,71,72,74,75,76,84,86,87,93,95,99,100,101,102,111,127,137,142,146,158,159,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,184,188,191,198,199,202,209,215,217,221,227,228,234,236,238,257,260,265,268,270,272,275,276,278,281,282,283,299,300,301,305,306,308,319,322,325,],[36,36,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-94,-139,-3,-140,-141,-43,36,-48,36,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,-46,-37,-38,-52,-31,-83,-84,-85,-86,-87,-89,-2,-51,-130,-45,-97,-59,-72,-73,-74,-60,-61,-62,-63,-64,-65,-66,-67,-68,-70,-76,-71,-79,-93,-110,36,-32,-33,-134,36,-88,-105,-91,-109,36,-138,-129,-40,-100,-116,-115,-42,-50,-131,-124,-90,-135,-122,-39,-41,-123,-117,-125,-121,36,-47,36,-99,-98,]),'FUNC':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,48,52,53,59,60,61,62,65,66,67,68,69,70,71,72,74,75,76,84,86,87,93,95,99,100,101,102,111,127,137,142,146,158,159,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,184,188,191,198,199,202,209,215,217,221,227,228,234,236,238,257,260,265,268,270,272,275,276,278,281,282,283,299,300,301,305,306,308,319,322,325,],[37,37,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-94,-139,-3,-140,-141,-43,37,-48,37,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,-46,-37,-38,-52,-31,-83,-84,-85,-86,-87,-89,-2,-51,-130,-45,-97,-59,-72,-73,-74,-60,-61,-62,-63,-64,-65,-66,-67,-68,-70,-76,-71,-79,-93,-110,37,-32,-33,-134,37,-88,-105,-91,-109,37,-138,-129,-40,-100,-116,-115,-42,-50,-131,-124,-90,-135,-122,-39,-41,-123,-117,-125,-121,37,-47,37,-99,-98,]),'IF':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,48,52,53,59,60,61,62,65,66,67,68,69,70,71,72,74,75,76,84,86,87,93,95,99,100,101,102,111,127,137,142,146,158,159,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,184,188,191,198,199,202,209,215,217,221,227,228,234,236,238,257,260,265,268,270,272,275,276,278,281,282,283,299,300,301,305,306,308,319,322,325,],[41,41,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-94,-139,-3,-140,-141,-43,41,-48,41,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,-46,-37,-38,-52,-31,-83,-84,-85,-86,-87,-89,-2,-51,-130,-45,-97,-59,-72,-73,-74,-60,-61,-62,-63,-64,-65,-66,-67,-68,-70,-76,-71,-79,-93,-110,41,-32,-33,-134,41,-88,-105,-91,-109,41,-138,-129,-40,-100,-116,-115,-42,-50,-131,-124,-90,-135,-122,-39,-41,-123,-117,-125,-121,41,-47,41,-99,-98,]),'FOR':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,48,52,53,59,60,61,62,65,66,67,68,69,70,71,72,74,75,76,84,86,87,93,95,99,100,101,102,111,127,137,142,146,158,159,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,184,188,191,198,199,202,209,215,217,221,227,228,234,236,238,257,260,265,268,270,272,275,276,278,281,282,283,299,300,301,305,306,308,319,322,325,],[42,42,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-94,-139,-3,-140,-141,-43,42,-48,42,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,-46,-37,-38,-52,-31,-83,-84,-85,-86,-87,-89,-2,-51,-130,-45,-97,-59,-72,-73,-74,-60,-61,-62,-63,-64,-65,-66,-67,-68,-70,-76,-71,-79,-93,-110,42,-32,-33,-134,42,-88,-105,-91,-109,42,-138,-129,-40,-100,-116,-115,-42,-50,-131,-124,-90,-135,-122,-39,-41,-123,-117,-125,-121,42,-47,42,-99,-98,]),'TYPE':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,48,52,53,59,60,61,62,65,66,67,68,69,70,71,72,74,75,76,84,86,87,93,95,99,100,101,102,111,127,137,142,146,158,159,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,184,188,191,198,199,202,209,215,217,221,227,228,234,236,238,257,260,265,268,270,272,275,276,278,281,282,283,299,300,301,305,306,308,319,322,325,],[43,43,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-94,-139,-3,-140,-141,-43,43,-48,43,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,-46,-37,-38,-52,-31,-83,-84,-85,-86,-87,-89,-2,-51,-130,-45,-97,-59,-72,-73,-74,-60,-61,-62,-63,-64,-65,-66,-67,-68,-70,-76,-71,-79,-93,-110,43,-32,-33,-134,43,-88,-105,-91,-109,43,-138,-129,-40,-100,-116,-115,-42,-50,-131,-124,-90,-135,-122,-39,-41,-123,-117,-125,-121,43,-47,43,-99,-98,]),'SWITCH':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,48,52,53,59,60,61,62,65,66,67,68,69,70,71,72,74,75,76,84,86,87,93,95,99,100,101,102,111,127,137,142,146,158,159,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,184,188,191,198,199,202,209,215,217,221,227,228,234,236,238,257,260,265,268,270,272,275,276,278,281,282,283,299,300,301,305,306,308,319,322,325,],[44,44,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-94,-139,-3,-140,-141,-43,44,-48,44,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,-46,-37,-38,-52,-31,-83,-84,-85,-86,-87,-89,-2,-51,-130,-45,-97,-59,-72,-73,-74,-60,-61,-62,-63,-64,-65,-66,-67,-68,-70,-76,-71,-79,-93,-110,44,-32,-33,-134,44,-88,-105,-91,-109,44,-138,-129,-40,-100,-116,-115,-42,-50,-131,-124,-90,-135,-122,-39,-41,-123,-117,-125,-121,44,-47,44,-99,-98,]),'LBRACKET':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,48,50,52,53,55,59,60,61,62,65,66,67,68,69,70,71,72,74,75,76,84,86,87,88,93,95,96,97,99,100,101,102,111,126,127,137,140,142,146,158,159,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,182,184,188,191,194,198,199,202,209,210,215,217,221,227,228,234,236,238,257,260,265,268,270,272,275,276,278,281,282,283,299,300,301,305,306,308,319,322,325,],[40,40,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-94,-139,-3,89,-140,-141,98,-43,40,-48,40,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,-46,-37,-38,138,-52,-31,40,147,-83,-84,-85,-86,-87,183,-89,-2,195,-51,-130,-45,-97,-59,-72,-73,-74,-60,-61,-62,-63,-64,-65,-66,-67,-68,-70,-76,-71,-79,219,-93,-110,40,232,-32,-33,-134,40,243,-88,-105,-91,-109,40,-138,-129,-40,-100,-116,-115,-42,-50,-131,-124,-90,-135,-122,-39,-41,-123,-117,-125,-121,40,-47,40,-99,-98,]),'BREAK':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,48,52,53,59,60,61,62,65,66,67,68,69,70,71,72,74,75,76,84,86,87,93,95,99,100,101,102,111,127,137,142,146,158,159,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,184,188,191,198,199,202,209,215,217,221,227,228,234,236,238,257,260,265,268,270,272,275,276,278,281,282,283,299,300,301,305,306,308,319,322,325,],[45,45,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-94,-139,-3,-140,-141,-43,45,-48,45,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,-46,-37,-38,-52,-31,-83,-84,-85,-86,-87,-89,-2,-51,-130,-45,-97,-59,-72,-73,-74,-60,-61,-62,-63,-64,-65,-66,-67,-68,-70,-76,-71,-79,-93,-110,45,-32,-33,-134,45,-88,-105,-91,-109,45,-138,-129,-40,-100,-116,-115,-42,-50,-131,-124,-90,-135,-122,-39,-41,-123,-117,-125,-121,45,-47,45,-99,-98,]),'RETURN':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,48,52,53,59,60,61,62,65,66,67,68,69,70,71,72,74,75,76,84,86,87,93,95,99,100,101,102,111,127,137,142,146,158,159,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,184,188,191,198,199,202,209,215,217,221,227,228,234,236,238,257,260,265,268,270,272,275,276,278,281,282,283,299,300,301,305,306,308,319,322,325,],[46,46,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-94,-139,-3,-140,-141,-43,46,-48,46,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,-46,-37,-38,-52,-31,-83,-84,-85,-86,-87,-89,-2,-51,-130,-45,-97,-59,-72,-73,-74,-60,-61,-62,-63,-64,-65,-66,-67,-68,-70,-76,-71,-79,-93,-110,46,-32,-33,-134,46,-88,-105,-91,-109,46,-138,-129,-40,-100,-116,-115,-42,-50,-131,-124,-90,-135,-122,-39,-41,-123,-117,-125,-121,46,-47,46,-99,-98,]),'LPAREN':([5,6,37,41,42,44,46,49,50,51,58,67,73,77,80,90,91,103,104,105,112,113,114,115,116,117,118,119,120,121,123,124,129,130,135,143,144,145,151,163,179,214,216,231,237,241,273,279,304,317,320,321,],[47,51,57,73,73,73,73,73,73,73,107,51,73,126,51,140,141,150,151,152,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,51,51,73,73,73,73,269,73,73,73,51,73,73,]),'STRING':([5,41,42,44,46,47,49,50,51,73,112,113,114,115,116,117,118,119,120,121,123,124,129,130,135,143,144,145,150,151,214,216,231,237,273,277,279,302,303,304,320,321,],[48,70,70,70,70,85,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,203,205,70,70,70,70,70,293,70,310,312,70,70,70,]),'ASSIGN':([6,55,80,95,99,100,101,102,255,],[49,96,49,145,-83,-84,-85,-86,49,]),'ASIG':([6,80,95,99,100,101,102,255,],[50,130,144,-83,-84,-85,-86,130,]),'INCREMENT':([6,255,],[52,52,]),'DECREMENT':([6,255,],[53,53,]),'RBRACE':([8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,52,53,54,59,61,65,66,67,68,69,70,71,72,74,75,76,84,86,87,93,95,99,100,101,102,108,109,111,127,133,134,142,146,158,159,162,163,164,165,166,167,168,169,170,171,172,173,174,176,177,178,179,180,181,184,187,188,189,198,199,202,215,217,221,224,225,226,227,229,234,236,238,242,246,247,248,249,256,257,258,259,260,261,262,265,268,270,272,275,276,278,281,282,283,287,289,290,291,292,294,299,300,301,305,308,309,311,313,314,315,316,317,318,322,323,324,325,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-94,-139,-140,-141,-5,-43,-48,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,-46,-37,-38,-52,-31,-83,-84,-85,-86,158,159,-87,-89,188,-111,-51,-130,-45,-97,-59,-72,-73,-74,-60,-61,-62,-63,-64,-65,-66,-67,-68,217,-106,-70,-76,-71,-79,-93,227,-110,-112,-32,-33,-134,-88,-105,-91,257,-101,-104,-109,-114,-138,-129,-40,270,272,-132,-108,-107,-103,-100,-102,-113,-116,278,-136,-115,-42,-50,-131,-124,-90,-135,-122,-39,-41,-133,300,301,-118,-126,-137,-123,-117,-125,-121,-47,-119,-127,-69,-128,-34,-35,-36,322,-99,325,-120,-98,]),'CASE':([8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,52,53,54,59,61,65,66,67,68,69,70,71,72,74,75,76,83,84,86,87,93,95,99,100,101,102,111,127,132,134,142,146,158,159,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,184,188,198,199,202,215,217,221,227,229,234,236,238,257,259,260,265,268,270,272,275,276,278,281,282,283,299,300,301,305,308,322,325,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-94,-139,-140,-141,-5,-43,-48,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,135,-46,-37,-38,-52,-31,-83,-84,-85,-86,-87,-89,135,135,-51,-130,-45,-97,-59,-72,-73,-74,-60,-61,-62,-63,-64,-65,-66,-67,-68,-70,-76,-71,-79,-93,-110,-32,-33,-134,-88,-105,-91,-109,-114,-138,-129,-40,-100,-113,-116,-115,-42,-50,-131,-124,-90,-135,-122,-39,-41,-123,-117,-125,-121,-47,-99,-98,]),'DEFAULT':([8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,52,53,54,59,61,65,66,67,68,69,70,71,72,74,75,76,83,84,86,87,93,95,99,100,101,102,111,127,132,134,142,146,158,159,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,184,188,198,199,202,215,217,221,227,229,234,236,238,257,259,260,265,268,270,272,275,276,278,281,282,283,299,300,301,305,308,322,325,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-94,-139,-140,-141,-5,-43,-48,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,136,-46,-37,-38,-52,-31,-83,-84,-85,-86,-87,-89,136,136,-51,-130,-45,-97,-59,-72,-73,-74,-60,-61,-62,-63,-64,-65,-66,-67,-68,-70,-76,-71,-79,-93,-110,-32,-33,-134,-88,-105,-91,-109,-114,-138,-129,-40,-100,-113,-116,-115,-42,-50,-131,-124,-90,-135,-122,-39,-41,-123,-117,-125,-121,-47,-99,-98,]),'DOT':([35,],[56,]),'LBRACE':([38,39,44,52,53,64,65,66,67,68,69,70,71,72,74,75,76,78,80,82,86,87,93,99,100,101,102,128,131,142,155,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,193,211,217,244,252,253,254,260,275,296,298,299,307,317,],[60,62,83,-140,-141,62,-34,-35,122,-58,-69,-75,-77,-78,-80,-81,-82,-92,122,132,-37,-38,-52,-83,-84,-85,-86,62,186,-51,209,214,62,-59,122,-73,-74,-60,-61,-62,-63,-64,-65,-66,-67,-68,-70,122,-71,-79,231,-49,-105,-44,-95,-92,-96,277,-124,306,60,-123,319,122,]),'NUMBER':([40,41,42,44,46,49,50,51,73,98,112,113,114,115,116,117,118,119,120,121,123,124,129,130,135,143,144,145,151,214,216,231,237,273,279,304,320,321,],[63,65,65,65,65,65,65,65,65,148,164,164,65,65,65,65,65,65,65,65,164,164,65,65,65,65,65,65,65,65,65,65,65,65,65,315,164,65,]),'FLOAT':([41,42,44,46,49,50,51,73,112,113,114,115,116,117,118,119,120,121,123,124,129,130,135,143,144,145,151,214,216,231,237,273,279,304,320,321,],[66,66,66,66,66,66,66,66,165,165,66,66,66,66,66,66,66,66,165,165,66,66,66,66,66,66,66,66,66,66,66,66,66,316,165,66,]),'TRUE':([41,42,44,46,49,50,51,73,112,113,114,115,116,117,118,119,120,121,123,124,129,130,135,143,144,145,151,214,216,231,237,273,279,304,320,321,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'FALSE':([41,42,44,46,49,50,51,73,112,113,114,115,116,117,118,119,120,121,123,124,129,130,135,143,144,145,151,214,216,231,237,273,279,304,320,321,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'MAKE':([41,42,44,46,49,50,51,73,112,113,114,115,116,117,118,119,120,121,123,124,129,130,135,143,144,145,151,214,216,231,237,273,279,304,320,321,],[77,77,77,77,77,90,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'MAP':([50,55,126,140,155,],[88,97,182,194,210,]),'NEW':([50,],[91,]),'RPAREN':([51,65,66,67,68,69,70,71,72,74,75,76,85,92,93,94,99,100,101,102,107,125,142,153,156,157,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,196,197,204,205,208,217,240,245,251,264,266,267,269,275,285,288,295,299,],[93,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,137,142,-52,-56,-83,-84,-85,-86,155,181,-51,207,212,-53,-59,-72,-73,-74,-60,-61,-62,-63,-64,-65,-66,-67,-68,-70,-76,-71,-79,234,-57,238,-75,-55,-105,268,-54,275,281,282,283,284,-124,297,299,305,-123,]),'INT_TYPE':([55,99,100,101,102,110,138,139,147,149,154,155,186,201,212,219,220,223,225,226,230,232,233,235,243,256,274,280,284,286,297,],[99,-83,-84,-85,-86,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-104,99,99,99,99,99,-103,99,99,99,99,99,]),'FLOAT64_TYPE':([55,99,100,101,102,110,138,139,147,149,154,155,186,201,212,219,220,223,225,226,230,232,233,235,243,256,274,280,284,286,297,],[100,-83,-84,-85,-86,100,100,100,100,100,100,100,100,100,100,100,100,100,100,-104,100,100,100,100,100,-103,100,100,100,100,100,]),'STRING_TYPE':([55,99,100,101,102,110,138,139,147,149,154,155,186,201,212,219,220,223,225,226,230,232,233,235,243,256,274,280,284,286,297,],[101,-83,-84,-85,-86,101,101,101,101,101,101,101,101,101,101,101,101,101,101,-104,101,101,101,101,101,-103,101,101,101,101,101,]),'BOOL_TYPE':([55,99,100,101,102,110,138,139,147,149,154,155,186,201,212,219,220,223,225,226,230,232,233,235,243,256,274,280,284,286,297,],[102,-83,-84,-85,-86,102,102,102,102,102,102,102,102,102,102,102,102,102,102,-104,102,102,102,102,102,-103,102,102,102,102,102,]),'PRINTF':([56,],[103,]),'PRINTLN':([56,],[104,]),'SCANLN':([56,],[105,]),'RBRACKET':([63,89,98,99,100,101,102,148,183,192,195,200,250,263,271,],[110,139,149,-83,-84,-85,-86,201,220,230,233,235,274,280,286,]),'PLUS':([64,65,66,67,68,69,70,71,72,74,75,76,78,80,82,84,86,87,93,94,125,142,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,185,190,198,199,204,205,217,247,248,262,266,275,281,299,305,313,314,315,316,317,],[112,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,112,-36,112,112,112,112,-52,112,112,-51,-59,-72,-73,-74,-60,112,112,112,112,112,112,112,112,-70,-76,-71,-79,112,112,112,112,112,-75,-105,112,112,112,112,-124,-124,-123,-123,-69,112,-34,-35,-36,]),'MINUS':([64,65,66,67,68,69,70,71,72,74,75,76,78,80,82,84,86,87,93,94,125,142,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,185,190,198,199,204,205,217,247,248,262,266,275,281,299,305,313,314,315,316,317,],[113,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,113,-36,113,113,113,113,-52,113,113,-51,-59,-72,-73,-74,-60,113,113,113,113,113,113,113,113,-70,-76,-71,-79,113,113,113,113,113,-75,-105,113,113,113,113,-124,-124,-123,-123,-69,113,-34,-35,-36,]),'AND':([64,65,66,67,68,69,70,71,72,74,75,76,78,80,82,84,86,87,93,94,125,142,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,185,190,198,199,204,205,217,247,248,262,266,275,281,299,305,313,314,315,316,317,],[114,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,114,-36,114,114,114,114,-52,114,114,-51,-59,-72,-73,-74,-60,114,114,114,114,114,114,114,114,-70,-76,-71,-79,114,114,114,114,114,-75,-105,114,114,114,114,-124,-124,-123,-123,-69,114,-34,-35,-36,]),'OR':([64,65,66,67,68,69,70,71,72,74,75,76,78,80,82,84,86,87,93,94,125,142,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,185,190,198,199,204,205,217,247,248,262,266,275,281,299,305,313,314,315,316,317,],[115,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,115,-36,115,115,115,115,-52,115,115,-51,-59,-72,-73,-74,-60,115,115,115,115,115,115,115,115,-70,-76,-71,-79,115,115,115,115,115,-75,-105,115,115,115,115,-124,-124,-123,-123,-69,115,-34,-35,-36,]),'EQ':([64,65,66,67,68,69,70,71,72,74,75,76,78,80,82,84,86,87,93,94,125,142,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,185,190,198,199,204,205,217,247,248,262,266,275,281,299,305,313,314,315,316,317,],[116,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,116,-36,116,116,116,116,-52,116,116,-51,-59,-72,-73,-74,-60,116,116,116,116,116,116,116,116,-70,-76,-71,-79,116,116,116,116,116,-75,-105,116,116,116,116,-124,-124,-123,-123,-69,116,-34,-35,-36,]),'NE':([64,65,66,67,68,69,70,71,72,74,75,76,78,80,82,84,86,87,93,94,125,142,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,185,190,198,199,204,205,217,247,248,262,266,275,281,299,305,313,314,315,316,317,],[117,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,117,-36,117,117,117,117,-52,117,117,-51,-59,-72,-73,-74,-60,117,117,117,117,117,117,117,117,-70,-76,-71,-79,117,117,117,117,117,-75,-105,117,117,117,117,-124,-124,-123,-123,-69,117,-34,-35,-36,]),'LT':([64,65,66,67,68,69,70,71,72,74,75,76,78,80,82,84,86,87,93,94,125,142,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,185,190,198,199,204,205,217,247,248,262,266,275,281,299,305,313,314,315,316,317,],[118,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,118,-36,118,118,118,118,-52,118,118,-51,-59,-72,-73,-74,-60,118,118,118,118,118,118,118,118,-70,-76,-71,-79,118,118,118,118,118,-75,-105,118,118,118,118,-124,-124,-123,-123,-69,118,-34,-35,-36,]),'GT':([64,65,66,67,68,69,70,71,72,74,75,76,78,80,82,84,86,87,93,94,125,142,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,185,190,198,199,204,205,217,247,248,262,266,275,281,299,305,313,314,315,316,317,],[119,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,119,-36,119,119,119,119,-52,119,119,-51,-59,-72,-73,-74,-60,119,119,119,119,119,119,119,119,-70,-76,-71,-79,119,119,119,119,119,-75,-105,119,119,119,119,-124,-124,-123,-123,-69,119,-34,-35,-36,]),'LE':([64,65,66,67,68,69,70,71,72,74,75,76,78,80,82,84,86,87,93,94,125,142,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,185,190,198,199,204,205,217,247,248,262,266,275,281,299,305,313,314,315,316,317,],[120,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,120,-36,120,120,120,120,-52,120,120,-51,-59,-72,-73,-74,-60,120,120,120,120,120,120,120,120,-70,-76,-71,-79,120,120,120,120,120,-75,-105,120,120,120,120,-124,-124,-123,-123,-69,120,-34,-35,-36,]),'GE':([64,65,66,67,68,69,70,71,72,74,75,76,78,80,82,84,86,87,93,94,125,142,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,185,190,198,199,204,205,217,247,248,262,266,275,281,299,305,313,314,315,316,317,],[121,-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,121,-36,121,121,121,121,-52,121,121,-51,-59,-72,-73,-74,-60,121,121,121,121,121,121,121,121,-70,-76,-71,-79,121,121,121,121,121,-75,-105,121,121,121,121,-124,-124,-123,-123,-69,121,-34,-35,-36,]),'SEMICOLON':([65,66,67,68,69,70,71,72,74,75,76,79,86,87,93,142,162,163,164,165,166,167,168,169,170,171,172,173,174,178,179,180,181,185,217,275,299,],[-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,129,-37,-38,-52,-51,-59,-72,-73,-74,-60,-61,-62,-63,-64,-65,-66,-67,-68,-70,-76,-71,-79,222,-105,-124,-123,]),'COMMA':([65,66,67,68,69,70,71,72,74,75,76,93,94,99,100,101,102,142,157,162,163,164,165,166,167,168,169,170,171,172,173,174,177,178,179,180,181,203,205,208,217,247,248,262,275,291,292,299,313,314,315,316,317,324,],[-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,-52,143,-83,-84,-85,-86,-51,213,-59,-72,-73,-74,-60,-61,-62,-63,-64,-65,-66,-67,-68,218,-70,-76,-71,-79,237,239,-55,-105,273,-108,279,-124,302,303,-123,-69,-128,-34,-35,-36,-120,]),'COLON':([65,66,67,68,69,70,71,72,74,75,76,93,136,142,162,163,164,165,166,167,168,169,170,171,172,173,174,175,178,179,180,181,190,217,275,293,299,310,312,],[-34,-35,-36,-58,-69,-75,-77,-78,-80,-81,-82,-52,191,-51,-59,-72,-73,-74,-60,-61,-62,-63,-64,-65,-66,-67,-68,216,-70,-76,-71,-79,228,-105,-124,304,-123,320,321,]),'TIMES':([65,66,67,68,69,70,71,72,74,75,76,80,93,142,162,163,164,165,166,178,179,180,181,205,217,275,281,299,305,313,315,316,317,],[-73,-74,-72,123,-69,-75,-77,-78,-80,-81,-82,-72,-52,-51,123,-72,-73,-74,123,-70,-76,-71,-79,-75,-105,-124,-124,-123,-123,-69,-73,-74,-72,]),'DIVIDE':([65,66,67,68,69,70,71,72,74,75,76,80,93,142,162,163,164,165,166,178,179,180,181,205,217,275,281,299,305,313,315,316,317,],[-73,-74,-72,124,-69,-75,-77,-78,-80,-81,-82,-72,-52,-51,124,-72,-73,-74,124,-70,-76,-71,-79,-75,-105,-124,-124,-123,-123,-69,-73,-74,-72,]),'STRUCT':([81,],[131,]),'ELSE':([111,159,],[161,-97,]),'AMPER':([152,],[206,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'import_stmt':([3,],[4,]),'program':([4,8,60,62,191,209,228,306,319,],[7,54,108,109,229,242,259,318,323,]),'statement':([4,8,60,62,191,209,228,306,319,],[8,8,8,8,8,8,8,8,8,]),'declaration':([4,8,60,62,191,209,228,306,319,],[9,9,9,9,9,9,9,9,9,]),'assignment':([4,8,42,60,62,191,209,222,228,306,319,],[10,10,79,10,10,10,10,252,10,10,10,]),'print_stmt':([4,8,60,62,191,209,228,306,319,],[11,11,11,11,11,11,11,11,11,]),'input_stmt':([4,8,60,62,191,209,228,306,319,],[12,12,12,12,12,12,12,12,12,]),'continue_stmt':([4,8,60,62,191,209,228,306,319,],[13,13,13,13,13,13,13,13,13,]),'struct_method':([4,8,60,62,191,209,228,306,319,],[14,14,14,14,14,14,14,14,14,]),'func_def':([4,8,60,62,191,209,228,306,319,],[15,15,15,15,15,15,15,15,15,]),'func_no_params':([4,8,60,62,191,209,228,306,319,],[16,16,16,16,16,16,16,16,16,]),'func_no_params_void':([4,8,60,62,191,209,228,306,319,],[17,17,17,17,17,17,17,17,17,]),'func_with_map':([4,8,60,62,191,209,228,306,319,],[18,18,18,18,18,18,18,18,18,]),'func_call':([4,8,41,42,44,46,49,50,51,60,62,73,112,113,114,115,116,117,118,119,120,121,123,124,129,130,135,143,144,145,151,191,209,214,216,228,231,237,273,279,304,306,319,320,321,],[19,19,76,76,76,76,76,76,76,19,19,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,19,19,76,76,19,76,76,76,76,76,19,19,76,76,]),'if_stmt':([4,8,60,62,191,209,228,306,319,],[20,20,20,20,20,20,20,20,20,]),'for_stmt':([4,8,60,62,191,209,228,306,319,],[21,21,21,21,21,21,21,21,21,]),'struct_def':([4,8,60,62,191,209,228,306,319,],[22,22,22,22,22,22,22,22,22,]),'switch_stmt':([4,8,60,62,191,209,228,306,319,],[23,23,23,23,23,23,23,23,23,]),'map_declaration':([4,8,60,62,191,209,228,306,319,],[24,24,24,24,24,24,24,24,24,]),'map_declaration_values':([4,8,60,62,191,209,228,306,319,],[25,25,25,25,25,25,25,25,25,]),'array_declaration':([4,8,60,62,191,209,228,306,319,],[26,26,26,26,26,26,26,26,26,]),'array_literal':([4,8,60,62,96,191,209,228,306,319,],[27,27,27,27,146,27,27,27,27,27,]),'slice_declaration':([4,8,60,62,191,209,228,306,319,],[28,28,28,28,28,28,28,28,28,]),'make_stmt':([4,8,60,62,191,209,228,306,319,],[29,29,29,29,29,29,29,29,29,]),'new_stmt':([4,8,60,62,191,209,228,306,319,],[30,30,30,30,30,30,30,30,30,]),'break_stmt':([4,8,60,62,191,209,228,306,319,],[31,31,31,31,31,31,31,31,31,]),'increment_stmt':([4,8,60,62,191,209,222,228,306,319,],[32,32,32,32,32,32,254,32,32,32,]),'return_stmt':([4,8,60,62,191,209,228,306,319,],[33,33,33,33,33,33,33,33,33,]),'func_header':([4,8,60,62,191,209,228,306,319,],[38,38,38,38,38,38,38,38,38,]),'func_header_no_params':([4,8,60,62,191,209,228,306,319,],[39,39,39,39,39,39,39,39,39,]),'func_body':([38,298,],[59,308,]),'block':([39,64,128,161,],[61,111,184,215,]),'expression':([41,42,44,46,49,50,51,73,114,115,116,117,118,119,120,121,129,130,135,143,144,145,151,214,216,231,237,273,279,304,321,],[64,78,82,84,86,87,94,125,167,168,169,170,171,172,173,174,185,87,190,94,198,199,204,247,248,262,266,247,262,314,314,]),'term':([41,42,44,46,49,50,51,73,112,113,114,115,116,117,118,119,120,121,129,130,135,143,144,145,151,214,216,231,237,273,279,304,321,],[68,68,68,68,68,68,68,68,162,166,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'factor':([41,42,44,46,49,50,51,73,112,113,114,115,116,117,118,119,120,121,123,124,129,130,135,143,144,145,151,214,216,231,237,273,279,304,320,321,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,178,180,69,69,69,69,69,69,69,69,69,69,69,69,69,313,324,69,]),'make_expr':([41,42,44,46,49,50,51,73,112,113,114,115,116,117,118,119,120,121,123,124,129,130,135,143,144,145,151,214,216,231,237,273,279,304,320,321,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'struct_instance':([41,42,44,46,49,50,51,73,112,113,114,115,116,117,118,119,120,121,123,124,129,130,135,143,144,145,151,214,216,231,237,273,279,304,320,321,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'arg_list':([51,143,],[92,197,]),'type':([55,110,138,139,147,149,154,155,186,201,212,219,220,223,225,230,232,233,235,243,274,280,284,286,297,],[95,160,192,193,200,202,208,211,226,236,244,250,251,256,226,260,263,264,265,271,288,295,296,298,307,]),'for_block':([78,253,],[127,276,]),'begin_loop':([78,253,],[128,128,]),'case_list':([83,132,134,],[133,187,189,]),'case_clause':([83,132,134,],[134,134,134,]),'param_list':([107,213,269,],[156,245,285,]),'param':([107,213,269,],[157,157,157,]),'struct_fields_values':([122,218,],[176,249,]),'field_value':([122,218,],[177,177,]),'end_loop':([184,],[221,]),'struct_fields':([186,225,],[224,258,]),'struct_field':([186,225,],[225,225,]),'array_values':([214,273,],[246,287,]),'for_update':([222,],[253,]),'slice_values':([231,279,],[261,294,]),'map_params':([277,302,],[289,309,]),'map_kv_pairs':([277,303,],[290,311,]),'map_param':([277,302,],[291,291,]),'map_kv_pair':([277,303,],[292,292,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> PACKAGE VARIABLE import_stmt program','start',4,'p_start','parser.py',69),
  ('import_stmt -> IMPORT LPAREN STRING RPAREN','import_stmt',4,'p_import_function','parser.py',75),
  ('import_stmt -> IMPORT STRING','import_stmt',2,'p_import_function','parser.py',76),
  ('program -> statement','program',1,'p_program','parser.py',80),
  ('program -> statement program','program',2,'p_program','parser.py',81),
  ('statement -> declaration','statement',1,'p_statement','parser.py',86),
  ('statement -> assignment','statement',1,'p_statement','parser.py',87),
  ('statement -> print_stmt','statement',1,'p_statement','parser.py',88),
  ('statement -> input_stmt','statement',1,'p_statement','parser.py',89),
  ('statement -> continue_stmt','statement',1,'p_statement','parser.py',90),
  ('statement -> struct_method','statement',1,'p_statement','parser.py',91),
  ('statement -> func_def','statement',1,'p_statement','parser.py',92),
  ('statement -> func_no_params','statement',1,'p_statement','parser.py',93),
  ('statement -> func_no_params_void','statement',1,'p_statement','parser.py',94),
  ('statement -> func_with_map','statement',1,'p_statement','parser.py',95),
  ('statement -> func_call','statement',1,'p_statement','parser.py',96),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',97),
  ('statement -> for_stmt','statement',1,'p_statement','parser.py',98),
  ('statement -> struct_def','statement',1,'p_statement','parser.py',99),
  ('statement -> switch_stmt','statement',1,'p_statement','parser.py',100),
  ('statement -> map_declaration','statement',1,'p_statement','parser.py',101),
  ('statement -> map_declaration_values','statement',1,'p_statement','parser.py',102),
  ('statement -> array_declaration','statement',1,'p_statement','parser.py',103),
  ('statement -> array_literal','statement',1,'p_statement','parser.py',104),
  ('statement -> slice_declaration','statement',1,'p_statement','parser.py',105),
  ('statement -> make_stmt','statement',1,'p_statement','parser.py',106),
  ('statement -> new_stmt','statement',1,'p_statement','parser.py',107),
  ('statement -> break_stmt','statement',1,'p_statement','parser.py',108),
  ('statement -> increment_stmt','statement',1,'p_statement','parser.py',109),
  ('statement -> return_stmt','statement',1,'p_statement','parser.py',110),
  ('declaration -> VAR VARIABLE type','declaration',3,'p_declaration','parser.py',116),
  ('declaration -> VAR VARIABLE type ASIG expression','declaration',5,'p_declaration','parser.py',117),
  ('declaration -> VAR VARIABLE type ASSIGN expression','declaration',5,'p_declaration','parser.py',118),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',141),
  ('expression -> FLOAT','expression',1,'p_expression_float','parser.py',145),
  ('expression -> VARIABLE','expression',1,'p_expression_variable','parser.py',149),
  ('assignment -> VARIABLE ASSIGN expression','assignment',3,'p_assignment','parser.py',163),
  ('assignment -> VARIABLE ASIG expression','assignment',3,'p_assignment','parser.py',164),
  ('print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN','print_stmt',8,'p_print_stmt','parser.py',204),
  ('print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN','print_stmt',6,'p_print_stmt','parser.py',205),
  ('print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN','print_stmt',8,'p_print_stmt','parser.py',206),
  ('input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN','input_stmt',7,'p_input_stmt','parser.py',234),
  ('func_def -> func_header func_body','func_def',2,'p_func_def','parser.py',239),
  ('func_header -> FUNC VARIABLE LPAREN param_list RPAREN type','func_header',6,'p_func_header','parser.py',243),
  ('func_body -> LBRACE program RBRACE','func_body',3,'p_func_body','parser.py',253),
  ('return_stmt -> RETURN expression','return_stmt',2,'p_return_stmt','parser.py',261),
  ('func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body','func_with_map',10,'p_func_def_with_map','parser.py',280),
  ('func_no_params -> func_header_no_params block','func_no_params',2,'p_func_def_no_params','parser.py',285),
  ('func_header_no_params -> FUNC VARIABLE LPAREN RPAREN type','func_header_no_params',5,'p_func_header_no_params','parser.py',293),
  ('func_no_params_void -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE','func_no_params_void',7,'p_func_def_no_params_void','parser.py',303),
  ('func_call -> VARIABLE LPAREN arg_list RPAREN','func_call',4,'p_func_call','parser.py',308),
  ('func_call -> VARIABLE LPAREN RPAREN','func_call',3,'p_func_call','parser.py',309),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',317),
  ('param_list -> param COMMA param_list','param_list',3,'p_param_list','parser.py',318),
  ('param -> VARIABLE type','param',2,'p_param','parser.py',327),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',341),
  ('arg_list -> expression COMMA arg_list','arg_list',3,'p_arg_list','parser.py',342),
  ('expression -> term','expression',1,'p_expression','parser.py',352),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',353),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',354),
  ('expression -> expression AND expression','expression',3,'p_expression','parser.py',355),
  ('expression -> expression OR expression','expression',3,'p_expression','parser.py',356),
  ('expression -> expression EQ expression','expression',3,'p_expression','parser.py',357),
  ('expression -> expression NE expression','expression',3,'p_expression','parser.py',358),
  ('expression -> expression LT expression','expression',3,'p_expression','parser.py',359),
  ('expression -> expression GT expression','expression',3,'p_expression','parser.py',360),
  ('expression -> expression LE expression','expression',3,'p_expression','parser.py',361),
  ('expression -> expression GE expression','expression',3,'p_expression','parser.py',362),
  ('term -> factor','term',1,'p_term','parser.py',392),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',393),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',394),
  ('term -> VARIABLE','term',1,'p_term_variable','parser.py',409),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',420),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',421),
  ('factor -> STRING','factor',1,'p_factor','parser.py',422),
  ('factor -> VARIABLE','factor',1,'p_factor','parser.py',423),
  ('factor -> TRUE','factor',1,'p_factor','parser.py',424),
  ('factor -> FALSE','factor',1,'p_factor','parser.py',425),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',426),
  ('factor -> make_expr','factor',1,'p_factor','parser.py',427),
  ('factor -> struct_instance','factor',1,'p_factor','parser.py',428),
  ('factor -> func_call','factor',1,'p_factor','parser.py',429),
  ('type -> INT_TYPE','type',1,'p_type','parser.py',453),
  ('type -> FLOAT64_TYPE','type',1,'p_type','parser.py',454),
  ('type -> STRING_TYPE','type',1,'p_type','parser.py',455),
  ('type -> BOOL_TYPE','type',1,'p_type','parser.py',456),
  ('if_stmt -> IF expression block','if_stmt',3,'p_if_stmt','parser.py',461),
  ('if_stmt -> IF expression block ELSE block','if_stmt',5,'p_if_stmt','parser.py',462),
  ('for_stmt -> FOR expression for_block','for_stmt',3,'p_for_stmt','parser.py',471),
  ('for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update for_block','for_stmt',7,'p_for_stmt','parser.py',472),
  ('for_block -> begin_loop block end_loop','for_block',3,'p_for_block','parser.py',476),
  ('begin_loop -> <empty>','begin_loop',0,'p_begin_lop','parser.py',480),
  ('end_loop -> <empty>','end_loop',0,'p_end_loop','parser.py',484),
  ('continue_stmt -> CONTINUE','continue_stmt',1,'p_continue_stmt','parser.py',489),
  ('for_update -> assignment','for_update',1,'p_for_update','parser.py',495),
  ('for_update -> increment_stmt','for_update',1,'p_for_update','parser.py',496),
  ('block -> LBRACE program RBRACE','block',3,'p_block','parser.py',501),
  ('struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE','struct_method',13,'p_struct_method','parser.py',506),
  ('struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE','struct_method',12,'p_struct_method','parser.py',507),
  ('struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE','struct_def',6,'p_struct_def','parser.py',512),
  ('struct_fields -> struct_field','struct_fields',1,'p_struct_fields','parser.py',517),
  ('struct_fields -> struct_field struct_fields','struct_fields',2,'p_struct_fields','parser.py',518),
  ('struct_field -> VARIABLE type','struct_field',2,'p_struct_field','parser.py',523),
  ('struct_field -> type','struct_field',1,'p_struct_field','parser.py',524),
  ('struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE','struct_instance',4,'p_struct_instance','parser.py',529),
  ('struct_fields_values -> field_value','struct_fields_values',1,'p_struct_fields_values','parser.py',533),
  ('struct_fields_values -> field_value COMMA struct_fields_values','struct_fields_values',3,'p_struct_fields_values','parser.py',534),
  ('field_value -> VARIABLE COLON expression','field_value',3,'p_field_value','parser.py',538),
  ('switch_stmt -> SWITCH expression LBRACE case_list RBRACE','switch_stmt',5,'p_switch_stmt','parser.py',542),
  ('switch_stmt -> SWITCH LBRACE case_list RBRACE','switch_stmt',4,'p_switch_stmt','parser.py',543),
  ('case_list -> case_clause','case_list',1,'p_case_list','parser.py',547),
  ('case_list -> case_clause case_list','case_list',2,'p_case_list','parser.py',548),
  ('case_clause -> CASE expression COLON program','case_clause',4,'p_case_clause','parser.py',552),
  ('case_clause -> DEFAULT COLON program','case_clause',3,'p_case_clause','parser.py',553),
  ('map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type','map_declaration',7,'p_map_declaration','parser.py',559),
  ('map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type','map_declaration',7,'p_map_declaration','parser.py',560),
  ('map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE','map_declaration',10,'p_map_declaration','parser.py',561),
  ('map_params -> map_param','map_params',1,'p_map_params','parser.py',565),
  ('map_params -> map_param COMMA map_params','map_params',3,'p_map_params','parser.py',566),
  ('map_param -> STRING COLON factor','map_param',3,'p_map_param','parser.py',570),
  ('make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN','make_stmt',10,'p_make_stmt','parser.py',575),
  ('make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN','make_stmt',8,'p_make_stmt','parser.py',576),
  ('make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN','make_expr',8,'p_make_expr','parser.py',580),
  ('make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN','make_expr',6,'p_make_expr','parser.py',581),
  ('map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE','map_declaration_values',10,'p_map_literal_declaration','parser.py',593),
  ('map_kv_pairs -> map_kv_pair','map_kv_pairs',1,'p_map_kv_pairs','parser.py',603),
  ('map_kv_pairs -> map_kv_pair COMMA map_kv_pairs','map_kv_pairs',3,'p_map_kv_pairs','parser.py',604),
  ('map_kv_pair -> STRING COLON expression','map_kv_pair',3,'p_map_kv_pair','parser.py',608),
  ('array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type','array_declaration',6,'p_array_declaration','parser.py',613),
  ('array_declaration -> VAR VARIABLE ASSIGN array_literal','array_declaration',4,'p_array_declaration','parser.py',614),
  ('array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE','array_literal',7,'p_array_literal','parser.py',638),
  ('array_values -> expression','array_values',1,'p_array_values','parser.py',654),
  ('array_values -> expression COMMA array_values','array_values',3,'p_array_values','parser.py',655),
  ('slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type','slice_declaration',5,'p_slice_declaration','parser.py',665),
  ('slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE','slice_declaration',8,'p_slice_declaration','parser.py',666),
  ('slice_values -> expression','slice_values',1,'p_slice_values','parser.py',670),
  ('slice_values -> expression COMMA slice_values','slice_values',3,'p_slice_values','parser.py',671),
  ('new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN','new_stmt',6,'p_new_stmt','parser.py',676),
  ('break_stmt -> BREAK','break_stmt',1,'p_break_stmt','parser.py',681),
  ('increment_stmt -> VARIABLE INCREMENT','increment_stmt',2,'p_increment_stmt','parser.py',688),
  ('increment_stmt -> VARIABLE DECREMENT','increment_stmt',2,'p_increment_stmt','parser.py',689),
]
