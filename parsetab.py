
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'startAMPER AND ASIG ASSIGN BOOL_TYPE BREAK CASE COLON COMMA CONTINUE DECREMENT DEFAULT DIVIDE DOT ELSE EQ FALSE FLOAT FLOAT64_TYPE FMT FOR FUNC GE GT IF IMPORT INCREMENT INT_TYPE LBRACE LBRACKET LE LPAREN LT MAKE MAP MINUS MOD NE NEW NOT NUMBER OR PACKAGE PLUS PRINT PRINTF PRINTLN RANGE RBRACE RBRACKET RETURN RPAREN SCANLN SEMICOLON STRING STRING_TYPE STRUCT SWITCH TIMES TRUE TYPE UINT VAR VARIABLEstart : PACKAGE VARIABLE import_stmt programimport_stmt : IMPORT LPAREN STRING RPAREN\n                    | IMPORT STRINGprogram : statement\n               | statement programstatement : declaration\n                 | assignment\n                 | print_stmt\n                 | input_stmt\n                 | continue_stmt\n                 | struct_method\n                 | func_def\n                 | func_no_params\n                 | func_no_params_void\n                 | func_with_map\n                 | func_call\n                 | if_stmt\n                 | for_stmt\n                 | struct_def\n                 | switch_stmt\n                 | map_declaration\n                 | map_declaration_values\n                 | array_declaration\n                 | array_literal\n                 | slice_declaration\n                 | make_stmt\n                 | new_stmt\n                 | break_stmt\n                 | increment_stmt\n                 | return_stmtdeclaration : VAR VARIABLE type \n                   | VAR VARIABLE type ASIG expression\n                   | VAR VARIABLE type ASSIGN expressiondeclaration : VAR id_list type ASSIGN expr_list\n                   | VAR id_list type ASIG expr_listdeclaration : VAR id_list ASSIGN expr_list\n                   | VAR id_list ASIG expr_listid_list : VARIABLE\n               | VARIABLE COMMA id_listexpr_list : expression\n                 | expression COMMA expr_listassignment : VARIABLE ASSIGN expression\n                  | VARIABLE ASIG expression\n                  print_stmt : FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN\n                  | FMT DOT PRINTLN LPAREN expression RPAREN\n                  | FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPARENinput_stmt : FMT DOT SCANLN LPAREN AMPER VARIABLE RPARENfunc_def : func_header func_bodyfunc_header : FUNC VARIABLE LPAREN param_list RPAREN type func_body : LBRACE program RBRACEreturn_stmt : RETURN expressionfunc_with_map : FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type  func_body  func_no_params : func_header_no_params blockfunc_header_no_params : FUNC VARIABLE LPAREN RPAREN typefunc_no_params_void : FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACEfunc_call : VARIABLE LPAREN arg_list RPAREN\n                 | VARIABLE LPAREN RPARENparam_list : param\n                  | param COMMA param_listparam : VARIABLE typearg_list : expression\n                | expression COMMA arg_listexpression : term\n                  | expression PLUS term\n                  | expression MINUS term\n                  | expression AND expression\n                  | expression OR expression\n                  | expression EQ expression\n                  | expression NE expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression LE expression\n                  | expression GE expressionterm : factor\n            | term TIMES factor\n            | term DIVIDE factorterm : VARIABLEfactor : NUMBER\n              | FLOAT\n              | STRING\n              | VARIABLE\n              | TRUE\n              | FALSE\n              | LPAREN expression RPAREN\n              | make_expr\n              | struct_instance\n              | func_calltype : INT_TYPE\n            | FLOAT64_TYPE\n            | STRING_TYPE\n            | BOOL_TYPEif_stmt : IF expression block\n               | IF expression block ELSE blockfor_stmt : FOR expression for_block\n                | FOR assignment SEMICOLON expression SEMICOLON for_update for_blockfor_block : begin_loop block end_loopbegin_loop :end_loop :continue_stmt : CONTINUEfor_update : assignment\n                  | increment_stmtblock : LBRACE program RBRACEstruct_method : FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE\n                     | FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACEstruct_def : TYPE VARIABLE STRUCT LBRACE struct_fields RBRACEstruct_fields : struct_field\n                     | struct_field struct_fieldsstruct_field : VARIABLE type\n                    | typestruct_instance : VARIABLE LBRACE struct_fields_values RBRACEstruct_fields_values : field_value\n                            | field_value COMMA struct_fields_valuesfield_value : VARIABLE COLON expressionswitch_stmt : SWITCH expression LBRACE case_list RBRACE\n                   | SWITCH LBRACE case_list RBRACEcase_list : case_clause\n                 | case_clause case_listcase_clause : CASE expression COLON program\n                   | DEFAULT COLON programmap_declaration : VAR VARIABLE MAP LBRACKET type RBRACKET type\n                       | VARIABLE ASIG MAP LBRACKET type RBRACKET type\n                       | VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE  map_params RBRACEmap_params : map_param\n                    | map_param COMMA map_paramsmap_param : STRING COLON factormake_stmt : VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN\n                 | VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPARENmake_expr : MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN\n                 | MAKE LPAREN LBRACKET RBRACKET type RPARENmap_declaration_values : VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACEmap_kv_pairs : map_kv_pair\n                    | map_kv_pair COMMA map_kv_pairsmap_kv_pair : STRING COLON expressionarray_declaration : VAR VARIABLE LBRACKET NUMBER RBRACKET type\n                         | VAR VARIABLE ASSIGN array_literalarray_literal : LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACEarray_values : expression\n                    | expression COMMA array_valuesslice_declaration : VAR VARIABLE LBRACKET RBRACKET type\n                         | VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACEslice_values : expression\n                    | expression COMMA slice_valuesnew_stmt : VARIABLE ASIG NEW LPAREN VARIABLE RPARENbreak_stmt : BREAKincrement_stmt : VARIABLE INCREMENT\n                      | VARIABLE DECREMENT'
    
_lr_action_items = {'PACKAGE':([0,],[2,]),'$end':([1,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,52,53,54,60,62,66,67,68,69,70,71,72,73,75,76,77,85,87,88,94,96,101,102,103,104,116,132,147,151,159,160,161,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,190,193,197,207,208,211,212,213,227,229,233,239,246,248,249,251,270,273,278,281,283,285,288,289,291,294,295,296,312,313,314,318,321,333,336,],[0,-1,-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-99,-144,-145,-146,-5,-48,-53,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,-51,-42,-43,-57,-31,-88,-89,-90,-91,-92,-94,-56,-135,-36,-40,-37,-50,-102,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-75,-81,-76,-84,-98,-115,-32,-33,-139,-34,-35,-93,-110,-96,-114,-143,-134,-41,-45,-105,-121,-120,-47,-55,-136,-129,-95,-140,-127,-44,-46,-128,-122,-130,-126,-52,-104,-103,]),'VARIABLE':([2,4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,41,42,43,44,45,46,48,49,50,51,52,53,58,60,61,62,63,66,67,68,69,70,71,72,73,74,75,76,77,85,87,88,94,96,100,101,102,103,104,106,107,111,112,116,117,118,119,120,121,122,123,124,125,126,127,128,129,132,134,135,140,142,146,147,148,149,150,151,157,158,159,160,161,163,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,190,193,195,197,200,207,208,211,212,213,214,218,219,221,225,226,227,228,229,230,233,234,237,238,239,240,243,246,248,249,250,251,252,269,270,273,278,281,282,283,285,286,288,289,291,292,294,295,296,312,313,314,317,318,319,321,330,331,332,333,336,],[3,6,6,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,55,-99,59,68,81,82,68,-144,68,-3,68,68,68,-145,-146,111,-48,6,-53,6,-63,-74,-77,-78,-79,-80,-82,-83,68,-85,-86,-87,-51,-42,-43,-57,-31,155,-88,-89,-90,-91,68,68,165,166,-92,68,68,68,68,68,68,68,68,68,68,185,185,187,-94,68,68,68,-2,205,-56,68,68,68,-135,68,68,-36,-40,-37,68,-50,-102,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-75,-81,-76,-84,-98,235,-115,6,-32,-33,-139,-34,-35,68,253,254,6,166,68,-93,68,-110,187,-96,268,235,-109,-114,6,68,-143,-134,-41,68,-45,280,-108,-105,-121,-120,-47,166,-55,-136,68,-129,-95,-140,68,-127,-44,-46,-128,-122,-130,328,-126,6,-52,6,185,68,-104,-103,]),'IMPORT':([3,],[5,]),'VAR':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,48,52,53,60,61,62,63,66,67,68,69,70,71,72,73,75,76,77,85,87,88,94,96,101,102,103,104,116,132,142,147,151,159,160,161,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,190,193,197,200,207,208,211,212,213,221,227,229,233,239,240,246,248,249,251,270,273,278,281,283,285,288,289,291,294,295,296,312,313,314,318,319,321,330,333,336,],[34,34,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-99,-144,-3,-145,-146,-48,34,-53,34,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,-51,-42,-43,-57,-31,-88,-89,-90,-91,-92,-94,-2,-56,-135,-36,-40,-37,-50,-102,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-75,-81,-76,-84,-98,-115,34,-32,-33,-139,-34,-35,34,-93,-110,-96,-114,34,-143,-134,-41,-45,-105,-121,-120,-47,-55,-136,-129,-95,-140,-127,-44,-46,-128,-122,-130,-126,34,-52,34,-104,-103,]),'FMT':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,48,52,53,60,61,62,63,66,67,68,69,70,71,72,73,75,76,77,85,87,88,94,96,101,102,103,104,116,132,142,147,151,159,160,161,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,190,193,197,200,207,208,211,212,213,221,227,229,233,239,240,246,248,249,251,270,273,278,281,283,285,288,289,291,294,295,296,312,313,314,318,319,321,330,333,336,],[35,35,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-99,-144,-3,-145,-146,-48,35,-53,35,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,-51,-42,-43,-57,-31,-88,-89,-90,-91,-92,-94,-2,-56,-135,-36,-40,-37,-50,-102,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-75,-81,-76,-84,-98,-115,35,-32,-33,-139,-34,-35,35,-93,-110,-96,-114,35,-143,-134,-41,-45,-105,-121,-120,-47,-55,-136,-129,-95,-140,-127,-44,-46,-128,-122,-130,-126,35,-52,35,-104,-103,]),'CONTINUE':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,48,52,53,60,61,62,63,66,67,68,69,70,71,72,73,75,76,77,85,87,88,94,96,101,102,103,104,116,132,142,147,151,159,160,161,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,190,193,197,200,207,208,211,212,213,221,227,229,233,239,240,246,248,249,251,270,273,278,281,283,285,288,289,291,294,295,296,312,313,314,318,319,321,330,333,336,],[36,36,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-99,-144,-3,-145,-146,-48,36,-53,36,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,-51,-42,-43,-57,-31,-88,-89,-90,-91,-92,-94,-2,-56,-135,-36,-40,-37,-50,-102,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-75,-81,-76,-84,-98,-115,36,-32,-33,-139,-34,-35,36,-93,-110,-96,-114,36,-143,-134,-41,-45,-105,-121,-120,-47,-55,-136,-129,-95,-140,-127,-44,-46,-128,-122,-130,-126,36,-52,36,-104,-103,]),'FUNC':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,48,52,53,60,61,62,63,66,67,68,69,70,71,72,73,75,76,77,85,87,88,94,96,101,102,103,104,116,132,142,147,151,159,160,161,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,190,193,197,200,207,208,211,212,213,221,227,229,233,239,240,246,248,249,251,270,273,278,281,283,285,288,289,291,294,295,296,312,313,314,318,319,321,330,333,336,],[37,37,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-99,-144,-3,-145,-146,-48,37,-53,37,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,-51,-42,-43,-57,-31,-88,-89,-90,-91,-92,-94,-2,-56,-135,-36,-40,-37,-50,-102,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-75,-81,-76,-84,-98,-115,37,-32,-33,-139,-34,-35,37,-93,-110,-96,-114,37,-143,-134,-41,-45,-105,-121,-120,-47,-55,-136,-129,-95,-140,-127,-44,-46,-128,-122,-130,-126,37,-52,37,-104,-103,]),'IF':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,48,52,53,60,61,62,63,66,67,68,69,70,71,72,73,75,76,77,85,87,88,94,96,101,102,103,104,116,132,142,147,151,159,160,161,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,190,193,197,200,207,208,211,212,213,221,227,229,233,239,240,246,248,249,251,270,273,278,281,283,285,288,289,291,294,295,296,312,313,314,318,319,321,330,333,336,],[41,41,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-99,-144,-3,-145,-146,-48,41,-53,41,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,-51,-42,-43,-57,-31,-88,-89,-90,-91,-92,-94,-2,-56,-135,-36,-40,-37,-50,-102,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-75,-81,-76,-84,-98,-115,41,-32,-33,-139,-34,-35,41,-93,-110,-96,-114,41,-143,-134,-41,-45,-105,-121,-120,-47,-55,-136,-129,-95,-140,-127,-44,-46,-128,-122,-130,-126,41,-52,41,-104,-103,]),'FOR':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,48,52,53,60,61,62,63,66,67,68,69,70,71,72,73,75,76,77,85,87,88,94,96,101,102,103,104,116,132,142,147,151,159,160,161,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,190,193,197,200,207,208,211,212,213,221,227,229,233,239,240,246,248,249,251,270,273,278,281,283,285,288,289,291,294,295,296,312,313,314,318,319,321,330,333,336,],[42,42,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-99,-144,-3,-145,-146,-48,42,-53,42,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,-51,-42,-43,-57,-31,-88,-89,-90,-91,-92,-94,-2,-56,-135,-36,-40,-37,-50,-102,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-75,-81,-76,-84,-98,-115,42,-32,-33,-139,-34,-35,42,-93,-110,-96,-114,42,-143,-134,-41,-45,-105,-121,-120,-47,-55,-136,-129,-95,-140,-127,-44,-46,-128,-122,-130,-126,42,-52,42,-104,-103,]),'TYPE':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,48,52,53,60,61,62,63,66,67,68,69,70,71,72,73,75,76,77,85,87,88,94,96,101,102,103,104,116,132,142,147,151,159,160,161,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,190,193,197,200,207,208,211,212,213,221,227,229,233,239,240,246,248,249,251,270,273,278,281,283,285,288,289,291,294,295,296,312,313,314,318,319,321,330,333,336,],[43,43,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-99,-144,-3,-145,-146,-48,43,-53,43,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,-51,-42,-43,-57,-31,-88,-89,-90,-91,-92,-94,-2,-56,-135,-36,-40,-37,-50,-102,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-75,-81,-76,-84,-98,-115,43,-32,-33,-139,-34,-35,43,-93,-110,-96,-114,43,-143,-134,-41,-45,-105,-121,-120,-47,-55,-136,-129,-95,-140,-127,-44,-46,-128,-122,-130,-126,43,-52,43,-104,-103,]),'SWITCH':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,48,52,53,60,61,62,63,66,67,68,69,70,71,72,73,75,76,77,85,87,88,94,96,101,102,103,104,116,132,142,147,151,159,160,161,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,190,193,197,200,207,208,211,212,213,221,227,229,233,239,240,246,248,249,251,270,273,278,281,283,285,288,289,291,294,295,296,312,313,314,318,319,321,330,333,336,],[44,44,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-99,-144,-3,-145,-146,-48,44,-53,44,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,-51,-42,-43,-57,-31,-88,-89,-90,-91,-92,-94,-2,-56,-135,-36,-40,-37,-50,-102,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-75,-81,-76,-84,-98,-115,44,-32,-33,-139,-34,-35,44,-93,-110,-96,-114,44,-143,-134,-41,-45,-105,-121,-120,-47,-55,-136,-129,-95,-140,-127,-44,-46,-128,-122,-130,-126,44,-52,44,-104,-103,]),'LBRACKET':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,48,50,52,53,55,60,61,62,63,66,67,68,69,70,71,72,73,75,76,77,85,87,88,89,94,96,97,98,101,102,103,104,116,131,132,142,145,147,151,159,160,161,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,190,191,193,197,200,203,207,208,211,212,213,221,222,227,229,233,239,240,246,248,249,251,270,273,278,281,283,285,288,289,291,294,295,296,312,313,314,318,319,321,330,333,336,],[40,40,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-99,-144,-3,90,-145,-146,99,-48,40,-53,40,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,-51,-42,-43,143,-57,-31,40,152,-88,-89,-90,-91,-92,192,-94,-2,204,-56,-135,-36,-40,-37,-50,-102,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-75,-81,-76,-84,231,-98,-115,40,244,-32,-33,-139,-34,-35,40,256,-93,-110,-96,-114,40,-143,-134,-41,-45,-105,-121,-120,-47,-55,-136,-129,-95,-140,-127,-44,-46,-128,-122,-130,-126,40,-52,40,-104,-103,]),'BREAK':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,48,52,53,60,61,62,63,66,67,68,69,70,71,72,73,75,76,77,85,87,88,94,96,101,102,103,104,116,132,142,147,151,159,160,161,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,190,193,197,200,207,208,211,212,213,221,227,229,233,239,240,246,248,249,251,270,273,278,281,283,285,288,289,291,294,295,296,312,313,314,318,319,321,330,333,336,],[45,45,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-99,-144,-3,-145,-146,-48,45,-53,45,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,-51,-42,-43,-57,-31,-88,-89,-90,-91,-92,-94,-2,-56,-135,-36,-40,-37,-50,-102,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-75,-81,-76,-84,-98,-115,45,-32,-33,-139,-34,-35,45,-93,-110,-96,-114,45,-143,-134,-41,-45,-105,-121,-120,-47,-55,-136,-129,-95,-140,-127,-44,-46,-128,-122,-130,-126,45,-52,45,-104,-103,]),'RETURN':([4,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,48,52,53,60,61,62,63,66,67,68,69,70,71,72,73,75,76,77,85,87,88,94,96,101,102,103,104,116,132,142,147,151,159,160,161,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,190,193,197,200,207,208,211,212,213,221,227,229,233,239,240,246,248,249,251,270,273,278,281,283,285,288,289,291,294,295,296,312,313,314,318,319,321,330,333,336,],[46,46,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-99,-144,-3,-145,-146,-48,46,-53,46,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,-51,-42,-43,-57,-31,-88,-89,-90,-91,-92,-94,-2,-56,-135,-36,-40,-37,-50,-102,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-75,-81,-76,-84,-98,-115,46,-32,-33,-139,-34,-35,46,-93,-110,-96,-114,46,-143,-134,-41,-45,-105,-121,-120,-47,-55,-136,-129,-95,-140,-127,-44,-46,-128,-122,-130,-126,46,-52,46,-104,-103,]),'LPAREN':([5,6,37,41,42,44,46,49,50,51,59,68,74,78,81,91,92,106,107,108,109,110,117,118,119,120,121,122,123,124,125,126,127,128,134,135,140,148,149,150,157,158,163,185,214,226,228,243,250,254,286,292,317,328,331,332,],[47,51,58,74,74,74,74,74,74,74,112,51,74,131,51,145,146,74,74,162,163,164,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,51,74,74,74,74,74,282,74,74,74,51,74,74,]),'STRING':([5,41,42,44,46,47,49,50,51,74,106,107,117,118,119,120,121,122,123,124,125,126,127,128,134,135,140,148,149,150,157,158,162,163,214,226,228,243,250,286,290,292,315,316,317,331,332,],[48,71,71,71,71,86,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,215,217,71,71,71,71,71,71,306,71,323,325,71,71,71,]),'ASSIGN':([6,55,56,81,96,101,102,103,104,105,155,156,268,],[49,97,106,49,150,-88,-89,-90,-91,157,-38,-39,49,]),'ASIG':([6,55,56,81,96,101,102,103,104,105,155,156,268,],[50,-38,107,135,149,-88,-89,-90,-91,158,-38,-39,135,]),'INCREMENT':([6,268,],[52,52,]),'DECREMENT':([6,268,],[53,53,]),'RBRACE':([8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,52,53,54,60,62,66,67,68,69,70,71,72,73,75,76,77,85,87,88,94,96,101,102,103,104,113,114,116,132,138,139,147,151,159,160,161,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,188,189,190,193,196,197,198,207,208,211,212,213,227,229,233,236,237,238,239,241,246,248,249,251,255,259,260,261,262,269,270,271,272,273,274,275,278,281,283,285,288,289,291,294,295,296,300,302,303,304,305,307,312,313,314,318,321,322,324,326,327,328,329,333,334,335,336,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-99,-144,-145,-146,-5,-48,-53,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,-51,-42,-43,-57,-31,-88,-89,-90,-91,170,171,-92,-94,197,-116,-56,-135,-36,-40,-37,-50,-102,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-75,-81,-76,229,-111,-84,-98,239,-115,-117,-32,-33,-139,-34,-35,-93,-110,-96,270,-106,-109,-114,-119,-143,-134,-41,-45,283,285,-137,-113,-112,-108,-105,-107,-118,-121,291,-141,-120,-47,-55,-136,-129,-95,-140,-127,-44,-46,-138,313,314,-123,-131,-142,-128,-122,-130,-126,-52,-124,-132,-74,-133,-77,333,-104,336,-125,-103,]),'CASE':([8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,52,53,54,60,62,66,67,68,69,70,71,72,73,75,76,77,84,85,87,88,94,96,101,102,103,104,116,132,137,139,147,151,159,160,161,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,190,193,197,207,208,211,212,213,227,229,233,239,241,246,248,249,251,270,272,273,278,281,283,285,288,289,291,294,295,296,312,313,314,318,321,333,336,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-99,-144,-145,-146,-5,-48,-53,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,140,-51,-42,-43,-57,-31,-88,-89,-90,-91,-92,-94,140,140,-56,-135,-36,-40,-37,-50,-102,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-75,-81,-76,-84,-98,-115,-32,-33,-139,-34,-35,-93,-110,-96,-114,-119,-143,-134,-41,-45,-105,-118,-121,-120,-47,-55,-136,-129,-95,-140,-127,-44,-46,-128,-122,-130,-126,-52,-104,-103,]),'DEFAULT':([8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,36,45,52,53,54,60,62,66,67,68,69,70,71,72,73,75,76,77,84,85,87,88,94,96,101,102,103,104,116,132,137,139,147,151,159,160,161,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,190,193,197,207,208,211,212,213,227,229,233,239,241,246,248,249,251,270,272,273,278,281,283,285,288,289,291,294,295,296,312,313,314,318,321,333,336,],[-4,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-99,-144,-145,-146,-5,-48,-53,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,141,-51,-42,-43,-57,-31,-88,-89,-90,-91,-92,-94,141,141,-56,-135,-36,-40,-37,-50,-102,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-75,-81,-76,-84,-98,-115,-32,-33,-139,-34,-35,-93,-110,-96,-114,-119,-143,-134,-41,-45,-105,-118,-121,-120,-47,-55,-136,-129,-95,-140,-127,-44,-46,-128,-122,-130,-126,-52,-104,-103,]),'DOT':([35,],[57,]),'LBRACE':([38,39,44,52,53,65,66,67,68,69,70,71,72,73,75,76,77,79,81,83,87,88,94,101,102,103,104,133,136,147,167,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,190,202,223,229,257,265,266,267,273,288,309,311,312,320,328,],[61,63,84,-145,-146,63,-63,-74,129,-78,-79,-80,-82,-83,-85,-86,-87,-97,129,137,-42,-43,-57,-88,-89,-90,-91,63,195,-56,221,226,63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-75,129,-76,-84,243,-54,-110,-49,-100,-97,-101,290,-129,319,61,-128,330,129,]),'NUMBER':([40,41,42,44,46,49,50,51,74,99,106,107,117,118,119,120,121,122,123,124,125,126,127,128,134,135,140,148,149,150,157,158,163,214,226,228,243,250,286,292,317,331,332,],[64,69,69,69,69,69,69,69,69,153,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'FLOAT':([41,42,44,46,49,50,51,74,106,107,117,118,119,120,121,122,123,124,125,126,127,128,134,135,140,148,149,150,157,158,163,214,226,228,243,250,286,292,317,331,332,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'TRUE':([41,42,44,46,49,50,51,74,106,107,117,118,119,120,121,122,123,124,125,126,127,128,134,135,140,148,149,150,157,158,163,214,226,228,243,250,286,292,317,331,332,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'FALSE':([41,42,44,46,49,50,51,74,106,107,117,118,119,120,121,122,123,124,125,126,127,128,134,135,140,148,149,150,157,158,163,214,226,228,243,250,286,292,317,331,332,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'MAKE':([41,42,44,46,49,50,51,74,106,107,117,118,119,120,121,122,123,124,125,126,127,128,134,135,140,148,149,150,157,158,163,214,226,228,243,250,286,292,317,331,332,],[78,78,78,78,78,91,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'MAP':([50,55,131,145,167,],[89,98,191,203,222,]),'NEW':([50,],[92,]),'RPAREN':([51,66,67,68,69,70,71,72,73,75,76,77,86,93,94,95,101,102,103,104,112,130,147,165,168,169,174,175,176,177,178,179,180,181,182,183,184,185,186,190,205,206,216,217,220,229,253,258,264,277,279,280,282,288,298,301,308,312,],[94,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,142,147,-57,-61,-88,-89,-90,-91,167,190,-56,219,224,-58,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-75,-81,-76,-84,246,-62,251,-80,-60,-110,281,-59,288,294,295,296,297,-129,310,312,318,-128,]),'INT_TYPE':([55,56,101,102,103,104,115,143,144,152,154,155,156,166,167,195,210,224,231,232,235,237,238,242,244,245,247,256,269,287,293,297,299,310,],[101,101,-88,-89,-90,-91,101,101,101,101,101,-38,-39,101,101,101,101,101,101,101,101,101,-109,101,101,101,101,101,-108,101,101,101,101,101,]),'FLOAT64_TYPE':([55,56,101,102,103,104,115,143,144,152,154,155,156,166,167,195,210,224,231,232,235,237,238,242,244,245,247,256,269,287,293,297,299,310,],[102,102,-88,-89,-90,-91,102,102,102,102,102,-38,-39,102,102,102,102,102,102,102,102,102,-109,102,102,102,102,102,-108,102,102,102,102,102,]),'STRING_TYPE':([55,56,101,102,103,104,115,143,144,152,154,155,156,166,167,195,210,224,231,232,235,237,238,242,244,245,247,256,269,287,293,297,299,310,],[103,103,-88,-89,-90,-91,103,103,103,103,103,-38,-39,103,103,103,103,103,103,103,103,103,-109,103,103,103,103,103,-108,103,103,103,103,103,]),'BOOL_TYPE':([55,56,101,102,103,104,115,143,144,152,154,155,156,166,167,195,210,224,231,232,235,237,238,242,244,245,247,256,269,287,293,297,299,310,],[104,104,-88,-89,-90,-91,104,104,104,104,104,-38,-39,104,104,104,104,104,104,104,104,104,-109,104,104,104,104,104,-108,104,104,104,104,104,]),'COMMA':([55,66,67,68,69,70,71,72,73,75,76,77,94,95,101,102,103,104,147,155,160,169,174,175,176,177,178,179,180,181,182,183,184,185,186,189,190,215,217,220,229,260,261,275,288,304,305,312,326,327,328,335,],[100,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,-57,148,-88,-89,-90,-91,-56,100,214,225,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-75,-81,-76,230,-84,250,252,-60,-110,286,-113,292,-129,315,316,-128,-74,-133,-77,-125,]),'PRINTF':([57,],[108,]),'PRINTLN':([57,],[109,]),'SCANLN':([57,],[110,]),'RBRACKET':([64,90,99,101,102,103,104,153,192,201,204,209,263,276,284,],[115,144,154,-88,-89,-90,-91,210,232,242,245,247,287,293,299,]),'PLUS':([65,66,67,68,69,70,71,72,73,75,76,77,79,81,83,85,87,88,94,95,130,147,160,174,175,176,177,178,179,180,181,182,183,184,185,186,190,194,199,207,208,216,217,229,260,261,275,279,288,294,312,318,326,327,328,],[117,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,117,-77,117,117,117,117,-57,117,117,-56,117,-64,-65,117,117,117,117,117,117,117,117,-75,-81,-76,-84,117,117,117,117,117,-80,-110,117,117,117,117,-129,-129,-128,-128,-74,117,-77,]),'MINUS':([65,66,67,68,69,70,71,72,73,75,76,77,79,81,83,85,87,88,94,95,130,147,160,174,175,176,177,178,179,180,181,182,183,184,185,186,190,194,199,207,208,216,217,229,260,261,275,279,288,294,312,318,326,327,328,],[118,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,118,-77,118,118,118,118,-57,118,118,-56,118,-64,-65,118,118,118,118,118,118,118,118,-75,-81,-76,-84,118,118,118,118,118,-80,-110,118,118,118,118,-129,-129,-128,-128,-74,118,-77,]),'AND':([65,66,67,68,69,70,71,72,73,75,76,77,79,81,83,85,87,88,94,95,130,147,160,174,175,176,177,178,179,180,181,182,183,184,185,186,190,194,199,207,208,216,217,229,260,261,275,279,288,294,312,318,326,327,328,],[119,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,119,-77,119,119,119,119,-57,119,119,-56,119,-64,-65,119,119,119,119,119,119,119,119,-75,-81,-76,-84,119,119,119,119,119,-80,-110,119,119,119,119,-129,-129,-128,-128,-74,119,-77,]),'OR':([65,66,67,68,69,70,71,72,73,75,76,77,79,81,83,85,87,88,94,95,130,147,160,174,175,176,177,178,179,180,181,182,183,184,185,186,190,194,199,207,208,216,217,229,260,261,275,279,288,294,312,318,326,327,328,],[120,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,120,-77,120,120,120,120,-57,120,120,-56,120,-64,-65,120,120,120,120,120,120,120,120,-75,-81,-76,-84,120,120,120,120,120,-80,-110,120,120,120,120,-129,-129,-128,-128,-74,120,-77,]),'EQ':([65,66,67,68,69,70,71,72,73,75,76,77,79,81,83,85,87,88,94,95,130,147,160,174,175,176,177,178,179,180,181,182,183,184,185,186,190,194,199,207,208,216,217,229,260,261,275,279,288,294,312,318,326,327,328,],[121,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,121,-77,121,121,121,121,-57,121,121,-56,121,-64,-65,121,121,121,121,121,121,121,121,-75,-81,-76,-84,121,121,121,121,121,-80,-110,121,121,121,121,-129,-129,-128,-128,-74,121,-77,]),'NE':([65,66,67,68,69,70,71,72,73,75,76,77,79,81,83,85,87,88,94,95,130,147,160,174,175,176,177,178,179,180,181,182,183,184,185,186,190,194,199,207,208,216,217,229,260,261,275,279,288,294,312,318,326,327,328,],[122,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,122,-77,122,122,122,122,-57,122,122,-56,122,-64,-65,122,122,122,122,122,122,122,122,-75,-81,-76,-84,122,122,122,122,122,-80,-110,122,122,122,122,-129,-129,-128,-128,-74,122,-77,]),'LT':([65,66,67,68,69,70,71,72,73,75,76,77,79,81,83,85,87,88,94,95,130,147,160,174,175,176,177,178,179,180,181,182,183,184,185,186,190,194,199,207,208,216,217,229,260,261,275,279,288,294,312,318,326,327,328,],[123,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,123,-77,123,123,123,123,-57,123,123,-56,123,-64,-65,123,123,123,123,123,123,123,123,-75,-81,-76,-84,123,123,123,123,123,-80,-110,123,123,123,123,-129,-129,-128,-128,-74,123,-77,]),'GT':([65,66,67,68,69,70,71,72,73,75,76,77,79,81,83,85,87,88,94,95,130,147,160,174,175,176,177,178,179,180,181,182,183,184,185,186,190,194,199,207,208,216,217,229,260,261,275,279,288,294,312,318,326,327,328,],[124,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,124,-77,124,124,124,124,-57,124,124,-56,124,-64,-65,124,124,124,124,124,124,124,124,-75,-81,-76,-84,124,124,124,124,124,-80,-110,124,124,124,124,-129,-129,-128,-128,-74,124,-77,]),'LE':([65,66,67,68,69,70,71,72,73,75,76,77,79,81,83,85,87,88,94,95,130,147,160,174,175,176,177,178,179,180,181,182,183,184,185,186,190,194,199,207,208,216,217,229,260,261,275,279,288,294,312,318,326,327,328,],[125,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,125,-77,125,125,125,125,-57,125,125,-56,125,-64,-65,125,125,125,125,125,125,125,125,-75,-81,-76,-84,125,125,125,125,125,-80,-110,125,125,125,125,-129,-129,-128,-128,-74,125,-77,]),'GE':([65,66,67,68,69,70,71,72,73,75,76,77,79,81,83,85,87,88,94,95,130,147,160,174,175,176,177,178,179,180,181,182,183,184,185,186,190,194,199,207,208,216,217,229,260,261,275,279,288,294,312,318,326,327,328,],[126,-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,126,-77,126,126,126,126,-57,126,126,-56,126,-64,-65,126,126,126,126,126,126,126,126,-75,-81,-76,-84,126,126,126,126,126,-80,-110,126,126,126,126,-129,-129,-128,-128,-74,126,-77,]),'SEMICOLON':([66,67,68,69,70,71,72,73,75,76,77,80,87,88,94,147,174,175,176,177,178,179,180,181,182,183,184,185,186,190,194,229,288,312,],[-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,134,-42,-43,-57,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-75,-81,-76,-84,234,-110,-129,-128,]),'COLON':([66,67,68,69,70,71,72,73,75,76,77,94,141,147,174,175,176,177,178,179,180,181,182,183,184,185,186,187,190,199,229,288,306,312,323,325,],[-63,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,-57,200,-56,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-75,-81,-76,228,-84,240,-110,-129,317,-128,331,332,]),'TIMES':([66,67,68,69,70,71,72,73,75,76,77,81,94,147,174,175,184,185,186,190,217,229,288,294,312,318,326,328,],[127,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,-77,-57,-56,127,127,-75,-81,-76,-84,-80,-110,-129,-129,-128,-128,-74,-77,]),'DIVIDE':([66,67,68,69,70,71,72,73,75,76,77,81,94,147,174,175,184,185,186,190,217,229,288,294,312,318,326,328,],[128,-74,-77,-78,-79,-80,-82,-83,-85,-86,-87,-77,-57,-56,128,128,-75,-81,-76,-84,-80,-110,-129,-129,-128,-128,-74,-77,]),'STRUCT':([82,],[136,]),'ELSE':([116,171,],[173,-102,]),'AMPER':([164,],[218,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'import_stmt':([3,],[4,]),'program':([4,8,61,63,200,221,240,319,330,],[7,54,113,114,241,255,272,329,334,]),'statement':([4,8,61,63,200,221,240,319,330,],[8,8,8,8,8,8,8,8,8,]),'declaration':([4,8,61,63,200,221,240,319,330,],[9,9,9,9,9,9,9,9,9,]),'assignment':([4,8,42,61,63,200,221,234,240,319,330,],[10,10,80,10,10,10,10,265,10,10,10,]),'print_stmt':([4,8,61,63,200,221,240,319,330,],[11,11,11,11,11,11,11,11,11,]),'input_stmt':([4,8,61,63,200,221,240,319,330,],[12,12,12,12,12,12,12,12,12,]),'continue_stmt':([4,8,61,63,200,221,240,319,330,],[13,13,13,13,13,13,13,13,13,]),'struct_method':([4,8,61,63,200,221,240,319,330,],[14,14,14,14,14,14,14,14,14,]),'func_def':([4,8,61,63,200,221,240,319,330,],[15,15,15,15,15,15,15,15,15,]),'func_no_params':([4,8,61,63,200,221,240,319,330,],[16,16,16,16,16,16,16,16,16,]),'func_no_params_void':([4,8,61,63,200,221,240,319,330,],[17,17,17,17,17,17,17,17,17,]),'func_with_map':([4,8,61,63,200,221,240,319,330,],[18,18,18,18,18,18,18,18,18,]),'func_call':([4,8,41,42,44,46,49,50,51,61,63,74,106,107,117,118,119,120,121,122,123,124,125,126,127,128,134,135,140,148,149,150,157,158,163,200,214,221,226,228,240,243,250,286,292,317,319,330,331,332,],[19,19,77,77,77,77,77,77,77,19,19,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,19,77,19,77,77,19,77,77,77,77,77,19,19,77,77,]),'if_stmt':([4,8,61,63,200,221,240,319,330,],[20,20,20,20,20,20,20,20,20,]),'for_stmt':([4,8,61,63,200,221,240,319,330,],[21,21,21,21,21,21,21,21,21,]),'struct_def':([4,8,61,63,200,221,240,319,330,],[22,22,22,22,22,22,22,22,22,]),'switch_stmt':([4,8,61,63,200,221,240,319,330,],[23,23,23,23,23,23,23,23,23,]),'map_declaration':([4,8,61,63,200,221,240,319,330,],[24,24,24,24,24,24,24,24,24,]),'map_declaration_values':([4,8,61,63,200,221,240,319,330,],[25,25,25,25,25,25,25,25,25,]),'array_declaration':([4,8,61,63,200,221,240,319,330,],[26,26,26,26,26,26,26,26,26,]),'array_literal':([4,8,61,63,97,200,221,240,319,330,],[27,27,27,27,151,27,27,27,27,27,]),'slice_declaration':([4,8,61,63,200,221,240,319,330,],[28,28,28,28,28,28,28,28,28,]),'make_stmt':([4,8,61,63,200,221,240,319,330,],[29,29,29,29,29,29,29,29,29,]),'new_stmt':([4,8,61,63,200,221,240,319,330,],[30,30,30,30,30,30,30,30,30,]),'break_stmt':([4,8,61,63,200,221,240,319,330,],[31,31,31,31,31,31,31,31,31,]),'increment_stmt':([4,8,61,63,200,221,234,240,319,330,],[32,32,32,32,32,32,267,32,32,32,]),'return_stmt':([4,8,61,63,200,221,240,319,330,],[33,33,33,33,33,33,33,33,33,]),'func_header':([4,8,61,63,200,221,240,319,330,],[38,38,38,38,38,38,38,38,38,]),'func_header_no_params':([4,8,61,63,200,221,240,319,330,],[39,39,39,39,39,39,39,39,39,]),'id_list':([34,100,],[56,156,]),'func_body':([38,311,],[60,321,]),'block':([39,65,133,173,],[62,116,193,227,]),'expression':([41,42,44,46,49,50,51,74,106,107,119,120,121,122,123,124,125,126,134,135,140,148,149,150,157,158,163,214,226,228,243,250,286,292,317,332,],[65,79,83,85,87,88,95,130,160,160,176,177,178,179,180,181,182,183,194,88,199,95,207,208,160,160,216,160,260,261,275,279,260,275,327,327,]),'term':([41,42,44,46,49,50,51,74,106,107,117,118,119,120,121,122,123,124,125,126,134,135,140,148,149,150,157,158,163,214,226,228,243,250,286,292,317,332,],[66,66,66,66,66,66,66,66,66,66,174,175,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'factor':([41,42,44,46,49,50,51,74,106,107,117,118,119,120,121,122,123,124,125,126,127,128,134,135,140,148,149,150,157,158,163,214,226,228,243,250,286,292,317,331,332,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,184,186,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,326,335,67,]),'make_expr':([41,42,44,46,49,50,51,74,106,107,117,118,119,120,121,122,123,124,125,126,127,128,134,135,140,148,149,150,157,158,163,214,226,228,243,250,286,292,317,331,332,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'struct_instance':([41,42,44,46,49,50,51,74,106,107,117,118,119,120,121,122,123,124,125,126,127,128,134,135,140,148,149,150,157,158,163,214,226,228,243,250,286,292,317,331,332,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'arg_list':([51,148,],[93,206,]),'type':([55,56,115,143,144,152,154,166,167,195,210,224,231,232,235,237,242,244,245,247,256,287,293,297,299,310,],[96,105,172,201,202,209,211,220,223,238,248,257,263,264,269,238,273,276,277,278,284,301,308,309,311,320,]),'for_block':([79,266,],[132,289,]),'begin_loop':([79,266,],[133,133,]),'case_list':([84,137,139,],[138,196,198,]),'case_clause':([84,137,139,],[139,139,139,]),'expr_list':([106,107,157,158,214,],[159,161,212,213,249,]),'param_list':([112,225,282,],[168,258,298,]),'param':([112,225,282,],[169,169,169,]),'struct_fields_values':([129,230,],[188,262,]),'field_value':([129,230,],[189,189,]),'end_loop':([193,],[233,]),'struct_fields':([195,237,],[236,271,]),'struct_field':([195,237,],[237,237,]),'array_values':([226,286,],[259,300,]),'for_update':([234,],[266,]),'slice_values':([243,292,],[274,307,]),'map_params':([290,315,],[302,322,]),'map_kv_pairs':([290,316,],[303,324,]),'map_param':([290,315,],[304,304,]),'map_kv_pair':([290,316,],[305,305,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> PACKAGE VARIABLE import_stmt program','start',4,'p_start','parser.py',81),
  ('import_stmt -> IMPORT LPAREN STRING RPAREN','import_stmt',4,'p_import_function','parser.py',86),
  ('import_stmt -> IMPORT STRING','import_stmt',2,'p_import_function','parser.py',87),
  ('program -> statement','program',1,'p_program','parser.py',91),
  ('program -> statement program','program',2,'p_program','parser.py',92),
  ('statement -> declaration','statement',1,'p_statement','parser.py',97),
  ('statement -> assignment','statement',1,'p_statement','parser.py',98),
  ('statement -> print_stmt','statement',1,'p_statement','parser.py',99),
  ('statement -> input_stmt','statement',1,'p_statement','parser.py',100),
  ('statement -> continue_stmt','statement',1,'p_statement','parser.py',101),
  ('statement -> struct_method','statement',1,'p_statement','parser.py',102),
  ('statement -> func_def','statement',1,'p_statement','parser.py',103),
  ('statement -> func_no_params','statement',1,'p_statement','parser.py',104),
  ('statement -> func_no_params_void','statement',1,'p_statement','parser.py',105),
  ('statement -> func_with_map','statement',1,'p_statement','parser.py',106),
  ('statement -> func_call','statement',1,'p_statement','parser.py',107),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',108),
  ('statement -> for_stmt','statement',1,'p_statement','parser.py',109),
  ('statement -> struct_def','statement',1,'p_statement','parser.py',110),
  ('statement -> switch_stmt','statement',1,'p_statement','parser.py',111),
  ('statement -> map_declaration','statement',1,'p_statement','parser.py',112),
  ('statement -> map_declaration_values','statement',1,'p_statement','parser.py',113),
  ('statement -> array_declaration','statement',1,'p_statement','parser.py',114),
  ('statement -> array_literal','statement',1,'p_statement','parser.py',115),
  ('statement -> slice_declaration','statement',1,'p_statement','parser.py',116),
  ('statement -> make_stmt','statement',1,'p_statement','parser.py',117),
  ('statement -> new_stmt','statement',1,'p_statement','parser.py',118),
  ('statement -> break_stmt','statement',1,'p_statement','parser.py',119),
  ('statement -> increment_stmt','statement',1,'p_statement','parser.py',120),
  ('statement -> return_stmt','statement',1,'p_statement','parser.py',121),
  ('declaration -> VAR VARIABLE type','declaration',3,'p_declaration','parser.py',126),
  ('declaration -> VAR VARIABLE type ASIG expression','declaration',5,'p_declaration','parser.py',127),
  ('declaration -> VAR VARIABLE type ASSIGN expression','declaration',5,'p_declaration','parser.py',128),
  ('declaration -> VAR id_list type ASSIGN expr_list','declaration',5,'p_declaration_multiple_typed','parser.py',148),
  ('declaration -> VAR id_list type ASIG expr_list','declaration',5,'p_declaration_multiple_typed','parser.py',149),
  ('declaration -> VAR id_list ASSIGN expr_list','declaration',4,'p_declaration_multiple_infer','parser.py',171),
  ('declaration -> VAR id_list ASIG expr_list','declaration',4,'p_declaration_multiple_infer','parser.py',172),
  ('id_list -> VARIABLE','id_list',1,'p_id_list','parser.py',191),
  ('id_list -> VARIABLE COMMA id_list','id_list',3,'p_id_list','parser.py',192),
  ('expr_list -> expression','expr_list',1,'p_expr_list','parser.py',199),
  ('expr_list -> expression COMMA expr_list','expr_list',3,'p_expr_list','parser.py',200),
  ('assignment -> VARIABLE ASSIGN expression','assignment',3,'p_assignment','parser.py',208),
  ('assignment -> VARIABLE ASIG expression','assignment',3,'p_assignment','parser.py',209),
  ('print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN','print_stmt',8,'p_print_stmt','parser.py',249),
  ('print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN','print_stmt',6,'p_print_stmt','parser.py',250),
  ('print_stmt -> FMT DOT PRINTLN LPAREN STRING COMMA VARIABLE RPAREN','print_stmt',8,'p_print_stmt','parser.py',251),
  ('input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN','input_stmt',7,'p_input_stmt','parser.py',280),
  ('func_def -> func_header func_body','func_def',2,'p_func_def','parser.py',285),
  ('func_header -> FUNC VARIABLE LPAREN param_list RPAREN type','func_header',6,'p_func_header','parser.py',289),
  ('func_body -> LBRACE program RBRACE','func_body',3,'p_func_body','parser.py',298),
  ('return_stmt -> RETURN expression','return_stmt',2,'p_return_stmt','parser.py',304),
  ('func_with_map -> FUNC VARIABLE LPAREN RPAREN MAP LBRACKET type RBRACKET type func_body','func_with_map',10,'p_func_def_with_map','parser.py',323),
  ('func_no_params -> func_header_no_params block','func_no_params',2,'p_func_def_no_params','parser.py',328),
  ('func_header_no_params -> FUNC VARIABLE LPAREN RPAREN type','func_header_no_params',5,'p_func_header_no_params','parser.py',335),
  ('func_no_params_void -> FUNC VARIABLE LPAREN RPAREN LBRACE program RBRACE','func_no_params_void',7,'p_func_def_no_params_void','parser.py',345),
  ('func_call -> VARIABLE LPAREN arg_list RPAREN','func_call',4,'p_func_call','parser.py',350),
  ('func_call -> VARIABLE LPAREN RPAREN','func_call',3,'p_func_call','parser.py',351),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',359),
  ('param_list -> param COMMA param_list','param_list',3,'p_param_list','parser.py',360),
  ('param -> VARIABLE type','param',2,'p_param','parser.py',369),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',383),
  ('arg_list -> expression COMMA arg_list','arg_list',3,'p_arg_list','parser.py',384),
  ('expression -> term','expression',1,'p_expression','parser.py',394),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',395),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',396),
  ('expression -> expression AND expression','expression',3,'p_expression','parser.py',397),
  ('expression -> expression OR expression','expression',3,'p_expression','parser.py',398),
  ('expression -> expression EQ expression','expression',3,'p_expression','parser.py',399),
  ('expression -> expression NE expression','expression',3,'p_expression','parser.py',400),
  ('expression -> expression LT expression','expression',3,'p_expression','parser.py',401),
  ('expression -> expression GT expression','expression',3,'p_expression','parser.py',402),
  ('expression -> expression LE expression','expression',3,'p_expression','parser.py',403),
  ('expression -> expression GE expression','expression',3,'p_expression','parser.py',404),
  ('term -> factor','term',1,'p_term','parser.py',434),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',435),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',436),
  ('term -> VARIABLE','term',1,'p_term_variable','parser.py',451),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',462),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',463),
  ('factor -> STRING','factor',1,'p_factor','parser.py',464),
  ('factor -> VARIABLE','factor',1,'p_factor','parser.py',465),
  ('factor -> TRUE','factor',1,'p_factor','parser.py',466),
  ('factor -> FALSE','factor',1,'p_factor','parser.py',467),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',468),
  ('factor -> make_expr','factor',1,'p_factor','parser.py',469),
  ('factor -> struct_instance','factor',1,'p_factor','parser.py',470),
  ('factor -> func_call','factor',1,'p_factor','parser.py',471),
  ('type -> INT_TYPE','type',1,'p_type','parser.py',495),
  ('type -> FLOAT64_TYPE','type',1,'p_type','parser.py',496),
  ('type -> STRING_TYPE','type',1,'p_type','parser.py',497),
  ('type -> BOOL_TYPE','type',1,'p_type','parser.py',498),
  ('if_stmt -> IF expression block','if_stmt',3,'p_if_stmt','parser.py',503),
  ('if_stmt -> IF expression block ELSE block','if_stmt',5,'p_if_stmt','parser.py',504),
  ('for_stmt -> FOR expression for_block','for_stmt',3,'p_for_stmt','parser.py',513),
  ('for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update for_block','for_stmt',7,'p_for_stmt','parser.py',514),
  ('for_block -> begin_loop block end_loop','for_block',3,'p_for_block','parser.py',518),
  ('begin_loop -> <empty>','begin_loop',0,'p_begin_lop','parser.py',522),
  ('end_loop -> <empty>','end_loop',0,'p_end_loop','parser.py',526),
  ('continue_stmt -> CONTINUE','continue_stmt',1,'p_continue_stmt','parser.py',530),
  ('for_update -> assignment','for_update',1,'p_for_update','parser.py',536),
  ('for_update -> increment_stmt','for_update',1,'p_for_update','parser.py',537),
  ('block -> LBRACE program RBRACE','block',3,'p_block','parser.py',542),
  ('struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE','struct_method',13,'p_struct_method','parser.py',547),
  ('struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE','struct_method',12,'p_struct_method','parser.py',548),
  ('struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE','struct_def',6,'p_struct_def','parser.py',553),
  ('struct_fields -> struct_field','struct_fields',1,'p_struct_fields','parser.py',558),
  ('struct_fields -> struct_field struct_fields','struct_fields',2,'p_struct_fields','parser.py',559),
  ('struct_field -> VARIABLE type','struct_field',2,'p_struct_field','parser.py',564),
  ('struct_field -> type','struct_field',1,'p_struct_field','parser.py',565),
  ('struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE','struct_instance',4,'p_struct_instance','parser.py',570),
  ('struct_fields_values -> field_value','struct_fields_values',1,'p_struct_fields_values','parser.py',574),
  ('struct_fields_values -> field_value COMMA struct_fields_values','struct_fields_values',3,'p_struct_fields_values','parser.py',575),
  ('field_value -> VARIABLE COLON expression','field_value',3,'p_field_value','parser.py',579),
  ('switch_stmt -> SWITCH expression LBRACE case_list RBRACE','switch_stmt',5,'p_switch_stmt','parser.py',583),
  ('switch_stmt -> SWITCH LBRACE case_list RBRACE','switch_stmt',4,'p_switch_stmt','parser.py',584),
  ('case_list -> case_clause','case_list',1,'p_case_list','parser.py',588),
  ('case_list -> case_clause case_list','case_list',2,'p_case_list','parser.py',589),
  ('case_clause -> CASE expression COLON program','case_clause',4,'p_case_clause','parser.py',593),
  ('case_clause -> DEFAULT COLON program','case_clause',3,'p_case_clause','parser.py',594),
  ('map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type','map_declaration',7,'p_map_declaration','parser.py',600),
  ('map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type','map_declaration',7,'p_map_declaration','parser.py',601),
  ('map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_params RBRACE','map_declaration',10,'p_map_declaration','parser.py',602),
  ('map_params -> map_param','map_params',1,'p_map_params','parser.py',606),
  ('map_params -> map_param COMMA map_params','map_params',3,'p_map_params','parser.py',607),
  ('map_param -> STRING COLON factor','map_param',3,'p_map_param','parser.py',611),
  ('make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN','make_stmt',10,'p_make_stmt','parser.py',616),
  ('make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN','make_stmt',8,'p_make_stmt','parser.py',617),
  ('make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN','make_expr',8,'p_make_expr','parser.py',621),
  ('make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN','make_expr',6,'p_make_expr','parser.py',622),
  ('map_declaration_values -> VARIABLE ASIG MAP LBRACKET type RBRACKET type LBRACE map_kv_pairs RBRACE','map_declaration_values',10,'p_map_literal_declaration','parser.py',634),
  ('map_kv_pairs -> map_kv_pair','map_kv_pairs',1,'p_map_kv_pairs','parser.py',644),
  ('map_kv_pairs -> map_kv_pair COMMA map_kv_pairs','map_kv_pairs',3,'p_map_kv_pairs','parser.py',645),
  ('map_kv_pair -> STRING COLON expression','map_kv_pair',3,'p_map_kv_pair','parser.py',649),
  ('array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type','array_declaration',6,'p_array_declaration','parser.py',654),
  ('array_declaration -> VAR VARIABLE ASSIGN array_literal','array_declaration',4,'p_array_declaration','parser.py',655),
  ('array_literal -> LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE','array_literal',7,'p_array_literal','parser.py',679),
  ('array_values -> expression','array_values',1,'p_array_values','parser.py',694),
  ('array_values -> expression COMMA array_values','array_values',3,'p_array_values','parser.py',695),
  ('slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type','slice_declaration',5,'p_slice_declaration','parser.py',705),
  ('slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE','slice_declaration',8,'p_slice_declaration','parser.py',706),
  ('slice_values -> expression','slice_values',1,'p_slice_values','parser.py',710),
  ('slice_values -> expression COMMA slice_values','slice_values',3,'p_slice_values','parser.py',711),
  ('new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN','new_stmt',6,'p_new_stmt','parser.py',716),
  ('break_stmt -> BREAK','break_stmt',1,'p_break_stmt','parser.py',721),
  ('increment_stmt -> VARIABLE INCREMENT','increment_stmt',2,'p_increment_stmt','parser.py',728),
  ('increment_stmt -> VARIABLE DECREMENT','increment_stmt',2,'p_increment_stmt','parser.py',729),
]
