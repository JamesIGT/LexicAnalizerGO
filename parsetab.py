
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPER AND ASIG ASSIGN BOOL_TYPE BREAK CASE COLON COMMA DECREMENT DEFAULT DIVIDE DOT ELSE EQ FALSE FLOAT FLOAT64_TYPE FMT FOR FUNC FUNCNAME GE GT IF IMPORT INCREMENT INT_TYPE LBRACE LBRACKET LE LPAREN LT MAKE MAP MINUS MOD NE NEW NUMBER OR PACKAGE PLUS PRINT PRINTF PRINTLN RANGE RBRACE RBRACKET RETURN RPAREN SCANLN SEMICOLON STRING STRING_TYPE STRUCT SWITCH TIMES TRUE TYPE UINT VAR VARIABLEprogram : statement\n               | statement programstatement : declaration\n                 | assignment\n                 | print_stmt\n                 | input_stmt\n                 | struct_method\n                 | func_def\n                 | func_call\n                 | if_stmt\n                 | for_stmt\n                 | struct_def\n                 | switch_stmt\n                 | map_declaration\n                 | array_declaration\n                 | slice_declaration\n                 | make_stmt\n                 | new_stmt\n                 | break_stmt\n                 | increment_stmtdeclaration : VAR VARIABLE type\n                   | VAR VARIABLE type ASIG expressionexpression : NUMBERexpression : FLOATexpression : VARIABLEassignment : VARIABLE ASSIGN expression\n                  | VARIABLE ASIG expressionprint_stmt : FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN\n                  | FMT DOT PRINTLN LPAREN expression RPARENinput_stmt : FMT DOT SCANLN LPAREN AMPER VARIABLE RPARENfunc_def : FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE\n                | FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACEfunc_call : VARIABLE LPAREN arg_list RPAREN\n                 | VARIABLE LPAREN RPARENparam_list : param\n                  | param COMMA param_listparam : VARIABLE typearg_list : expression\n                | expression COMMA arg_listexpression : term\n                  | expression PLUS term\n                  | expression MINUS term\n                  | expression AND expression\n                  | expression OR expression\n                  | expression EQ expression\n                  | expression NE expression\n                  | expression LT expression\n                  | expression GT expression\n                  | expression LE expression\n                  | expression GE expressionterm : factor\n            | term TIMES factor\n            | term DIVIDE factorfactor : NUMBER\n              | FLOAT\n              | STRING\n              | VARIABLE\n              | LPAREN expression RPAREN\n              | make_expr\n              | struct_instancetype : INT_TYPE\n            | FLOAT64_TYPE\n            | STRING_TYPE\n            | BOOL_TYPEif_stmt : IF expression block\n               | IF expression block ELSE blockfor_stmt : FOR expression block\n                | FOR assignment SEMICOLON expression SEMICOLON for_update blockfor_update : assignment\n                  | increment_stmtblock : LBRACE program RBRACEstruct_method : FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE\n                     | FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACEstruct_def : TYPE VARIABLE STRUCT LBRACE struct_fields RBRACEstruct_fields : struct_field\n                     | struct_field struct_fieldsstruct_field : VARIABLE type\n                    | typestruct_instance : VARIABLE LBRACE struct_fields_values RBRACEstruct_fields_values : field_value\n                            | field_value COMMA struct_fields_valuesfield_value : VARIABLE COLON expressionswitch_stmt : SWITCH expression LBRACE case_list RBRACE\n                   | SWITCH LBRACE case_list RBRACEcase_list : case_clause\n                 | case_clause case_listcase_clause : CASE expression COLON program\n                   | DEFAULT COLON programmap_declaration : VAR VARIABLE MAP LBRACKET type RBRACKET type\n                       | VARIABLE ASIG MAP LBRACKET type RBRACKET typemake_stmt : VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN\n                 | VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPARENmake_expr : MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN\n                 | MAKE LPAREN LBRACKET RBRACKET type RPARENarray_declaration : VAR VARIABLE LBRACKET NUMBER RBRACKET type\n                         | VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACEarray_values : expression\n                    | expression COMMA array_valuesslice_declaration : VAR VARIABLE LBRACKET RBRACKET type\n                         | VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACEslice_values : expression\n                    | expression COMMA slice_valuesnew_stmt : VARIABLE ASIG NEW LPAREN VARIABLE RPARENbreak_stmt : BREAKincrement_stmt : VARIABLE INCREMENT\n                      | VARIABLE DECREMENT'
    
_lr_action_items = {'VAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,29,35,36,41,42,43,44,45,46,48,49,57,60,61,62,63,64,65,71,78,89,95,113,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,149,152,153,156,172,173,175,184,185,188,194,196,200,211,214,215,222,224,227,228,231,234,235,239,241,247,248,250,251,254,255,257,],[21,21,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-104,-105,-106,-23,-24,-25,-40,-51,-56,-59,-60,-21,-61,-62,-63,-64,-26,-27,-34,-65,21,-67,-33,-41,-54,-55,-57,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-58,-84,21,-22,-99,-66,-71,-79,-83,21,-95,-103,-29,21,-74,-89,-90,-30,21,-94,-68,-100,-92,-28,-32,-96,-31,-93,-91,21,21,-73,-72,]),'VARIABLE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,25,26,27,28,29,32,33,34,35,36,38,41,42,43,44,45,46,47,48,49,57,60,61,62,63,64,65,71,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,95,96,97,102,104,112,113,114,116,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,147,149,152,153,156,166,167,171,172,173,174,175,176,179,182,183,184,185,188,191,194,195,196,200,210,211,214,215,216,222,223,224,227,228,231,232,234,235,239,241,242,247,248,250,251,254,255,257,],[22,22,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,31,39,43,53,54,43,-104,43,43,43,-105,-106,76,-23,-24,-25,-40,-51,-56,43,-59,-60,-21,-61,-62,-63,-64,-26,-27,-34,118,119,-65,127,127,43,43,43,43,43,43,43,43,22,138,127,127,-67,43,43,43,43,162,-33,43,43,-41,-54,-55,-57,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-58,180,-84,22,-22,-99,197,198,119,-66,-71,43,-79,138,209,180,-78,-83,22,-95,43,-103,43,-29,22,-77,-74,-89,-90,43,-30,119,22,-94,-68,-100,43,-92,-28,-32,-96,43,-31,-93,-91,22,22,-73,-72,]),'FMT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,29,35,36,41,42,43,44,45,46,48,49,57,60,61,62,63,64,65,71,78,89,95,113,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,149,152,153,156,172,173,175,184,185,188,194,196,200,211,214,215,222,224,227,228,231,234,235,239,241,247,248,250,251,254,255,257,],[23,23,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-104,-105,-106,-23,-24,-25,-40,-51,-56,-59,-60,-21,-61,-62,-63,-64,-26,-27,-34,-65,23,-67,-33,-41,-54,-55,-57,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-58,-84,23,-22,-99,-66,-71,-79,-83,23,-95,-103,-29,23,-74,-89,-90,-30,23,-94,-68,-100,-92,-28,-32,-96,-31,-93,-91,23,23,-73,-72,]),'FUNC':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,29,35,36,41,42,43,44,45,46,48,49,57,60,61,62,63,64,65,71,78,89,95,113,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,149,152,153,156,172,173,175,184,185,188,194,196,200,211,214,215,222,224,227,228,231,234,235,239,241,247,248,250,251,254,255,257,],[24,24,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-104,-105,-106,-23,-24,-25,-40,-51,-56,-59,-60,-21,-61,-62,-63,-64,-26,-27,-34,-65,24,-67,-33,-41,-54,-55,-57,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-58,-84,24,-22,-99,-66,-71,-79,-83,24,-95,-103,-29,24,-74,-89,-90,-30,24,-94,-68,-100,-92,-28,-32,-96,-31,-93,-91,24,24,-73,-72,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,29,35,36,41,42,43,44,45,46,48,49,57,60,61,62,63,64,65,71,78,89,95,113,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,149,152,153,156,172,173,175,184,185,188,194,196,200,211,214,215,222,224,227,228,231,234,235,239,241,247,248,250,251,254,255,257,],[25,25,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-104,-105,-106,-23,-24,-25,-40,-51,-56,-59,-60,-21,-61,-62,-63,-64,-26,-27,-34,-65,25,-67,-33,-41,-54,-55,-57,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-58,-84,25,-22,-99,-66,-71,-79,-83,25,-95,-103,-29,25,-74,-89,-90,-30,25,-94,-68,-100,-92,-28,-32,-96,-31,-93,-91,25,25,-73,-72,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,29,35,36,41,42,43,44,45,46,48,49,57,60,61,62,63,64,65,71,78,89,95,113,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,149,152,153,156,172,173,175,184,185,188,194,196,200,211,214,215,222,224,227,228,231,234,235,239,241,247,248,250,251,254,255,257,],[26,26,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-104,-105,-106,-23,-24,-25,-40,-51,-56,-59,-60,-21,-61,-62,-63,-64,-26,-27,-34,-65,26,-67,-33,-41,-54,-55,-57,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-58,-84,26,-22,-99,-66,-71,-79,-83,26,-95,-103,-29,26,-74,-89,-90,-30,26,-94,-68,-100,-92,-28,-32,-96,-31,-93,-91,26,26,-73,-72,]),'TYPE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,29,35,36,41,42,43,44,45,46,48,49,57,60,61,62,63,64,65,71,78,89,95,113,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,149,152,153,156,172,173,175,184,185,188,194,196,200,211,214,215,222,224,227,228,231,234,235,239,241,247,248,250,251,254,255,257,],[27,27,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-104,-105,-106,-23,-24,-25,-40,-51,-56,-59,-60,-21,-61,-62,-63,-64,-26,-27,-34,-65,27,-67,-33,-41,-54,-55,-57,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-58,-84,27,-22,-99,-66,-71,-79,-83,27,-95,-103,-29,27,-74,-89,-90,-30,27,-94,-68,-100,-92,-28,-32,-96,-31,-93,-91,27,27,-73,-72,]),'SWITCH':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,29,35,36,41,42,43,44,45,46,48,49,57,60,61,62,63,64,65,71,78,89,95,113,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,149,152,153,156,172,173,175,184,185,188,194,196,200,211,214,215,222,224,227,228,231,234,235,239,241,247,248,250,251,254,255,257,],[28,28,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-104,-105,-106,-23,-24,-25,-40,-51,-56,-59,-60,-21,-61,-62,-63,-64,-26,-27,-34,-65,28,-67,-33,-41,-54,-55,-57,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-58,-84,28,-22,-99,-66,-71,-79,-83,28,-95,-103,-29,28,-74,-89,-90,-30,28,-94,-68,-100,-92,-28,-32,-96,-31,-93,-91,28,28,-73,-72,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,29,35,36,41,42,43,44,45,46,48,49,57,60,61,62,63,64,65,71,78,89,95,113,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,149,152,153,156,172,173,175,184,185,188,194,196,200,211,214,215,222,224,227,228,231,234,235,239,241,247,248,250,251,254,255,257,],[29,29,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-104,-105,-106,-23,-24,-25,-40,-51,-56,-59,-60,-21,-61,-62,-63,-64,-26,-27,-34,-65,29,-67,-33,-41,-54,-55,-57,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-58,-84,29,-22,-99,-66,-71,-79,-83,29,-95,-103,-29,29,-74,-89,-90,-30,29,-94,-68,-100,-92,-28,-32,-96,-31,-93,-91,29,29,-73,-72,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,29,30,35,36,41,42,43,44,45,46,48,49,57,60,61,62,63,64,65,71,78,95,113,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,149,153,156,172,173,175,184,188,194,196,211,214,215,222,227,228,231,234,235,239,241,247,248,250,255,257,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-104,-2,-105,-106,-23,-24,-25,-40,-51,-56,-59,-60,-21,-61,-62,-63,-64,-26,-27,-34,-65,-67,-33,-41,-54,-55,-57,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-58,-84,-22,-99,-66,-71,-79,-83,-95,-103,-29,-74,-89,-90,-30,-94,-68,-100,-92,-28,-32,-96,-31,-93,-91,-73,-72,]),'RBRACE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,29,30,35,36,41,42,43,44,45,46,48,49,57,60,61,62,63,64,65,71,78,95,100,101,113,124,125,126,127,128,129,130,131,132,133,134,135,136,137,139,140,141,142,143,148,149,150,153,156,172,173,175,181,182,183,184,186,188,194,196,202,203,210,211,212,213,214,215,217,218,222,225,227,228,229,230,231,234,235,238,239,241,243,247,248,249,250,253,255,256,257,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-104,-2,-105,-106,-23,-24,-25,-40,-51,-56,-59,-60,-21,-61,-62,-63,-64,-26,-27,-34,-65,-67,149,-85,-33,-41,-54,-55,-57,-42,-43,-44,-45,-46,-47,-48,-49,-50,173,175,-80,-52,-53,-58,184,-84,-86,-22,-99,-66,-71,-79,211,-75,-78,-83,-88,-95,-103,-29,-82,-81,-77,-74,-76,-87,-89,-90,231,-101,-30,239,-94,-68,241,-97,-100,-92,-28,247,-32,-96,-102,-31,-93,-98,-91,255,-73,257,-72,]),'CASE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,29,30,35,36,41,42,43,44,45,46,48,49,56,57,60,61,62,63,64,65,71,78,95,99,101,113,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,149,153,156,172,173,175,184,186,188,194,196,211,213,214,215,222,227,228,231,234,235,239,241,247,248,250,255,257,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-104,-2,-105,-106,-23,-24,-25,-40,-51,-56,-59,-60,102,-21,-61,-62,-63,-64,-26,-27,-34,-65,-67,102,102,-33,-41,-54,-55,-57,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-58,-84,-22,-99,-66,-71,-79,-83,-88,-95,-103,-29,-74,-87,-89,-90,-30,-94,-68,-100,-92,-28,-32,-96,-31,-93,-91,-73,-72,]),'DEFAULT':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,29,30,35,36,41,42,43,44,45,46,48,49,56,57,60,61,62,63,64,65,71,78,95,99,101,113,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,149,153,156,172,173,175,184,186,188,194,196,211,213,214,215,222,227,228,231,234,235,239,241,247,248,250,255,257,],[-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-104,-2,-105,-106,-23,-24,-25,-40,-51,-56,-59,-60,103,-21,-61,-62,-63,-64,-26,-27,-34,-65,-67,103,103,-33,-41,-54,-55,-57,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-58,-84,-22,-99,-66,-71,-79,-83,-88,-95,-103,-29,-74,-87,-89,-90,-30,-94,-68,-100,-92,-28,-32,-96,-31,-93,-91,-73,-72,]),'ASSIGN':([22,53,209,],[32,32,32,]),'ASIG':([22,53,57,60,61,62,63,209,],[33,97,104,-61,-62,-63,-64,97,]),'LPAREN':([22,24,25,26,28,32,33,34,39,47,50,68,69,73,74,75,79,80,81,82,83,84,85,86,87,88,91,92,96,97,102,104,114,116,174,191,195,198,216,232,242,],[34,38,47,47,47,47,47,47,77,47,94,111,112,115,116,117,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,223,47,47,47,]),'INCREMENT':([22,209,],[35,35,]),'DECREMENT':([22,209,],[36,36,]),'DOT':([23,],[37,]),'NUMBER':([25,26,28,32,33,34,47,59,67,79,80,81,82,83,84,85,86,87,88,91,92,96,97,102,104,114,116,174,191,195,216,232,242,],[41,41,41,41,41,41,41,106,109,125,125,41,41,41,41,41,41,41,41,125,125,41,41,41,41,41,41,41,41,41,41,41,41,]),'FLOAT':([25,26,28,32,33,34,47,79,80,81,82,83,84,85,86,87,88,91,92,96,97,102,104,114,116,174,191,195,216,232,242,],[42,42,42,42,42,42,42,126,126,42,42,42,42,42,42,42,42,126,126,42,42,42,42,42,42,42,42,42,42,42,42,]),'STRING':([25,26,28,32,33,34,47,79,80,81,82,83,84,85,86,87,88,91,92,96,97,102,104,114,115,116,174,191,195,216,232,242,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,164,46,46,46,46,46,46,46,]),'MAKE':([25,26,28,32,33,34,47,79,80,81,82,83,84,85,86,87,88,91,92,96,97,102,104,114,116,174,191,195,216,232,242,],[50,50,50,50,68,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'LBRACE':([28,35,36,40,41,42,43,44,45,46,48,49,51,53,55,60,61,62,63,64,65,98,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,159,170,175,190,199,206,207,208,227,245,248,252,],[56,-105,-106,89,-23,-24,90,-40,-51,-56,-59,-60,89,90,99,-61,-62,-63,-64,-26,-27,147,89,-41,-54,-55,90,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-58,191,200,-79,216,224,-69,89,-70,-94,251,-93,254,]),'MAP':([31,33,94,111,],[58,66,144,160,]),'LBRACKET':([31,33,58,66,94,111,144,160,],[59,67,105,108,145,161,177,192,]),'INT_TYPE':([31,60,61,62,63,105,107,108,110,119,121,147,155,158,169,177,178,180,182,183,187,189,192,193,210,226,233,236,246,],[60,-61,-62,-63,-64,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-78,60,60,60,60,-77,60,60,60,60,]),'FLOAT64_TYPE':([31,60,61,62,63,105,107,108,110,119,121,147,155,158,169,177,178,180,182,183,187,189,192,193,210,226,233,236,246,],[61,-61,-62,-63,-64,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-78,61,61,61,61,-77,61,61,61,61,]),'STRING_TYPE':([31,60,61,62,63,105,107,108,110,119,121,147,155,158,169,177,178,180,182,183,187,189,192,193,210,226,233,236,246,],[62,-61,-62,-63,-64,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-78,62,62,62,62,-77,62,62,62,62,]),'BOOL_TYPE':([31,60,61,62,63,105,107,108,110,119,121,147,155,158,169,177,178,180,182,183,187,189,192,193,210,226,233,236,246,],[63,-61,-62,-63,-64,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-78,63,63,63,63,-77,63,63,63,63,]),'NEW':([33,],[69,]),'RPAREN':([34,41,42,43,44,45,46,48,49,60,61,62,63,70,72,77,93,118,120,122,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,162,163,165,168,175,197,201,205,220,221,223,227,237,240,244,248,],[71,-23,-24,-25,-40,-51,-56,-59,-60,-61,-62,-63,-64,113,-38,121,143,167,169,-35,-41,-54,-55,-57,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-58,194,-39,196,-37,-79,222,-36,227,234,235,236,-94,246,248,250,-93,]),'PRINTF':([37,],[73,]),'PRINTLN':([37,],[74,]),'SCANLN':([37,],[75,]),'PLUS':([40,41,42,43,44,45,46,48,49,51,53,55,64,65,72,93,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,146,151,153,165,175,202,218,221,227,230,234,248,250,],[79,-23,-24,-25,-40,-51,-56,-59,-60,79,-25,79,79,79,79,79,-41,-54,-55,-57,-42,79,79,79,79,79,79,79,79,-52,-53,-58,79,79,79,79,-79,79,79,79,-94,79,-94,-93,-93,]),'MINUS':([40,41,42,43,44,45,46,48,49,51,53,55,64,65,72,93,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,146,151,153,165,175,202,218,221,227,230,234,248,250,],[80,-23,-24,-25,-40,-51,-56,-59,-60,80,-25,80,80,80,80,80,-41,-54,-55,-57,-42,80,80,80,80,80,80,80,80,-52,-53,-58,80,80,80,80,-79,80,80,80,-94,80,-94,-93,-93,]),'AND':([40,41,42,43,44,45,46,48,49,51,53,55,64,65,72,93,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,146,151,153,165,175,202,218,221,227,230,234,248,250,],[81,-23,-24,-25,-40,-51,-56,-59,-60,81,-25,81,81,81,81,81,-41,-54,-55,-57,-42,81,81,81,81,81,81,81,81,-52,-53,-58,81,81,81,81,-79,81,81,81,-94,81,-94,-93,-93,]),'OR':([40,41,42,43,44,45,46,48,49,51,53,55,64,65,72,93,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,146,151,153,165,175,202,218,221,227,230,234,248,250,],[82,-23,-24,-25,-40,-51,-56,-59,-60,82,-25,82,82,82,82,82,-41,-54,-55,-57,-42,82,82,82,82,82,82,82,82,-52,-53,-58,82,82,82,82,-79,82,82,82,-94,82,-94,-93,-93,]),'EQ':([40,41,42,43,44,45,46,48,49,51,53,55,64,65,72,93,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,146,151,153,165,175,202,218,221,227,230,234,248,250,],[83,-23,-24,-25,-40,-51,-56,-59,-60,83,-25,83,83,83,83,83,-41,-54,-55,-57,-42,83,83,83,83,83,83,83,83,-52,-53,-58,83,83,83,83,-79,83,83,83,-94,83,-94,-93,-93,]),'NE':([40,41,42,43,44,45,46,48,49,51,53,55,64,65,72,93,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,146,151,153,165,175,202,218,221,227,230,234,248,250,],[84,-23,-24,-25,-40,-51,-56,-59,-60,84,-25,84,84,84,84,84,-41,-54,-55,-57,-42,84,84,84,84,84,84,84,84,-52,-53,-58,84,84,84,84,-79,84,84,84,-94,84,-94,-93,-93,]),'LT':([40,41,42,43,44,45,46,48,49,51,53,55,64,65,72,93,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,146,151,153,165,175,202,218,221,227,230,234,248,250,],[85,-23,-24,-25,-40,-51,-56,-59,-60,85,-25,85,85,85,85,85,-41,-54,-55,-57,-42,85,85,85,85,85,85,85,85,-52,-53,-58,85,85,85,85,-79,85,85,85,-94,85,-94,-93,-93,]),'GT':([40,41,42,43,44,45,46,48,49,51,53,55,64,65,72,93,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,146,151,153,165,175,202,218,221,227,230,234,248,250,],[86,-23,-24,-25,-40,-51,-56,-59,-60,86,-25,86,86,86,86,86,-41,-54,-55,-57,-42,86,86,86,86,86,86,86,86,-52,-53,-58,86,86,86,86,-79,86,86,86,-94,86,-94,-93,-93,]),'LE':([40,41,42,43,44,45,46,48,49,51,53,55,64,65,72,93,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,146,151,153,165,175,202,218,221,227,230,234,248,250,],[87,-23,-24,-25,-40,-51,-56,-59,-60,87,-25,87,87,87,87,87,-41,-54,-55,-57,-42,87,87,87,87,87,87,87,87,-52,-53,-58,87,87,87,87,-79,87,87,87,-94,87,-94,-93,-93,]),'GE':([40,41,42,43,44,45,46,48,49,51,53,55,64,65,72,93,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,146,151,153,165,175,202,218,221,227,230,234,248,250,],[88,-23,-24,-25,-40,-51,-56,-59,-60,88,-25,88,88,88,88,88,-41,-54,-55,-57,-42,88,88,88,88,88,88,88,88,-52,-53,-58,88,88,88,88,-79,88,88,88,-94,88,-94,-93,-93,]),'SEMICOLON':([41,42,43,44,45,46,48,49,52,64,65,124,125,126,127,128,129,130,131,132,133,134,135,136,141,142,143,146,175,227,248,],[-23,-24,-25,-40,-51,-56,-59,-60,96,-26,-27,-41,-54,-55,-57,-42,-43,-44,-45,-46,-47,-48,-49,-50,-52,-53,-58,179,-79,-94,-93,]),'COMMA':([41,42,43,44,45,46,48,49,60,61,62,63,72,122,124,125,126,127,128,129,130,131,132,133,134,135,136,140,141,142,143,164,168,175,202,218,227,230,248,],[-23,-24,-25,-40,-51,-56,-59,-60,-61,-62,-63,-64,114,171,-41,-54,-55,-57,-42,-43,-44,-45,-46,-47,-48,-49,-50,176,-52,-53,-58,195,-37,-79,-82,232,-94,242,-93,]),'COLON':([41,42,43,44,45,46,48,49,103,124,125,126,127,128,129,130,131,132,133,134,135,136,138,141,142,143,151,175,227,248,],[-23,-24,-25,-40,-51,-56,-59,-60,152,-41,-54,-55,-57,-42,-43,-44,-45,-46,-47,-48,-49,-50,174,-52,-53,-58,185,-79,-94,-93,]),'TIMES':([41,42,43,44,45,46,48,49,53,124,125,126,127,128,141,142,143,175,227,234,248,250,],[-54,-55,-57,91,-51,-56,-59,-60,-57,91,-54,-55,-57,91,-52,-53,-58,-79,-94,-94,-93,-93,]),'DIVIDE':([41,42,43,44,45,46,48,49,53,124,125,126,127,128,141,142,143,175,227,234,248,250,],[-54,-55,-57,92,-51,-56,-59,-60,-57,92,-54,-55,-57,92,-52,-53,-58,-79,-94,-94,-93,-93,]),'STRUCT':([54,],[98,]),'RBRACKET':([59,60,61,62,63,67,106,109,145,154,157,161,204,219,],[107,-61,-62,-63,-64,110,155,158,178,187,189,193,226,233,]),'ELSE':([78,173,],[123,-71,]),'AMPER':([117,],[166,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,89,152,185,200,224,251,254,],[1,30,137,186,213,225,238,253,256,]),'statement':([0,2,89,152,185,200,224,251,254,],[2,2,2,2,2,2,2,2,2,]),'declaration':([0,2,89,152,185,200,224,251,254,],[3,3,3,3,3,3,3,3,3,]),'assignment':([0,2,26,89,152,179,185,200,224,251,254,],[4,4,52,4,4,206,4,4,4,4,4,]),'print_stmt':([0,2,89,152,185,200,224,251,254,],[5,5,5,5,5,5,5,5,5,]),'input_stmt':([0,2,89,152,185,200,224,251,254,],[6,6,6,6,6,6,6,6,6,]),'struct_method':([0,2,89,152,185,200,224,251,254,],[7,7,7,7,7,7,7,7,7,]),'func_def':([0,2,89,152,185,200,224,251,254,],[8,8,8,8,8,8,8,8,8,]),'func_call':([0,2,89,152,185,200,224,251,254,],[9,9,9,9,9,9,9,9,9,]),'if_stmt':([0,2,89,152,185,200,224,251,254,],[10,10,10,10,10,10,10,10,10,]),'for_stmt':([0,2,89,152,185,200,224,251,254,],[11,11,11,11,11,11,11,11,11,]),'struct_def':([0,2,89,152,185,200,224,251,254,],[12,12,12,12,12,12,12,12,12,]),'switch_stmt':([0,2,89,152,185,200,224,251,254,],[13,13,13,13,13,13,13,13,13,]),'map_declaration':([0,2,89,152,185,200,224,251,254,],[14,14,14,14,14,14,14,14,14,]),'array_declaration':([0,2,89,152,185,200,224,251,254,],[15,15,15,15,15,15,15,15,15,]),'slice_declaration':([0,2,89,152,185,200,224,251,254,],[16,16,16,16,16,16,16,16,16,]),'make_stmt':([0,2,89,152,185,200,224,251,254,],[17,17,17,17,17,17,17,17,17,]),'new_stmt':([0,2,89,152,185,200,224,251,254,],[18,18,18,18,18,18,18,18,18,]),'break_stmt':([0,2,89,152,185,200,224,251,254,],[19,19,19,19,19,19,19,19,19,]),'increment_stmt':([0,2,89,152,179,185,200,224,251,254,],[20,20,20,20,208,20,20,20,20,20,]),'expression':([25,26,28,32,33,34,47,81,82,83,84,85,86,87,88,96,97,102,104,114,116,174,191,195,216,232,242,],[40,51,55,64,65,72,93,129,130,131,132,133,134,135,136,146,65,151,153,72,165,202,218,221,230,218,230,]),'term':([25,26,28,32,33,34,47,79,80,81,82,83,84,85,86,87,88,96,97,102,104,114,116,174,191,195,216,232,242,],[44,44,44,44,44,44,44,124,128,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'factor':([25,26,28,32,33,34,47,79,80,81,82,83,84,85,86,87,88,91,92,96,97,102,104,114,116,174,191,195,216,232,242,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,141,142,45,45,45,45,45,45,45,45,45,45,45,45,]),'make_expr':([25,26,28,32,33,34,47,79,80,81,82,83,84,85,86,87,88,91,92,96,97,102,104,114,116,174,191,195,216,232,242,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'struct_instance':([25,26,28,32,33,34,47,79,80,81,82,83,84,85,86,87,88,91,92,96,97,102,104,114,116,174,191,195,216,232,242,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'type':([31,105,107,108,110,119,121,147,155,158,169,177,178,180,182,187,189,192,193,226,233,236,246,],[57,154,156,157,159,168,170,183,188,190,199,204,205,210,183,214,215,219,220,240,244,245,252,]),'arg_list':([34,114,],[70,163,]),'block':([40,51,123,207,],[78,95,172,228,]),'case_list':([56,99,101,],[100,148,150,]),'case_clause':([56,99,101,],[101,101,101,]),'param_list':([77,171,223,],[120,201,237,]),'param':([77,171,223,],[122,122,122,]),'struct_fields_values':([90,176,],[139,203,]),'field_value':([90,176,],[140,140,]),'struct_fields':([147,182,],[181,212,]),'struct_field':([147,182,],[182,182,]),'for_update':([179,],[207,]),'slice_values':([191,232,],[217,243,]),'array_values':([216,242,],[229,249,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program','parser.py',50),
  ('program -> statement program','program',2,'p_program','parser.py',51),
  ('statement -> declaration','statement',1,'p_statement','parser.py',56),
  ('statement -> assignment','statement',1,'p_statement','parser.py',57),
  ('statement -> print_stmt','statement',1,'p_statement','parser.py',58),
  ('statement -> input_stmt','statement',1,'p_statement','parser.py',59),
  ('statement -> struct_method','statement',1,'p_statement','parser.py',60),
  ('statement -> func_def','statement',1,'p_statement','parser.py',61),
  ('statement -> func_call','statement',1,'p_statement','parser.py',62),
  ('statement -> if_stmt','statement',1,'p_statement','parser.py',63),
  ('statement -> for_stmt','statement',1,'p_statement','parser.py',64),
  ('statement -> struct_def','statement',1,'p_statement','parser.py',65),
  ('statement -> switch_stmt','statement',1,'p_statement','parser.py',66),
  ('statement -> map_declaration','statement',1,'p_statement','parser.py',67),
  ('statement -> array_declaration','statement',1,'p_statement','parser.py',68),
  ('statement -> slice_declaration','statement',1,'p_statement','parser.py',69),
  ('statement -> make_stmt','statement',1,'p_statement','parser.py',70),
  ('statement -> new_stmt','statement',1,'p_statement','parser.py',71),
  ('statement -> break_stmt','statement',1,'p_statement','parser.py',72),
  ('statement -> increment_stmt','statement',1,'p_statement','parser.py',73),
  ('declaration -> VAR VARIABLE type','declaration',3,'p_declaration','parser.py',79),
  ('declaration -> VAR VARIABLE type ASIG expression','declaration',5,'p_declaration','parser.py',80),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',96),
  ('expression -> FLOAT','expression',1,'p_expression_float','parser.py',100),
  ('expression -> VARIABLE','expression',1,'p_expression_variable','parser.py',104),
  ('assignment -> VARIABLE ASSIGN expression','assignment',3,'p_assignment','parser.py',116),
  ('assignment -> VARIABLE ASIG expression','assignment',3,'p_assignment','parser.py',117),
  ('print_stmt -> FMT DOT PRINTF LPAREN STRING COMMA expression RPAREN','print_stmt',8,'p_print_stmt','parser.py',122),
  ('print_stmt -> FMT DOT PRINTLN LPAREN expression RPAREN','print_stmt',6,'p_print_stmt','parser.py',123),
  ('input_stmt -> FMT DOT SCANLN LPAREN AMPER VARIABLE RPAREN','input_stmt',7,'p_input_stmt','parser.py',128),
  ('func_def -> FUNC VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE','func_def',9,'p_func_def','parser.py',133),
  ('func_def -> FUNC VARIABLE LPAREN RPAREN type LBRACE program RBRACE','func_def',8,'p_func_def','parser.py',134),
  ('func_call -> VARIABLE LPAREN arg_list RPAREN','func_call',4,'p_func_call','parser.py',139),
  ('func_call -> VARIABLE LPAREN RPAREN','func_call',3,'p_func_call','parser.py',140),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',145),
  ('param_list -> param COMMA param_list','param_list',3,'p_param_list','parser.py',146),
  ('param -> VARIABLE type','param',2,'p_param','parser.py',150),
  ('arg_list -> expression','arg_list',1,'p_arg_list','parser.py',155),
  ('arg_list -> expression COMMA arg_list','arg_list',3,'p_arg_list','parser.py',156),
  ('expression -> term','expression',1,'p_expression','parser.py',161),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',162),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',163),
  ('expression -> expression AND expression','expression',3,'p_expression','parser.py',164),
  ('expression -> expression OR expression','expression',3,'p_expression','parser.py',165),
  ('expression -> expression EQ expression','expression',3,'p_expression','parser.py',166),
  ('expression -> expression NE expression','expression',3,'p_expression','parser.py',167),
  ('expression -> expression LT expression','expression',3,'p_expression','parser.py',168),
  ('expression -> expression GT expression','expression',3,'p_expression','parser.py',169),
  ('expression -> expression LE expression','expression',3,'p_expression','parser.py',170),
  ('expression -> expression GE expression','expression',3,'p_expression','parser.py',171),
  ('term -> factor','term',1,'p_term','parser.py',175),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',176),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',177),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',181),
  ('factor -> FLOAT','factor',1,'p_factor','parser.py',182),
  ('factor -> STRING','factor',1,'p_factor','parser.py',183),
  ('factor -> VARIABLE','factor',1,'p_factor','parser.py',184),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',185),
  ('factor -> make_expr','factor',1,'p_factor','parser.py',186),
  ('factor -> struct_instance','factor',1,'p_factor','parser.py',187),
  ('type -> INT_TYPE','type',1,'p_type','parser.py',192),
  ('type -> FLOAT64_TYPE','type',1,'p_type','parser.py',193),
  ('type -> STRING_TYPE','type',1,'p_type','parser.py',194),
  ('type -> BOOL_TYPE','type',1,'p_type','parser.py',195),
  ('if_stmt -> IF expression block','if_stmt',3,'p_if_stmt','parser.py',200),
  ('if_stmt -> IF expression block ELSE block','if_stmt',5,'p_if_stmt','parser.py',201),
  ('for_stmt -> FOR expression block','for_stmt',3,'p_for_stmt','parser.py',206),
  ('for_stmt -> FOR assignment SEMICOLON expression SEMICOLON for_update block','for_stmt',7,'p_for_stmt','parser.py',207),
  ('for_update -> assignment','for_update',1,'p_for_update','parser.py',211),
  ('for_update -> increment_stmt','for_update',1,'p_for_update','parser.py',212),
  ('block -> LBRACE program RBRACE','block',3,'p_block','parser.py',217),
  ('struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN param_list RPAREN type LBRACE program RBRACE','struct_method',13,'p_struct_method','parser.py',222),
  ('struct_method -> FUNC LPAREN VARIABLE VARIABLE RPAREN VARIABLE LPAREN RPAREN type LBRACE program RBRACE','struct_method',12,'p_struct_method','parser.py',223),
  ('struct_def -> TYPE VARIABLE STRUCT LBRACE struct_fields RBRACE','struct_def',6,'p_struct_def','parser.py',228),
  ('struct_fields -> struct_field','struct_fields',1,'p_struct_fields','parser.py',233),
  ('struct_fields -> struct_field struct_fields','struct_fields',2,'p_struct_fields','parser.py',234),
  ('struct_field -> VARIABLE type','struct_field',2,'p_struct_field','parser.py',239),
  ('struct_field -> type','struct_field',1,'p_struct_field','parser.py',240),
  ('struct_instance -> VARIABLE LBRACE struct_fields_values RBRACE','struct_instance',4,'p_struct_instance','parser.py',245),
  ('struct_fields_values -> field_value','struct_fields_values',1,'p_struct_fields_values','parser.py',249),
  ('struct_fields_values -> field_value COMMA struct_fields_values','struct_fields_values',3,'p_struct_fields_values','parser.py',250),
  ('field_value -> VARIABLE COLON expression','field_value',3,'p_field_value','parser.py',254),
  ('switch_stmt -> SWITCH expression LBRACE case_list RBRACE','switch_stmt',5,'p_switch_stmt','parser.py',258),
  ('switch_stmt -> SWITCH LBRACE case_list RBRACE','switch_stmt',4,'p_switch_stmt','parser.py',259),
  ('case_list -> case_clause','case_list',1,'p_case_list','parser.py',263),
  ('case_list -> case_clause case_list','case_list',2,'p_case_list','parser.py',264),
  ('case_clause -> CASE expression COLON program','case_clause',4,'p_case_clause','parser.py',268),
  ('case_clause -> DEFAULT COLON program','case_clause',3,'p_case_clause','parser.py',269),
  ('map_declaration -> VAR VARIABLE MAP LBRACKET type RBRACKET type','map_declaration',7,'p_map_declaration','parser.py',274),
  ('map_declaration -> VARIABLE ASIG MAP LBRACKET type RBRACKET type','map_declaration',7,'p_map_declaration','parser.py',275),
  ('make_stmt -> VARIABLE ASIG MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN','make_stmt',10,'p_make_stmt','parser.py',280),
  ('make_stmt -> VARIABLE ASIG MAKE LPAREN LBRACKET RBRACKET type RPAREN','make_stmt',8,'p_make_stmt','parser.py',281),
  ('make_expr -> MAKE LPAREN MAP LBRACKET type RBRACKET type RPAREN','make_expr',8,'p_make_expr','parser.py',285),
  ('make_expr -> MAKE LPAREN LBRACKET RBRACKET type RPAREN','make_expr',6,'p_make_expr','parser.py',286),
  ('array_declaration -> VAR VARIABLE LBRACKET NUMBER RBRACKET type','array_declaration',6,'p_array_declaration','parser.py',291),
  ('array_declaration -> VARIABLE ASIG LBRACKET NUMBER RBRACKET type LBRACE array_values RBRACE','array_declaration',9,'p_array_declaration','parser.py',292),
  ('array_values -> expression','array_values',1,'p_array_values','parser.py',296),
  ('array_values -> expression COMMA array_values','array_values',3,'p_array_values','parser.py',297),
  ('slice_declaration -> VAR VARIABLE LBRACKET RBRACKET type','slice_declaration',5,'p_slice_declaration','parser.py',302),
  ('slice_declaration -> VARIABLE ASIG LBRACKET RBRACKET type LBRACE slice_values RBRACE','slice_declaration',8,'p_slice_declaration','parser.py',303),
  ('slice_values -> expression','slice_values',1,'p_slice_values','parser.py',307),
  ('slice_values -> expression COMMA slice_values','slice_values',3,'p_slice_values','parser.py',308),
  ('new_stmt -> VARIABLE ASIG NEW LPAREN VARIABLE RPAREN','new_stmt',6,'p_new_stmt','parser.py',313),
  ('break_stmt -> BREAK','break_stmt',1,'p_break_stmt','parser.py',318),
  ('increment_stmt -> VARIABLE INCREMENT','increment_stmt',2,'p_increment_stmt','parser.py',323),
  ('increment_stmt -> VARIABLE DECREMENT','increment_stmt',2,'p_increment_stmt','parser.py',324),
]
